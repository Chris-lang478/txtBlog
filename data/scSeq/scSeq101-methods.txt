scSeq methods
分离单细胞的方法
单细胞数据分析流程(通用的流程和方法)







========================================
文献跟踪：单细胞测序
----------------------------------------
单细胞转录组分析综述
https://mp.weixin.qq.com/s?__biz=MzI1Njk4ODE0MQ==&mid=2247484039&idx=1&sn=1e799a06dbea57ed74596812d1e6c6df







========================================
[经典]Question: Single Cell RNAseq data analysis protocol
----------------------------------------
(1) Tophat - Cufflink - Cuffdiff; 
(2) Subread - featureCounts - DESeq2; 
(3) STAR - RSEM - EBSeq; 
(4) Bowtie - eXpress - edgeR; 
(5) kallisto - sleuth; 
(6) HISAT - StringTie - Ballgown.




Orchestrating Single-Cell Analysis with Bioconductor: https://osca.bioconductor.org/




1.https://www.biostars.org/p/199310/
This tutorial was recently posted here: Analysis of single-cell RNA-seq data


2. I started a list of single-cell analysis software, tutorials and workshops here:
https://github.com/seandavi/awesome-single-cell




3. current issue of Genome Biology: Single-Cell Omics ( special issue)
Genome Biology highlights the emergence of this field with a special issue focused on single-cell methods and their applications.
http://www.biomedcentral.com/collections/singlecellomics



4. [经典]Tutorial: Analysis of single-cell RNA-seq data
github:https://github.com/hemberg-lab/scRNA.seq.course
web: http://hemberg-lab.github.io/scRNA.seq.course/index.html
pdf: http://hemberg-lab.github.io/scRNA.seq.course/scRNA-seq-course.pdf


http://hemberg-lab.github.io/scRNA.seq.course/construction-of-expression-matrix.html#mapping-qc

A survey of best practices for RNA-seq data analysis
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728800/

sam文件格式：https://github.com/DawnEve/NGS_training/blob/master/day3.markdown

c1测序分析(P5)：http://www.pnas.org/content/113/12/3293.full.pdf




5. RNAseq的39个工具
文献：Sahraeian S M E, Mohiyuddin M, Sebra R, et al. Gaining comprehensive biological insight into the transcriptome by performing a broad-spectrum RNA-seq analysis[J]. Nature Communications, 2017, 8(1):59.

这是一篇在NC上发表的使用RNAseq工具对比的一篇文献，解读这篇文献对我们使用RNAseq发文提供了思路。

http://www.a-site.cn/article/1567422.html
http://www.360doc.com/content/17/1002/18/45962007_691819499.shtml



6.sanger研究所： Single Cell Bioinformatics Tools and Software
At the Wellcome Genome Campus, both the EBI and Sanger Institute are continually developing tools and software to help in the processing and analysing Single Cell data.

https://www.singlecellbioinformatics.org/tools/



7.单细胞splicing的研究
BRIE: transcriptome-wide splicing quantification in single cells
https://genomebiology.biomedcentral.com/articles/10.1186/s13059-017-1248-5




8.scSeq工具列表
For differential expression:
–   SCDE: http://pklab.med.harvard.edu/scde/index.html
–   SCA: https://github.com/RGLab/SingleCellAssay
–   MAST: https://github.com/RGLab/MAST
–   SAMseq: http://cran.r-project.org/web/packages/samr

For clustering etc.:
–   Monocle: https://github.com/cole-trapnell-lab/monocle-release
–   Rtsne: http://cran.r-project.org/web/packages/Rtsne
–   Sincell: http://master.bioconductor.org/packages/devel/bioc/html/sincell.html
–   scLVM: https://github.com/PMBio/scLVM
–   BASiCS: https://github.com/catavallejos/BASiCS
–   Pagoda: http://pklab.med.harvard.edu/scde
–   Seurat toolkit: http://www.satijalab.org/seurat.html
–   Sincera pipeline: https://research.cchmc.org/pbge/sincera.html 


9.SINGLE-CELL RNA SEQUENCING DATA ANALYSIS SOFTWARE TOOLS
https://omictools.com/single-cell-rna-seq-category

## normalization: Linnorm,NODES, SAMstrt, SCnorm, scran, DESeq and TMM

## feature Selection
Detecting highly variable genes
correlated gene pairs
cell cycle phase
tissue specific gene signatures

## Dimension Reduction: MDS,PCA,t-SNE

## clustering
K-means clustering
Mixture models
Hierarchical clustering


## DEG analysis methods: monocle,MAST,SCDE, BASiCS, NODES, SAMstrt, Seurat and DESeq2


## Pseudotime
Monocle / Monocle 2 / Census
Wanderlust / Cycler / Wishbone
SCUBA
Slingshot


## scRNAseq R包中的数据集
这个包内置的是 Pollen et al. 2014 数据集，人类单细胞细胞，分成4类，分别是 pluripotent stem cells 分化而成的 neural progenitor cells (“NPC”) ，还有 “GW16” and “GW21” ，“GW21+3” 这3种孕期细胞。
一个探索这个数据集的教程 http://bio-info-trainee.com/tmp/scRNA/study_scRNAseq.html







========================================
R 语言分析 单细胞的流程包 //todo
----------------------------------------
https://www.jianshu.com/p/e90f5d4d0ab6





========================================
scSeq方法列表
----------------------------------------
单细胞更加精准，最终得到的是每个细胞型的表达量，从而可以帮助理解组织异质性，鉴定罕见的细胞类型，检测细胞组分的变化，例如在癌症异质性、胚胎发育、细胞对药物的反应、神经细胞分型、差异表达通路等方面都发挥重要作用



1.Overview of experimental methods for generating scRNA-seq data

CEL-seq
CEL-seq2
Drop-seq （原理介绍使用的方法）
InDrop-seq
MARS-seq
SCRB-seq
Seq-well
Smart-seq
Smart-seq2
SMARTer
STRT-seq

但是即使测序办法繁多丰富，但根底里是需要面对两个问题:  quantification（定量）和 capture（捕捉）


2.Quantification（定量）

关于quantification（定量），目前存有着两种处理方式：full-length（全长） and tag-based（标签依赖）

full-length的处理方法旨在对每个转录本获取统一的测序覆盖度，相反tag-based处理方法只捕捉mRNA的5'或3'端，定量处理方法的选择取决于你后期想要分析的目的。

理论上，full-length的处理可以提供一个相对平均的测序覆盖度，但是就目前的结果来说还是存在着很多bias。

而tag-based的优势在于它可以结合UMI（前面介绍过）来提高定量的水平，缺点在于未捕捉完全的转录本序列，在比对的时候无法区分iosform (Archer et al. 2016)



3.Capture（捕捉）

捕捉RNA的策略决定了你的产出，细胞如何被选择包括是否携带额外信息都值得大做文章。三个被广泛运用的方法包括：

microwell-based
microfluidic-based
droplet-based

(1)microwell-based
简单来说，这种方法就是把单个细胞利用laser capture或者example pipette的技术分离到微流体孔里面。这种技术的既有优势在于可以结合FACS分选技术，根据细胞表面marker挑选出的合适的细胞亚群，并且可以对细胞形态进行记录，找出并丢弃损伤细胞或粘连的非单个细胞。这个技术的缺陷在于由于分选的局限性导致的低通量，和相匹配的较大的工作量。


(2)microfluidic-based
以Fluidigm’s C1举例，其提供了一个整合的细胞捕获系统，并可以执行建库前的反应，所以相对于microwell-based方法有更高的通量。

但其弊端在于其只能捕获10%左右的细胞，所以不太适合应用于有较少样品量或者样品较为珍惜的情况。


(3)droplet-based

这种技术就是我以上介绍的原理的例子，通过纳升级别的携带beads的小液滴，捕获单个细胞，并在液滴内完成建库，其优势在于可以定量的鉴别每个cell内的转录本数量，劣势在于测序深度低，往往一个细胞只有小几千个转录本被检测到。


(4)What platform to use for my experiment?
老生常谈, 适合的即是最好的。

你所选用的决定于你想要研究什么样的生物学问题。
	假如想要定义一个组织内细胞的组成成分，那么droplet-based方法是较为有效的，因为它可以捕捉到相对大数量级的细胞。
	换一个方面来说，加入想要去研究一群数量有限而又知道细胞表面分子marker的细胞，那么FACS分选接测序才是较好的方案。
	
	想要研究可变剪切转录本，自然需要全长测序的实验方案，这个时候tag标签和UMI就成了异常鸡肋的存在（当然在定量中还是举足轻重的，要看如何取舍了）。
-


refer:
https://www.plob.org/article/12022.html?wpzmaction=add&postid=12022




========================================
|-- Drop-seq
----------------------------------------
http://mccarrolllab.org/dropseq/
McCarroll Lab > Computational resources > CookBook




========================================
|-- MARS-Seq
----------------------------------------
使用 MARS-Seq 的文献：NB 
Paired-cell sequencing enables spatial gene expression mapping of liver endothelial cells
https://www.plob.org/article/12130.html






========================================
|-- Smart-Seq2
----------------------------------------
https://www.illumina.com/science/sequencing-method-explorer/kits-and-arrays/smart-seq2.html

Smart-Seq2 includes several improvements over the original Smart-Seq protocol. 
比着一代有很多改进。

The new protocol includes a locked nucleic acid (LNA), an increased MgCl2 concentration, betaine, and elimination of the purification step to significantly improve the yield. 
提高产出。

In this protocol, single cells are lysed in a buffer that contains free dNTPs and oligo(dT)-tailed oligonucleotides with a universal 5′-anchor sequence. Reverse transcription is performed, which adds 2–5 untemplated nucleotides to the cDNA 3′ end. A template-switching oligo (TSO) is added, carrying two riboguanosines and a modified guanosine to produce a LNA as the last base at the 3′ end.  After the first-strand reaction, the cDNA is amplified using a limited number of cycles. Tagmentation is then used to quickly and efficiently construct sequencing libraries from the amplified cDNA.


Pros:
The sequence of the mRNA does not have to be known
As little as 50 pg of starting material can be used
Improves coverage across transcripts
High level of mappable reads


Cons:
Not strand-specific
No early multiplexing
Applicable only to poly(A)+ RNA

refer:
Smart-Seq2: Picelli S., Bjorklund A. K., Faridani O. R., Sagasser S., Winberg G., et al. (2013) Smart-seq2 for sensitive full-length transcriptome profiling in single cells. Nat Methods 10: 1096-1098

Smart-Seq2: Picelli S., Faridani O. R., Björklund Å. K., Winberg G., Sagasser S., et al. (2014) Full-length RNA-Seq from single cells using Smart-seq2. Nat. Protocols 9: 171-181


========================================
|-- Fluidigm/Smart-Seq data sets: 使用C1分离细胞，使用Smart-Seq建库
----------------------------------------

using the Fluidigm C1 system to isolate cells and 
generate single-cell transcriptomes using Smart-Seq-based methods

https://genome.cshlp.org/content/28/9/1353.long






========================================
分析流程和方法
----------------------------------------


========================================
|-- 单细胞测序怎么标准化？
----------------------------------------
http://www.360doc.com/content/18/0120/23/19913717_723747538.shtml


1.使用CPM去除文库大小影响

之所以需要normalization，就是因为测序的各个细胞样品的总量不一样，所以测序数据量不一样，就是文库大小不同，这个因素是肯定需要去除。最简单的就是counts per million (CPM)，所有样本的所有基因的表达量都乘以各自的文库reads总数再除以一百万即可。(一般miRNA-seq数据结果喜欢用这个) 代码如下：

calc_cpm <>
function (expr_mat, spikes = NULL) 
{
   norm_factor <- colsums(expr_mat[-spikes,="">
   return(t(t(expr_mat)/norm_factor)) * 10^6
}
但是CPM方法有一个很严重的缺陷，那些高表达并且在细胞群体表达差异很大的基因会严重影响那些低表达基因。




2.RPKM, FPKM and TPM去除基因或者转录本长度影响
这些normalization方法并不适合单细胞转录组测序数据，因为有一些scRNA-seq建库方法具有3端偏好性，一般是没办法测全长转录本的，所以转录本的长度跟表达量不是完全的成比例。

对于这样的数据，需要重新转换成 reads counts 才能做下游分析。


适用于bulk RNA-seq的normalization方法
比较流行的有：
DESeq的size factor (SF)
relative log expression(RLE)
upperquartile (UQ)
weighted trimmed mean of M-values(TMM)
这些适用于 bulk RNA-seq data 的normalization方法可能并不适合 single-cell RNA-seq data ，因为它们的基本假设是有问题的。


特意为single-cell RNA-seq data 开发的normalization方法
LSF (Lun Sum Factors)
scran package implements a variant on CPM specialized for single-cell data
而scater包把这些normalization方法都包装到了normaliseExprs函数里面，可以直接调用。



3.Raw
先看看原始的表达值的分布情况，这里本来应该是对每一个样本画boxplot的，但是这里的样本数量太多了，这样的可视化效果很差， 就用PCA的方式，看看这表达矩阵是否可以把样本区分开，只有那些区分度非常好的normalization方法才是最优的。

不过scater包提供了一个plotRLE函数，可以画出类似于样本boxplot的效果。





========================================
|-- 由很多2列表达数据文件，使用shell获得表达矩阵 getMatrix.sh
----------------------------------------

$ cat getMatrix.sh
#必须有2个参数 idListFile outputFile [dir]
#目的: 根据idListFile中的id，合并dir目录中的两列数据文件中的第二列，得到matrix矩阵。输出到outputFile中。
# 注意：用户需要保证两列数据的rowname是相同的。本脚本只是抽取第二列，简单合并，没有排序。
# v3.0

## settings
idListFile=$1; #第一个参数是id list file
idListFile=${idListFile:?"必须设置id list file路径"}

outputFile=$2; #输出的文件名文件
outputFile=${outputFile:?"必须设置要输出的文件名"}

dir=$3;#数据文件夹，默认是当前目录下
dir=${dir:='.'}


##产生随机乱码，作为临时文件名
tmp="tmp_"`date |sha256sum|base64|head -c 20`
tmp_test2="test2_"`date |sha256sum|base64|head -c 20`

##step1 add 1st column to target
id=`head -n 1 ${idListFile}`
awk '{print $1}' ${dir}/${id}.freq > $outputFile;

##step2 combine all 2nd columns to target
i=0;
cat ${idListFile} | while read id; do ((i++)); echo ${i} $id;
awk '{print $2}' ${dir}/${id}.freq > $tmp;
paste $outputFile $tmp >$tmp_test2;
mv $tmp_test2 $outputFile;
done;

##step3 add the first row to target
line1=`cat ${idListFile} | xargs`;
line1="pas "${line1}
## echo ${line1};
sed -i "1i ${line1}" $outputFile

#step4 clean
rm $tmp

echo "done~ result file: "${outputFile}




#运行合并脚本，如果2必须参数没有指定，则报错并退出。
$ bash getMatrix.sh /home/wangjl/data/apa/190705PAS/225.cellID test4.txt


##接着使用R语言读取矩阵，检测效果



========================================
|-- 由很多2列表达数据文件，使用R（太慢）获得表达矩阵 getMatrix.R
----------------------------------------
#目的：合并为apa matrix
# v0.1 可以运行
# v0.2 correct: id=id_list[1]
# v0.3 for cell line

setwd('/home/wangjl/data/apa/190705PAS/bed/freq/')
getwd()


#读取cell id list
id_list=readLines('/home/wangjl/data/apa/190705PAS/225.cellID')
#id_list=id_list[1:10] #debug

head(id_list) # "c01_ROW07" "c01_ROW12"
length(id_list) #225


#获取第一个bed文件，作为文件整体框架，其余文件只需要提取第2列即可
main_matrix=read.table(paste0(id_list[1],".freq"),header=F)
main_matrix[1:4,]
cb=id_list[1]
colnames(main_matrix)=c('PAS',cb)
head(main_matrix)


#function: 从细胞文件中获取第2列信息
getInter=function(id){
  info=read.table(paste0(id,".freq"),header=F)
  info[,2]
}

#添加其余列
for( i in 2:length(id_list) ){
  if(i %% 2==0) print(i)
  #if(i>100) break;
  cb=id_list[i];
  cbdata=getInter(cb);
  main_matrix[,cb]=cbdata
}

dim(main_matrix) #[1] 1559047      11

#写入文件，用tab分割
write.table(main_matrix,"all225_matrix_APACounts.txt",row.names=F,sep="\t")

#end
print("====End===")

在命令行执行:
$ Rscript script/e07_getMatrix.R


========================================
数据降维
----------------------------------------




========================================
|-- t-SNE算法，及其优缺点
----------------------------------------
t-SNE http://lvdmaaten.github.io/tsne/
R包 https://cran.r-project.org/web/packages/tsne/

t-SNE(t-distributed stochastic neighbor embedding)是用于降维的一种机器学习算法，是由 Laurens van der Maaten 和 Geoffrey Hinton在08年提出来。此外，t-SNE 是一种非线性降维算法，非常适用于高维数据降维到2维或者3维，进行可视化。

tSNE描述
http://bindog.github.io/blog/2016/06/04/from-sne-to-tsne-to-largevis/



比PCA高级的t-SNE也存在缺点 https://www.jianshu.com/p/a67fb39a213a











========================================
单细胞可视化技术、思路、代码
----------------------------------------


========================================
|-- Seurat包扩展: 画PCA的3D散点图: 从R中生成png，在linux中合并为gif，如何添加表示分类的颜色？
----------------------------------------
3D图能很直观的理解类群，在PPT中效果比2D图好太多。
不过生成过程比较麻烦，建议：尽量在本地R中好好优化后再启动生成gif流程。


0.如果数据太大，下载不方便，则可以考虑只提取画图必要的部分。
#获取pca数据
df=data.frame(
  pc_1=pbmc9@dr$pca@cell.embeddings[,1],
  pc_2=pbmc9@dr$pca@cell.embeddings[,2],
  pc_3=pbmc9@dr$pca@cell.embeddings[,3],
  ident=pbmc9@ident
)
saveRDS(df, file = "10x_B116_TSENPlot_9_PC1-6_r0.6_DF.rds")





1. PCA 3d plot图，一般是黑白的
#########
# R中, win10
#########
setwd("D:\\Temp\\10xB116\\tmp_plot")
pbmc5=readRDS("10x_B116_TSENPlot_9_again.rds")

#获取pca数据
pc_1=pbmc5@dr$pca@cell.embeddings[,1]
pc_2=pbmc5@dr$pca@cell.embeddings[,2]
pc_3=pbmc5@dr$pca@cell.embeddings[,3]

library(rgl) #可以鼠标旋转的3D图
plot3d(pc_1, pc_2, pc_3)

#install.packages("magick")
library(magick) #生成gif图所需的原材料 若干png
movie3d(spin3d(axis=c(0,0,1),rpm=3), type = "gif",duration=3,fps=10,convert=F)
#位置在临时文件夹中 C:\Users\admin\AppData\Local\Temp\RtmpOqAa3k ，zip打包上传到linux中。
#注意：利用movie3d函数保存动画，其实是生成一些列的.png格式的图面文件，每个文件代表一帧，然后利用ImageMagick软件提供的convert命令将这些文件合并成为gif格式的动画文件。所以要想让动画动起来是一定要安装ImageMagick软件的。输出的动画会被放在一个临时文件夹中，地址名会在R窗口中输出。如果不想利用ImageMagick软件，可以设置convert=F，然后其他软件会将这一系列的.png文件转换为动画。



#########
# linux中,Ubuntu 18.04.1 LTS
#########
$ unzip RtmpOqAa3k.zip -d gif/
$ cd gif

convert -delay 0 *.png ~/web/a1.gif
convert ~/web/a1.gif -coalesce -reverse -quiet -layers OptimizePlus -loop 0 ~/web/a2.gif
convert ~/web/a1.gif ~/web/a2.gif ~/web/a3.gif






2.如果多个样本怎么用颜色或形状区分呢？
如何加上彩色？加上tSNE的分类颜色：1获取tSNE图的颜色；2.为PCA 3D图加上这些颜色。


#如何获取TSNEPlot中表示分类的颜色 https://github.com/satijalab/seurat/issues/257
identities <- levels(pbmc5@ident) # Create vector with levels of object@ident
require(scales)
my_color_palette <- hue_pal()(length(identities)) # Create vector of default ggplot2 colors
# Plot the tSNE plot with the default ggplot2 colors
#TSNEPlot(object = pbmc5, do.return = T) + 
#  scale_color_manual(values = my_color_palette)
#The colour codes can be found in my_color_palette.

#my_color_palette是一个长度为10的数组，怎么转换为一个factor的值？
ident=pbmc5@ident
t1=factor(ident,labels = my_color_palette)


#可以画3D图了
library(rgl) #可以鼠标旋转的3D图
plot3d(pc_1, pc_2, pc_3, col= t1,size=4)

接着使用movie3d函数生成一堆png，然后用linux下的convert生成gif文件。





========================================
统计学参数 in single cell
----------------------------------------



========================================
|-- 平均绝对离差 average absolute deviation (AAD), or mean absolute deviation (MAD)
----------------------------------------
1.
the average of the absolute deviations.
It is a summary statistic of statistical dispersion or variability.

In the general form, the central point can be the mean, median, mode, or the result of any other measure of central tendency or any random data point related to the given data set.

The absolute values of the difference, between the data points and their central tendency, are totaled and divided by the number of data points.

The mean absolute deviation of a set {x1, x2, ..., xn} is
\frac{1}{n}\sum_{i=1}^n |x_i-m(X)|.

1/n * 求和( abs(xi - mean(X) ) )



2.
Several measures of statistical dispersion are defined in terms of the absolute deviation.
有好几个叫做 绝对离差 的统计量，用于衡量数据离散程度。
要说清是什么中心，算的绝对离差： mean/median/mode?
data set {2, 2, 3, 4, 14}, 
mean=5, MAD=3.6;
median=3, MAD=2.8;
Mode=2, MAD=3.0

The mean absolute deviation from the median is less than or equal to the mean absolute deviation from the mean. 
In fact, the mean absolute deviation from the median is always less than or equal to the mean absolute deviation from any other fixed number.
中位数为中心的 平均绝对离差 通常是任何中心计算中最小的。


# R 代码
a=c(2, 2, 3, 4, 14)
mean(abs(a-mean(a))) #3.6
mean(abs(a-median(a))) #2.8

# Create the function.
getmode <- function(v) {
  uniqv <- unique(v)
  uniqv[which.max(tabulate(match(v, uniqv)))]
}
mean(abs(a-getmode(a))) #3
#
###############
#获得众数的细节
uniqA=unique(a)
uniqA #2  3  4 14
#
rs1=match(a, uniqA) #match(x, table) 返回x元素在table的位置
rs1 #[1] 1 1 2 3 4

tabulate(rs1) #[1] 1 1 2 3 4
#tabulate(bin, nbins = max(1, bin, na.rm = TRUE))
#计算整数向量bin中每个整数出现的次数
#rs2=table(rs1);rs2
#unname(rs2) #2 1 1 1
which.max(tabulate(rs1)) #1

uniqA[which.max(tabulate(rs1))]
#



3.例子：https://sciencing.com/calculate-relative-standard-error-6899277.html

a=c(2, 2, 4, 5, 5, 5, 9, 10, 12)
a.mean=mean(a);a.mean #6
a1=abs(a-a.mean)
mean(a1) #2.88




ref:
https://en.wikipedia.org/wiki/Average_absolute_deviation






========================================
|-- 中位数绝对偏差 median absolute deviation(MAD), 阈值 median-3 x MAD 
----------------------------------------
1.
MAD 定义为，一元序列 Xi 同其中位数偏差的绝对值的中位数（deviation，偏差本身有正有负）；
MAD=median(|Xi−median(X)|)


MAD 的方法相对于分位数方法的一大优势即在于 MAD 方法对样本大小是不敏感也即是稳定的鲁棒的一种评价指标。



https://blog.csdn.net/lanchunhui/article/details/80381516




2.
threshold=median(df2$counts)-mad(df2$counts)*3;threshold

Low-quality cells were discarded if the cell library size or the number of expressed genes(counts larger than 0) was smaller than pre-defined thresholds, which were the medians of all cells minus 3x median absolute deviation.[zhang zemin,2018,NM]

在衍生一个上限？
threshold2=median(df2$counts) + mad(df2$counts)*3;threshold2







========================================
常用的Feature selection的方法有：
----------------------------------------
1）基于先验信息的方法（如已知细胞的亚型）。比如通过SCDE软件鉴定已知不同细胞亚型间的差异表达基因，然后再基于差异表达基因来聚类分析等。

2）非监督方法。又可细分为：
(i) 基于highly variable genes (HVG) ；
(ii) 基于spike-in，如scLVM (Buettner et al., 2015)和BASiCS (Vallejos et al., 2015)等；
(iii)基于 dropout，如M3Drop (Andrews and Hemberg, 2018)。


(2)Highly variable genes (HVG)
它基于这种假设：基因相当于平均表达值而言，出现的较大的差异是由于生物学影响，而不仅仅是技术噪音。这种方法试图通过权衡方差与平均表达量之间的关系来找到比预期差异性更高的基因。这种关系很难拟合，实际中基因是按照与移动中位数（moving median）的距离进行排序的(Kolodziejczyk et al., 2015)，或者使用另一种源自方差的统计量，比如：方差的平方系数(Brennecke et al. 2013)

先进行spike-in based feature selection，再PCA（Liu et al., 2016; Tasic et al., 2016）；
先HVG，后tSNE（Segerstolpe et al., 2016）；
先HVG，后PCA+tSNE(Campbell et al., 2017)









========================================
[Python] scanpy对scRNA-seq数据的聚类分析 //todo
----------------------------------------
https://www.jianshu.com/p/b190efae4d31



========================================
现有好用的单细胞分析脚本
----------------------------------------
注明文献，预期效果图；
输入数据和格式。


========================================
|-- 长和短isoform比例，及显著性
----------------------------------------

长和短isoform比例
2015Lars Velten,MSB paper fig7A, fisher's test
https://www.embopress.org/doi/full/10.15252/msb.20156198


#x long; y short
#cell1, 10 genes
n=1000
x1=as.integer( runif(n,0,100) );#x1
y1=as.integer(runif(n,0,100) );#y1

#cell2, 10 genes
x2=as.integer(runif(n,0,100) );#x2
y2=as.integer(runif(n,0,100) );#y2
#
#检查10 gene的显著性 Fisher's test
dfs=NULL
for(i in c(1:n)){
  if(i%%100==0){
    print(i)
  }
  #i=1
  mx=matrix(c(x1[i],y1[i],x2[i],y2[i]),nrow=2)
  #mx
  rs=fisher.test(mx, alternative = 'two.sided')
  p=rs$p.value
  #p
  ratioX=x1[i]/x2[i]
  ratioY=y1[i]/y2[i]
  df=data.frame(
    x=ratioX,
    y=ratioY,
    p=p
  )
  dfs=rbind(dfs,df)
}
#head(dfs)
dfs$sig=dfs$p<0.05
dfs$sig=factor(dfs$sig,levels=c(T,F))
head(dfs)
library(ggplot2)
ggplot(dfs,aes(log2(x),log2(y),color=sig))+geom_point()
#


========================================
找高变基因(HVG)的方法
----------------------------------------
高变异基因就是highly variable features（HVGs），就是在细胞与细胞间进行比较，选择表达量差别最大的。


1. Seurat
参考：https://satijalab.org/seurat/v3.0/pbmc3k_tutorial.html

利用FindVariableFeatures函数，会计算一个mean-variance结果，也就是给出表达量均值和方差的关系并且得到top variable features

计算方法主要有三种：

(1)vst（默认）：首先利用 local polynomial regression (loess) 对 log(variance) 和log(mean) 拟合一条直线，然后利用观测均值和期望方差（由拟合曲线给出）对基因表达量进行标准化，最后根据保留最大的标准化的表达量计算方差。

(2)mean.var.plot(mvp): 首先利用mean.function和 dispersion.function分别计算每个基因的平均表达量(mean.function)和离散情况(dispersion.function)，然后根据平均表达量将基因们分散到一定数量（默认是20个）的小区间（bin）中，并且按照bin计算其中的基因的z-score。这是为了识别变异基因，同时保持变异和平均表达量的强联系。

(3)dispersion（最直接, disp）：挑选最高离差值的基因。




例如：
## 使用Seurat 版本3
# V3 代码来自官方教程https://satijalab.org/seurat/v3.0/pbmc3k_tutorial.html
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(pbmc), 10)

# 分别绘制带基因名和不带基因名的
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))


## 使用Seurat版本2
pbmc <- FindVariableGenes(object = pbmc, 
                         mean.function = ExpMean, 
                         dispersion.function = LogVMR )
length( pbmc@var.genes) 
# 默认值是：x.low.cutoff = 0.1, x.high.cutoff = 8, y.cutoff = 1，就是说取log后的平均表达量(x轴)介于0.1-8之间的；分散程度(y轴，即标准差)至少为1的


- V3计算mean.function和FastLogVMR均采用了加速的FastExpMean、FastLogVMR模式
- V3横坐标范围设定参数改成：mean.cutoff，整合了原来V2的x.low.cutoff + x.high.cutoff；纵坐标改成：dispersion.cutoff ，替代了原来V2的y.cutoff
- V3默认选择2000个差异基因，检查方法也不同（V3用VariableFeatures(sce)检查，V2用sce@var.genes检查）





2. Monocle
参考：https://cole-trapnell-lab.github.io/monocle-release/docs/#clustering-cells

# V2
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
disp_table <- dispersionTable(cds) 
> head(disp_table)
     gene_id mean_expression dispersion_fit dispersion_empirical
1 AL669831.5     0.011673004      42.669671             0.000000
2      NOC2L     0.140316168       5.221419             1.696712
3    PLEKHN1     0.016292004      31.089206             0.000000
4 AL645608.8     0.009537725      51.814220             0.000000
5       HES4     0.265523990       3.619078            28.119205
6      ISG15     0.793811626       2.424032            11.047583

unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1) 
cds <- setOrderingFilter(cds, unsup_clustering_genes$gene_id) 
plot_ordering_genes(cds) 






3. scran
参考：https://bioconductor.riken.jp/packages/3.7/workflows/vignettes/simpleSingleCell/inst/doc/work-5-mnn.html

利用函数trendVar()和decomposeVar() 根据表达量计算highly variable genes (HVGs)

fit <- trendVar(sce, parametric=TRUE) 
dec <- decomposeVar(sce, fit)
如果有不感兴趣的差异来源（例如plate、donor），为了确保后面鉴定HVGs过程不会扩大真实的数据偏差，可以设置block

block <- paste0(sce$Plate, "_", sce$Donor)
fit <- trendVar(sce,block=block, parametric=TRUE) 
dec <- decomposeVar(sce, fit)


最后作图
plot(dec$mean, dec$total, xlab="Mean log-expression", 
    ylab="Variance of log-expression", pch=16)
OBis.spike <- isSpike(sce)
points(dec$mean[is.spike], dec$total[is.spike], col="red", pch=16)
curve(fit$trend(x), col="dodgerblue", add=TRUE)




在decomposeVar函数帮助文档中有一句描述：Highly variable genes (HVGs) can be identified as those with large biological components. The biological component is determined by subtracting the technical component from the total variance.

HVGs能够代表大部分的生物学差异，而这种差异是由总体差异减去技术因素差异得到的

dec$Symbol <- rowData(dec)$Symbol
dec <- dec[order(dec$bio, decreasing=TRUE),]

> head(dec,2)
DataFrame with 2 rows and 7 columns
                            mean            total              bio
                       <numeric>        <numeric>        <numeric>
ENSG00000254647 2.83712754306791 6.30184692631371 5.85904290864641
ENSG00000129965 1.88188510741958 5.96360144483475  5.5152391307155
                             tech   p.value       FDR      Symbol
                        <numeric> <numeric> <numeric> <character>
ENSG00000254647 0.442804017667299         0         0         INS
ENSG00000129965 0.448362314119254         0         0    INS-IGF2






4. M3Drop
Brennecke et al. (2013) Accounting for technical noise in single-cell RNA-seq experiments. Nature Methods 10, 1093-1095. doi:10.1038/nmeth.2645

library(M3DExampleData)
# 需要提供表达矩阵(expr_mat)=》normalized or raw (not log-transformed) 
HVG <- BrenneckeGetVariableGenes(expr_mat=M3DExampleData, spikes=NA, suppress.plot=FALSE, fdr=0.1, minBiolDisp=0.5, fitMeanQuantile=0.8)
HVG_spike <- BrenneckeGetVariableGenes(Mmus_example_list$data, spikes=5550:5600)











5. 自定义函数
Extract genes with a squared coefficient of variation >2 times the fit regression (Brennecke et al 2013 method)

《Accounting for technical noise in single-cell RNA-seq experiments》
pdf: https://www.nature.com/articles/nmeth.2645
Supplement II https://media.nature.com/original/nature-assets/nmeth/journal/v10/n11/extref/nmeth.2645-S2.pdf



实现了：Select the highly variable genes based on the squared coefficient of variation and the mean gene expression and return the RPKM matrix the the HVG



# https://rdrr.io/cran/statmod/man/glmgam.html

getMostVarGenes <- function(
  data=data,                # RPKM matrix
  fitThr=1.5,           # Threshold above the fit to select the HGV
  minMeanForFit=1           # Minimum mean gene expression level
){
  # data=females;fitThr=2;minMeanForFit=1   
  # Remove genes expressed in no cells
  data_no0 <- as.matrix(
    data[rowSums(data)>0,]
  )
  # Compute the mean expression of each genes
  meanGeneExp <- rowMeans(data_no0)
  names(meanGeneExp)<- rownames(data_no0)
  
  # Compute the squared coefficient of variation
  varGenes <- rowVars(data_no0)
  cv2 <- varGenes / meanGeneExp^2
  
  # Select the genes which the mean expression is above the expression threshold minMeanForFit
  useForFit <- meanGeneExp >= minMeanForFit
  
  # Compute the model of the CV2 as a function of the mean expression using GLMGAM
  fit <- glmgam.fit( cbind( a0 = 1, 
                            a1tilde = 1/meanGeneExp[useForFit] ), 
                     cv2[useForFit] )
  a0 <- unname( fit$coefficients["a0"] )
  a1 <- unname( fit$coefficients["a1tilde"])
  
  # Get the highly variable gene counts and names
  fit_genes <- names(meanGeneExp[useForFit])
  cv2_fit_genes <- cv2[useForFit]
  fitModel <- fit$fitted.values
  names(fitModel) <- fit_genes
  HVGenes <- fitModel[cv2_fit_genes>fitModel*fitThr]
  print(length(HVGenes))
  
  # Plot the result
  plot_meanGeneExp <- log10(meanGeneExp)
  plot_cv2 <- log10(cv2)
  plotData <-  data.frame(
    x=plot_meanGeneExp[useForFit],
    y=plot_cv2[useForFit],
    fit=log10(fit$fitted.values),
    HVGenes=log10((fit$fitted.values*fitThr))
  )
  p <- ggplot(plotData, aes(x,y)) +
    geom_point(size=0.1) +
    geom_line(aes(y=fit), color="red") +
    geom_line(aes(y=HVGenes), color="blue") +
    theme_bw() +
    labs(x = "Mean expression (log10)", y="CV2 (log10)")+
    ggtitle(paste(length(HVGenes), " selected genes", sep="")) +
    theme(
      axis.text=element_text(size=16),
      axis.title=element_text(size=16),
      legend.text = element_text(size =16),
      legend.title = element_text(size =16 ,face="bold"),
      legend.position= "none",
      plot.title = element_text(size=18, face="bold", hjust = 0.5),
      aspect.ratio=1
    )+
    scale_color_manual(
      values=c("#595959","#5a9ca9")
    )
  print(p)
  
  # Return the RPKM matrix containing only the HVG
  HVG <- data_no0[rownames(data_no0) %in% names(HVGenes),]
  return(HVG)
}


P.S.
参考：https://bioconductor.org/packages/release/workflows/vignettes/simpleSingleCell/inst/doc/var.html
https://bioconductor.org/packages/devel/bioc/vignettes/scran/inst/doc/scran.html




还有其他的一些函数：

the coefficient of variation, using the technicalCV2() function (Brennecke et al. 2013) or the DM() function (Kim et al. 2015) in scran, which quantify expression variance based on the coefficient of variation of the (normalized) counts. 另外还有technicalCV2()的升级版improvedCV2()
the dispersion parameter in the negative binomial distribution, using the estimateDisp() function in edgeR (McCarthy, Chen, and Smyth 2012).
a proportion of total variability, using methods in the BASiCS package (Vallejos, Marioni, and Richardson 2015).












6.Detection of high variability in gene expression from single-cell RNA-seq profiling
BMC Genomics. 2016; 17(Suppl 7): 508.
PMID: 27556924
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5001205/
Fig. 4 a CV-mean plot of data set GSE60361 and b the CV difference histogram







refer:
几个scRNA找高变异基因（HVGs）的方法 https://www.jianshu.com/p/3d40c56e5fc8



========================================
|-- BASiCS 包：求高变基因 HVG (不靠谱)
----------------------------------------
首页： http://bioconductor.org/packages/release/bioc/html/BASiCS.html
文档： http://bioconductor.org/packages/release/bioc/vignettes/BASiCS/inst/doc/BASiCS.html

github: https://github.com/catavallejos/BASiCS


1.作用：
BASiCS (Bayesian Analysis of Single-Cell Sequencing data) is an integrated Bayesian hierarchical model that propagates statistical uncertainty by simultaneously performing data normalisation (global scaling), technical noise quantification and two types of supervised downstream analyses:

(1)For a single group of cells [1]: 
BASiCS provides a criterion to identify highly (and lowly) variable genes within the group.

(2)For two (or more) groups of cells [2]: 
BASiCS allows the identification of differentially expressed genes between the groups. As in traditional differential expression tools, BASiCS can uncover changes in mean expression between the groups. Besides this, BASiCS can also uncover changes in over-dispersion --- a measure for the excess cell-to-cell variation that is observed after accounting for technical noise. This feature has led, for example, to novel insights in the context of immune cells across aging [3]. More recently, the BASiCS model has been extended to address the confounding between mean and variability that is typically observed in scRNA-seq datasets. This is achieved by introducing a residual over-dispersion parameter that is not confounded by mean expression [4].


BASiCS - [R] - 单细胞RNA-seq数据的贝叶斯分析。估计特定于细胞的标准化常数。基于加标基因量化技术可变性。表达计数的总变异性被分解为技术和生物组分。BASiCS还可以鉴定在两组或更多组细胞之间具有差异表达/过度分散的基因。


需要spike-in，如果没有，则需要多批次的样本。
The original implementation of BASiCS relies on the use of spike-in genes --- that are artificially introduced to each cell's lysate --- to perform these analyses. 
However, our latest work has extended the BASiCS model to datasets in which spike-ins are not available (multiple batches are required) [4].




2. 安装
(1)
#library(devtools)
#if (!requireNamespace("BiocManager", quietly=TRUE))
    #install.packages("BiocManager")
#BiocManager::install("BiocGenerics")
#BiocManager::install("scran")
#install.packages("Rcpp")

# install.packages("devtools")
devtools::install_github("catavallejos/BASiCS", build_vignettes = TRUE) ## 总是失败！


(2)用一般命令安装的
BiocManager::install("BASiCS")
library(BASiCS)
## 又报错：namespace ‘htmltools’ 0.3.6 is already loaded, but >= 0.4.0 is required

remove.packages("htmltools")
install.packages("BASiCS",dependencies=T,source=T)
## 还是报错

(3)算了，换机器，使用Yi工作站
按照(1)安装。

反正最后装好了。


## Residual over-dispersion
To use this feature, please set Regression = TRUE as a function parameter in BASiCS_MCMC.

## More recently, Eling et al. (2018) extendeded BASiCS to also address datasets for which spikes-ins are not available 
To use this feature, please set WithSpikes = FALSE as a function parameter in BASiCS_MCMC.






3. 使用 
#得到的结果不满意，因为它HVG排名前10的基因基本都是只有2-5个细胞表达的。
#而Seurat3给出的排名靠前的HVG则都是至少上百个细胞表达的，感觉更靠谱。


#BiocManager::install("BASiCS")
library(BASiCS)


# step1 输入数据
#https://github.com/catavallejos/BASiCS/wiki/2.-Input-preparation
#整体batch
query<-dbSendQuery(con, 'select cid,cellType,batch from cell_c1;' );
batchR=fetch(query, n=-1);
rownames(batchR)=sub('_','',batchR$cid)
head(batchR)
#
br.data3=br.data2
rn=colnames(br.data2)
rn=sub('mix','',rn)
rn=sub('sync','',rn)
#rn
colnames(br.data3)=rn

batch=batchR[colnames(br.data3),]
head(batch)
#
# Create SingleCellExperiment object containing batch information
library(SingleCellExperiment)
DataExample <- SingleCellExperiment(assays = list(counts = as.matrix(br.data3) ),
                                    colData = data.frame(BatchInfo = batch$batch))
#
#step2: 耗时(N=1000,10min)
# LARGER NUMBER OF ITERATIONS ARE USUALLY REQUIRED TO ACHIEVE CONVERGENCE. 
# OUR RECOMMENDED SETTING IS N=20000, Thin=20 and Burn=10000.
Chain <- BASiCS_MCMC(Data = DataExample, N = 10000, Thin = 20, Burn = 5000, 
                     WithSpikes = FALSE,
                     PrintProgress = T, Regression = TRUE)#N=10000,14:35(2.5h)->17:05
str(Chain)
#acceptance rates 要接近0.44，否则要提高N and Burn(burn通常是N的一半)
# MCMC algorithm一定要收敛，才能进行下一步。
#Typically, setting N=20000, Thin=20 and Burn=10000 leads to stable results.
#https://github.com/catavallejos/TutorialBASiCS/blob/master/Material/TutorialMLPM2015_Convergence.pdf
#
#Minimum acceptance rate among mu[i]'s: 0.0468
#Average acceptance rate among mu[i]'s: 0.453859
#Maximum acceptance rate among mu[i]'s: 0.9398
#
#Minimum acceptance rate among delta[i]'s: 0.2422
#Average acceptance rate among delta[i]'s: 0.45048
#Maximum acceptance rate among delta[i]'s: 0.6214
#
#
#检查收敛性，使用coda R包
CairoPDF(file='BASiC_plot-chain.pdf',width=10,height=5)
plot(Chain, Param = "mu", Gene = 2, log = "y")
#plot(Chain, Param = "phi", Cell = 2)
dev.off()
#

displayChainBASiCS(Chain, Param = "mu")[1:5,1:5]
ChainSummary <- Summary(Chain)
ChainSummary
head(displaySummaryBASiCS(ChainSummary, Param = "mu"))
#First column: posterior medians
#Second column: lower limit of the 95% HPD interval
#Third column: upper limit of the 95% HPD interval
#            median     lower    upper
# A1BG-AS1 2.0906366 1.1428834 4.030563
# A2M      0.8055853 0.2817670 1.943634
# A2M-AS1  1.0188817 0.2314853 2.473844
save(Chain, file='HVG_BASiCS_Chain.rds')


#step3(3.1) Analysis for a single group of cells
par(mfrow = c(2,2))
HVG <- BASiCS_DetectHVG(Chain, VarThreshold = 0.6, Plot = TRUE)
LVG <- BASiCS_DetectLVG(Chain, VarThreshold = 0.2, Plot = TRUE)
save(HVG, file='HVG_BASiCS_HVG.rds')
save(LVG, file='HVG_BASiCS_LVG.rds')
#
head(HVG$Table)
#229        229      ADAM20 1.341123 2.852403    1 TRUE
#844        844 ARHGAP5-AS1 1.016198 2.613082    1 TRUE
#2702      2702       CHST4 1.262379 3.120179    1 TRUE
#4913      4913    FANCD2P2 1.716802 3.341589    1 TRUE
#5622      5622       GLIS1 1.596360 3.226006    1 TRUE
#5725      5725    GOLGA8EP 1.863771 4.254077    1 TRUE
for(g in head(HVG$Table$GeneName,20)){
  print( paste(g, sum(br.data2[g,]), sum(br.data2[g,]>0)  ) )
}
#gene /总counts数 /在几个细胞表达
# [1] "ADAM20 622 5"
#[1] "ARHGAP5-AS1 538 18"
#[1] "CHST4 3 3"
#[1] "FANCD2P2 4 2"
#[1] "GLIS1 80 2"
#[1] "GOLGA8EP 2 2"
#[1] "HNRNPA1P55 2 2"
#[1] "HOXD8 66 2"
#[1] "ICAM2 48 2"
#[1] "IDI2 2 2"
#[1] "ILF2P1 2 2"
#[1] "KDM5D 4 4"
#[1] "KLK3 2 2"
## 结论：这些高变基因，都是表达细胞比较少的基因？

#
head(LVG$Table)
#  GeneIndex GeneName        Mu   Epsilon Prob  LVG
#36         36    ABCA8 1.168386 -5.442292    1 TRUE
#55         55    ABCD1 1.012398 -1.994452    1 TRUE
#63         63    ABCG1 1.137015 -2.309389    1 TRUE
#74         74   ABHD15 1.132363 -2.340396    1 TRUE
#98         98 ABRAXAS1 2.380846 -1.957602    1 TRUE
#100       100     ABT1 1.545265 -2.531951    1 TRUE
for(g in head(LVG$Table$GeneName,20)){
  print( paste(g, sum(br.data2[g,]), sum(br.data2[g,]>0)  ) )
}
#gene /总counts数 /在几个细胞表达
# "ABCA8 1031 195"
# "ABCD1 966 46"
# "ABCG1 557 60"
# "ABHD15 783 78"
# "ABRAXAS1 2562 72"
# "ABT1 1129 74"
# "ADPGK 1435 86"
# "AHCYL2 1425 72"
# "AHDC1 1354 52"
# "AIDA 729 39"
# "AKT1 629 116"
# "AKT1S1 3141 111"
# "ALDH16A1 3344 102"
# "ALKBH6 2047 84"

#查看基因
getGeneInList=function(g){
  #g='MGP';
  df=HVG$Table[which(HVG$Table$GeneName==g),]
  df2=LVG$Table[which(LVG$Table$GeneName==g),]
  df$ProbL=df2$Prob
  df$LVG=df2$LVG
  #
  row.names(df)=g
  df$totalReads=sum(br.data2[g,])
  df$totalCell=sum(br.data2[g,]>0)
  print(df)
}
getGeneInList('MGP')
getGeneInList('NEAT1')
getGeneInList('S100A7')
getGeneInList("AZGP1")
getGeneInList("ATP8B4")
#     GeneIndex GeneName       Mu  Epsilon Prob  HVG ProbL   LVG totalReads totalCell
#MGP      8858      MGP 1071.73 2.23532    1 TRUE     0 FALSE    1098578       214
#NEAT1      9924    NEAT1 375.8503 2.175418    1 TRUE     0 FALSE     344963       222
#S100A7     14098   S100A7 274.8956 1.994682 0.992 TRUE     0 FALSE     278314       204
#AZGP1      1235    AZGP1 173.7354 1.180928    0 FALSE     0 FALSE     155031       200
#ATP8B4      1195   ATP8B4 3.098955 -0.08324083    0 FALSE     0 FALSE       3522        30
#
#
getGeneInList('ADGRE4P')
getGeneInList('ABCA8')
#         GeneIndex GeneName       Mu  Epsilon Prob  HVG ProbL   LVG totalReads totalCell
#ADGRE4P       285  ADGRE4P 0.9836823 1.447095 0.316 FALSE     0 FALSE          3         2
#ABCA8        36    ABCA8 1.168386 -5.442292    0 FALSE     1 TRUE       1031       195


#
#step3(3.2) Analysis for two groups of cells 
#暂时就一组，没用这个。难道要两group间？
Test <- BASiCS_TestDE(Chain1 = Chain, Chain2 = ChainRNA,
                      GroupLabel1 = "SC", GroupLabel2 = "PaS",
                      EpsilonM = log2(1.5), EpsilonD = log2(1.5),
                      EFDR_M = 0.10, EFDR_D = 0.10,
                      Offset = TRUE, PlotOffset = FALSE, Plot = TRUE)
#






========================================
转录因子调控网络 SCENIC: single-cell regulatory network inference and clustering 
----------------------------------------
1.
paper: https://www.nature.com/articles/nmeth.4463

以t-SNE图呈现AUC评分和TF表达情况（即调控元件的活动度）









ref:
实例：https://www.jianshu.com/p/0bf18fe92c7d



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------

