项目管理利器Maven


应用场景：
确定项目要用到spring/mybatis等，项目还没开始写，已经从各个网站下载大量jar包，bin下有百八十个包了，有用的、没用的、版本冲突的，该删除哪一个？
Maven、Ant、gradle就是解决这个问题的。该怎么删除、管理这些jar包。

目录：
	1.maven快速入门。
	2.maven核心知识。
	3.maven建立web项目。

http://www.imooc.com/video/8615

========================================
maven快速入门
----------------------------------------
1.maven简介和maven环境搭建
	1)maven是基于项目对象模型(Project Object Model (POM))，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。
	
	据说淘宝就是使用这个管理的。
	
	2)下载：http://maven.apache.org/ 左侧Download，右侧 zip包：apache-maven-3.3.9-bin.zip(8.21M)( http://apache.fayea.com/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip )
	该版本需要java1.7或以上的支持，我的win7系统已经安装了java，测试下版本号：
	
C:\Users\Administrator>java -version
java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b18)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b18, mixed mode)
		
	我的是1.8版本，看来是可以的。
	
	3)解压好maven，发现里面有4个文件夹：
bin #运行目录
boot #类加载器
conf #配置文件 settings.xml
lib #maven运行时需要依赖的类库
	
	4)把bin目录添加到环境变量PATH，比如：
Unix-based operating systems (Linux, Solaris and Mac OS X)
  export PATH=/usr/local/apache-maven-3.x.y/bin:$PATH
Windows
  set PATH="c:\program files\apache-maven-3.x.y\bin";%PATH%
  
我的win7:
  set PATH="D:\Program Files\apache-maven-3.3.9\bin";%PATH%
这种配置只在当前cmd窗口内有效。  
如果想更长久，就直接写入到PATH中。


系统环境变量里，添加MAVEN_HOME(或M2_HOME)，其值为D:\Program Files\apache-maven-3.3.9，然后PATH环境变量最后附加上";%MAVEN_HOME%\bin"
检测方法：
a) 重新进入命令行(DOS窗口)模式，输入 echo %MAVEN_HOME% 如果能显示 C:\Java\maven-3.1.9 说明环境变量起作用了
b) 输入 mvn -version，正常情况下会显示maven及jdk的版本号
（前提：jdk环境必须先安装好，否则后面无法正常编译项目）



	5)	Make sure JAVA_HOME is set to the location of your JDK
	系统变量JAVA_HOME为：D:\Program Files\Java\jdk1.8.0_66
	
	6) 版本号测试：
	C:\Users\Administrator>mvn -v
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:4
7+08:00)
Maven home: D:\Program Files\apache-maven-3.3.9\bin\..
Java version: 1.8.0_66, vendor: Oracle Corporation
Java home: D:\Program Files\Java\jdk1.8.0_66\jre
Default locale: zh_CN, platform encoding: GBK
OS name: "windows 7", version: "6.1", arch: "amd64", family: "dos"

	
	
	
	
2.maven版的helloWorld
文件结构：
src
	|-main
		|-java 
			|-package
	|-test
		|-java 
			|-package 
	|-resources
	







========================================
自动下载jar包
----------------------------------------
http://jingyan.baidu.com/article/22fe7ced3b0a003002617fd1.html

目的：偶尔出现需要直接使用某些jar包的情况下，可以通过maven来下载获得。
该经验是在maven使用基础上，抽取出部分功能作为个人工具使用。

准备：保证maven安装正常。

1.在任意目录下创建一个文件夹，其下创建一个pom.xml文件，一个bat批处理脚本。

2.选择bat批处理脚本右键选择编辑，复制以下内容：
call mvn -f pom.xml dependency:copy-dependencies
@pause

3.pom.xml 不需要实际项目中那么复杂，示例如下（<?xml version="1.0"?>必须在文本第一行）：
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>temp.download</groupId>
    <artifactId>temp-download</artifactId>
    <version>1.0-SNAPSHOT</version> 
    <dependencies>
<!-- 需要下载什么jar包 添加相应依赖 其余部分无需在意-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.3.1</version>
        </dependency>
    </dependencies>
</project>


4.最后双击运行bat脚本即可。（bat脚本针对Windows系统。如果你使用的是其它系统，bat中的maven命令是相同的，你可以通过命令行进入相应目录然后运行maven命令，或者使用其他脚本的方式运行）

[INFO] -----------------------------------------------
[INFO] BUILD SUCCESS
[INFO] -----------------------------------------------
[INFO] Total time: 04:55 min
[INFO] Finished at: 2017-01-16T19:37:36+08:00
[INFO] Final Memory: 13M/67M
[INFO] -----------------------------------------------
请按任意键继续. . .

运行完成后新增target文件夹，其下有一个dependency文件夹，里面便是你要的jar包。


5.下载jstl包
pom.xml改为：（可以正确使用）
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>temp.download</groupId>
    <artifactId>temp-download</artifactId>
    <version>1.2-SNAPSHOT</version> 
    <dependencies>
<!-- 需要下载什么jar包 添加相应依赖 其余部分无需在意-->
        <dependency>
 
           <groupId>javax.servlet</groupId>  
           <artifactId>jstl</artifactId>  
           <version>1.2</version> 
       </dependency>
	   
	   <dependency>
		   <groupId>taglibs</groupId>
		   <artifactId>standard</artifactId>
		   <version>1.1.2</version>
	  </dependency>
  
    </dependencies>
</project>

http://blog.csdn.net/u010962906/article/details/40785023

[INFO] ---------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ---------------------------------------------------------------
[INFO] Total time: 8.219 s
[INFO] Finished at: 2017-01-17T08:28:41+08:00
[INFO] Final Memory: 15M/148M
[INFO] ---------------------------------------------------------------
jstl-1.2.jar
standard-1.1.2.jar




本地临时库位置：C:\Users\Administrator\.m2\repository

更多jar包地址：
http://tomcat.apache.org/taglibs/standard/
http://www.javacoder.cn/?p=195
http://mvnrepository.com/artifact/jstl/jstl

========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

