
thinkPHP3.2.3 笔记 进阶篇

D() 使用模型。
M() 不使用模型。


========================================
477.ThinkPHP--路由功能
----------------------------------------
http://tp.dawneve.cc/new/12

ThinkPHP3.2采用的URL规则是：
http://serverName/module/controller/action/param/value/...

1.一般在模块下设置路由规则，比如commen中。
//开启路由功能
	'URL_ROUTER_ON'   => true, 
	//配置路由规则
	'URL_ROUTE_RULES'=>array(
		'u'=> 'User/index', //静态路由
	),
访问 http://tp.com/u ，作用和 http://tp.com/user/index 是一样的。

2.动态路由，接收参数id：
	'URL_ROUTE_RULES'=>array(
		//'u'=> 'User/index', //静态路由
		'u/:id'=> 'User/index', //动态路由
	),
没有控制器，只有视图：
	this is user-index<hr>
	{$Think.get.id}

访问 http://tp.com/u/6 效果同 http://tp.com/user/index/id/6 


3.动态和静态路由结合使用：

	'URL_ROUTE_RULES'=>array(
		//'u'=> 'User/index', //静态路由
		//'u/:id'=> 'User/index', //动态路由
		'u/:id/:name/:title'=> 'User/index', //动态和静态混合使用
	),

视图：
this is user-index<hr>
{$Think.get.id} | 
{$Think.get.name} | 
{$Think.get.title}

访问 http://tp.com/u/5/jimmy/CTO 等同于 http://tp.com/user/index/id/5/name/jimmy/title/CTO 


4.限制必须为数字
如果路由是：
	'URL_ROUTE_RULES'=>array(
		'u/:id'=> 'User/index', //动态路由
	),
访问 http://tp.com/u/a 也不报错。

怎么限制id必须是数字呢？正则规则\d：
	'u/:id\d'=> 'User/index', 

	
5.可选参数 'u/[:id\d]'=> 'User/index', 
	http://tp.com/u/5 	或者 http://tp.com/u 都不会报错

6.强行禁止链接后面有东西，$符号：
	'u/:id\d$'=> 'User/index',
访问 http://tp.com/u/5 正常，而 http://tp.com/u/5/a 会报错。


7.正则表达式路由
	'/^u\/(\d{2})$/'=>'User/index?id=:1',
访问 http://tp.com/u/50 正常，而访问 http://tp.com/u/500 则报错。

如果写成 '/^u_(\d{2})$/'=>'User/index?id=:1', 则可以使用 http://tp.com/u_50 访问。


8.支持静态路由 
'u/i'=>'User/index',
访问 http://tp.com/u/i ，等同于 http://tp.com/user/index


9.闭包支持 
'URL_ROUTE_RULES'=>array(
		//'u/i'=>'User/index',
		
		'about' =>  function(){
			echo 'something about me!';
		},
	),
访问 http://tp.com/about ，得到 something about me!

闭包传递参数：
'hello/:name' =>     function($name){ echo 'Hello,'.$name;    }

访问 http://tp.com/hello/jimmy ， 显示：
Hello,jimmy



        
========================================
478.ThinkPHP--URL操作与U()方法 
----------------------------------------
要点：
1.URL大小写；
2.URL伪静态；
3.URL生成；
4.模板中的U()方法；


1.在视图中生成链接
{:U("Admin/login")}

array(     
	array(验证字段1,验证规则,错误提示,[验证条件,附加规则,验证时间]),     
	array(验证字段2,验证规则,错误提示,[验证条件,附加规则,验证时间]),     
	......
);


2.
//URL地址大小写不敏感设置
'URL_CASE_INSENSITIVE'=>true,
为什么不起作用？

3.
//显示系统当前定义的常量。true参数表示按照分组显示
dump(get_defined_constants(true));
		

        
========================================
479.ThinkPHP--控制器（上）
----------------------------------------	
1.二级控制器

2.before or after

3.控制器跳转
success 和 error 方法。

redirect方法，也有一个函数形式。地址传递方式不同。

字段过滤。


4.请求类型
get or post?

	

        
========================================
480.ThinkPHP--控制器（中）
----------------------------------------
5.空操作： _empty()方法。

6.空控制器
	EmptyController控制器。

        
========================================
481.ThinkPHP--控制器（下）
----------------------------------------
7.操作绑定到类。
	把每个操作方法定位到一个类的功能，即把层次分的更清楚。
	只有在单个方法代码特别长的时候使用。
	
1）配置文件中添加：（原来的形式都不能用了）
	"ACTION_BIND_CLASS"=>True, //操作绑定到类 
2）新建文件夹（控制器名），里面建立class文件（方法名），文件内容是类，但是只有run方法，_before_run，_after_run方法可以执行。

        
========================================
482.session和cookie
----------------------------------------

session(name,value); //设置session信息
session(name); //读取
session(name,null); //删除
session(null);//销毁整个session
		  
		
========================================
483.图像处理
----------------------------------------
/Think/Library/Think/Image.class.php 

裁切、缩放、水印



        
========================================
484.验证码生成与验证
----------------------------------------
验证码图片是用在视图中的。
本身验证码加密后保存在Session中。
验证码类Think\Verify类提供了验证码图片生成entry()和验证check()的方法。

1.Blog控制器中
	//验证码图片生成
	function verifyIMG(){
	   $config=array(
	       //'imageW'=>120, 
	       //'imageH'=>30, 
	       //'fontSize'=>14, 
	       'length'=>4,
	       'fontttf'=>'4.ttf',
	       //'useImgBg '=>false,
	       //'useZh '=>true, //为什么数组中定义没用？
	   );
	   $vr=new \Think\Verify($config);

	   //开启验证码背景图片功能 随机使用 ThinkPHP/Library/Think/Verify/bgs 目录下面的图片
	   $vr->useImgBg = false;
	   
	   // 验证码字体使用 ThinkPHP/Library/Think/Verify/ttfs/5.ttf
	   //$vr->useZh = true; 
	   
	   ob_clean();
	   $vr->entry(1);//传入为验证码id 
	}
	
	
	//验证码图片生成
    function verify($code, $id =1){
         $verify = new \Think\Verify(); 
         $rs = $verify->check($code, $id);
         dump( $rs);
    }
	
2.View/Blog/index.html视图中
<h1>Blog->index.html</h1>

<form action='{:U("Blog/verify")}' method='get'>
        请输入如下验证码：
    <input type='text' name='code'><br><br>    
    <img src='{:U("Blog/verifyIMG")}'><br>
    <input type='submit' name='sd'>
</form>

3.访问 http://tp.dawneve.cc/Blog/
即可看到输入验证码表单。
最终提交后会显示是否成功的布尔值。


        
========================================
485.文件上传
----------------------------------------

单个、多个文件的上传。
文档位置：专题-文件上传

显示显示上传页面upload.html：
upload page.<hr>

<form action="__CONTROLLER__/do_upload" enctype="multipart/form-data" method="post">
	<input type="file" name='file' /> <br />
	<input type="submit" value="上传文件" />
</form>


控制器中操作上传：
	function do_upload(){
		$upload = new \Think\Upload();// 实例化上传类    
		$upload->maxSize   =     3145728 ;// 设置附件上传大小    
		$upload->exts      =     array('jpg', 'gif', 'png', 'jpeg');// 设置附件上传类型    
		$upload->savePath  =      '/Public/Uploads/'; // 设置附件上传目录    

		//$upload->savePath  =      './Public/Uploads/'; // 设置附件上传目录 

		// 上传文件
		$info   =   $upload->upload();
		
		if(!$info) {
			// 上传错误提示错误信息
			$this->error($upload->getError());
		}else{
			// 上传成功        
			//$this->success('上传成功！');
			//打印每个文件路径
			echo '<a href="./upload">返回</a><hr />';
			foreach($info as $file){
				$file_path= $file['savepath'] . $file['savename'];
				echo '<img src="/Uploads' . $file_path . '" /><br />';
				echo '保存路径: ' . $file_path . '<br />';
				echo '原始名字: ' . $file['name'] . '<hr />';
				
				
				echo 'key 附件上传的表单名称:'.$file['key'].'<br>';
				echo 'savepath 上传文件的保存路径:'.$file['savepath'].'<br>';
				echo 'name 上传文件的原始名称:'.$file['name'].'<br>';
				echo 'savename 上传文件的保存名称:'.$file['savename'].'<br>';
				echo 'size 上传文件的大小:'.$file['size'].'<br>';
				echo 'type 上传文件的MIME类型:'.$file['type'].'<br>';
				echo 'ext 上传文件的后缀类型:'.$file['ext'].'<br>';
				echo 'md5 上传文件的md5哈希验证字符串 仅当hash设置开启后有效:'.$file['md5'].'<br>';
				echo 'sha1 上传文件的sha1哈希验证字符串 仅当hash设置开启后有效:'.$file['sha1'].'<br>';								
			}
		}
	}
提前在根目录建立文件夹Uploads，然后访问：http://tp.com/User/upload
即可点击选择文件，点击上传即显示上传文件的信息，可以在 \thinkPHP\Uploads\Public\Uploads\2016-08-21\57b90e89761a6.jpg 看到图片。


多文件上传，以上代码只需要修改上传页面upload.html：增加上传控件至多个，上传控件的name改成数组形式。
upload page.<hr>
<form action="__CONTROLLER__/do_upload" enctype="multipart/form-data" method="post">
	<input type="file" name='photo[]' /> <br />
	<input type="file" name='photo[]' /> <br />
	<input type="file" name='photo[]' /> <br />
	<input type="submit" value="上传文件" />
</form>



上传成功后的信息可以保存到数据表中：
例如，下面表示把上传信息保存到数据表的字段：

DROP TABLE IF EXISTS `think_photo`;
CREATE TABLE `think_photo` (  
    `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,  
    `title` char(80) NOT NULL DEFAULT '',  
    `file_path` char(80) NOT NULL DEFAULT '',  
    
    `create_time` char(20) NOT NULL DEFAULT '',  
    `condition` char(100) NOT NULL DEFAULT '1',#正常为1，进回收站为0，回收站内可删除或恢复
    PRIMARY KEY (`id`),
	UNIQUE KEY `file_path` (`file_path`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;


	//保存到数据表中（放到do_upload方法的foreach循环尾部）
	$model = M('Photo');// 取得成功上传的文件信息
	$info = $upload->upload();// 保存当前数据对象
	$data['title'] = $file['name'];
	$data['file_path'] = $file_path;
	$data['create_time'] = NOW_TIME;
	$model->add($data);
				
[bug]:Library/Think/Upload.class.php Line170:建议加个if判断。
/* 调用回调函数检测文件是否存在 */
if($this->callback){
	$data = call_user_func($this->callback, $file);        	
}




	//查看已经上传的图片
	function photo($id=-1){
		if($id>0){
			$photos=M("Photo")->where("`condition`=1 AND id=$id")->select();		
		}else{
			$photos=M("Photo")->where('`condition`=1')->select();		
		}
		//
		
		foreach($photos as $photo){
			//dump($photo);
			echo '<div style="border:5px solid #ddd; margin:5px;float:left;">';
			echo "<img src='/Uploads" . $photo['file_path'] . "' />";
			echo '<br />Name: '.$photo['title']; 
			echo '<br />create at '.date('Y-m-d H:i:s',$photo['create_time']);
			
			echo '</div>';
		}
	}



========================================
486.多语言
----------------------------------------


========================================
487.auth权限控制
----------------------------------------
http://www.thinkphp.cn/topic/40025.html

权限控制，一般用于后台管理。
超级管理员，拥有所有权限。
认证专员，只能做会员认证操作。
审核专员，只能操作内容的审核、删除、加精等操作，以此类推。
tp封装了一个Auth.class.php，来实现权限控制。
这个类提供了三张表：
think_auth_rule 认证规则表，
think_auth_group 用户组 
think_auth_group_access 用户和组对应关系。
以及用户自定义的用户表。

1.准备工作：创建表：
/**
 * 权限认证类
 * 功能特性：
 * 1，是对规则进行认证，不是对节点进行认证。用户可以把节点当作规则名称实现对节点进行认证。
 *      $auth=new Auth();  $auth->check('规则名称','用户id')
 * 2，可以同时对多条规则进行认证，并设置多条规则的关系（or或者and）
 *      $auth=new Auth();  $auth->check('规则1,规则2','用户id','and') 
 *      第三个参数为and时表示，用户需要同时具有规则1和规则2的权限。 当第三个参数为or时，表示用户值需要具备其中一个条件即可。默认为or
 * 3，一个用户可以属于多个用户组(think_auth_group_access表 定义了用户所属用户组)。我们需要设置每个用户组拥有哪些规则(think_auth_group 定义了用户组权限)
 * 
 * 4，支持规则表达式。
 *      在think_auth_rule 表中定义一条规则时，如果type为1， condition字段就可以定义规则表达式。 如定义{score}>5  and {score}<100  表示用户的分数在5-100之间时这条规则才会通过。
 */



-- --------------- -------------
-- think_auth_rule，规则表，（认证规则表）
-- id:主键，name：规则唯一标识, title：规则中文名称 status 状态：为1正常，为0禁用，condition：规则表达式，为空表示存在就验证，不为空表示按照条件验证
-- --------------- -------------
 DROP TABLE IF EXISTS `think_auth_rule`;
CREATE TABLE `think_auth_rule` (  
    `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,  
    `name` char(80) NOT NULL DEFAULT '',  
    `title` char(20) NOT NULL DEFAULT '',  
    `type` tinyint(1) NOT NULL DEFAULT '1',    
    `status` tinyint(1) NOT NULL DEFAULT '1',  
    `condition` char(100) NOT NULL DEFAULT '',  # 规则附件条件,满足附加条件的规则,才认为是有效的规则
    PRIMARY KEY (`id`),  
    UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;
-- ------------- ---------------
-- think_auth_group 用户组表， 
-- id：主键， title:用户组中文名称， rules：用户组拥有的规则id， 多个规则","隔开，status 状态：为1正常，为0禁用
-- -------------- --------------
 DROP TABLE IF EXISTS `think_auth_group`;
CREATE TABLE `think_auth_group` ( 
    `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT, 
    `title` char(100) NOT NULL DEFAULT '', 
    `status` tinyint(1) NOT NULL DEFAULT '1', 
    `rules` char(80) NOT NULL DEFAULT '', 
    PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;
-- ------------- ---------------
-- think_auth_group_access 用户组明细表 （用户组和权限对应表）
-- uid:用户id，group_id：用户组id
-- -------------- --------------
DROP TABLE IF EXISTS `think_auth_group_access`;
CREATE TABLE `think_auth_group_access` (  
    `uid` mediumint(8) unsigned NOT NULL,  
    `group_id` mediumint(8) unsigned NOT NULL, 
    UNIQUE KEY `uid_group_id` (`uid`,`group_id`),  
    KEY `uid` (`uid`), 
    KEY `group_id` (`group_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

2.创建Auth控制器
auth.class.php 的位置：
ThinkPHP/Library/Think/Auth.class.php 

为了前台后台都用，我们在公共文件夹Common中创建Controller文件夹，其中建立AuthController.class.php 
警告：一定要是Common/Controller/AuthController.class.php，别新建文件到Common/Common下！！！

<?php
namespace Common\Controller;
use Think\Controller;
use Think\Auth;
class AuthController extends Controller {
	protected function _initialize(){
		$auth=new Auth();
		if(!$auth->check()){
			//$this->error("没有权限！");
			echo "没有权限";
			die();
		}
	}
}


3.让需要权限控制的控制器继承该AuthController。
<?php
namespace Home\Controller;

use Common\Controller\AuthController;
class IndexController extends AuthController {
    public function index(){
    	echo "wjl index";
    }
}

4.访问 http://my.dawneve.com/ 时，出现
没有权限


5.怎么让他有权限呢？
新建LoginController extends Controller，因为所有人都要访问登陆页面，所以继承Controller即可。

然后在login表中添加用户名和密码判断代码，如果正确，添加用户信息到session中。
<?php
namespace Home\Controller;
use Think\Controller;

class LoginController extends Controller{
	function login(){
		if(!IS_POST){
			redirect("/login");
			exit(0);
		}

		$user=M("member")->where('user="'.I('post.user').'"')->find();
		if(I("post.psw")==$user['psw']){
			$user['time']=time();//10min不操作则session失效
			session('auth',$user);
			$this->success("登陆成功",U("Index/index"));
		}else{
			echo "用户名或密码错误";
			echo "<a href='/login'>登陆</a>";
		}
	}
	
	//读取session
	function sh(){
		dump($_SESSION);
	}
}

6.在AuthController中添加判断
如果没有登陆，则跳转到登陆页面。
超级管理员直接获取所有权限。
其他用户需要鉴权。

<?php
namespace Common\Controller;
use Think\Controller;
use Think\Auth;
class AuthController extends Controller {
	protected function _initialize(){
		//先判断session
		$session_auth=session('auth');
		//1.必须登陆后查看、操作
		if(!$session_auth){
			$this->error("非法访问，正在跳转到登陆页面！",U("Login/index"));
		}
		//2.如果是超级管理员，则不用验证，直接获取所有权限。
		if($session_auth['id']==1){
			return true;
		}

		//3.其他用户需要鉴权
		$auth=new Auth();
		if(!$auth->check()){
			//$this->error("没有权限！");
			echo "没有权限";
			die("<a href='/login'>登陆</a>");
		}
	}
}

7.需要添加鉴权数据库资料。
数据表参考：http://www.thinkphp.cn/topic/40025.html

auth_rule表
id name title type status condition
1 Admin/Consumer/index 客户列表 1 1 
2 Admin/Consumer/add 添加客户 1 1 
3 Admin/Consumer/edit 修改客户 1 1 
4 Admin/Consumer/del 删除客户 1 1 
5 Admin/Article/index 文章列表 1 1 
6 Admin/Article/add 添加文章 1 1 
7 Admin/Article/edit 修改文章 1 1 
8 Admin/Article/del 删除文章 1 1 

auth_group表
id title status rules 
1 超管 1 1,2,3,4,5,6,7,8
2 普管 1 1,,2,3,4,5 
3 销售员工 1 1
4 内容员工 1 5

auth_group_access表
uid group_id
1 1 
2 2 
3 3
4 3
4 4 

8.新建Consumer和Article控制器，以及4个curd方法。

9.测试不同id的用户的权限。

create table tp_member(
    id int(4) not null primary key auto_increment,
    name char(20) not null,
    psw char(20) not null,
    `email` varchar(30),
    `add_time` varchar(25)
);







--
视图中生成地址：{:U("Admin/login")}
--
判断数组是否为空？
$login=array();
if(count($login)){echo '1-ok';}
$login['uid']=200;
if(count($login)){echo '2-ok';}




1.跨模块调用：
	public function index(){
    	//echo C('AUTH_ON');
    	
    	//跨模块调用
    	//$m=new \Home\Model\UserModel(); dump($m);
    	//$m=new \Home\Controller\UserController();$m->index();
    	$m=new \Admin\Controller\AuthController();$m->index();
    	//new Auth();
        echo "<hr>this is App->Admin module";
    }

2.如果调用失败，请再次检查命名空间是否正确！



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

	
	
	
	
========================================
TP框架执行流程分析
----------------------------------------
1. index.php  入口文件

2. ThinkPHP/ThinkPHP.php
    在php5.3版本以后
    设置常量有两种方式：
    const name = value;  作用域根据当前命名空间决定
    define()  作用域全局
    ① 定义了许多常量
    ② 引入核心文件Think.class.php
    Think::start();

3. ThinkPHP/Library/Think/Think.class.php
    static function start()
    ① 引入系统核心文件
    ② 引入配置文件
    ③ 如果是生成模式，还会生成common~runtime.php文件
    ④ 如果是第一次使用系统，还会自动创建对应的应用目录
    App::run();

4. ThinkPHP/library/Think/App.class.php
    static function run()
      App::init();
        路由解析
        //路由解析,把模块、控制器、方法赋予常量
        //MODULE_NAME = 模块名称
        //CONTROLLER_NAME  控制器
        //ACTION_NAME  方法
      App::exec()
        实例化控制器对象
        利用“反射”实现对象调用方法




		
		




========================================
用户登录的逻辑
----------------------------------------
1.用户登录。
防止注入，一般都是分两步，
第一步，按照用户名查找记录数组；
第二步，从记录数组中提取密码，和用户输入并加密后的密码进行比较；
成功则返回true，否则全部返回false。

2.如果都正确，写入session。

3.跳转到首页


代码实现：
用户表
CREATE TABLE `think_user` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `user` varchar(20) DEFAULT NULL,
  `passwd` char(35) DEFAULT 'e10adc3949ba59abbe56e057f20f883e',
  `email` varchar(100) DEFAULT NULL,
  `add_time` varchar(30) DEFAULT NULL,
  `modi_time` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;

mysql> select * from think_user where id=7;
+----+-------+----------------------------------+-----------------+------------+-----------+
| id | user  | passwd                           | email           | add_time   | modi_time |
+----+-------+----------------------------------+-----------------+------------+-----------+
|  7 | timoc | e10adc3949ba59abbe56e057f20f883e | timoc@yahoo.com | 1451294972 | NULL      |
+----+-------+----------------------------------+-----------------+------------+-----------+
1 row in set (0.00 sec)



（1）blog控制器中
//登录检测
    public function login(){
    	//1.验证用户名和密码是否正确
		$m=new \Home\Model\UserModel();
		//$m = D('User');
		$rs = $m->checkLogin('Timoc','123456');
		if($rs===false){
            echo '用户名或密码错误！';
		}else{
            echo '登录成功';
            //2.登录信息持久化
            session('user',$rs);
            $id=$rs['id'];
            
		    //dump(session('user'));
		    //3.跳转到首页
		    //方法1 使用函数，url需要时U方法生成的，或绝对地址
		    redirect(U('Blog/index',array('uid'=>$id)),3,'正在跳转到后台！(function)'); 
		    //方法2 使用方法，url只需要使用控制器和操作
		    //$this->redirect('Blog/index',array('uid'=>$id),3,'正在跳转到后台！(method)'); 
		}
	}

	
（2）user模型中
    function checkLogin($user='Tom',$passwd=''){
        $info = $this->getByUser($user);
        if($info != null){
            if(md5($passwd) == $info['passwd']){
            	unset($info['passwd']);//防止密码泄露
                return $info;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }

	
(3)index控制器
    public function index(){
		$u=session('user');
		if($u!=null){
		   echo '登录名： ' . $u['user'];
		   echo ' | <a href="'.U('logout').'">'."退出" . '</a>';
		}else{
	        echo '请登录!';
    		$this->display();
		}

		//D('User'); //实例化UserModel
		//D('User','Logic'); //实例化UserLogic
	}
	
	//退出logotu
	function logout(){
	   session(null);
	   redirect(U('index'));
	}

	//查看session
	function session(){
	   dump(session('user'));
	}
	
(4)index视图
<h1>Blog->index.html</h1>

<form action='{:U("Blog/verify")}' method='get'>
        请输入如下验证码：
    <input type='text' name='code'><br><br>    
    <img src='{:U("Blog/verifyIMG")}'><br>
    <input type='submit' name='sd'>
</form>

(5)验证码生成和验证方法
	//验证码图片生成
	function verifyIMG(){
	   $config=array(
	       //'imageW'=>120, 
	       //'imageH'=>30, 
	       //'fontSize'=>14, 
	       'length'=>4,
	       'fontttf'=>'4.ttf',
	       //'useImgBg '=>false,
	       //'useZh '=>true, //为什么数组中定义没用？
	   );
	   $vr=new \Think\Verify($config);

	   //开启验证码背景图片功能 随机使用 ThinkPHP/Library/Think/Verify/bgs 目录下面的图片
	   $vr->useImgBg = false;
	   
	   // 验证码字体使用 ThinkPHP/Library/Think/Verify/ttfs/5.ttf
	   //$vr->useZh = true; 
	   
	   ob_clean();
	   $vr->entry(1);
	}
	
	
	//验证码图片生成
    function verify($code, $id =1){
         $verify = new \Think\Verify(); 
         $rs = $verify->check($code, $id);
         dump( $rs);
         //return $rs;
    }





		  
			
			

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



