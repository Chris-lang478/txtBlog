best_practice 最佳实践



========================================
1. 给从事生物信息学分析者的一些建议
----------------------------------------
一个良好的工作习惯在任何情况下对提高工资效率来说都是很重要的。


========================================
|-- 推荐的工具(笔记/网盘/文献/编辑器/终端/图片)
----------------------------------------
1. 笔记应用
好记性不如个烂笔头。
生信要点繁多，需要一个电子化、不断完善的笔记系统。
PKM：Personal Knowledge Manager

有道云笔记（国内的）
印象笔记/Evernote （国外用的比较多）
OneNote（微软的）
为知笔记 （国内的）


当然，也可以自己编写一套自己顺手的知识管理系统，比如我使用PHP写的简单强大的txtBlog系统 https://github.com/dawneve/txtBlog



2. 网盘工具(很多网盘倒闭了)
文件存储，这可以弥补上述笔记应用的不足。保存一些文件、软件等。
QQ群文件
dropbox（国外用的比较多，国内现在访问受限）
box（企业级网盘）
Google Driver
OneDrive
金山快盘
360云盘
百度云盘


3.文献管理应用
管理好文献很重要，尤其是在前期关于某一研究领域的知识积累和后期的文章写作。
Endnote（很优秀的文献管理工具，里面的好多功能你可能还没发现）


4.文本编辑 和 集成开发工具（IDE-Integrated Development Environment）
轻量级的：
VIM
Notepad++
sublime3
UltraEdit
EditPlus

重量级的IDE
Eclipse（这是基于Java的一款IDE，可以安装一些常用插件：Perl、Python、PHP等）
RStudio（本地做R开发的利器，有很好的代码美化、项目管理功能，Rgui 弱爆了！）
Vim/Emacs（在Linux终端中使用的比较多的编辑工具，也有些对应的windows版，刚开始不习惯，用多了就会喜欢上的，同样也可以安装很多插件）


5.终端模拟软件
git
Xshell（强大的安全终端模拟软件，支持各种协议）
SecureCRT（同样功能强大的终端模拟软件）
Putty（小巧易用）


6.图片工具
PowerPoint（PPT，用途其实很强大，在拼图等操作中）
picPick(专业屏幕截图软件)
Adobe Photoshop/illustrator（专业的）
美图秀秀（如果要求不是那么专业，基本的操作也是可以胜任的，不仅仅是美图自拍！！！）


7.代码管理
git
github(免费的仓库都是public的)
bitbucket(免费提供private仓库)








========================================
行为习惯(分类/命名/做笔记/习惯)
----------------------------------------
1.做好分类工作
曾经有人说“用一句话概括这个世界——这个世界就是由分类来组成的”。我们想想——男的-女的、老的-少的、高的-矮的、DNA-RNA-Protein、第一个样本-第二个样本等等。试想下杂乱无章的工作习惯怎么会有高效率呢。所以在分析数据的时候对原始数据进行好的分类，对结果进行好的分类，这样能够提高我们的工作效率，具体几点：

在Linux服务器上，尽量将不能类别的数据放在不同的文件夹下，并逐级分类，这样清晰的组织目录能够很好地提高工作效率，节省无用的时间消耗。

Endnote文献组、浏览器书签、笔记目录、网盘内容等同样要做好分类。





2.好的命名习惯
一个好的文件命名是既能很好的表示文件的内容又能简洁明了。试想下你弄个1.fa 2.fa除了你当时还记得表示的是什么意思，别人看了怎么知道是什么意思呢，可能隔了几点你自己都不知道是什么意思。所以平时不要图简单图方便，而不考虑后续的分析和不站着别人的角度来思考。

数据文件的命名要简明扼要（不冗长也不要太简单）

脚本的命名要表示脚本的意图（符合一定的习惯，每个单词首字母都大写等习惯）




3. 做好笔记记录
在做生物信息学分析过程中，有时不只是自己一个人的事，可能你做的东西会返工也有可能是会给别人看的。所以及时的做好分析流程的记录是很重要的。

不要因为简单而不去记录（有时候可能就是这个简单的操作导致分析的错误，而你又恰好没记录，那就找不到错误的所在）

记录时应该有个好的逻辑条理（不要简单的放句命令在那，应该记录下命令的目的）

记录时应该按照一定的规范（使得笔记整洁明了，内容丰富）


4. 好的学习习惯
在学习一个新的东西时，不要一开始什么东西都去请教别人，一定要是自己先思考，自己对知识有一个了解（哪怕不深入），再不懂的地方去请教别人，这样对别人是一种尊重也是自己加强记忆的方法。



========================================
思维方式(如何提高效率/写出目标/)
----------------------------------------
这里提到思维方式，是因为好多人可能也是在做些东西，别人怎么做，他也怎么做，可是不知道为什么该这么做，或者也不懂大体的思路，就是那样稀里糊涂的做着。这就需要在遇到问题时怎么去分析问题，解决问题。所以在这里就建议，在碰到一个新的领域或者新的任务时，首先要做的事情是对相关的背景知识有个大体的了解，知道一些常规的处理流程，再进而慢慢的细化，到最后对这个问题心里已经有了一个比较清晰的解决思路了，这时最好用笔记记录下来。

做足前期准备（弄清楚问题是什么）

清晰的思路（怎么一步步解决问题）


refer:
http://ju.outofmemory.cn/entry/162253


========================================
生物信息分析文件夹-目录命名和组织结构
----------------------------------------
目的：看名字就知道是什么，清晰明了！

1.
一个项目的文件夹里
	依据子任务的划分、分析的步骤再分文件夹，或者使用日期命名。
		ReadMe.txt记录分析主要过程、主要分析步骤。
		script/ 放脚本
		pdf/ 放pdf图片文件
		其他子文件夹放中间数据，重要的阶段性数据在上一层加软链接。

#
在家目录放一个快捷方式，便于快速找到正在工作的目录：
$ ln -s /home/wangjl/data/apa/190610APA/ ~/cur



2. 例子






========================================
|-- 参考基因组文件夹怎么组织最好？
----------------------------------------
1.参考其他人的方式
/home/hou/data/RNA/refs/mm10/

/home/hou/data/RNA/refs/hg19/hg19.fa
/home/hou/data/RNA/refs/hg19/hg19_ucsc_genes.gtf 



2. 我现在使用的

参考基因组文件夹的命名
/home/wangjl/data/ref/hg19/index/star/  #看路径就知道是hg19的参考基因组，star的index 



========================================
Other important untaught skills (命名、文件组织、备份)
----------------------------------------
• Naming files
• Use excel wisely
	Use excel/spreadsheet wisely
• Data/Project organization
• backup plans






========================================
|-- Naming files is not easy
----------------------------------------
1.
不好的命名:
	myabstract.docx
	figure 1.png
	
可以的命名:
	2020-06-08_abstract_for_Macrophage.docx
	fig01_scatterplot-talk-length-vs-interest.png
#


2.Three principles for (file) names
	(1). Machine readable (do not put special characters and space in the name)
	(2). Human readable (Easy to figure out what the heck something is, based on its name, add slug)
	(3). Plays well with default ordering:
	  * Put something numeric first
	  * Use the ISO 8601 standard for dates (YYYY-MM-DD)
	  * Left pad other numbers with zeros
#




========================================
|-- Organization of each project down-stream analysis
----------------------------------------
1.
$ ls
data/ 原始数据，只读;
docs/ 文档
results/ 图片和结果表格、中间数据
scripts/ 脚本
xx_help.Rproj



$ tree -d
|-data
	|-brandon
		|-3_xx.fq
	|-bclx-compiled-data
		|-figures
|-docs
|-results
	|-brandon
	|-olivia
	|-sophia
|-scripts
	|-brandon
	|-dj
	|-eric
#



2. Rstudio R project

2020-10-30_bclx_merfish_count.Rmd
2020-11-07_simulation_fish_count.Rmd


doc/
	paper
		msms.pdf
		makefile
data/
	2009-01-14
		yeast
			README
			yeast.sqt
			yeast.ms2
		worm
			README
			worm.ms2
src/
bin/ 可能是C之类的源码src/，编译后放到bin/，脚本语言直接 scripts/
results/
	2009-01-15
	2009-01-23
#


(1) Remember, always keep the data in the data folder untouched, I usually do
$ chmod u-w –R data/
To revoke the user’s write right so you can not edit or delete the files in the data folder.

注意：不用动原始数据！最好改为只读。


(2) Always generate the output/intermediate files/figures in the results folder using the scripts in the scripts folder




========================================
|-- One last suggestion: backup! Backup by crontab
----------------------------------------
1. crontab 的使用

crontab -e #编辑，如果不存在，就新建一个
crontab -l #display crontab file contents;
crontab -r #remove your crontab file;
crontab -v #Display the last time you edited your crontab file.


* * * * * command to be executed;
从做到右 min(0-59) hour(0-23) dayOfMonth(1-31) month(1-12) dayOfWeek(0-6,Sunday=0)




2. 实例
看不懂
$ rsync -avhP ~/projects mdaris337:/rsch1/genomic_med/mtang1/tommy_mac_backup ## once a week


#rsync every Sunday 5am.
0 5 * * 0 rsync -avhP --exclude=".aspera" --exclude=".autojump" --exclude=".bash_history"
--exclude=".mozilla" --exclude=".myconfigs"
--exclude=".oracle_jre_usage" --exclude=".parallel" --exclude=".pki" --exclude=".rbenv"
railab:.[^.]* ~/shark_dotfiles >> /var/log/rsync_shark_dotfiles.log 2>&1 



ref:
https://divingintogeneticsandgenomics.rbind.io/post/crontab-for-backup/




========================================
|-- Reproducible computing using Rstudio
----------------------------------------
1.
(1)Go to https://github.com/username
• Create a new repository
(2)Create the new repository
Check [] Initialize this repository with a README
(3)Copy the link from “Clone with HTTPS”
(4)Go back to your local computer, open terminal
• $ cd /Users/mtang/Dropbox (Partners HealthCare)
• $ mkdir github_repos; cd github_repos
• $ git clone https://github.com/crazyhottommy/STAT115_HW.git
• You should see STAT115_HW folder in the github_repos folder.

(5)Open Rstudio -- > File -- > New Project --> Existing Directory -- > 
Browse and select the STAT115_HW folder --> Create Project

(6)In the Files tab, click New Folder and create data, results, scripts, src and docs folder

The results folder will contain all the results obtained from the script in the scripts folder.
src folder contains R function that you can source from the script in the scripts folder.
Docs folder contains any documentations/manuscripts. 

学习: 在 src/ 中定义函数，在scripts/中可以source引入。这样能代码更简洁。


(7)Edit the .gitignore file by clicking it

Ignore .DS_Store file on mac

I also ask git not to track Files in the results/ and data/ folder since they usually contain big files and intermediate Files.
This how I do it, you do not have to follow.

Remember I have them backed up in dropbox if I want them.
If you want to version control Large files, check Git lfs https://git-lfs.github.com/


(8)Now, you can either go to File -- > New File -- > Rmarkdown or download the homework Rmd file to the scripts folder.
Click Terminal tab, and use curl to download the Rmd file Note, I renamed them by prefixing date so they are nicely sorted.

可以在Rstudio的 terminal 标签使用shell下载文件
curl http://xxx....Rmd

(9)Git version control
After you worked on the Rmd file and knitted to html, you want to push it to the github. 
You can either use the Rstudio built-in Git tab or use the Terminal:
• In Rstudio, click the Terminal tab:
• $ git add scripts/2020-05-29_HW1.Rmd
• $ git commit -m "homework 1 done"
• $ git push
• More reading:
• Happy Git with R https://happygitwithr.com/


(10)A different workflow
• 1. In the example, we created the github repo first à clone to local à set up Rstudio project.
• 2. if you have already created and worked on a local Rstudio project, you have to do something else:
$ cd STAT115_HW
$ git init
$ git add .
$ git commit –m “first commit”
$ git remote add origin https://github.com/crazyhottommy/STAT115_HW.git
$ git push -u origin master



(11) Always use here() to construct relative path.
Later if you move the whole project folder into a different computer, the same code still works


library(ggplot2)
library(here)

df=read.delim(here('data'), "raw_foofy_data.csv")
p=ggplot(df, aes(x,y))+geom_point()
ggsave(here('figs', 'foofy_scaterplot.png'))



More advanced
• A Reproducible Data Analysis Workflow with R Markdown, Git, Make,
and Docker
• https://psyarxiv.com/8xzqy/



========================================
优秀的R代码实例
----------------------------------------
https://github.com/DawnEve/ImmunogenomicLandscape-BloodCancers/blob/master/Fig1_plots.R






========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



