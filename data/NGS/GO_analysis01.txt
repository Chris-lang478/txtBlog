GO/KEGG 基因富集分析

方法学
软件、网站
批量化方法
可视化




========================================
好用的网站
----------------------------------------
1. 名词解释
GO
GO是Gene ontology的缩写，GO数据库分别从功能、参与的生物途径及细胞中的定位对基因产物进行了标准化描述，即对基因产物进行了简单注释。

通过GO富集分析可以粗略了解差异基因富集在哪些生物学功能、途径或者细胞定位。

Pathway
Pathway指代谢通路，对差异基因进行pathway分析，可以了解实验条件下显著改变的代谢通路，在机制研究中显得尤为重要。 

GO分析好比是将基因分门别类放入一个个功能类群，而pathway则是将基因一个个具体放到代谢网络中的指定位置。



2. 
目前有许多GO和pathway分析软件，GO分析软件有Avadis （商业软件）、BiNGO（开源java）、DAVID（基于web的工具）等，pathway分析有IPA和MetaCore（商业软件）等。








========================================
|-- DAVID
----------------------------------------
https://david.ncifcrf.gov/

#还是不知道怎么用DAVID做GO分析？特雷西  猫头鹰教室  1月8日



1.
重点看三个指标， enrichment score、p值和FDR。

Pathway分析主要看P值和FDR值，两者越小越好。
GO分析还可看enrichment score，数值越大表示某个GO term越容易受到实验因素的影响。


GO和pathway分析结果中都得到了文章中选定的 xx 这个条目。




2. 如何定位到基因？
将 xx 通路中的所有差异表达基因全部挑选出来，列表如下。
作者在文中挑选了显著性最高的 yy 基因作为后续的研究对象。







========================================
|-- Metascape
----------------------------------------
http://www.metascape.org/




========================================
|-- FunRich: Functional Enrichment analysis tool
----------------------------------------
http://funrich.org/download

FunRich is a stand-alone software tool used mainly for functional enrichment and interaction network analysis of genes and proteins. Besides, the results of the analysis can be depicted graphically in the form of Venn, Bar, Column, Pie and Doughnut charts. Currently, FunRich tool is designed to handle variety of gene/protein data sets irrespective of the organism. Users can not only search against default background database, but can also load customized database against which functional enrichment analysis can be carried out.  








========================================
|-- String 蛋白互作网络
----------------------------------------
String：https://string-db.org/







========================================
|-- ClueGO
----------------------------------------





========================================
|-- 去东方，最好用的在线GO富集分析工具
----------------------------------------
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247484456&idx=1&sn=bbcd0b5d10ba9312d92b7baae777ccde
GOEAST，访问网站是http://omicslab.genetics.ac.cn/GOEAST/index.php





========================================
|-- KEGG上色
----------------------------------------
#KEGG Pathway 中基因的颜色怎么简单的标记上去
biocc  生信人  2017-07-22

1.有一个genelist

2.把symbol转为
https://www.uniprot.org/uploadlists/ 做idmapping

from: Gene name, To: UniProtKB, Organism:human; 提交。
新页面点击左侧的Reviewed, 右侧表格上方点Download excel格式。

解压打开，第二列Entry，加上颜色(如 red)提交到KEGG:https://www.genome.jp/kegg/tool/map_pathway2.html
P36956	red
O95785	red
O43405	red
P50454	red
顶部 Search against填写hsa，Primary ID选择Uniprot，点击底部的Exec。


至于高级复杂版可以从两个角度去实现批量化，一个是KEGG API，一个是构建url，当然也可以使用程序绘图直接绘制上去，这里就不做介绍了，还有就是对于未知的物种该如何做，首先是进行比对，具体工具有KOBAS、KAAS等。









========================================
GOplot包做GO 分析
----------------------------------------
1. R包GOplot——GO富集分析

R包GOplot基于ggplot2增强图形化展示。它利用任何通用富集分析的输出，并在不同细节层次上产生图像：从总览最富集的类别（条形图、气泡图），到在一套给定类别中展示不同类型分子信息的更详细视图（环形图、弦图、聚类图）。该包提供了对组学数据的一个更深入的理解，允许科学家仅用几行代码就能产生有深刻见解的图像，以容易地交流他们的发现。

说明：
GO三大类别：BP（biological process），CC（cell component），MF（molecular function）
z-score：表示BP（/MF/CC）是更可能下降（负值）或者升高（正值）
logFC：基因倍数变化
count：GO term包含的基因数
adj p：校正的P值
GO term，例如GO:0007507是heart development




2. 需要以下三个包：
GO.db是GO分析的数据基础它包含了GO的基本分层信息；
topGO是基因的功能富集分析包；
GOProfiles利用GO谱进行富集分析。
接下来我们逐个介绍如何使用以上三个R包。所有包的安装我们就不赘述了，都是通过bioconductor进行安装的。

GO.db的使用：
首先，我们看下GO.db数据包的构成：

以上都是GO.db中的数据包，首先我们看下GO.db中包含的列

其他的数据是以工程文件的形式存在，在此需要进行转化转化函数as.list(GOTERM)可将其转化为list 的可检索文件。


其主要的检索函数select（），首先看下它的函数构成：
Select(data,keys,columns,keytypes)
- Keys检索的关键词，keytypes指的关键词的类型，columns指的那些列被列出来。
- 当然还有其他一些有用的函数：
- Keys()列出数据的主键列，或者加keytypes参数获取对应的列
- MapIds进行数据库的批量匹配。
以上在GO.db中适用的所有函数在其他.db的数据包中都可以适用。如下：


GO的基础数据已经准备好，接下来是如何做功能富集分析并输出我们想要的结果，那么就用到了下面的包topGO,为了方便我们举例我们还载入了ALL数据包。还是那句话安装啥的直接略过。

首先我们的数据包括ALL,还有topGO自带的geneList。


这样我们就可以构建我们的检索数据。其中用到一个函数topDiffGenes（）其主要功能是获取P小于0.01的基因列表。数据构建如下


至此我们的GO和gene匹配的过程结束了，接下来就是我们的核心部分富集分析了。富集分析有很多方法，在此包中的方法我们列出如下：



http://www.360doc.com/content/17/0918/18/46931810_688174475.shtml



========================================
利用clusterProfiler进行富集分析
----------------------------------------
https://github.com/YuLab-SMU/clusterProfiler
https://guangchuangyu.github.io/software/clusterProfiler/

clusterProfiler 是业界大神Y叔写的一个R包，可以用来做各种富集分析，如GO、KEGG、DO（Disease Ontology analysis）、Reactome pathway analysis以及GSEA富集分析等。而除了富集分析，他还可以非常方便的对富集分析结果进行可视化。

这里使用clusterProfiler进行GO、KEGG以及GSEA富集分析。

进行GO分析时，需要考虑的一个基础因素就是基因的GO注释信息从何处获取。Bioconductor上提供了以下19个物种的Org类型的包，包含了这些物种的GO注释信息


Other gene sets
包括但不限于：Disease Ontology (DO), Disease Gene Network (DisGeNET), wikiPathways, Molecular Signatures Database (MSigDb)



对于过表征分析 (over representation analysis, ORA), 我们需要的是一个包含基因ID的向量，基因ID可以从差异表达分析获得（例如 DESeq2 包）。

对于基因富集分析 (gene set enrichment analysis, GSEA), 我们需要一个经排序的基因列表，在这里我们调用 DOSE 包中的示例数据 geneList .



1. Over-Representation Analysis

过表达分析其实就是费舍尔精确检验，对于以上19个物种，分析的代码如下

ego <- enrichGO(
  gene          = gene,
  keyType = "ENTREZID",
  OrgDb         = org.Hs.eg.db,
  ont           = "CC",
  pAdjustMethod = "BH",
  pvalueCutoff  = 0.01,
  qvalueCutoff  = 0.05,
  readable      = TRUE)

gene就是差异基因对应的向量，keyType指定基因ID的类型，默认为ENTREZID, 该参数的取值可以参考keytypes(org.Hs.eg.db)的结果， 建议采用ENTREZID, OrgDb指定该物种对应的org包的名字，ont代表GO的3大类别，BP, CC, MF; pAdjustMethod指定多重假设检验矫正的方法，cufoff指定对应的阈值，readable=TRUE代表将基因ID转换为gene symbol。




2. Gene Set Enrichment Analysis
(1)
ego <- gseGO(
  geneList     = geneList,
  OrgDb        = org.Hs.eg.db,
  ont          = "CC",
  nPerm        = 1000,
  minGSSize    = 100,
  maxGSSize    = 500,
  pvalueCutoff = 0.05,
  verbose      = FALSE)

GSEA分析通过置换检验来计算p值，nPerm指定置换次数。


(2)支持的物种
GO分析（groupGO(), enrichGO(), gseGO()）支持Bioconductor提供的 OrgDb 中已有的20个物种。也可以通过AnnotationHub在线检索并抓取 OrgDb.

对于这19个物种之外的其他物种，也支持读取基因的GO注释文件，然后进行分析，注释文件的格式如下
GeneId	GO	Description
1	GO:0005819	spindle
2	GO:0072686	mitotic spindle
3	GO:0000776	kinetochore
只需要3列信息即可，第一列为geneID, 第二列为基因对应的GO编号，第三列为GO的描述信息。这3列的顺序是无所谓的， 只要包含这3种信息就可以了。

读取该文件，进行分析的代码如下

data <- read.table(
  "go_annotation.txt",
  header = T,
  sep = "\t")

go2gene <- data[, c(2, 1)]
go2name <- data[, c(2, 3)]

# 费舍尔精确检验
x <- enricher(
gene,
TERM2GENE = go2gene,
TERM2NAME = go2name)

# GSEA富集分析
x <- GSEA(
gene,
TERM2GENE = go2gene,
TERM2NAME = go2name)











========================================
|-- clusterProfiler 实例
----------------------------------------
1. 基本方法
#载入包
#BiocManager::install("AnnotationHub")	#下载安装数据包，缺少的数据包都可以这样安装
#BiocManager::install("org.Hs.eg.db")
#BiocManager::install("clusterProfiler")

library(AnnotationHub)	#library导入需要使用的数据包
library(org.Hs.eg.db)   #人类注释数据库
library(clusterProfiler)

#载入数据
f <- read.table("C:\\File\\GeneEnsembl.txt")	#导入数据，ENSEMBL编号。
#若是excel文件，可library(readxl) ，read_excel("old_excel.xls")
f <- f[c(1)] 	#取需要的列


## 该包输入的是 Entrez ID

#将ENSEMBL编号转换为ENTREZID
EG2Ensembl=toTable(org.Hs.egENSEMBL)	 #将ENTREZID和ENSEMBL对应的数据存入该变量
f=f$V1	#list转化为字符向量
geneLists=data.frame(ensembl_id=f)
results=merge(geneLists,EG2Ensembl,by='ensembl_id',all.x=T)
id=na.omit(results$gene_id)  #提取出非NA的ENTREZID


#GO富集分析
ego <- enrichGO(OrgDb="org.Hs.eg.db", gene = id, ont = "MF", pvalueCutoff = 0.01, readable= TRUE) #GO富集分析
dotplot(ego,showCategory=10,title="Enrichment GO Top10") #泡泡图
barplot(ego, showCategory=20,title="EnrichmentGO")  #柱状图


#KEGG分析#
ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)	 #KEGG富集分析
dotplot(ekk,font.size=8)	# 画气泡图
browseKEGG(ekk,'mmu01100')	# 显示通路图






ref:
https://blog.csdn.net/nineqblot/article/details/89944233
[推荐]（三）利用clusterProfiler进行富集分 https://www.jianshu.com/p/feaefcbdf986
[推荐] clusterProfiler: 分析+可视化GO和KEGG富集的转录组R包  https://www.jianshu.com/p/e133ab3169fa
GO富集分析及结果柱状图绘制R代码 https://blog.csdn.net/sinat_30623997/article/details/79250940




========================================
|-- groupGO()
----------------------------------------
函数 groupGO() 的设计是基于在特定水平的GO分布，从而对基因进行分类。

library(org.Hs.eg.db)
## 转换ID，参数'gene'可以是OrgDb支持的任何ID形式
gene.df <- bitr(gene, fromType = "ENTREZID", 
                toType = c("ENSEMBL", "SYMBOL"),
                OrgDb = org.Hs.eg.db) 
head(gene.df)
#   ENTREZID         ENSEMBL SYMBOL
# 1     4312 ENSG00000196611   MMP1
# 2     8318 ENSG00000093009  CDC45
# 3    10874 ENSG00000109255    NMU
# 4    55143 ENSG00000134690  CDCA8
# 5    55388 ENSG00000065328  MCM10
# 6      991 ENSG00000117399  CDC20

ggo <- groupGO(gene     = gene,
               OrgDb    = org.Hs.eg.db,
               ont      = "CC", 
               level    = 3,     ## Specific GO Level.
               readable = TRUE)  ## the gene IDs will mapping to gene symbols.
head(ggo)
#                    ID                    Description Count GeneRatio
# GO:0005886 GO:0005886                plasma membrane    52    52/207
# GO:0005628 GO:0005628              prospore membrane     0     0/207
# GO:0005789 GO:0005789 endoplasmic reticulum membrane     8     8/207


Level 1 provides the highest list coverage with the least amount of term specificity. With each increasing level coverage decreases while specificity increases so that level 5 provides the least amount of coverage with the highest term specificity. (Dennis, Glynn, et al)





========================================
|-- enrichGO(): GO分析，并用ggplot2画图
----------------------------------------
进行GO分析，显示全部信息

可以传入 ensembl_id
ego2 <- enrichGO(gene         = gene.df$ENSEMBL,
                OrgDb         = org.Hs.eg.db,
                keyType       = 'ENSEMBL',
                ont           = "CC",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05)
#

#如果直接调用 OrgDb 中的 ID，则需要在参数中确定 'KeyType'.
genelist=eg$ENTREZID;
> go <- enrichGO(genelist, 
			OrgDb = org.Hs.eg.db, 
			ont='ALL',
			pAdjustMethod = 'BH',
			pvalueCutoff = 0.05, 
			qvalueCutoff = 0.2,
			keyType = 'ENTREZID')
> head(go)

> dim(go)
[1] 524  10
> dim(go[go$ONTOLOGY=='BP',])
[1] 482  10
> dim(go[go$ONTOLOGY=='CC',])
[1] 26 10
> dim(go[go$ONTOLOGY=='MF',])
[1] 16 10
# 看来这些差异基因主要还是富集到BP中了

dotplot(go,showCategory=10,title="Enrichment GO Top10") #泡泡图
barplot(go, showCategory=20,title="EnrichmentGO")  #柱状图



# 还可以绘制GO的网络关系图，但是值得注意的是这里的数据只能是富集一个GO通路（BP、CC或MF）的数据
> go.BP <- enrichGO(genelist, OrgDb = org.Hs.eg.db, ont='BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff = 0.2,keyType = 'ENTREZID')
> plotGOgraph(go.BP)	#GO图，看不清楚可以尝试左上角另存为pdf




更多细节：
通过设置参数 readable=Ture 或 函数 setReadable() 可以将 Gene ID 转换为 symbol.
ego2 <- setReadable(ego2, OrgDb = org.Hs.eg.db)
head(ego2$gene2Symbol) #有symbol出现了


函数 dropGO 可以在由 enrichGO 得到的结果中移除特定的 GO term 或 GO level.

enrichGO() 不含设置 GO level 的参数，而函数 gofilter() 可以将结果限定在特定的 GO level.


GO term 去冗余
rmredunego <- simplify(ego, cutoff=0.7, by="p.adjust", select_fun=min)









========================================
|-- ggplot2画 KEGG Pathway富集分析气泡图  
----------------------------------------
kk <- enrichKEGG(gene         = gene,
                 organism     = 'hsa',
                 pvalueCutoff = 0.05)
#

我们继续使用上面的数据进行KEGG富集分析：
> kegg <- enrichKEGG(genelist, organism = 'hsa', keyType = 'kegg', pvalueCutoff = 0.05,pAdjustMethod = 'BH', 
                     minGSSize = 10,maxGSSize = 500,qvalueCutoff = 0.2,use_internal_data = FALSE)
> head(kegg)

# 简单可视化
> dotplot(kegg, showCategory=30)




# 自定义可视化代码：不好用，不过看注释可以学习ggplot2用法
library(ggplot2)  
pathway = read.table("C://Users//Desktop//path.richFactor.head20.tsv",header=T,sep="\t")  
# 画图  
p = ggplot(pathway,aes(richFactor,Pathway))  
p=p + geom_point()  
# 改变点的大小  
p=p + geom_point(aes(size=R0vsR3))  
# 四维数据的展示  
pbubble = p + geom_point(aes(size=R0vsR3,color=-1*log10(Qvalue)))  
# 自定义渐变颜色  
pbubble =pbubble+ scale_colour_gradient(low="green",high="red")  
# 绘制pathway富集散点图  
pr = pbubble + scale_colour_gradient(low="green",high="red") +   
  labs(color=expression(-log[10](Qvalue)),size="Gene number",  
       x="Rich factor",y="Pathway name",title="Top20 of pathway enrichment")  
# 改变图片的样式（主题）  
pr=pr + theme_bw()  
pr 



备注，绘图数据的说明：
1)Pathway : 通路的名称        
2)R0vsR3 ：差异表达基因中，属于这个通路的基因的数量
3)All_Unigene：所有基因中属于这个通路的基因的数量  
4)Pvalue ：富集分析p值
5)Qvalue ：富集分析的Q值
6)richFactor ：在我们分析报告中，没有提供这一列，但很容易计算。是 第二列 除以 第三列得到；
7)Pathway ID  ：通路ID  
8)Genes ：通路中基因的ID
9)KOs：通路中基因的KO号


http://blog.csdn.net/sinat_38163598/article/details/72827851
https://blog.csdn.net/tuanzide5233/article/details/82141817






========================================
|-- GSEA 富集分析
----------------------------------------
https://www.jianshu.com/p/feaefcbdf986

clusterProfiler provides enricher function for hypergeometric test and GSEA function for gene set enrichment analysis that are designed to accept user defined annotation.

这里使用clusterProfiler里面的GSEA函数进行GSEA富集分析，并与使用超几何分布富集（enricher函数）的结果进行简单比较，enricher函数与GSEA函数用法基本相同，因此这里只给出GSEA的用法及参数。


GSEA      a universal gene set enrichment analysis tools
Usage：
  GSEA(geneList, exponent = 1, nPerm = 1000, minGSSize = 10,
       maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH", TERM2GENE,
       TERM2NAME = NA, verbose = TRUE, seed = FALSE, by = "fgsea")

Arguments：
geneList           order ranked geneList
exponent           weight of each step
nPerm              number of permutations
minGSSize          minimal size of each geneSet for analyzing
maxGSSize          maximal size of genes annotated for testing
pvalueCutoff       pvalue cutoff
pAdjustMethod      p value adjustment method
TERM2GENE          user input annotation of TERM TO GENE mapping, a data.frame of 2 column with term and gene
TERM2NAME          user input of TERM TO NAME mapping, a data.frame of 2 column with term and name
verbose            logical
seed               logical
by                 one of ’fgsea’ or ’DOSE’


在进行富集分析之前需要对数据做一个预处理——排序。

> library(dplyr)
> geneList <- select(degenes, Entrez.ID, Fold.Change); head(geneList)
  Entrez.ID Fold.Change
1       202    2.555354
2     26289    1.350051
3       306   -2.328736
4     55843    5.064183
5       433    2.061535
6       472    2.313447
> geneList.sort <- arrange(geneList, desc(Fold.Change)); head(geneList.sort)
  Entrez.ID Fold.Change
1      3512    36.47332
2      3117    35.58685
3      3113    24.10151
4       916    14.89763
5      5996    14.67417
6      3119    11.12233
> gene <- geneList.sort$Entrez.ID







这里使用的是broad GSEA提供的gene sets 来提供 TERM2GENE ：
> gmtfile <- system.file("extdata", "c5.cc.v5.0.entrez.gmt", package="clusterProfiler") #这就是一个文件路径
> c5 <- read.gmt(gmtfile)
> head(c5)
          ont  gene
1 NUCLEOPLASM  3190
2 NUCLEOPLASM  2547
3 NUCLEOPLASM 26173
4 NUCLEOPLASM  9439
5 NUCLEOPLASM 57508
6 NUCLEOPLASM  6837

万事俱备，只欠东风。现在可以开始分析了，先进行超几何分布的富集分析：

### 先使用基于超几何分布的富集分析
> enrich <- enricher(gene, TERM2GENE=c5); head(enrich)


其他基因集从官网下载
http://software.broadinstitute.org/gsea/msigdb/collections.jsp







再做GSEA富集分析，在此之前需要对输入gene list做一下处理，包括三步：

## assume 1st column is ID
## 2nd column is FC
> head(geneList)
  Entrez.ID Fold.Change
1       202    2.555354
2     26289    1.350051

## feature 1: numeric vector
> glist <- geneList[,2];head(glist)
[1]  2.555354  1.350051 -2.328736  5.064183  2.061535  2.313447

## feature 2: named vector
> names(glist) <- as.character(geneList[,1]);head(glist)
      202     26289       306     55843       433       472 
 2.555354  1.350051 -2.328736  5.064183  2.061535  2.313447 

## feature 3: decreasing order
> glist <- sort(glist,decreasing = T); head(glist)
    3512     3117     3113      916     5996     3119 
36.47332 35.58685 24.10151 14.89763 14.67417 11.12233


输入文件准备好了尽可以进行GSEA富集分析了：

> gsea <- GSEA(glist, TERM2GENE=c5, verbose=FALSE, pvalueCutoff = 0.8); head(gsea)
不要问我为什么要pvalueCutoff设置0.8，因为一直调大到0.8才富集到结果。。。可见数据应该是有问题的，但这里作为一个实践就不管那么多了。


而且，clusterProfiler还支持GSEA的GO、KEGG富集。

A common approach in analyzing gene expression profiles was identifying differential expressed genes that are deemed interesting. The enrichment analysis we demonstrated previous were based on these differential expressed genes. This approach will find genes where the difference is large, but it will not detect a situation where the difference is small, but evidenced in coordinated way in a set of related genes. Gene Set Enrichment Analysis (GSEA)(Subramanian et al. 2005) directly addresses this limitation. All genes can be used in GSEA; GSEA aggregates the per gene statistics across genes within a gene set, therefore making it possible to detect situations where all genes in a predefined set change in a small but coordinated way. Since it is likely that many relevant phenotypic differences are manifested by small but consistent changes in a set of genes.


> gsea.go <- gseGO(glist,OrgDb = org.Hs.eg.db, pvalueCutoff = 0.5); head(gsea.go)


> gsea.KEGG <- gseKEGG(geneList     = glist,
               organism     = 'hsa',
               nPerm        = 1000,
               minGSSize    = 120,
               pvalueCutoff = 0.05,
               verbose      = FALSE)
#






顺便再利用上面处理好的glist进行一下KEGG富集到的某一条通路的可视化：
> library(pathview)
> pathview(gene.data = glist, pathway.id = 'hsa04658',species="hsa", limit=list(gene=max(abs(glist)), cpd=1))


上面的命令会在当前目录生成3个文件：一个原始KEGG通路图片，一个标注了上下调基因的，最后一个文本文件则是一些KEGG通路信息。


#

========================================
|-- pathview包:整合表达谱数据可视化KEGG通路，上帝视角查看KEGG信号通路图
----------------------------------------
1.输入是 named list:
head(glist) #value是fold change，name是 gene entres_id;
#     7803    387509 100506498 100144602     50632 100288152 
# 24.35061  23.78739  23.67869  23.54676  23.35748  22.23226


str(glist)
# Named num [1:15937] 24.4 23.8 23.7 23.5 23.4 ...
# - attr(*, "names")= chr [1:15937] "7803" "387509" "100506498" "100144602" ...





2.
# pathway id https://www.kegg.jp/kegg-bin/get_htext#B36

https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247490244&idx=1&sn=e4fecfad6e7f17be8ca4d4fba8c201c9





3. 开始画图
#BiocManager::install("pathview")
library(pathview)
pathview(gene.data = glist, pathway.id = 'hsa04658',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#tumor
pathview(gene.data = glist, pathway.id = 'hsa05200',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#
#Cell adhesion molecules (CAMs)
pathview(gene.data = glist, pathway.id = 'hsa04514',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#Focal adhesion
pathview(gene.data = glist, pathway.id = 'hsa04510',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#Transcriptional misregulation in cancer
pathview(gene.data = glist, pathway.id = 'hsa05202',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#Apoptosis
pathview(gene.data = glist, pathway.id = 'hsa04210',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#











========================================
|-- clusterProfiler提供了以下几种可视化策略
----------------------------------------
https://blog.csdn.net/weixin_43569478/article/details/83744242


3.对于GO富集分析的结果，clusterProfiler提供了以下几种可视化策略

(1). barplot
用散点图展示富集到的GO terms,用法如下
barplot(ego, showCategory = 10)

横轴为该GO term下的差异基因个数，纵轴为富集到的GO Terms的描述信息， showCategory指定展示的GO Terms的个数，默认展示显著富集的top10个，即p.adjust最小的10个。注意的颜色对应p.adjust值，从小到大，对应蓝色到红色。

(2)dotplot
用散点图展示富集到的GO terms,用法如下
dotplot(ego, showCategory = 10)

横轴为GeneRatio, 代表该GO term下的差异基因个数占差异基因总数的比例，纵轴为富集到的GO Terms的描述信息， showCategory指定展示的GO Terms的个数，默认展示显著富集的top10个，即p.adjust最小的10个。图中点的颜色对应p.adjust的值，从小到大，对应蓝色到红色，大小对应该GO terms下的差异基因个数，个数越多，点越大。


(3)GO有向无环图
调用topGO来实现GO有向无环图的绘制，代码如下

plotGOgraph(ego)

矩形代表富集到的top10个GO terms, 颜色从黄色过滤到红色，对应p值从大到小。


(4)goplot
和plotGOgraph展示的信息一样，都是GO有向无环图，只不过采用了igraph中的布局方式，用法如下

goplot(ego)


(5)emapplot
对于富集到的GO terms之间的基因重叠关系进行展示，如果两个GO terms系的差异基因存在重叠，说明这两个节点存在overlap关系，在图中用线条连接起来，用法如下

emapplot(ego, showCategory = 30)

每个节点是一个富集到的GO term, 默认画top30个富集到的GO terms, 节点大小对应该GO terms下富集到的差异基因个数，节点的颜色对应p.adjust的值，从小到大，对应蓝色到红色。

(6) cnetplot
对于基因和富集的GO terms之间的对应关系进行展示，如果一个基因位于一个GO Terms下，则将该基因与GO连线，用法如下
cnetplot(ego, showCategory = 5)








========================================
|-- gene ID 转换: symbole/ ensembl_id/ Entrez ID
----------------------------------------
1. #ensembl_id to gene_id
EG2Ensembl=toTable(org.Hs.egENSEMBL)	 #将ENTREZID和ENSEMBL对应的数据存入该变量
head(EG2Ensembl)
##    gene_id      ensembl_id
## 1       1 ENSG00000121410
## 2       2 ENSG00000175899






2.由于clusterProfiler富集分析推荐的输入文件是Entrez ID，因此这里提取的是Entrez ID，接下来就可以进行富集分析了
## 对于没有转换的gene ID，clusterProfiler也提供了bitr方法进行转换ID：
Usage:
  bitr(geneID, fromType, toType, OrgDb, drop = TRUE)

Arguments
  geneID       input gene id
  fromType     input id type
  toType       output id type
  OrgDb        annotation db
  drop         drop NA or not

# example:
> x <- c("GPX3",  "GLRX",   "LBP",   "CRYAB", "DEFB1", "HCLS1",   "SOD2",   "HSPA2", 
       "ORM1",  "IGFBP1", "PTHLH", "GPC3",  "IGFBP3","TOB1",    "MITF",   "NDRG1", 
       "NR1H4", "FGFR3",  "PVR",   "IL6",   "PTPRM", "ERBB2",   "NID2",   "LAMB1", 
       "COMP",  "PLS3",   "MCAM",  "SPP1",  "LAMC1", "COL4A2",  "COL4A1", "MYOC",  
       "ANXA4", "TFPI2",  "CST6",  "SLPI",  "TIMP2", "CPM",     "GGT1",   "NNMT",
       "MAL",   "EEF1A2", "HGD",   "TCN2",  "CDA",   "PCCA",    "CRYM",   "PDXK",  
       "STC1",  "WARS",  "HMOX1", "FXYD2", "RBP4",   "SLC6A12", "KDELR3", "ITM2B")
> eg <- bitr(x, fromType="SYMBOL", toType=c("ENTREZID","ENSEMBL"), OrgDb="org.Hs.eg.db"); head(eg)
'select()' returned 1:many mapping between keys and columns
  SYMBOL ENTREZID         ENSEMBL
1   GPX3     2878 ENSG00000211445
2   GLRX     2745 ENSG00000173221
3    LBP     3929 ENSG00000129988
4  CRYAB     1410 ENSG00000109846
5  DEFB1     1672 ENSG00000164825
6  HCLS1     3059 ENSG00000180353
可以看到，这里转换ID的对应文件来源于"org.Hs.eg.db"这个包。



(2) 转换ID，参数'gene'可以是OrgDb支持的任何ID形式
head(gene) # [1] "4312"  "8318"  "10874" "55143" "55388" "991"
library(org.Hs.eg.db)
gene.df <- bitr(gene, fromType = "ENTREZID", 
                toType = c("ENSEMBL", "SYMBOL"),
                OrgDb = org.Hs.eg.db) 
head(gene.df)
#   ENTREZID         ENSEMBL SYMBOL
# 1     4312 ENSG00000196611   MMP1
# 2     8318 ENSG00000093009  CDC45
# 3    10874 ENSG00000109255    NMU




3. #gene symbole to id 
# https://www.biostars.org/p/255657/
library(org.Hs.eg.db)
library(biomaRt)
hs <- org.Hs.eg.db
#my.symbols <- c("MESP1")
my.symbols=DEgenes
head(my.symbols) #"MESP1"    "TMPRSS2"  "SIPA1"    "SLC39A11" "ACTA2"    "AGO4"
rs=select(hs, 
       keys = my.symbols,
       columns = c("ENTREZID", "SYMBOL"),
       keytype = "SYMBOL")
head(rs)
#        SYMBOL  ENTREZID
#1         MESP1     55897
#
head(rs$ENTREZID)






========================================
GSEA分析是个什么鬼？
----------------------------------------
1. 基因集富集分析 (Gene Set Enrichment Analysis, GSEA) 的基本思想是使用预定义的基因集（通常来自功能注释或先前实验的结果），将基因按照在两类样本中的差异表达程度排序，然后检验预先设定的基因集合是否在这个排序表的顶端或者底端富集。基因集合富集分析检测基因集合而不是单个基因的表达变化，因此可以包含这些细微的表达变化，预期得到更为理想的结果。

从题目中我们看到GSEA分析有三个特点：
分析的基因集合而不是单个基因；
将基因与预定义的基因集进行比较；
富集分析；

看到这里大家可能想起来了RNA-seq或者芯片分析中最为常见的两种方法：GO（Gene Ontology）和KEGG pathway分析，它们有些相似但又不同。

GSEA的优势
一般的差异分析（GO和Pathway）往往侧重于比较两组间的基因表达差异，集中关注少数几个显著上调或下调的基因，这容易遗漏部分差异表达不显著却有重要生物学意义的基因，忽略一些基因的生物特性、基因调控网络之间的关系及基因功能和意义等有价值的信息。而GSEA不需要指定明确的差异基因阈值，算法会根据实际数据的整体趋势， 为研究者们提供了一种合理地解决目前芯片分析瓶颈问题的方法,即使在没有先验经验存在的情况下也能在表达谱整体层次上对数条基因进行分析,从而从数理统计上把表达谱芯片数据与生物学意义很好地衔接起来,使得研究者们能够更轻松、更合理地解读芯片结果。

目前，市面上绝大多数公司在求得差异基因列表后，都会在此之上提供给客户Pathway 以及GO 富集分析，毕竟给予成百上千的差异表达基因以简洁、明晰的生物学功能的概括，才是进行高通量生物学表达谱实验的主要目的。然而，在实际应用于生物学高通量数据时，它们都有一个重大的缺陷：对于差异基因检出的阈值，异常的敏感，客户需要给出差异基因的一个明确的定义(阈值)，例如abs(FC) ≧2.0 & p ≦ 0.05。这种一刀切的阈值，对于发现真正的生物学效应，许多时候是一种障碍，因为实际通过芯片观测到的RNA 表达变化，往往是层层的负反馈调控后的结果，并且不同组织对于表达差异的敏感度是不同的：在神经递质系统内，一个1.2 倍的表达差异即可能产生及其显著的效应。



GSEA富集过程包括三步骤：
1. 计算富集分数（Enrichment Score）；
2. 估计富集分数的显著性水平；
3. 矫正多重假设检验；


GSEA的具体原理就不展开了，原理在PNAS文章Gene set enrichment analysis: a knowledge-based approach for interpreting genome-wide expression profiles.Proc Natl Acad Sci U S A. 2005 Oct 25;102(43):15545-50. Epub 2005 Sep 30. 







========================================
|-- Molecular Signatures Database(MSigDB): 分子指纹数据库
----------------------------------------

Gene Set Enrichment Analysis，中文名称为基因集富集分析，是由Broad Institute研究所的科学家提出的一种富集方法，在提出该方法的同时还对应提供了分析的软件GSEA和一个基因集数据库MSigdb。本章主要介绍这个数据库，官网如下

http://software.broadinstitute.org/gsea/msigdb/index.jsp


对于human的基因，从位置，功能，代谢途径，靶标结合等多种角度出发，构建出了许多的基因集合，一个基因集合中就是具有相近位置或类似功能的许多基因的，Broad Institute研究所将它们构建的基因集合保存在MSigDB数据库中。

该数据库是不断更新和完善的，目前最新版本为v6.2, 更新于2018年7月，共收录了17810个基因集。不同版本如下收录的基因集数目变化如下




2.
在分析前我们先看MSigDB数据库，MSigDB（Molecular Signatures Database）数据库中定义了已知的基因集合：http://software.broadinstitute.org/gsea/msigdb

Collections
The MSigDB gene sets are divided into 8 major collections:
包括H和C1-C7八个系列（Collection），每个系列内容为：

H	hallmark gene sets  are coherently expressed signatures derived by aggregating many MSigDB gene sets to represent well-defined biological states or processes.

C1	positional gene sets  for each human chromosome and cytogenetic band.
C2	curated gene sets  from online pathway databases, publications in PubMed, and knowledge of domain experts.
C3	motif gene sets  based on conserved cis-regulatory motifs from a comparative analysis of the human, mouse, rat, and dog genomes.
C4	computational gene sets  defined by mining large collections of cancer-oriented microarray data.
C5	GO gene sets  consist of genes annotated by the same GO terms.
C6	oncogenic gene sets  defined directly from microarray gene expression data from cancer gene perturbations.
C7	immunologic gene sets  defined directly from microarray gene expression data from immunologic studies.



H: hallmark gene sets （效应）特征基因集合，共50组；
比如细胞凋亡特征基因集：

C1: positional gene sets 位置基因集合，根据染色体位置，共326个；
该类别包含人类每条染色体上的不同cytoband区域对应的基因集合。根据不同染色体编号进行二级分类。

C2: curated gene sets：（专家）共识基因集合，基于通路、文献等，这部分包括我们熟悉的KEGG信号通路等:

C3: motif gene sets：模式基因集合，主要包括microRNA和转录因子靶基因两部分
包含了miRNA靶基因和转录因子结合区域等基因集合。
无论是转录因子还是miRNA, 都是通过特定的motif序列来识别可以结合的区域，这些基因集合，本质上为具有相同motif序列的基因集，比如AAACCAC_MIR140这个基因集， 具有相同的AAACCACmotif, 而hsa-miR-140可以识别该motif然后进行结合，所以AAACCAC_MIR140是hsa-miR-140靶标基因的集合。


C4: computational gene sets：计算基因集合，通过挖掘癌症相关芯片数据定义的基因集合；

C5: GO gene sets：Gene Ontology 基因本体论，包括BP（生物学过程biological process，细胞原件cellular component和分子功能molecular function三部分）

C6: oncogenic signatures：癌症特征基因集合，大部分来源于NCBI GEO 及内部未发表芯片数据

C7: immunologic signatures: 免疫相关基因集合。


我们可以看到MSigDB数据收录的信息还是非常全面的，这个数据库可以单独使用和查询，我们可以根据各种条件导出一系列感兴趣的gene set。



(2)C2: curated gene sets 分为2大类，共6个子类
(browse 5501 gene sets)	
Gene sets in this collection are curated from various sources, including online pathway databases and the biomedical literature. Many sets are also contributed by individual domain experts. The gene set page for each gene set lists its source. The C2 collection is divided into the following two sub-collections: Chemical and genetic perturbations (CGP) and Canonical pathways (CP). 


CGP: chemical and genetic perturbations
(browse 3302 gene sets)	Gene sets represent expression signatures of genetic and chemical perturbations. A number of these gene sets come in pairs: xxx_UP (and xxx_DN) gene set representing genes induced (and repressed) by the perturbation.


CP: Canonical pathways
(browse 2199 gene sets)	Gene sets from pathway databases. Usually, these gene sets are canonical representations of a biological process compiled by domain experts.


CP:BIOCARTA: BioCarta gene sets
(browse 289 gene sets)	Gene sets derived from the BioCarta pathway database.


CP:KEGG: KEGG gene sets
(browse 186 gene sets)	Gene sets derived from the KEGG pathway database.


CP:PID: PID gene sets
(browse 196 gene sets)	Gene sets derived from the PID pathway database.


CP:REACTOME: Reactome gene sets
(browse 1499 gene sets)	Gene sets derived from the Reactome pathway database.

以KEGG为例，包含了186个基因集，每个基因集本质上都对应pathway 数据库里的一条通路。比如基因集KEGG_ABC_TRANSPORTERS对应pathway数据库中的hsa02010。






3.View Gene Families
http://software.broadinstitute.org/gsea/msigdb/gene_families.jsp

cytokines and growth factors	
transcription factors	
homeodomain proteins	
cell differentiation markers	
protein kinases	translocated cancer genes	
oncogenes	
tumor suppressors


检索基因集的页面 http://software.broadinstitute.org/gsea/msigdb/genesets.jsp






ref:
https://blog.csdn.net/weixin_43569478/article/details/83744521

http://www.360doc.com/content/16/1026/18/19913717_601568937.shtml




========================================
|-- GSEA富集分析 - 界面操作-命令行操作
----------------------------------------
GSEA富集分析 - 界面操作  生信宝典  2017-10-14
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247484582&idx=1&sn=1e01276e1216c91bd6e1e08db15bd905

一文掌握GSEA，超详细教程  生信宝典  2019.4月26日
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247488358&idx=1&sn=4c1c15b6467ff7f8bd7fe95400bbc1df

GO、GSEA富集分析一网打进
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247484594&idx=1&sn=77c8a84ceaae6b672f198ebd531c21e4




Gene Set Enrichment Analysis (基因集富集分析)用来评估一个预先定义的基因集的基因在与表型相关度排序的基因表中的分布趋势，从而判断其对表型的贡献。其输入数据包含两部分，一是已知功能的基因集 (可以是GO注释、MsigDB的注释或其它符合格式的基因集定义)，一是表达矩阵，软件会对基因根据其于表型的关联度(可以理解为表达值的变化)从大到小排序，然后判断基因集内每条注释下的基因是否富集于表型相关度排序后基因表的上部或下部，从而判断此基因集内基因的协同变化对表型变化的影响。

(The gene sets are defined based on prior biological knowledge, e.g., published information about biochemical pathways or coexpression in previous experiments. The goal of GSEA is to determine whether members of a gene set S tend to occur toward the top (or bottom) of the list L, in which case the gene set is correlated with the phenotypic class distinction.)
判断基因集S在列表L中处于头部或尾部的显著程度。


这与之前讲述的GO富集分析不同。GO富集分析是先筛选差异基因，再判断差异基因在哪些注释的通路存在富集；这涉及到阈值的设定，存在一定主观性并且只能用于表达变化较大的基因，即我们定义的显著差异基因。而GSEA则不局限于差异基因，从基因集的富集角度出发，理论上更容易囊括细微但协调性的变化对生物通路的影响。

软件和基因集下载
(http://software.broadinstitute.org/gsea/downloads.jsp)

运行GSEA (若每组样品都有多于7个样品，则Permutation type选择phenotype，结果理论上更好；否则选择gene_set)
如果样品数目少，而且选择了gene_set作为Permumation type则需要使用更为严格的标准，比如FDR<0.05。



1.学习官网
http://software.broadinstitute.org/gsea/index.jsp
Gene Set Enrichment Analysis (GSEA) is a computational method that determines whether an a priori defined set of genes shows statistically significant, concordant differences between two biological states (e.g. phenotypes). 
基因集富集分析(GSEA)是一种计算方法，它确定一个预先定义的基因集在两种生物状态之间是否具有统计上显著的、一致的差异(如表型)。

对于绝大多数研究者，推荐下载桌面版的软件。只要有java 8+，下载后就能1min内安装好并打开界面。

教程：http://software.broadinstitute.org/gsea/doc/desktop_tutorial.jsp

输入数据格式： http://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats
常规需要两个文件：
(1)txt文件，行为基因名，列为细胞名字。
如果是R保存的带行列标题的表达数据，添加第一列的标题Name，添加第二列description（内容为na即可），保存为tab分割的文件。

(2)表型数据文件CLS: Categorical (e.g tumor vs normal) class file format (*.cls)。
一共三行的文本文件，第一行是样本数字\t条件个数\t最后一个数字总是1; 第二行是第一行提到的三个变量；第三行则是和表达数据列标题对应的分类。
9	3	1
#KARAS_MUT	WT	MYC_MUT
KMUT	KMUT	KMUT	WT	WT	WT	myc	myc	myc

要注意:
1) cls文件第二行#后面必须是字母开头，不能是数字开头，否则导入时报错！
2) cls第三行一定要和表达矩阵的列一一对应。



怎么看结果：http://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideFrame.html?_Interpreting_GSEA_Results



需要标记到GSEA图上的几个关键概念：NES, Pval, FDR


java -Xmx512m xtools.gsea.Gsea -res F:\Temp\DESeq2\hela.count.nons_sync.txt -cls F:\Temp\DESeq2\type.cls#nonS_versus_sync -gmx gseaftp.broadinstitute.org://pub/gsea/gene_sets_final/c7.all.v6.2.symbols.gmt -collapse false -mode Max_probe -norm meandiv -nperm 1000 -permute phenotype -rnd_type no_balance -scoring_scheme weighted -rpt_label my_analysisC7 -metric Signal2Noise -sort real -order descending -create_gcts false -create_svgs false -help false -include_only_symbols true -make_sets true -median false -num 100 -plot_top_x 20 -rnd_seed timestamp -save_rnd_lists false -set_max 500 -set_min 15 -zip_report false -out C:\Users\admin\gsea_home\output\mar18 -gui false





========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------


