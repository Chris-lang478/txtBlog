Perl


perl语法怪异，符号随性，很难读懂，被嘲笑为 write only 的语言。
这十分不利于交流与团队合作。
如果可能，尽量使用Python等其他语言代替。

========================================
概述
----------------------------------------
1.
安装：默认常见的Linux发行版中都有内置
windows安装包区别：active和Strawberry的区别。后者有gcc。


2.
Perl是一种脚本语言。最初的设计者为拉里·沃尔（Larry Wall），它于1987年12月18日发表。
•Perl借取了C、sed、awk、shell scripting 以及很多其他程式语言的特性。
•其中最重要的特性是他内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN。
•“Pathologically Eclectic Rubbish Lister”“Practical Extraction and Report Language”


3.Why Perl ?
•文本处理强大
•模式匹配（正则表达式）
•不用或很小的修改就可以跨平台运行
•语言简洁
•存在大量的模块
	•CPAN
	•http://search.cpan.org/

4.程序注释：
# 这是注释


========================================
安装
----------------------------------------
=== Strawberry Perl (64-bit) 5.24.0.1-64bit README ===

What is Strawberry Perl?
------------------------

* 'Perl' is a programming language suitable for writing simple scripts as well
  as complex applications. See http://perldoc.perl.org/perlintro.html

* 'Strawberry Perl' is a perl environment for Microsoft Windows containing all
  you need to run and develop perl applications. It is designed to be as close
  as possible to perl environment on UNIX systems. See http://strawberryperl.com/

* If you are completely new to perl consider visiting http://learn.perl.org/

Installation instructions: (.ZIP distribution only, not .MSI installer)
-----------------------------------------------------------------------

* If installing this version from a .zip file, you MUST extract it to a 
  directory that does not have spaces in it - e.g. c:\myperl\
  and then run some commands and manually set some environment variables:

  c:\myperl\relocation.pl.bat         ... this is REQUIRED!
  c:\myperl\update_env.pl.bat         ... this is OPTIONAL

  You can specify " --nosystem" after update_env.pl.bat to install Strawberry 
  Perl's environment variables for the current user only.

* If having a fixed installation path does not suit you, try "Strawberry Perl
  Portable Edition" from http://strawberryperl.com/releases.html

How to use Strawberry Perl?
---------------------------

* In the command prompt window you can:

  1. run any perl script by launching
  
     c:\> perl c:\path\to\script.pl

  2. install additional perl modules (libraries) from http://www.cpan.org/ by

     c:\> cpan Module::Name
  
  3. run other tools included in Strawberry Perl like: perldoc, gcc, dmake ...

* You'll need a text editor to create perl scripts.  One is NOT included with 
  Strawberry Perl. A few options are Padre (which can be installed by running 
  "cpan Padre" from the command prompt) and Notepad++ (which is downloadable at
  http://notepad-plus-plus.org/ ) which both include syntax highlighting
  for perl scripts. You can even use Notepad, if you wish.

 
========================================
版本查看与运行Hello world!
----------------------------------------
1.
D:\R_code\bioToolKit\Perl>perl -v

This is perl 5, version 24, subversion 0 (v5.24.0) built for MSWin32-x64-multi-t
hread

Copyright 1987-2016, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.

2.
示例程序hello.pl
print “Hello , world!\n”;

打开命令提示符,切换到程序所在目录，然后运行
D:\R_code\bioToolKit\Perl>perl hello.pl
Hello World!

3.运行方式
•在命令行下运行
•切换到程序所在目录
•指定程序的绝对路径
•双击运行
•如何解决一闪而过问题？

4.在notepad++中直接运行？
按下F5，输入如下一行，保存，之后就可以正常运行了。
cmd /k C:\Strawberry\perl\bin\perl.exe "$(FULL_CURRENT_PATH)" &ECHO.&PAUSE&EXIT

"$(FULL_CURRENT_PATH)" 是当前文件的完整路径；
&ECHO. 是打印换行
&PAUSE 暂停批处理文件的处理并显示消息
&EXIT 退出cmd.exe程序（命令行解释程序）


========================================
Perl语言数据结构
----------------------------------------
•标量
	用$开头定义的变量，比如$foo
•数组
	用@开头定义的变量，比如@foo，里面的每个元素都是标量
•联合数组（哈希）
	用％开头定义的变量，比如％foo ，里面的每个元素都是标量
	
注意：
	1.Perl变量名称对大小写敏感, $foo和$Foo是两个不同的变量。
	2.Perl每种数据结构有专门的命名空间, $foo和@foo是两个不同的变量。
	3.显式申明一个变量使用my或者our。

========================================
标量($)
----------------------------------------
•整型
	Perl 最常用的简单变量，$x=10;
•浮点数
	如11.4 、-0.3 、.3 、3. 、54.1e+02 、5.41e03
	$value = 9.01e+21;
•字符串(最常见)
	$number = 11;
	$text = "This text contains the number $number.";
	输出：print $text,"\n";

•实例程序见scalar.pl

 
========================================
操作符
----------------------------------------
•算术操作符
	+(加)、-(减)、*(乘)、/(除)、**(乘幂)、%(取余)、-(单目负)
•整数比较操作符
	<（小于）、>（大于）、==（等于）、<=（小于等于）、>=（大于等于）、!=（不等于）、<=>比较（返回1, 0, or -1）
•字符串比较操作符
	lt（小于）、gt（大于）、eq（等于）、le（小于等于）、ge（大于等于）、ne（不等于）、cmp比较（返回1, 0, or -1）
•逻辑操作符
	逻辑或：$a || $b 或$a or $b 
	逻辑与：$a && $b 或$a and $b
	逻辑非：!$a 或 not $a
•赋值操作符
	=（等于）、+=（加等于）、-=（减等于）、*=（乘等于）、/=（除等于）、%=（余等于）

注意点：


	
========================================
列表和数组(@)
----------------------------------------
•列表
	列表是包含在括号里的一序列的值，可以为任何数值，也可为空，如：(1, 5.3 , "hello" , 2)，空列表：()。
•数组
	列表存贮于数组变量中，与简单变量不同，数组变量以字符"@"打头，如：@array = (1, 2, 3);
	数组存取：对数组中的值通过下标存取，第一个元素下标为0 ，且存取值时，通过标量变量的方式存取，如：
		- 取数组@array的第二个元素为$array[1]，
		- 将4存为@array的第四个元素为$array[3]=4;
		- 此时，数组@array中的元素为：(1,2,3,4)
•实例程序array.pl


注意：perl的数组下标是从0开始的。

========================================
关联数组（%）
----------------------------------------
类比：基本相当于java的HashMap。

•Perl定义了另一种数组，可以用任意简单变量值来访问其元素，这种数组叫做关联数组，也叫哈希表。
•关联数组定义：Perl使用%作为其首字符，如：
	%fruit = ("apples",17,"bananas",9,"oranges","none");
	%fruit=("apples"=>17,"bananas"=>9,"oranges"=>"none")
•访问关联数组的元素:关联数组的下标可以为任何简单/标量值，访问单个元素时以$符号打头，下标用大括号围起来。如：$fruit{"bananas"}
•关联数组循环：
	foreach $price (keys(%fruit)){
		$record = $fruit{$price};
	}
•实例程序hash.pl

	#定义一个hash数组
	%fruit=("apples"=>17,"bananas"=>9,"oranges"=>"none");
	#添加一个元素。注意用$开头！
	$fruit{"nut"}=5;
	
	#put all keys to an array 
	my @anArray=keys(%fruit);

	#遍历该hash数组
	foreach $keys (keys(%fruit)){
		$price = $fruit{$keys};
		print $keys,":",$price. "\n";
	}

	#输出
	print "\n\n";
	print %fruit{"apples"},"\n"; #输出key,value数组
	print $fruit{"apples"},"\n"; #输出value


========================================
文件读写
----------------------------------------
•打开、关闭文件
	语法为open (FH, filename)，其中FH为文件句柄，或者说是程序中用来代表某文件的代号，filename为文件名，其路径可为相对路径，亦可为绝对路径。
	
	打开文件时必须决定访问模式，在PERL中有三种访问模式：读、写和添加。如：
	open(FILE1,"file1"); #读文件打开模式
	open(FILE1, ">file1"); #写文件打开模式
	open(FILE1, ">>file1"); #向文件末尾追加模式
	
	读文件：
	while($line = <FILE1>){
		print $line,"\n"; #为文件每一行的内容
	}
•写文件：
	open(FILE1, ">outfile");
	print FILE1 "Here is an output line.\n";
	close FILE1;#关闭文件：


例1:open.pl 需要从命令行运行，否则会提示找不到文件。
#file read
#open(FILE1, "D:/R_code/bioToolKit/Perl/test.txt") or die $!;
open(FILE1, "test.txt") or die $!;
while($line=<FILE1>){
	print $line;
}
close FILE1;

>perl open.pl #要先保证有这个文件


例2:write.pl 
open(FILE1,">test.txt") or die $!;
print FILE1 "TEST TEST2\n";
print FILE1 "line2 123";
close FILE1;

>perl write.pl #覆盖文件。


========================================
控制结构
----------------------------------------
1.条件判断
if ( <expression>) {
	<statement_block_1>
}elsif( <expression> ) {
	<statement_block_2>
}
...
else{
	<statement_block_3>
}


2.循环

•while循环
while ( <expression> ) {
	<statement block>
}

•for循环
for ($count=1; $count <= 5; $count++) {
	# statements inside the loop go here
}


例1：求1+2+...+100的和for.pl
$sum=0;
for($i=1;$i<=100;$i++){
	$sum += $i;
}
print($sum);

注意：语句末尾一定要有;符号，否则会莫名其妙的报错。


========================================
字符串处理
----------------------------------------
1.大小写转换
$a="This is a book";

$b=uc $a;
print($b); #THIS IS A BOOK

print("\n");

$c=lc $a;
print($c); #this is a book


2.字符串长度






========================================
正则表达式
----------------------------------------
Perl中两种使用正则表达式的方法，m和s.

一、
•正则表达式，是用来描述或者匹配一系列符合某个句法规则的字符串。
•用来筛选、提取、替换字符串中的特定内容
•类似于Windows/DOS下用于文件查找的通配符，*和?。例如：*.doc，所有的Word文档。这里的*可以当作一种简单的正则表达式。

二、Perl 正则表达式语法

•由反斜线包含：m/def/ ,可略去m,即/def/
•匹配操作符=~（检验匹配是否成功）、!~（检验匹配是否不成功）
•模式中的特殊字符
	1、字符+ ：+意味着一个或多个相同的字符，如：/de+f/指def、deef、deeeeef等
	2、字符[ ]和[^] ：
	[ ]意味着匹配一组字符中的一个，如/a[0123456789]c/将匹配a加数字加c的字符串；
	[^ ]表示除其之外的所有字符，如：/d[^eE]f/匹配d加非e字符加f的字符串
	
	3、字符*和?：
		*{0,}匹配0个、1个或多个相同字符，
		?{0,1}匹配0个或1个该字符
		+{1,,}
	4、匹配任意字符：字符"."匹配除换行外的所有字符，通常与*合用
	5、转义字符：如果你想在模式中包含通常被看作特殊意义的字符，须在其前加斜线“\”。
	6、匹配任意字母或数字：/[0-9a-zA-Z]/
	7、锚模式：
		^ ，仅匹配串首；
		$ 仅匹配串尾

三、模式匹配转义符

转义字符	描述	范围
\d	任意数字	[0-9]
\D	除数字外的任意字符	[^0-9]
\w	任意单词字符	[_0-9a-zA-Z]
\W	任意非单词字符	[^_0-9a-zA-Z]
\s	空白	[ \r\t\n\f]
\S	非空白	[^ \r\t\n\f]


四、两种特殊操作符

1.替换操作符
•语法：s/pattern/replacement/
其效果为将字符串中与pattern匹配的部分换成replacement。如：
	$string = "abc123def";
	$string =~ s/123/456/; # now $string = "abc456def";

2.翻译操作符
•语法：tr/string1/string2/
string2为替换部分，但其效果是把string1中的第一个字符替换为string2中的第一个字符，把string1中的第二个字符替换为string2中的第二个字符，依此类推。如：
	$string = "abcdefghicba";
	$string =~ tr/abc/def/; # now string = "defdefghifed"
当string1比string2长时，其多余字符替换为string2的最后一个字符；
当string1中同一个字符出现多次时，将使用第一个替换字符。

========================================
子程序（函数）
----------------------------------------
1.系统提供的函数
数学函数
	abs
	sin
	cos








2.自定义函数

•定义
sub subroutine
{
	statements;
}
•调用
	&subname; Perl5.0以下版本
	subname;
	do subname;
•返回值
	return (retval); #retval可以为列表


	
例1：#子程序接收参数使用特殊数组@_标明，
#第一个参数是$_[0],第二个是$_[1],依次类推。

$c=add(2,3);
print(add($c,100));

#函数可以先定义再使用
sub add{
	my($a,$b)=@_; # 接收2个参数
	return($a+$b); #返回结果
}



例2：#传递任意个普通参数
$c=add(2,3,4);
print($c);

#可以传递很多参数
sub add{
	my $i; #加my是局部变量
	for($i=0; $i<=$#_;$i++){
		print($_[$i],"\n");
	}
}

print("\$i的值是：",$i);


例3：传递数组的函数














========================================
Perl 程序片段讲解
----------------------------------------
见github.com/dawnEve/bioToolKit/Perl/day2
•dna_to_aa.pl
•reverse_complement.pl
•generate_random_dna.pl

1.#分割一行中的每个字符。
$line="this is a cat";

my @charArr=split("",$line);
foreach my $char (@charArr){
	print $char."\n";
}










========================================
Perl资源
----------------------------------------
•ActivePerl
ActivePerlis the industry-standard Perl distribution available for Windows etc.
http://www.activestate.com/activeperl

•CPAN
Comprehensive Perl Archive Network。第三方代码库，包含Perl模块、脚本、软件源码
http://www.cpan.org/

•Bioperl
http://www.bioperl.org
BioPerlis a collection of Perl modules that facilitate the development of Perl scripts for bioinformatics applications.


========================================
----------------------------------------


========================================
----------------------------------------
