
Less快速入门

Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。

Less 可以运行在 Node、浏览器和 Rhino 平台上。网上有很多第三方工具帮助你编译 Less 源码。

英文文档为主：http://lesscss.org/features/
参考
半中文翻译：http://less.bootcss.com/features/
	http://lesscss.cn/functions/

函数参考：
LESS提供了很多转换颜色、操作数组、做数学运算的函数。他们的文档被安排在函数参考部分。

========================================
浏览器上使用Less
----------------------------------------
在浏览器上跑 less.js 非常方便开发，但是不推荐用于生产环境。

作为 CSS 的一种扩展，Less 不仅完全兼容 CSS 语法，而且连新增的特性也是使用 CSS 语法。这样的设计使得学习 Less 很轻松，而且你可以在任何时候回退到 CSS。

那就开始吧，在页面中加入 .less 样式表的链接，并将 rel 属性设置为 "stylesheet/less"：
<link rel="stylesheet/less" type="text/css" href="styles.less" />

接下来，下载 less.js 并通过 <script></script> 标签将其引入，放置于页面的<head> 元素内：
<script src="less.js" type="text/javascript"></script>

提示:
务必确保在 less.js 之前加载你的样式表。
如果加载多个 .less 样式表文件，每个文件都会被单独编译。因此，一个文件中所定义的任何变量、mixin 或命名空间都无法在其它文件中访问 。

浏览器选项:
可选：在 <script src="less.js"></script> 之前，定义全局的 less 对象就可以为 Less.js 设置参数。


index.html源代码
<html>
<head>
	<meta charset='utf-8'>
	<!-- Main styles -->
	<link rel="stylesheet/less" type="text/css" href="css/main.less" />
	<!-- set options before less.js script -->
	<script>
	  less = {
		env: "development",
		async: false,
		fileAsync: false,
		poll: 1000,
		functions: {},
		dumpLineNumbers: "comments",
		relativeUrls: false,
		rootpath: ":/a.com/"
	  };
	</script>
	<!--
		<script src="less.js"></script>
		或者使用cdn：
	<script src="http://cdn.bootcss.com/less.js/1.7.0/less.min.js"></script>
	-->
	<script src="//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.3/less.min.js"></script>
</head>
<body>
<div id=header>
	<h1>开始LESS 002</h1>
</div>
</body>
</html>


样式表文件main.less源代码
@nice-blue: #5B83AD;
@light-blue: @nice-blue + #111;

#header {
  color: @light-blue;
}
/*注意，由于变量只能定义一次，其本质就是“常量”。*/

使用服务器环境运行，可见标题颜色已经改变，说明css起作用了。

这就是文件架构，下文只需要修改这个less文件。

========================================
概要：变量、混入、嵌套规则、嵌套指令和冒泡、运算、转码、函数、命名空间和可访问性、作用域、注释、导入
----------------------------------------
1.变量
下面是很好的自解释变量的例子：
@nice-blue: #5B83AD;
@light-blue: @nice-blue + #111;

#header {
  color: @light-blue;
}

查看输出：
打开浏览器，按F12打开控制台，或右击浏览器，选择审查元素。单击控制台的element标签，在head中找到style标签，里面就是输出的css内容。

输出：
#header {
  color: #6c94be;
}

注意：变量实际上是常量，只能被定义一次。


2.Mixins(混合，或许翻译为“混入”更好)
嵌套就是一套规则定义一堆特性。比如定义如下类：
.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

我们可以在其他规则中使用这些特性。我们需要的时候只需要在类中写上，比如：
#menu a {
  color: #111;
  .bordered;
}

.post a {
  color: red;
  .bordered;
}

.bordered类中的特性现在同时出现在了#menu a和.post a中了。也可以使用#ids选择器作为混合。

输出如下：
.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}


3.嵌套规则
除了级联样式，less允许嵌套样式。比如我们有如下css样式：
#header {
  color: black;
}
#header .navigation {
  font-size: 12px;
}
#header .logo {
  width: 300px;
}
使用less，我们可以这样定义：
#header {
  color: black;
  .navigation {
    font-size: 12px;
  }
  .logo {
    width: 300px;
  }
}

这样的代码更简洁，并且模拟了HTML的语法结构。

使用这种方法，你也可以用你的混入捆绑伪选择器。这有一个经典的清除浮动hack，使用混入重写（&代表当前选择器的父选择器）
.clearfix {
  display: block;
  zoom: 1;

  &:after {
    content: " ";
    display: block;
    font-size: 0;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

输出：
.clearfix {
  display: block;
  zoom: 1;
}

.clearfix:after {
  content: " ";
  display: block;
  font-size: 0;
  height: 0;
  clear: both;
  visibility: hidden;
}

父选择器的更多信息：http://less.bootcss.com/features/#parent-selectors-feature


4.Nested Directives and Bubbling 嵌套指令和冒泡
media 或 keyframe指令可以像选择器一样嵌套。指令相对于内部规则中其他元素，位于顶部，是相对顺序。这被称为冒泡。

条件指令，比如@Media, @supports 和 @document，也复制选择器到代码体中：
.screen-color {
  @media screen {
    color: green;
    @media (min-width: 768px) {
      color: red;
    }
  }
  @media tv {
    color: black;
  }
}

输出：
@media screen {
  .screen-color {
    color: green;
  }
}
@media screen and (min-width: 768px) {
  .screen-color {
    color: red;
  }
}
@media tv {
  .screen-color {
    color: black;
  }
}

剩余的非条件指令，如font-face or keyframes，也会冒泡。他们代码体中不改变：

#a {
  color: blue;
  @font-face {
    src: made-up-url;
  }
  padding: 2 2 2 2;
}

输出：
#a {
  color: blue;
  padding: 2 2 2 2;
}
@font-face {
  src: made-up-url;
}

5.Operations 运算
算术运算符（+-*/）都可以和任何数字、颜色或变量运算。
如果可能，数学运算可以带单位，运算前自动转换单位。结果是使用最左边明确标注的单位。
如果变换不可能或者意义不明确，单位将被忽略。不可能转换的例子：px到cm或rad到%；

// numbers are converted into the same units
@conversion-1: 5cm + 10mm; // result is 6cm
@conversion-2: 2 - 3cm - 5mm; // result is 1.5cm

// conversion is impossible
@incompatible-units: 2 + 5px - 3cm; // result is 4px

// example with variables
@base: 5%;
@filler: @base * 2; // result is 10%
@other: @base + @filler; // result is 15%

@base-color:#ccc;

#header{
	color: #ff0 / 2;
	background-color: @base-color + #111;
	height: 100% / 2 + @filler;
}

输出：
#header {
  color: #808000;
  background-color: #dddddd;
  height: 60%;
}


6.Escaping 转码
~"anything" or ~'anything'之间的内容将会原样输出。


.weird-element {
	content: ~"^//* some horrible but needed css hack";
}


输出：
.weird-element {
	content: ^//* some horrible but needed css hack;
}

7.Functions 函数
LESS提供了很多转换颜色、操作数组、做数学运算的函数。他们的文档被安排在函数参考部分。

使用这些函数相当简单。如下例子使用percentage转换0.5为50%，提高一个基本色的饱和度5%，然后设置背景色淡化25%，旋转8度。

@base: #f04615;
@width: 0.5;

.class {
  width: percentage(@width); // returns `50%`
  color: saturate(@base, 5%);
  background-color: spin(lighten(@base, 25%), 8);
}

输出：
.class {
  width: 50%;
  color: #f6430f;
  background-color: #f8b38d;
}

8.Namespaces and Accessors 命名空间和可访问性
不要和 CSS @namespace 或 namespace selectors混淆.

有时候，为了方便组织代码，或者仅仅是提供一些包装，你想要把混入分组。
用LESS就很直观，比如你可以在#bundle下捆绑一些混入和变量，便于以后重用或分配：
#bundle {
  .button {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &:hover {
      background-color: white
    }
  }
  .tab { ... }
  .citation { ... }
}

现在，你想在#header a中混入.button，你可以：
#header a {
  color: orange;
  #bundle > .button;
}

输出：
#bundle .button {
  display: block;
  border: 1px solid black;
  background-color: grey;
}

#bundle .button:hover {
  background-color: white;
}

#header a {
  color: orange;
  display: block;
  border: 1px solid black;
  background-color: grey;
}

#header a:hover {
  background-color: white;
}

Q:因为#bundle仅仅是定义用的，貌似不输出#bundle到css文件会更合理一些。
A:在混入后面加上()即可避免输出。如#bundle(){..}则不在生成#bundle .button等样式。


9.scope 作用域
Less中的作用域概念和编程语言中的很像。变量和混入现在本地找，如果找不到，编译器将在父作用域查找，以此类推。

@var: red;

#page {
  @var: white;
  #header {
    color: @var; // white
  }
}

变量和混入无需事先声明，所以如下Less代码和上面等同：
@var: red;

#page {
  #header {
    color: @var; // white
  }
  @var: white;
}

懒加载的更多细节：http://lesscss.org/features/#variables-feature-lazy-loading

10.Comments 注释
可以使用块状和行内注释。
/* One hell of a block
style comment! */
@var: red;

// Get in line!
@var: white;



11.Importing 导入
导入工作和期望中的很像。你可以导入一个.less文件，里面的所有变量都可以使用。
对于.less文件，扩展名是可选的。

@import "library"; // library.less
@import "typo.css";

在less.js导入前定义配置文件：
	<script>
	  less = {
		env: "development",
		async: false,
		fileAsync: false,
		poll: 1000,
		functions: {},
		dumpLineNumbers: "comments",
		relativeUrls: false,
		rootpath: "./css/"  //这里配置css文件的位置
		//rootpath: ":/a.com/"
	  };
	</script>
========================================
Variables 变量
----------------------------------------
http://lesscss.org/features/#variables-feature-variable-interpolation






========================================
Extend 扩展
----------------------------------------
http://lesscss.org/features/#extend-feature



========================================
Mixins 混入：从已有样式“混入”属性
----------------------------------------
http://lesscss.org/features/#mixins-feature




========================================
Parametric Mixins 带参数的混入：向混入中传递参数
----------------------------------------
http://lesscss.org/features/#mixins-parametric-feature





========================================
Mixins as Functions 作为函数的混入：从混入中返回变量或混入
----------------------------------------
http://lesscss.org/features/#mixins-as-functions-feature





========================================
Passing Rulesets to Mixins 向混入中传递整套规则：包装一个css块，定义一个混入
----------------------------------------
http://lesscss.org/features/#detached-rulesets-feature





========================================
Import Directives 导入指令：从其他样式表导入样式
----------------------------------------
http://lesscss.org/features/#import-directives-feature






========================================
Import Options 导入选项
----------------------------------------
http://lesscss.org/features/#import-options
Less提供几个css @import的扩展，为操作外部文件提供更多的灵活性。




========================================
Mixin Guards 条件混入
----------------------------------------
http://lesscss.org/features/#mixin-guards-feature



========================================
CSS Guards 条件css：选择器周边的if
----------------------------------------
http://lesscss.org/features/#css-guards-feature



========================================
Loops 循环：创建循环
----------------------------------------
http://lesscss.org/features/#loops-feature




========================================
Merge 合并：合并属性
----------------------------------------
http://lesscss.org/features/#merge-feature






========================================
Parent Selectors 父选择器：使用&指代父选择器
----------------------------------------
http://lesscss.org/features/#parent-selectors-feature



========================================
end
----------------------------------------



