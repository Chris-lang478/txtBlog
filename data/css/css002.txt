CSS3 教程之超级快速入门教程


css入门 https://www.jmjc.tech/less/14
css全部属性： https://www.w3school.com.cn/cssref/index.asp


========================================
css设计模式
----------------------------------------
CSS【Cascading Style Sheets】层叠样式表，它是一种定义网页样式的语言，作为 HTML 的一个补充。HTML 的工作是负责网页功能区块的规划，整体骨架的搭建，而 CSS 是在此基础上对这些 HTML 元素进行美化和渲染，可以说它们两个是一体的。

CSS 的标准同样也是由 W3C 拟定，到目前总共发行了三代 CSS1、CSS2、CSS3。

CSS1 实现了一些基础的样式功能，大部分是一些从 HTML 中独立出来的样式，比如 字体大小、颜色、边框、边距 ...

CSS2 提出了页面布局的概念，传统上页面布局使用的是 HTML 的 table 元素，这个版本新增了 浮动、定位 等概念。

CSS3 的初版在 2001 年提出，在今天还在不断的迭代完善，一些处于实验阶段，有争议未完全纳入标准的功能，不同厂商的浏览器的支持略有差别。目前比较流行的 Flex布局、em / rem 单位 都是 CSS3 的新标准，除此之外 CSS3 增加了 滤镜、动画效果 等一些高级特效，针对移动端多屏的兼容也做了不少优化 如 媒体查询、Columns ...



refer:
http://kb.cnblogs.com/page/551422/
css3 specs: https://www.w3.org/Style/CSS/specs.en.html



========================================
css 入门
----------------------------------------
1. 三种书写方式： 外部css文件、style标签、标签的style属性
建议不要和html搅到一起，尽量分开，方便维护和重用

<html>
	<head>
		<link rel="stylesheet" type="text/css" href="path_to/style.css"> <!-- 1. CSS 文件载入 -->
		<style>  
			/* 2. style标签载入  */
			p {color: red;}
		</style>
	</head>
	<body>
		<p style="font-size:50px">cascading style sheets</p> <!-- 3. style 属性载入 -->
	</body>
</html>





2. 优先级
不同执行 CSS 代码的方式，有不同的优先级别。

<style type="text/css">
p {
 color: yellow;
 color: green; /* 定义相同的样式会把之前的样式覆盖 */
}
</style>

<p style="color: red;"> hello </p> <!-- 属性定义样式的优先级最高 -->



如果想让属性保持最高的优先级别，可以使用 important 属性进行级别提升。
<style type="text/css"> 
p {
 color: yellow!important; /* 强制优先*/
 color: red; /* 无效 */
}
</style>

<p style="color: red;"> hello </p>  <!-- 无效 -->



由于对CSS的解释是自上而下的，对于一个元素的相同属性描述，放在下面的会覆盖掉位于上面的属性描述，因此我们在对元素的选择中一定要注意书写顺序	
a:visited {color: #00FF00; text-decoration: none}
a:hover {color: #FF00FF; text-decoration: underline}
采用这样的书写顺序，无论链接有没有被访问过，只要当鼠标移到链接上，链接都会变成蓝色并有下划线。但是，如果采用下面的书写顺序：

a:hover {color: #FF00FF; text-decoration: underline}
a:visited {color: #00FF00; text-decoration: none}
如果链接被访问过，则当你鼠标移到链接上时不会变成蓝色并有下划线，依然保持绿色。




3.样式继承
有一些样式属性，比如 字体 / 颜色 等在父类中定义之后，会继承到子类。但具备继承性质的属性很有限，就那么几个，这时可能需要用到 inherit 强行继承。

<p style="color: red;">
 <strong> hello </strong> <!-- strong 自动继承了 p 的字体颜色 -->
</p>

<p style="border: 1px solid orange">
 <strong style="border: inherit"> hello </strong> <!-- 强制继承父类的边框效果 -->
</p>





4.注释
.css 文件的注释语法是 /* */。
p { color: red;  /* 颜色红色 */ }


========================================
css 选择器
----------------------------------------
每一条css样式定义由两部分组成，形式如下： 选择器{样式} 
在{}之前的部分就是“选择器”。 “选择器”指明了{}中的“样式”的作用对象，也就是“样式”作用于网页中的哪些元素

css的选择器，
	类选择器(.small, .card), 
	标签选择器(p, div), 
	ID选择器(#submit, #response), 
	组合选择器(以上概念的组合，包括
		后代选择器(空格隔开): div .small 表示div中的.small，可以是“儿子”，也可以是“孙子”
		子选择器(>隔开): div>.small 表示div内直接包含的.small类，不包括div内的p内的<span class=small>。只能是“儿子”
		伪类选择器: a:link 没有被点击时, a:visited 点击过, a:hover 鼠标悬停时, 
		相邻同胞选择器: 标题h1元素后面紧跟了两个段落p元素，我们想定位第一个段落p元素 h1 + p {color:blue} 第二段不受影响
			+和~的区别：类似上面一个，两者都表示兄弟关系，但是+必须是“大哥+二哥”，~还能是“大哥~三弟”、“二哥~四妹”
	通用选择器: * 选择所有
		p *{}
	群组选择器，就是多个选择器属性一样时，选择器之间用逗号分隔，共用一套样式定义
		p,td,li{line-height:20px; color:#c00;}
	属性选择器：判断html标签的某个属性是否存在的方法来定义css
		[title] {margin-left: 10px} //选择具有 title 属性的所有元素；
		[title ^= 'this'] {margin-left: 15px} //选择属性title的值以this开头的所有元素
		[title $= 'this'] {margin-right: 15px} //选择属性title的值以this结尾的所有元素
		[title *= 'this'] {margin: 10px} //选择属性title 的值包含 this 的所有元素
	伪元素选择器：所有伪元素选择器都必须放在出现该伪元素的选择器的最后面，也就是说伪元素选择器不能跟任何派生选择器。
		div p:first-letter {font-size: 20px} //选择div元素里所有的p元素的第一个字母或汉字，如果把块元素转换成行内元素则就不支持了；
		box .main:first-line {color: #f00} //只有部分属性允许first-line：所有font属性、color、所有background属性、word-spacing、letter-spacing、text-decoration、vertical-align、text-transform、line-height
		body:before {content: 'The Start:'; display: block} //在body元素前插入文本内容'The Start:'，并设置其为块元素
		div:after {content: 'The end:'; border:1px dashed red;} //在div元素最后插入文本内容'The End.'，并用红色虚线框起这几个文字。
	结构性伪类选择器：
		:nth-child(n)，选择其父元素的第n个子元素或多个子元素，索引从1开始，当n用于表达式时索引从0开始!lte8
			div :nth-child(3) {color: green;} //匹配div包含的第三个子元素
	UI元素状态伪类选择器：
		:enabled，指定元素处于可用状态时的样式，一般用于input，select和textarea
		:disabled，指定元素处于不可用状态时的样式，一般用于input，select和textarea
		:checked，指定元素被选中状态时的样式，FF为-moz-checked一般用于checkbox和radio
#


refer:
https://www.w3school.com.cn/cssref/css_selectors.asp


	
========================================
css 颜色、单位、字体、文本、光标、背景
----------------------------------------

1.颜色
单位	描述
(颜色名)	颜色名称 (比如 red) 
rgb(x,x,x)	RGB 值 (比如 rgb(255,0,0))
rgb(x%, x%, x%)	RGB 百分比值 (比如 rgb(100%,0%,0%))
#rrggbb	十六进制数 (比如 #ff0000)，2位表示一种基本色，三原色值必须介于 00 与 FF 之间。


可以用以下方法来规定 CSS 中的颜色：
	十六进制色
		16进制颜色表：1600万种不同的颜色 https://www.w3school.com.cn/cssref/css_colors.asp
	RGB 颜色  p{background-color:rgb(255,0,0);}
	RGBA 颜色 p{background-color:rgba(255,0,0,0.5);}，最后的alpha 参数规定了对象的不透明度，介于 0.0（完全透明）与 1.0（完全不透明）的数字。
	HSL 颜色 p{background-color:hsl(120,65%,75%);}
		HSL 指的是 hue（色调）、saturation（饱和度）、lightness（亮度） - 表示颜色柱面坐标表示法。
			Hue 是色盘上的度数（从 0 到 360） - 0 (或 360) 是红色，120 是绿色，240 是蓝色。
			Saturation 是百分比值；0% 意味着灰色，而 100% 是全彩。
			Lightness 同样是百分比值；0% 是黑色，100% 是白色。
	HSLA 颜色： p{background-color:hsla(120,65%,75%,0.3);}
		增加alpha 通道参数，规定了对象的不透明度
	预定义/跨浏览器颜色名：全部预定义颜色 https://www.w3school.com.cn/cssref/css_colornames.asp
		17 种标准色是 aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, yellow。
#





2.尺寸
单位	描述
%	百分比
in	英寸
cm	厘米
mm	毫米
em	1em 等于当前的字体尺寸。2em 等于当前字体尺寸的两倍。例如，如果某元素以 12pt 显示，那么 2em 是24pt。
	在 CSS 中，em 是非常有用的单位，因为它可以自动适应用户所使用的字体。

ex	一个 ex 是一个字体的 x-height。 (x-height 通常是字体尺寸的一半。)
pt	磅 (1 pt 等于 1/72 英寸)
pc	12 点活字 (1 pc 等于 12 点)
px	像素 (计算机屏幕上的一个点)




3. 字体
常用的字体组合
font-family属性是多种字体的名称，作为一个"应变"制度，以确保浏览器/操作系统之间的最大兼容性。如果浏览器不支持的第一个字体，它尝试下一个的字体。

你想要的字体类型如果浏览器找不到，它会从通用的字体类型中找到与你相似的:
p{font-family:"Times New Roman", Times, serif}





4.文本
颜色 color:red;

(1)字体大小 p {font-size:14px;} 

为了避免Internet Explorer 中无法调整文本的问题，许多开发者使用 em 单位代替像素。
em的尺寸单位由W3C建议。
1em和当前字体大小相等。在浏览器中默认的文字大小是16px。
因此，1em的默认大小是16px。可以通过下面这个公式将像素转换为em：px/16=em
h1 {font-size:2.5em;} /* 40px/16=2.5em */
h2 {font-size:1.875em;} /* 30px/16=1.875em */
p {font-size:0.875em;} /* 14px/16=0.875em */


使用百分比和EM组合
在所有浏览器的解决方案中，设置 <body>元素的默认字体大小的是百分比：
body {font-size:100%;}
h1 {font-size:2.5em;}
h2 {font-size:1.875em;}
p {font-size:0.875em;}
该代码非常有效。在所有浏览器中，可以显示相同的文本大小，并允许所有浏览器缩放文本的大小。


(2)text-align：文本的对齐方式。当text-align设置为"justify"，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。

(3)设置或删除文本的装饰 h1 {text-decoration:overline;} #其他属性值line-through,underline;none;

(4)p {text-indent:50px;} 文本缩进

(5)p.uppercase {text-transform:uppercase;} #文本大小写转换 lowercase,capitalize

(6)字体加粗
三段文字设置不同的字体粗细：
p.normal {font-weight:normal;}
p.thick {font-weight:bold;}
p.thicker {font-weight:900;}

normal	默认值。定义标准的字符。
bold	定义粗体字符。
bolder	定义更粗的字符。
lighter	定义更细的字符。
100~900  400 等同于 normal，而 700 等同于 bold。




5.光标



6.背景






========================================
css 列表、表格
----------------------------------------




========================================
css3 动画效果
----------------------------------------
https://www.runoob.com/cssref/css-animatable.html

1.一些 CSS 属性是可以有动画效果的，这意味着它们可以用于动画和过渡。
动画属性可以逐渐地从一个值变化到另一个值，比如尺寸大小、数量、百分比和颜色。


<style> 
#myDIV
{
	width:300px;
	height:200px;
	background:red;
	animation:mymove 5s infinite; /*所有动画属性的简写属性，除了 animation-play-state 属性。*/
	/*Safari 和 Chrome:*/
	-webkit-animation:mymove 5s infinite;
}

@keyframes mymove /*规定动画。*/
	{
	from {background-color:red;}
	to {background-color:blue;}
}

/*Safari 和 Chrome:*/
@-webkit-keyframes mymove
{
	from {background-color:red;}
	to {background-color:blue;}
}
</style>

<p>背景颜色逐渐地从红色变化到蓝色：<p>
<div id="myDIV"></div>


在 CSS 中，background-color 属性是 可动画化（animatable） 的。
Internet Explorer 10、Firefox 和 Opera 支持 CSS 动画。
Safari 和 Chrome 通过带有前缀 -webkit-，支持 CSS 动画。



2.
https://www.w3school.com.cn/cssref/index.asp#animation



========================================
css 盒子模型、margin、padding，边框 border
----------------------------------------


========================================
|-- 一行显示多个，变成一行只显示一个
----------------------------------------
<style>
li a {display:block;}
</style>

========================================
css 浮动 float
----------------------------------------






========================================
css 定位 position: relative ，absolute ，fixed，static
----------------------------------------
position的四个属性值： relative ，absolute ，fixed，static


1.relative.html
<html>
<head>
<style type="text/css">
#parent div{border:1px solid black;
	display:block;
	width:100px;height:50px
}
#sub1
{
   position: absolute;
    padding: 0px;
    top: 70px;
	left:8px
}
</style>
</head>

<body>
<div id="parent">
     <div id="sub1">sub1</div>
     <div id="sub2">sub2</div>
</div>
</body>
</html>


(1)相对于谁？本身
relative属性相对比较简单，我们要搞清它是相对哪个对象来进行偏移的。答案是它本身的位置。

在上面的代码中，sub1和sub2是同级关系，如果设定sub1一个relative属性，比如设置如下CSS代码：
#sub1
{
   position: relative;
    padding: 5px;
    top: 5px;
    left: 5px;
}
我们可以这样理解，如果不设置relative属性，sub1的位置按照正常的文档流，它应该处于某个位置。但当设置sub1为的position为relative后，将根据top，right，bottom，left的值按照它理应所在的位置进行偏移，relative的“相对的”意思也正体现于此。

对于此，只需要记住，sub1如果不设置relative时它应该在哪里，一旦设置后就按照它理应在的位置进行偏移。


(2)对其他元素的影响？无影响
随后的问题是，sub2的位置又在哪里呢？答案是它原来在哪里，现在就在哪里，它的位置不会因为sub1增加了position的属性而发生改变。

如果此时把sub2的position也设置为relative，会发生什么现象？此时依然和sub1一样，按照它原来应有的位置进行偏移。


(3)相对于自身的哪个位置？左上角。
注意relative的偏移是基于对象的margin的左上侧的。





2. absolute 漂移出了正常的文档流！其他dom定位时当它不存在！
这个属性总是有人给出误导。说当position属性设为absolute后，总是按照浏览器窗口来进行定位的，这其实是错误的。实际上，这是fixed属性的特点。

当sub1的position设置为absolute后，其到底以谁为对象进行偏移呢？这里分为两种情况：

（1）当sub1的父对象parent也设置了position属性，且position的属性值为absolute或者relative时，也就是说，不是默认值的情况，此时sub1按照这个parent来进行定位。

注意，对象虽然确定好了，但有些细节需要您的注意，那就是我们到底以parent的哪个定位点来进行定位呢？如果parent设定了margin，border，padding等属性，那么这个定位点将忽略padding，将会从padding开始的地方(即只从padding的左上角开始)进行定位，这与我们会想当然的以为会以margin的左上端开始定位的想法是不同的。

接下来的问题是，sub2的位置到哪里去了呢 由于当position设置为absolute后，会导致sub1溢出正常的文档流，就像它不属于 parent一样，它漂浮了起来，在DreamWeaver中把它称为“层”，其实意思是一样的。此时sub2将获得sub1的位置，它的文档流不再基于 sub1，而是直接从parent开始。

（2）如果sub1不存在一个有着position属性的父对象，那么那就会以body为定位对象，按照浏览器的窗口进行定位，这个比较容易理解。





3. fixed
fixed是特殊的absolute，即fixed总是以body为定位对象的，按照浏览器的窗口进行定位。




4. static
position的默认值，一般不设置position属性时，会按照正常的文档流进行排列。


不好理解的是absolute，需要细细琢磨...






https://radzhang.iteye.com/blog/2277075





========================================
css3 响应式
----------------------------------------



========================================
css3 columns
----------------------------------------

========================================
css Flex
----------------------------------------
Flex 布局教程：语法篇 | 作者： 阮一峰 | 日期： 2015年7月10日
http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html

	
========================================
css3 阴影效果box-shadow
----------------------------------------
1. box-shadow 属性向框添加一个或多个阴影。
JavaScript 语法：	object.style.boxShadow="10px 10px 5px #888888"

语法
box-shadow: h-shadow v-shadow blur spread color inset;
值	描述
h-shadow	必需。水平阴影的位置。允许负值。
v-shadow	必需。垂直阴影的位置。允许负值。
blur	可选。模糊距离。
spread	可选。阴影的尺寸。
color	可选。阴影的颜色。请参阅 CSS 颜色值。
inset	可选。将外部阴影 (outset) 改为内部阴影。默认外阴影，加上该参数为内阴影。
阴影分为内阴影和外阴影两个效果，可以通过逗号添加多个阴影效果。
注：多层阴影，最内层优先级最高，之后依次降低。使用逗号“，”隔开。


交互式生成效果： https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Box-shadow_generator

预览效果： https://www.html.cn/tool/css3Preview/Box-Shadow.html
示例：
-moz-box-shadow:6px 8px 13px #333333; 
-webkit-box-shadow:6px 8px 13px #333333; 
box-shadow:6px 8px 13px #333333;


实例代码：
(1) 暗红背景，白字，黑色内阴影 https://jekyllrb.com/
.quickstart {
    background-color: #3F1F1F;
    color: #fff;
    margin: 60px 0;

    -webkit-box-shadow: inset 0 3px 10px rgba(0,0,0,0.4);
    -moz-box-shadow: inset 0 3px 10px rgba(0,0,0,0.4);
    box-shadow: inset 0 3px 10px rgba(0,0,0,0.4);
}

(2)灰色代码区，白字，黑色内阴影：https://jekyllrb.com/docs/
.highlight {
    background-color: #2b2b2b;
    color: #fff;
    max-width: 100%;
    overflow-x: auto;
    vertical-align: middle;
	
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
	
    -webkit-box-shadow: inset 0 1px 10px rgba(0,0,0,0.3), 0 1px 0 rgba(255,255,255,0.1), 0 -1px 0 rgba(0,0,0,0.5);
    -moz-box-shadow: inset 0 1px 10px rgba(0,0,0,0.3),0 1px 0 rgba(255,255,255,0.1),0 -1px 0 rgba(0,0,0,0.5);
    box-shadow: inset 0 1px 10px rgba(0,0,0,0.3),  /*向下1px（内阴影，则只有上边有效果），模糊10px，颜色黑色，不透明度0.3*/
		0 1px 0 rgba(255,255,255,0.1),  /*向下1px（外阴影，则只有下边有效果），白色，不透明度0.1*/
		0 -1px 0 rgba(0,0,0,0.5);  /*向上1px（外阴影，则只有上边有效果），黑色，不透明度0.5*/
}

(3)模拟card材质效果，鼠标悬停则阴影加重，离开阴影变淡
https://ucdavis-bioinformatics-training.github.io/
box-shadow的一些特殊效果主要通过第四个参数spread-radius来实现，它是一个很有用的参数，掌握它，发挥你的想象力和创造了，能创造好多炫丽的阴影效果。

/*materialize design*/
.main .right {
    /*
	position: relative;
    margin: .5rem 0 1rem 0;
    background-color: #fff;
	*/
    border-radius: 20px;

    transition: box-shadow 0.35s;
    box-shadow: 
		0 2px 2px 0 rgba(0,0,0,0.14), 
		0 1px 5px 0 rgba(0,0,0,0.12), 
		0 3px 1px -2px rgba(0,0,0,0.2);
}
.main .right:hover{
	transition:box-shadow .25s;
	box-shadow:
		0 8px 17px 0 rgba(0,0,0,0.2),
		0 6px 20px 0 rgba(0,0,0,0.19)
}




refer:
https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow



========================================
css3: transition 属性
----------------------------------------



========================================
----------------------------------------
