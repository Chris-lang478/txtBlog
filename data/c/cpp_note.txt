cpp_note
主要是为学习和使用 Rcpp 服务


========================================
c++教程与知识天梯
----------------------------------------
1. 入门版
很多对于会的人是常识的东西，对于初学者就是无法理解、很难的概念。

文字: https://www.runoob.com/cplusplus/cpp-tutorial.html

视频: https://www.bilibili.com/video/BV1Tb411j7uM
	本人配合《C++ prime》看，书中感觉裤子难懂的就来看视频，结果感觉效果十分显著
	黑马C/C++教程: 张涛老师Qt课程 https://www.bilibili.com/video/BV1jK4y1s73T?p=639
	黑马C++_13移动打车项目 https://www.bilibili.com/video/bv1G7411m7XQ


1)翁凯老师无论是 C、C++、Java 的视频都讲得非常深入浅出，只能说水平越是高的人讲的课越容易明白。
	https://study.163.com/course/introduction/271005.htm
	本课程以C++语言来介绍面向对象程序设计的原理和方法，
	内容包括面向对象程序设计基本原理和C++特有的语言特性。
	大致的章节包括基本理论、类与对象、构造与清除、函数、引用、继承与多态、拷贝构造、运算符重载、异常、模板和流等。
	本课程不涉及具体的C++开发环境，也不会涉及图形程序设计和网络程序设计等。

2)侯捷老师的八部曲：
侯捷C++ 标准 11 -14
侯捷STL 和 泛型编程
侯捷C++ 内存管理
侯捷C++面向对象高级开发
侯捷STL与泛型编程
侯捷 C++ Startup 揭密：C++ 程序的生前和死后

陈硕第三套、Linux CC++网络编程实践-陈硕






(2) 经典书单
C++
《A Tour of C++》
《Accelerated C++》
《C++ primer》
《STL源码解析》
《Effective C++》
《深度探索C++对象模型》
《C++设计与演化》






2. 核心知识点 第一层
(1) 第一层，通识
共同的、最基本的那些概念：变量、常量、类型、循环、判断、数组、字符串、对象、输入输出等

然后还有 C++ 中一些特有的东西，比如命名空间 namespace、引用、模板等。

以及如何使用一些 STL 中的类库，比如 string、vector、find 之类的东西。

然后就是辅以大量的练习。
	就那种 C++ 教程的课后练习题就足够了，类似水仙花数、四则运算计算器之类的东西。


(2) 第一层，cpp入门
到这里，你对 C++ 包含了哪些知识点大概有了一个整体的印象。并且能够写上百行左右的程序，但是还是很难写出一个优秀的类。

接下来需要进行全面和深入的学习，算是真正的入门：
《Accelerated C++》（美国斯坦福大学的经典教材）  
《C++ Primer》（大而全）  
《The C++ Programming Language》（C++之父 Bjarne Stroustrup 所著） 
这三本，其实各有优缺点，第一本优点是简短，仅仅两三百页，只有最为核心和主干的知识点。
而后两本则都是大而全，尤其是《The C++ Programming Language》。
这两本区别在于，一个是 C++ 大师所著，一本是 C++ 之父所著。

网上有人说 《C++Primer》是目前市面上唯一一本真正的从入门到精通的书，适合初学者；
《C++ Programming language》 是C++专家自学指南，顾名思义，适合有较深厚 C++ 功底的读者。
所以我推荐的顺序是：《Accelerated C++》->《C++ Primer》->《The C++ Programming Language》


对于这种上前页大部头我推荐的阅读方式是，以主题为划分，比如 C++ Primer 就明确的分为了：
	C++ 基础
	C++ 标准库
	类设计者的工具
	高级主题

如果有一定的基础的话，可以看着目录，看一些自己感兴趣的章节，完全没有必要从第一页开始挨着挨着读。

入门结束你应该掌握以下内容：
	基础语言
	类与面向对象
	输入输出
	字符串处理（类库和正则表达式）
	容器类库
	泛型算法

看着只有几个关键字，实际上每个展开都有很多内容需要学习。
学习过程中把后面的每一个练习题都自己敲一遍，自己多思考对比一下。
多用代码去验证自己的想法，尤其是指针、引用、构造、析构这些地方。
学习 C++ 以及日常开发一定要记得这几个网站，可以随时查阅一些语法的用法和标准库：
	cppreference
	cplusplus
	isocpp













========================================
环境搭建与 hello world 编译
----------------------------------------
2. 运行环境
(1) win7 本
忘了啥时候安装的了，看输出信息，是 Strawberry perl 自带的。
如果未安装 GCC，那么请按照 http://gcc.gnu.org/install/ 上的详细说明安装 GCC。

打开 git bash
$ g++ --version
g++.exe (x86_64-posix-seh, Built by strawberryperl.com project) 7.1.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ g++ -v
Using built-in specs.
COLLECT_GCC=C:\Strawberry\c\bin\g++.exe
COLLECT_LTO_WRAPPER=C:/Strawberry/c/bin/../libexec/gcc/x86_64-w64-mingw32/7.1.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../../../src/gcc-7.1.0/configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/mingw64 --enable-shared --enable-static --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --enable-libstdcxx-filesystem-ts=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --disable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=nocona --with-tune=core2 --with-libiconv --with-system-zlib --with-gmp=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-mpfr=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-mpc=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-isl=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-pkgversion='x86_64-posix-seh, Built by strawberryperl.com project' CFLAGS='-O2 -pipe -fno-ident -I/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include' CXXFLAGS='-O2 -pipe -fno-ident -I/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include' CPPFLAGS=' -I/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include' LDFLAGS='-pipe -fno-ident -L/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/lib -L/opt/build/prerequisites/x86_64-zlib-static/lib -L/opt/build/prerequisites/x86_64-w64-mingw32-static/lib '
Thread model: posix
gcc version 7.1.0 (x86_64-posix-seh, Built by strawberryperl.com project)





3. 运行示例

(1) 最简单的程序
$ cat main.cpp 
#include <iostream>
using namespace std;
int main()
{
    cout << "Hello, world!" << endl;
    return 0;
}

(2)编译
$ gcc main.cpp -lstdc++ -o main

最简单的编译方式：
$ g++ main.cpp

由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：
$ ./a.exe
Hello, world!



(3) 指定输出文件 -o
通常我们使用 -o 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：
$ g++ helloworld.cpp -o helloworld

执行 helloworld:
$ ./helloworld.exe
Hello, world!



(4) 如果是多个 C++ 代码文件，如 xx1.cpp、xx2.cpp，编译命令如下：

$ g++ xx1.cpp xx2.cpp -o xx
生成一个 xx 可执行文件。


(5) g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：
$ g++ -g -Wall -std=c++11 main.cpp






========================================
入门篇
----------------------------------------
https://www.runoob.com/cplusplus/cpp-stl-tutorial.html
https://github.com/0voice/cpp_new_features





========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------


