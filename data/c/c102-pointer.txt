C 语言 指针详解

在 C 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。
指针与内存是紧密相关的。指针变量本身需要占用内存空间，它保存的变量就是一个内存地址，也就是常说的它指向的地址。
下面列出了 C 程序员必须清楚的一些与指针相关的重要概念：


内存
	内存分配

指针
	数组：指针与数组是重点、难点
		数组指针，是指针，指向一个数组
		指针数组，是数组，其元素是指针
	结构体指针
	函数参数接收指针
	函数返回指针
	函数指针: 函数作为指针传给函数


指针与高维数组(3维起步)
	相互表示: 函数名和指针的替换与异同
	作为函数参数
	作为函数返回值







========================================
内存分配
----------------------------------------
1. 编译阶段已经分配内存




2. 不同变量在内存的位置
C 语言重要的内存区域主要是 栈区、堆区、全局/静态区、常量区、函数区

(1) 代码 
#include <stdio.h>
#include <stdlib.h>
//定义全局变量
int init_global_a = 1;
int uninit_global_a;
static int inits_global_b = 2;
static int uninits_global_b;
const int ci=125;
void output(int a)
{
	printf("hello");
	printf("%d",a);
	printf("\n");
}

int main( )
{   
	//定义局部变量
	int a=2;
	static int inits_local_c=2, uninits_local_c;
    int init_local_d = 1;
    output(a);
    char *p;
    char str[10] = "lyy";
    //定义常量字符串
    char *var1 = "1234567890";
    char *var2 = "qwertyuiop";
    int *var3 = (int*) 123456;
    //动态分配
    int *p1=malloc(4);
    int *p2=malloc(4);
    //释放
    free(p1);
    free(p2);
    printf("栈区-变量地址\n");
    printf("                a：%p\n", &a);
    printf("                init_local_d：%p\n", &init_local_d);
    printf("                p：%p\n", &p);
    printf("              str：%p\n", str);
    printf("\n堆区-动态申请地址\n");
    printf("                   %p\n", p1);
    printf("                   %p\n", p2);
    printf("\n全局区-全局变量和静态变量\n");
    printf("\n.bss段\n");
    printf("全局外部无初值  uninit_global_a：%p\n", &uninit_global_a);
    printf("静态外部无初值 uninits_global_b：%p\n", &uninits_global_b);
    printf("静态内部无初值  uninits_local_c：%p\n", &uninits_local_c);
    printf("\n.data段\n");
    printf("全局外部有初值  init_global_a：%p\n", &init_global_a);
    printf("静态外部有初值 inits_global_b：%p\n", &inits_global_b);
    printf("静态内部有初值  inits_local_c：%p\n", &inits_local_c);
    printf("\n文字常量区\n");
    printf("文字常量地址     ：%p\n",var1);
    printf("文字常量地址     ：%p\n",var2);
    printf("整型常量地址     ：%p\n",var3);
    printf("整型const地址    ：%p\n", &ci);
    printf("\n代码区\n");
    printf("程序区地址       ：%p\n",&main);
    printf("函数地址         ：%p\n",&output);
    return 0;
}




(2) win 10 下运行结果
D:\Desktop>gcc --version
gcc (x86_64-posix-seh, Built by strawberryperl.com project) 7.1.0
Copyright (C) 2017 Free Software Foundation, Inc.

D:\Desktop>gcc a2.c

D:\Desktop>a.exe
hello2
栈区-变量地址
                a：000000000061FDF4
                init_local_d：000000000061FDF0
                p：000000000061FDE8
              str：000000000061FDDE

堆区-动态申请地址
                   00000000006D6DD0
                   00000000006D6DF0

全局区-全局变量和静态变量

.bss段
全局外部无初值  uninit_global_a：0000000000407970
静态外部无初值 uninits_global_b：0000000000407030
静态内部无初值  uninits_local_c：0000000000407034

.data段
全局外部有初值  init_global_a：0000000000403010
静态外部有初值 inits_global_b：0000000000403014
静态内部有初值  inits_local_c：0000000000403018

文字常量区
文字常量地址     ：000000000040400D
文字常量地址     ：0000000000404018
整型常量地址     ：000000000001E240
整型const地址    ：0000000000404000

代码区
程序区地址       ：0000000000401597
函数地址         ：0000000000401560

D:\Desktop>
结论: win10 下的栈地址是逐步降低的，也就是向下生长的。





(3) Ubuntu 20.04 下 
$ gcc --version
gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
Copyright (C) 2019 Free Software Foundation, Inc

$ gcc 14_address2.c 
wangjl@YStation:~/data/project/linux_C/base/07_memory$ ./a.out 
hello2
栈区-变量地址
                a：0x7ffc78c33950
                init_local_d：0x7ffc78c33954
                p：0x7ffc78c33958
              str：0x7ffc78c3398e

堆区-动态申请地址
                   0x563c8aebd6b0
                   0x563c8aebd6d0

全局区-全局变量和静态变量

.bss段
全局外部无初值  uninit_global_a：0x563c89af4028
静态外部无初值 uninits_global_b：0x563c89af4020
静态内部无初值  uninits_local_c：0x563c89af4024

.data段
全局外部有初值  init_global_a：0x563c89af4010
静态外部有初值 inits_global_b：0x563c89af4014
静态内部有初值  inits_local_c：0x563c89af4018

文字常量区
文字常量地址     ：0x563c89af2015
文字常量地址     ：0x563c89af2020
整型常量地址     ：0x1e240
整型const地址    ：0x563c89af2008

代码区
程序区地址       ：0x563c89af122c
函数地址         ：0x563c89af11e9


结论: ubuntu 下的栈地址是逐步增长的。



(4) CentOS7.9 下 
$ gcc --version
gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
Copyright (C) 2015 Free Software Foundation, Inc.

结论: win10 下的栈地址是逐步降低的，也就是向下生长的。

$ gcc a2.c 
$ ./a.out 
hello2
栈区-变量地址
                a：0x7ffe2118ce14
                init_local_d：0x7ffe2118ce10
                p：0x7ffe2118ce08
              str：0x7ffe2118cdf0

堆区-动态申请地址
                   0x2231010
                   0x2231030

全局区-全局变量和静态变量

.bss段
全局外部无初值  uninit_global_a：0x60106c
静态外部无初值 uninits_global_b：0x601064
静态内部无初值  uninits_local_c：0x601068

.data段
全局外部有初值  init_global_a：0x601054
静态外部有初值 inits_global_b：0x601058
静态内部有初值  inits_local_c：0x60105c

文字常量区
文字常量地址     ：0x40096d
文字常量地址     ：0x400978
整型常量地址     ：0x1e240
整型const地址    ：0x400960

代码区
程序区地址       ：0x400687
函数地址         ：0x40064d




(5) CentOS7.9, 

$ gcc --version
gcc (GCC) 12.1.0
Copyright (C) 2022 Free Software Foundation, Inc.

$ gcc -save-temps=obj a2.c 
[wangjl@bio_svr1 test]$ ./a.out 
hello2
栈区-变量地址
                a：0x7ffde0d233a4
                init_local_d：0x7ffde0d233a0
                p：0x7ffde0d23398
              str：0x7ffde0d2338e

堆区-动态申请地址
                   0x74f010
                   0x74f030

全局区-全局变量和静态变量

.bss段
全局外部无初值  uninit_global_a：0x601070
静态外部无初值 uninits_global_b：0x601074
静态内部无初值  uninits_local_c：0x601078

.data段
全局外部有初值  init_global_a：0x601060
静态外部有初值 inits_global_b：0x601064
静态内部有初值  inits_local_c：0x601068

文字常量区
文字常量地址     ：0x400945
文字常量地址     ：0x400950
整型常量地址     ：0x1e240
整型const地址    ：0x400938

代码区
程序区地址       ：0x40066d
函数地址         ：0x400632







========================================
指针的算术运算: 可以对指针进行四种算术运算：++、--、+、-
----------------------------------------

假设 ptr 是一个指向地址 1000 的整型指针，是一个 32 位的整数，让我们对该指针执行下列的算术运算：

ptr++
在执行完上述的运算之后，ptr 将指向位置 1004，因为 ptr 每增加一次，它都将指向下一个整数位置，即当前位置往后移 4 个字节。这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置。
如果 ptr 指向一个地址为 1000 的字符，上面的运算会导致指针指向位置 1001，因为下一个字符位置是在 1001。


例1： 数组变量名就是一个指针。
#include<stdio.h>
const int MAX =3;
int main(){
  int var[]={10,100,200};
  int i, *ptr;
  ptr=var; //指针中的数组地址
  printf("%p\n", var );

return 0;
}
输出 0x7ffeefc3662c




例2： 递增一个指针

我们喜欢在程序中使用指针代替数组，因为变量指针可以递增，而数组不能递增，数组可以看成一个指针常量。
下面的程序递增变量指针，以便顺序访问数组中的每一个元素：

#include<stdio.h>
const int MAX =3;
int main(){
  int var[]={10,100,200};
  int i, *ptr;
  ptr=var; //指针中的数组地址
  printf("%p, value=%d, %d\n", var, *var, var[0]);
  for(i=0;i<MAX; i++){
    printf("存储地址: var[%d]=%p; ", i, ptr);
    printf("值：var[%d]=%d \n", i, *ptr);
    ptr++;//移动指针到下一个位置
  }
return 0;
}

输出： 
0x7ffeb613940c, value=10, 10  #数组名就是指针，指向数组or数组第一个值，*var则取出该值，等价于var[0]；
存储地址: var[0]=0x7ffeb613940c; 值：var[0]=10 
存储地址: var[1]=0x7ffeb6139410; 值：var[1]=100 
存储地址: var[2]=0x7ffeb6139414; 值：var[2]=200



例3：递减一个指针。
取值第三个元素时，加上%符号就获得了该位置的指针。

#include<stdio.h>
const int MAX =3;
int main(){
  int var[]={10,100,200};
  int i, *ptr;
  ptr= &var[MAX-1]; //指针指向数组第三个元素
  printf("%p, value[2]=%d\n", &var[2], var[2]);
  for(i=MAX;i>0; i--){
    printf("存储地址: var[%d]=%p; ", i, ptr);
    printf("值：var[%d]=%d \n", i, *ptr);
    ptr--;//移动指针到下一个位置
  }
return 0;
}

输出:
0x7fffca52e114, value[2]=200
存储地址: var[3]=0x7fffca52e114; 值：var[3]=200 
存储地址: var[2]=0x7fffca52e110; 值：var[2]=100 
存储地址: var[1]=0x7fffca52e10c; 值：var[1]=10





例4： 指针的比较
指针可以用关系运算符进行比较，如 ==、< 和 >。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。

只要变量指针所指向的地址小于或等于数组的最后一个元素的地址 &var[MAX - 1]，则把变量指针进行递增：

#include<stdio.h>
const int MAX =3;
int main(){
  int var[]={10,100,200};
  int i, *ptr;
  ptr= var; //指针指向数组第1个元素第一个元素的地址
  i=0;
  while(ptr<= &var[MAX-1]){
    printf("存储地址: var[%d]=%p; ", i, ptr);
    printf("值：var[%d]=%d \n", i, *ptr);
    ptr++;
    i++;
  }
return 0;
}

输出： 
存储地址: var[0]=0x7ffc354838ac; 值：var[0]=10 
存储地址: var[1]=0x7ffc354838b0; 值：var[1]=100 
存储地址: var[2]=0x7ffc354838b4; 值：var[2]=200




========================================
指针数组: 可以定义用来存储指针的数组
----------------------------------------

1.一个数组 int  var[] = {10, 100, 200};
我们把其每个元素的地址保存到一个数组中：int *ptr[MAX];
数组的每个元素都是指向int值的指针: ptr[0]=&var[0]
取值的时候可以var[0], 或者 *ptr[0]。 递增的时候，可以使用 ptr++ //todo

#include <stdio.h>
int main(){
  int var[]={10,200,30};
  int i, *ptr[3];
  for(i=0;i<3;i++){
    ptr[i]=&var[i];
  }
  for(i=0; i<3; i++){
    printf("Value of var[%d]=%d or %d, pointer=%p \n",i,var[i], *ptr[i], ptr[i] );
  }
  return 0;
}

输出结果：
Value of var[0]=10 or 10, pointer=0x7ffc8702e764 
Value of var[1]=200 or 200, pointer=0x7ffc8702e768 
Value of var[2]=30 or 30, pointer=0x7ffc8702e76c 






2.用一个指向字符的指针数组来存储一个字符串列表
#include<stdio.h>
int main(){
  char *names[]={"Tom", "Jim", "Robin", "Page"};
  char *tmp;
  int i=0;
  for(;i<4;i++){
    tmp=names[i];
    printf("pointer[%d]=%p, value: %s;   char1=%c\t", i, names[i], names[i], *names[i]); //字符串本质是字符的数组，所以它记录的就是该数组的首元素的地址。
    printf("__point[%d]=%p, char2=%c; char1=%c;\n", i, tmp, *tmp, *tmp++);  //这里为什么char1和char2是这个顺序？
  }
  return 0;
}


输出： 
pointer[0]=0x5624e5dda838, value: Tom;   char1=T        __point[0]=0x5624e5dda839, char2=o; char1=T;
pointer[1]=0x5624e5dda83c, value: Jim;   char1=J        __point[1]=0x5624e5dda83d, char2=i; char1=J;
pointer[2]=0x5624e5dda840, value: Robin;   char1=R      __point[2]=0x5624e5dda841, char2=o; char1=R;
pointer[3]=0x5624e5dda846, value: Page;   char1=P       __point[3]=0x5624e5dda847, char2=a; char1=P;

//todo
可能是因为形式赋值，和实质赋值不是一个时间？
++前先给了值，所以是第一个字符； 而其本身已经是第二个字符了。

实例2:
#include<stdio.h>
int main(){
  char *names[]={"Tom", "Jim", "Robin", "Page"};
  char *tmp;
  int i=0;
  for(;i<4;i++){
    printf("pointer[%d]=%p, value: %s;   char1=%c\t", i, names[i], names[i], *names[i]);
    tmp=names[i]++; //tmp还是第一个字符的地址， names中已经移动到第二个字符了
    printf("__point[%d]=%p, char1=%c; char2=%c;\n", i, tmp, *tmp, *names[i]);
  }
  return 0;
}
输出:
pointer[0]=0x557d73d88848, value: Tom;   char1=T        __point[0]=0x557d73d88848, char1=T; char2=o;
pointer[1]=0x557d73d8884c, value: Jim;   char1=J        __point[1]=0x557d73d8884c, char1=J; char2=i;
pointer[2]=0x557d73d88850, value: Robin;   char1=R      __point[2]=0x557d73d88850, char1=R; char2=o;
pointer[3]=0x557d73d88856, value: Page;   char1=P       __point[3]=0x557d73d88856, char1=P; char2=a;






3. 指针数组和数组指针的区别
要看结尾词！

(1)指针数组
指针数组：指针数组可以说成是”指针的数组”，首先这个变量是一个数组。
其次，”指针”修饰这个数组，意思是说这个数组的所有元素都是指针类型。
在 32 位系统中，指针占四个字节。

数组指针
数组指针：数组指针可以说成是”数组的指针”，首先这个变量是一个指针。
其次，”数组”修饰这个指针，意思是说这个指针存放着一个数组的首地址，或者说这个指针指向一个数组的首地址。

根据上面的解释，可以了解到指针数组和数组指针的区别，因为二者根本就是两种类型的变量。


(2)
指针数组：表示的是一个由指针变量组成的数组，也就是说其中的元素都是指针变量。

数组指针：表示的是这是个指向数组的指针，那么该指针变量存储的地址就必须是数组的首地址，得是个指向行的地址，如 a[2][3] 数组中的 a，a+1 等，不能是具体的指向列的地址，如 &a[0][1], &a[1][1] 这类地址。








========================================
指向指针的指针: C 允许指向指针的指针。
----------------------------------------
指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。
当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。

pointer1   pointer2    Variable
Address  -> Address  -> Value

一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针：
int **var;

当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要使用两个星号运算符
本身第第一个指针(指向第二个指针)，加一个星号是第二个指针(指向值)，加2个星号才取到值。


例1： 
#include<stdio.h>
int main(){
 int var=100;
 int *ptr;
 int  **pptr;

 ptr=&var; //获取var的地址
 pptr=&ptr; //获取 ptr的地址

 //获取值
 printf("value of var=%d\n", var);
 printf("value by ptr=%p, *ptr=%d\n", ptr, *ptr);
 printf("value by pptr=%p, *pptr=%p( == ptr), **pptr=%d\n", pptr, *pptr, **pptr);

 return 0;
}

输出：
value of var=100
value by ptr=0x7ffedff40f04, *ptr=100
value by pptr=0x7ffedff40f08, *pptr=0x7ffedff40f04( == ptr), **pptr=100




例2: 二维数组与指针
$ cat a1.c
#include <stdio.h>
int main() {
	int i, j, b[3][3]={1, 2, 3, 4, 5, 6, 7, 8, 9}, *pt; 
	printf("The original array is:\n");
	for(i=0; i<3; i++) {
		for(j=0; j<3; j++) {
			printf(" %d", b[i][j]); 
		}
		printf("\n");
	}
	printf("\n\n");
	
	printf("The following variables are equivalent:\n");
	printf("*b=%p\n", *b);
	printf("b[0]=%p\n", b[0]);
	printf("&b[0][0]=%p\n", &b[0][0]);
	printf("\n\n"); 
	
	/*Here is the method to access the content using double pointer. */
	for(i=0; i<3; i++) {
		for(j=0; j<3; j++) {
			printf(" %d", *(*(b+i)+j));
		}
		printf("\n"); 
	}
}

编译和运行
$ gcc a1.c -o a1.out
$ ./a1.out 
The original array is:
 1 2 3
 4 5 6
 7 8 9


The following variables are equivalent:
*b=0x7ffdbec16380
b[0]=0x7ffdbec16380
&b[0][0]=0x7ffdbec16380


 1 2 3
 4 5 6
 7 8 9



####
And as you may notice, in the example above, b is the name of the 2-dimensional array. It’s also the address of its first element. But differing from one-dimensional array, the first element is an array which contains 3 integers. 
So the following pairs of variable are equivalent
'b' and '&b[0]', '(b+1)' and '&b[1]', '(b+2)' and '&b[2]'
'b[0]' and '&b[0][0]', 'b[1]' and '&b[1][0]', 'b[2]' and '&b[2][0]'

That means: in the 2-dimensional array, the array name b is a double pointer which points to the pointer b[0]. And then the pointer b[0] points to the first element b[0][0].
对于二维数组，数组名b是一个双指针，指向指针 b[0]，而 b[0] 又指向第一个元素 b[0][0]。















========================================
传递指针给函数: 通过地址传递参数，使传递的参数在调用函数中被改变
----------------------------------------
C 语言允许您传递指针给函数，只需要简单地声明函数参数为指针类型即可。

下面的实例中，我们传递一个无符号的 long 型指针给函数，并在函数内改变这个值：

例1：接收指针的函数
#include<stdio.h>
#include<time.h>
void getSeconds(unsigned long *per);

int main(){
 unsigned long sec=0;
 printf("sec=%ld\n", sec);
 getSeconds( &sec ); //输出被改变后的值
 printf("Number of seconds: %ld\n", sec);
 return 0;
}

void getSeconds(unsigned long *par){
 *par=time(NULL);
 return;
}

输出： 
sec=0
Number of seconds: 1564059253




能接受指针作为参数的函数，也能接受数组作为参数
例2：接收指针数组的函数
#include<stdio.h>
double getAverage(int *arr, int size);


int main(){
 int balance[5]={1000,2,3,17,50}; //有5个元素的整数型数组 
 double avg;
 
 printf("the para=%p, 1st element=%d \n", balance, *balance);
 avg=getAverage( balance, 5); //指向数组的指针作为参数

 printf("Average value is: %f\n", avg);
 return 0;
}

double getAverage(int *arr, int size){
        int i, sum=0;
        double avg;
        for(i=0;i<size;i++){
                sum+=arr[i];
        }
        avg=(double)sum/size;
        return avg;
}

输出： 
the para=0x7ffcdd27e500, 1st element=1000 
Average value is: 214.400000




例3: 在外部函数中，加倍每个数组元素的值（数组是按照地址传递）
#include<stdio.h>
void doubleInt(int *arr,int size);

int main(){
        int i,r[5]={1,2,3,4,5};
        for(i=0;i<5;i++){ printf("a[%d]=%d, ",i,r[i]);} 
        printf("\n");

        doubleInt(r,5);
        for(i=0;i<5;i++){ printf("a[%d]=%d, ",i,r[i]); }
        printf("\n");
}

void doubleInt(int *arr, int size){
        int i=0;
        for(i=0;i<size;i++){
                arr[i]*=2;
        }
        return;
}
输出： 
a[0]=1, a[1]=2, a[2]=3, a[3]=4, a[4]=5, 
a[0]=2, a[1]=4, a[2]=6, a[3]=8, a[4]=10,





========================================
从函数返回指针: C 允许函数返回指针到局部变量、静态变量和动态内存分配
----------------------------------------
C 语言中可以从函数返回数组，类似地，C 允许您从函数返回指针。

声明一个返回指针的函数：
int * myFunction(){
//some code;
}


例1: 返回指针的函数，就是返回的数组名
#include<stdio.h>
#include<time.h>
#include<stdlib.h>

//要生成和返回随机数的函数 
int *getRandom(){
  static  int r[3];
  int i;
  srand( (unsigned)time(NULL) );
  for(i=0; i<3; i++){
    r[i]=rand();
    printf("arr[%d] = %d\n",i, r[i]);
  }
  return r;
}

int main(){
  int *p, i;
  p=getRandom();
  for(i=0; i<3; i++){
    printf("*(p + [%d]): %d;\n", i, *(p+i));
  }
}

输出： 
arr[0] = 1018462428
arr[1] = 1425683971
arr[2] = 1191730623
*(p + [0]): 1018462428;
*(p + [1]): 1425683971;
*(p + [2]): 1191730623;



另外，C 语言不支持在调用函数时返回局部变量的地址，除非定义局部变量为 static 变量。
如果上例中声明r时不加static，则会报错： a11.c:14:10: warning: function returns address of local variable [-Wreturn-local-addr]

从内存角度解释：C 不支持在调用函数时返回局部变量的地址，除非定义局部变量为 static 变量。
因为局部变量是存储在内存的栈区内，当函数调用结束后，局部变量所占的内存地址便被释放了，因此当其函数执行完毕后，函数内的变量便不再拥有那个内存地址，所以不能返回其指针。
除非将其变量定义为 static 变量，static 变量的值存放在内存中的静态数据区，不会随着函数执行的结束而被清除，故能返回其地址。






========================================
函数指针与回调函数，及静态库和动态库的实现方法
----------------------------------------
函数指针的主要用途是向其他函数传递“回调”，或者模拟类和对象。


1.函数指针是指向函数的指针变量。
通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。
函数指针可以像一般函数一样，用于调用函数、传递参数。


(1)函数指针变量的声明
声明一个指向同样参数、返回值的函数指针类型。格式：
int (*POINTER_NAME)(int a, int b)

简写: 只写参数类型，省略形参
int (*fun_ptr)(int,int); 


记住如何编写它的一个方法是：
编写一个普通的函数声明：int callme(int a, int b)
将函数用指针语法包装：int (*callme)(int a, int b)
将名称改成指针名称：int (*compare_cb)(int a, int b)


// case for a function pointer
typedef int (*compare_cb)(int a, int b);

就可以谁用类 compare_cb 了
int *bubble_sort(int *numbers, int count, compare_cb cmp)




例1： 函数指针
声明了函数指针变量 p，指向函数 max：

#include<stdio.h>
int max(int x, int y){
  return x>y?x:y;
}

int main(void){
  //*p是函数指针
  int (*p)(int ,int)= &max; // &可以省略
  int a,b,c,d;

  printf("请输入三个数字，space separated:");
  scanf("%d %d %d", &a, &b, &c);

  /* 与直接调用函数等价，d = max(max(a, b), c) */
  d=p( p(a,b), c);
  printf("最大的数字是: %d\n", d);

  return 0;
}
运行结果：
$ ./a12
请输入三个数字:23
34
56
最大的数字是: 56

或
$ ./a12
请输入三个数字:12 45 3
最大的数字是: 45



##
例2: 
我们首先定义了一个函数指针fuc ,这个函数指针的返回值为void型,然后我们给函数指针赋值，赋值为print,也就是print函数的首地址，此时fuc获得了print的地址，fuc的地址等于print的地址，所以最终调用fuc();也就相当于调用了print();

#include <stdio.h>
void print();
int main(void){
	void (*fuc)(); 
	fuc = print ; 
	fuc(); 	
} 
void print(){
	printf("hello world!\n");
}



例3：指向函数的指针，调用时加(*funName)也可以。
#include<stdio.h>
void bubbleSort(int arr[], int n){
	int i,j, tmp;
	for(i=0; i<n; i++){
		for(j=1; j<n; j++){
			if(arr[i]<arr[j]){
				tmp=arr[j];
				arr[j]=arr[i];
				arr[i]=tmp;
			}
		}
	}
}

int main(){
	int arr[]={0, -1,20,-300,4000}, N=sizeof(arr)/sizeof(int);
	void (*p)(int arr[], int N)=&bubbleSort;
	(*p)(arr, N);
	for(int i=0; i<N; i++){
		printf("%d ", arr[i]);
	}
	printf("\n");
}









2.函数指针作为某个函数的参数
函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。

简单讲：回调函数是由别人的函数执行时调用你实现的函数。


(1)以下是来自知乎作者常溪玲的解说：
你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。


(2)百度的权威解释如下：
回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。


(3)来自Stack Overflow某位大神
简洁明了的表述：A "callback" is any function that is called by another function which takes the first function as a parameter。 
也就是说，函数 F1 调用函数 F2 的时候，函数 F1 通过参数给 函数 F2 传递了另外一个函数 F3 的指针，在函数 F2 执行的过程中，函数F2 调用了函数 F3，这个动作就叫做回调（Callback），而先被当做指针传入、后面又被回调的函数 F3 就是回调函数。




例1: 回调示例
#include<stdio.h>
#include<stdlib.h>

//A函数，其一个参数是指针函数。在其函数体中调用被传入的函数。
void populate_array(int *array, int arraySize, int (*getNextValue)(void)){
  for(int i=0; i<arraySize; i++){
    array[i]=getNextValue(); //要用传入的函数，否则传入函数指针就没有意义了
  }
}

//回调函数。B函数，符合上述指针函数的格式即可。
int getNextRandomValue(void){
  return rand();
}

//调用A函数，在其参数中传入B函数
int main(void){
  int myarray[5];
  populate_array(myarray, 5, getNextRandomValue);
  for(int i=0; i<5; i++){
    printf("arr[%d] = %d\t",i,myarray[i]);
  }
  printf("\n");
  return 0;
}
输出：
arr[0] = 1804289383     arr[1] = 846930886      arr[2] = 1681692777     arr[3] = 1714636915     arr[4] = 1957747793

调用者要先写好这个回调函数的实例。才能调用 回调函数。
回调函数A相当于制定规则的，但具体函数体、函数名、函数实现不细化，具体细则还得调用者自己实现(即回调函数的实现)。

简单说：函数参数里有函数指针，指针指向的是函数地址，不是变量地址。这样，函数就可以随便写，都可以用这个回调函数当一个参数来调用，多方便。程序通用性就更强了！

回调函数的好处和作用，就是解耦。





## 回调函数示例
在 A 函数中将参数与 C 函数传递给 B 函数，B函数调用 C 函数；
B 函数调用的动作称为回调，C 函数称为回调函数。

#include <stdio.h>
// 回调函数a
void callback_a(int n){
    printf("Call callback_a, n: %d\n", n);
}

// 回调函数b
void callback_b(int n){
    printf("Call callback_b, n: %d\n", n);
}

// 回调动作：传入函数的指针
void callback_act(int x, void (*callback) (int var)){
    printf("Call callback_act, x: %d\n", x);
    callback(x);
}

void main(){
    int a = 1, b = 2;
    callback_act(a, callback_a);
    callback_act(b, callback_b);
    printf("Main program has done.");
}


输出：
Call callback_act, x: 1
Call callback_a, n: 1
Call callback_act, x: 2
Call callback_b, n: 2









例2: 带参数的回调。我们再写一个求平方、立方的例子，只需要写函数，改变传入的函数即可。符合开闭原则。

如何添加参数？
并不是直接把int Handle(int (*Callback)()) 改成 int Handle(int (*Callback)(int)) 就可以的，而是通过另外增加一个参数来保存回调函数的参数值，像这里 int Handle(int y, int (*Callback)(int)) 的参数 y。


#include<stdio.h>
#include<stdlib.h>

//Handle函数A，其一个参数是指针函数。在其函数体中调用被传入的函数。
void populate_array(int *array, int arraySize, int (*getNextValue)(int)){
  for(int i=0; i<arraySize; i++){
    array[i]=getNextValue(i);
  }
}

//Callback 回调函数 返回平方。B函数，符合上述指针函数的格式即可。
int power2(int i){
  return i*i;
}
//回调函数 返回立方
int power3(int i){
  return i*i*i;
}


//调用A函数，在其参数中传入B函数
int main(void){
  int myarray[5];
  //传入平方函数
  populate_array(myarray, 5, power2);
  for(int i=0; i<5; i++){
    printf("%d, ",myarray[i]);
  }
  printf("\n");
  
  //换一个函数，立方函数
  populate_array(myarray, 5, power3);
  for(int i=0; i<5; i++){
    printf("%d, ",myarray[i]);
  }
  printf("\n");

  return 0;
}
输出结果： 
0, 1, 4, 9, 16, 
0, 1, 8, 27, 64,








例3: 库的实现方式。用于在回调函数中自定义运算规则。

#include<stdio.h>

//#include<softwareLib.h> // 包含Library Function所在读得Software library库的头文件
//本该在 Library 中的函数，用户知道怎么调用即可，无需知道内部细节。
int Handle(int a, int b, int (*operator)() ){
  //return (*operator)(a,b); //(*add_value)(a+b) 和直接运行 add_value(a+b) 结果相同。
  return operator(a,b);
}


//Callback Function 用户自定义实现的回调函数
int operator(); //可以不带参数的简单声明，在main后再定义
int operator2(int x, int y){ return x-y;}
int operator3(int x, int y){ return (x+y)*2;} //用户自定义函数
int operator4(int x, int y){ return x*x + y*y;}

int main(){
  int a=12,b=4;
  printf("Result of %d x?x %d = %d\n",a, b,  Handle(a,b, operator) );
  printf("Result of %d x?x %d = %d\n",a, b,  Handle(a,b, operator2) );
  printf("Result of %d x?x %d = %d\n",a, b,  Handle(a,b, operator3) );
  printf("Result of %d x?x %d = %d\n",a, b,  Handle(a,b, operator4) );
  return 0;
}

int operator(int x, int y){ return x+y;}

输出：
Result of 12 x?x 4 = 16
Result of 12 x?x 4 = 8
Result of 12 x?x 4 = 32
Result of 12 x?x 4 = 160


在回调中，主程序把回调函数像参数一样传入库函数。这样一来，只要我们改变传进库函数的参数，就可以实现不同的功能，这样有没有觉得很灵活？
并且丝毫不需要修改库函数的实现，这就是解耦。

再仔细看看，主函数和回调函数是在同一层的，而库函数在另外一层，想一想，如果库函数对我们不可见，我们修改不了库函数的实现，也就是说不能通过修改库函数让库函数调用普通函数那样实现，那我们就只能通过传入不同的回调函数了，这也就是在日常工作中常见的情况。


如果需要降低耦合度的时候，更应该使用回调函数。





refer:
C语言回调函数详解 https://www.cnblogs.com/jiangzhaowei/p/9129105.html
怎么使用回调函数制作libvendor.so文件: https://blog.csdn.net/morixinguan/article/details/65494239
静态库和动态库的使用和制作方法 https://blog.csdn.net/morixinguan/article/details/52451612





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------








========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------








========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------


