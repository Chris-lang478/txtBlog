数据结构

这是个体力活，需要时间、体力。
看得多了，练得多了，自然就会了，精通了。

https://www.geeksforgeeks.org/array-data-structure/?ref=ghm


[推荐] 可视化 https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
	https://blog.csdn.net/weixin_45622961/article/details/113361144

线性表 
栈和队列 
串
数组和广义表
树和二叉树
图
查找 
排序 



========================================
数据结构前言，及学习资料
----------------------------------------
1. 例子引入
(1) 图像修复技术
如何把人在海边的照片中，去掉人及其阴影。

关键技术：
	分成小块，“搜索”统计特征相同的小块。 -- 数据结构
	小块的边界处理。 -- 信号处理

在本图片中找不到统计特性相同的小块怎么办？
	网上搜索，参考其他图片。

(2) 水的模拟：粒子系统
用小球模拟，小球很小时候就近似表示液体了。
关键技术：
	多个小球模拟水的非线性运动
	例子多，效果好，运算量大
	如何减少运动量？中间用打球

(3) 人工智能

(4) 区块链
区(节点)+hash表+链表+分布式




2. 启示
(1)从生活和实际需求出发 -- 观察
抽象出模型 -- 数学模型 -- 才能解决它
程序模拟 -- 与其他方法的比较

实际问题 --> 模型 --> 模型的形式 
 --> 解决方案 --> 评估 --> 提出新的问题
 --> 实际应用


(2) 两个最重要的能力
抽象：不抽象，无法深入思考
还原：不还原，看不到本来面目。编码实现落地。

(3) 思维
计算机思维：是一个解决问题的流程。
理工科思维：数据、量化、逻辑 



3. 具体题目引入

有100桶水，中间有一桶含有害物质，一个志愿者可以试喝一桶或几桶中的水，喝到有害物质哪一桶2小时后会出现恶心、呕吐等症状，20min后恢复正常。请问要在3h内鉴定出是哪一桶，至少需要几个志愿者？

分析：2小时后有反应，没有机会试下一次了，也就是说没人只有一次机会，二分法无效？一次可以尝试喝n桶。

参考答案是：一个志愿者只测试一次，但是一次可以喝很多桶的水。
使用二进制表示喝与不喝，则共表示多少个编码？
1位: 1
2位: 1+2=3=2^2-1
3位: 1+2+4=7=2^3-1
6位: 2^6-1=63
7位: 2^7-1=127 种。

现在共有7个杯子，把1-100个桶编号写成二进制，比如
1号桶编号 0000001，则在#7杯中添加少量1号桶液体；
2号桶编号 0000010，则在#6杯中添加少量2号桶液体；
69=(2^6+2^2+1)2，1000101，则在#1,#5,#7号杯中添加液体。 
100=64+32+4=(1100100)，则在第#1,#2,#5号杯中添加液体。

任何一个桶中的异常，都对应着唯一一个二进制。
就看谁20分钟后呕吐了，就能组装好二进制，进而转为10进制，知道是哪一桶。



(2) 为什么是二进制？
因为和逻辑判断对应！
具体问题 转化为 逻辑问题，然后进一步 可编程问题。






4. 数据结构的学习
(1) 课程目标：解决什么问题？
(2) 解决这些问题的方法是什么？
是系统的方法还是一门技术？
(3) 有哪些实际应用？
如何运用这些理论和方法解决其他的问题，见前面的例子。



5. 如何学习数据结构？
三多
(1) 多动脑
深入理解问题的本质，抽象出模型

(2) 多动笔
纸上推演，深刻领会

(3) 多动手
上机编程实践


深度思考比勤奋编码更重要！




6. 书本资料
(1) 严蔚敏 清华大学出版社
《数据结构》C语言版
《数据结构题集》C语言版

学时 48(讲课+ 实验+演示)


(2) 




7. 视频资料
https://www.bilibili.com/video/BV15E411V7S2?p=2








========================================
数据结构绪论
----------------------------------------

1. 如何找最大值和次最大值？
方法1: 排序肯定可以，但是做多余计算了。
方法2: 一次循环求出最大值，第二次循环找出小于最大值的最大数。
https://github.com/miostudio/linux_C/tree/master/practice 练习题 p77.c 

方法3: 采用淘汰制或许更快。紧邻的两个比较，保留较大的，然后重复执行。
最后剩下的一个就是最大值。
而和最大值直接比较的才可能是次最大值。
//todo 不知道怎么记录和最大值比较的变量。


(2) 解决问题
- 找出一个解决方案
- 找出最优解。
	节省CPU
	节省内存


1) 判断表达式中括号是否匹配
简单版: 统计每个char，是(计数器+1，是)计数器-1,最后如果计数器==0，则匹配，否则不匹配。
反例：如果是 f=)a+b(; 符合上述程序，但是只能判断为不匹配。

2) 交叉路口交通管理系统
栈和队列。

3) 走迷宫问题。


(3) 非数值计算的程序设计问题
- 数据结构：数学 + 软件 + 硬件。
- 实际问题 抽象 -> 模型化，便于处理 ->存储结构，便于存放，算法 -> 分析 -> 回归模型，解释说明原始问题。









2. 数据结构的三个方面

(1) 逻辑结构
线性结构：线性表、栈，对，串，数组
非线性结构：树，图

- 集合：没有逻辑结构
- 线性结构：右前后关系，前驱元素，后继元素
- 树形结构：分叉
- 图形结构(网状结构)


(2) 物理结构/存储结构
- 顺序存储：连续的存储
- 链式存储：存储空间不要求连续，依靠指针关联前后
- 索引存储：索引也要占空间
- 散列存储：

(3) 数据的运算
基本的：插入、删除、修改、查找、排序
+-*/
字符串的复制、追加、截取、比较大小、查找等。







3. 抽象数据类型(ADT)
(1) Abstract Data Type, ADT.

ADT 是值一个数学模型，以及定义在该模型上的一组操作。
抽象数据类型=逻辑结构 + 数据运算的定义。
ADT是描述数据结构的一种理论工具，关注的是数据结构的特性，与物理结构、数据运算的实现无关，与编程语言也无关。


(2) 抽象数据类型的定义 (D,S,P)
- D 数据对象
- S 是D中数据元素关系的集合
- P 是对D的基本操作的集合。

ADT 抽象数据类型名{
	数据对象: <数据对象的定义>
	数据关系: <数据关系的定义>
	基本操作: <基本操作的定义>
} ADT 抽象数据类型名







4. 实现主要靠指针 + 结构体

C/C++越是底层的代码越是指针非常多，特别是二级甚至多级指针，还有非常复杂的函数指针。比如链表、红黑树、map、set、图等等各种数据结构底层实现都需要指针，指针拿到的是内存地址，修改数据非常方便，同时也避免大的结构体复制浪费内存。

尤其是函数指针、多级指针等，如果没有函数指针，那么回调、动态编程、泛型编程等基本没法实现了。







第3章 表、栈和队列
第4章 树
第5章 散列
第6章 优先队列（堆）

线性表：顺序表、链表、栈、队列

数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；


1. 视频课程 
Java：https://www.bilibili.com/video/BV1M7411f7aU?p=2

清华大学邓俊辉 数据结构 C/C++: https://www.bilibili.com/video/BV1C54y1L7JM?p=4

考研数据结构 https://www.bilibili.com/video/BV1oN411Q7Yz?p=2



2. 文字教程

https://www.cprogramming.com/algorithms-and-data-structures.html?inl=nv






========================================
数组
----------------------------------------
在C是基本数据结构，在内存中连续空间中存储。The elements are stored at contiguous memory locations 
常见的有栈数组。
还可以动态分配空间，保存堆中。

1. 数组初始化

(1) 先声明再赋值
int arr1[10];
arr1[0]=10;
arr1[2]=22;

(2) 一步
int arr[6] = { 10, 20, 30, 40 }



2. 查看地址
//查看元素在内存中的地址
#include <stdio.h>
int main(){
    int arr[5], i;

    printf("Size of integer in this compiler is %lu\n", sizeof(int));

    for (i = 0; i < 5; i++)
        // The use of '&' before a variable name, yields address of variable.
        printf("Address arr[%d] is %p\n", i, &arr[i]);
    return 0;
}

输出：
Size of integer in this compiler is 4
Address arr[0] is 0x7ffef77bd3d0
Address arr[1] is 0x7ffef77bd3d4
Address arr[2] is 0x7ffef77bd3d8
Address arr[3] is 0x7ffef77bd3dc
Address arr[4] is 0x7ffef77bd3e0







ref: https://www.cnblogs.com/zhujialei123/p/9182069.html






========================================
链表：单链表
----------------------------------------

1. 概念
一旦链表中某个节点的指针域数据丢失，那么意味着将无法找到下一个节点，该节点后面的数据将全部丢失。


前一个元素叫 前驱元素。
后一个元素叫 后继元素。
head -> note -> end -> NULL;

| next|  -> |d1, next| -> |d2, next| -> |NULL|
head 头元素没有值，只有一个指向下一个节点的指针。
end 末尾元素的指针指向NULL。
中间节点node都是有值，并指向下一个节点。



(2) 常见操作
作为有强大功能的链表，对他的操作当然有许多，比如：链表的创建，修改，删除，插入，输出，排序，反序，清空链表的元素，求链表的长度等等。






2. 单链表

(1) 单链表的创建与输出

$ cat 01.c 
#include<stdio.h>
#include<stdlib.h>

//定义链表数据类型，数据，及指向下一个元素的指针
typedef struct student{
	int score;
	struct student *next;
} LinkList;


//创建链表
LinkList *create(int n){
	LinkList *head, *node, *end;
	head=(LinkList *)malloc(sizeof(LinkList)); //get address
	end=head; //if empty, head and end are the same
	
	printf("请输入需要创建的%d个链表的值，回车结束\n", n);
	for(int i=0; i<n; i++){
		node=(LinkList *)malloc(sizeof(LinkList));
		scanf("%d", &node->score);
		end->next=node;//point to the last end
		end=node; //the new end;
	}
	end->next=NULL; //the last node
	return head;
}

//输出链表 
void print(LinkList* h){
	while(h->next!=NULL){
		h=h->next;
		printf("value=%d, next:%p\n", h->score, h->next );
	}
}


int main(){
	int N=3;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	return 0;
}

$ ./a.out 
请输入需要创建的3个链表的值，回车结束
10 20 30
value=10, next:0x55c10cf6fac0
value=20, next:0x55c10cf6fae0
value=30, next:(nil)



(2) 单链表删除节点
把前一个元素的指针指向下一个元素即可。

//把等于某个值的节点都删除
void delete(LinkList *h, int val){
	LinkList *pre;
	int flag=0;
	while(h->next!=NULL){
		pre=h;
		h=h->next;
		if(h->score==val){
			flag+=1;
			pre->next = h->next;
			free(h); //释放该节点内存
			
			if(pre->next != NULL){
				h=pre->next; //当前节点指向下一个节点
			}else{
				h=pre; //下一节点为NULL则指向上一个节点
			}
		}
	}
	if(!flag){
		printf("没有可删除的元素。\n");
	}else{
		printf("删除了%d个元素\n", flag);
	}
}


int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	printf("输入要删除元素的值\n");
	int del;
	scanf("%d", &del);
	delete(h, del);
	
	print(h);

	return 0;
}


测试，注意删除头尾时是否异常。

$ ./a.out 
请输入需要创建的4个链表的值，回车结束
10 20 30 20
value=10, next:0x559107f84ac0
value=20, next:0x559107f84ae0
value=30, next:0x559107f84b00
value=20, next:(nil)
输入要删除元素的值
20
删除了2个元素
value=10, next:0x559107f84ae0
value=30, next:(nil)




(3) 单节点修改元素
单循环，遇到相等的直接修改即可。

//修改链表的值 
void sup(LinkList* h, int old, int new){
	while(h->next!=NULL){
		h=h->next;
		if(h->score == old){
			h->score = new;
		}
	}
}


int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	printf("输入要替换元素的值, old new\n");
	int new, old;
	scanf("%d %d", &old, &new);
	sup(h, old, new);
	
	print(h);
	return 0;
}


$ ./a.out 
请输入需要创建的4个链表的值，回车结束
10 20 30 40
value=10, next:0x557f8f103ac0
value=20, next:0x557f8f103ae0
value=30, next:0x557f8f103b00
value=40, next:(nil)
输入要替换元素的值, old new
40 -400
value=10, next:0x557f8f103ac0
value=20, next:0x557f8f103ae0
value=30, next:0x557f8f103b00
value=-400, next:(nil)



(4) 插入新元素
操作指针的时候要防止覆盖，先移动新节点指向后一个指针，再移动当前节点指向新节点。

//在第n个元素后添加新元素val
void insert(LinkList* h, int n, int val){
	int i=0;
	LinkList *pre;
	LinkList* node=(LinkList*)malloc(sizeof(LinkList));
	node->score=val;
	while(h->next != NULL){
		if(i==n){
			break;
		}
		h=h->next;
		i++;
	}
	//如果插入位置在最后一个位置后面，则特殊考虑
	if(i==n){
		node->next=h->next; //null
		h->next=node;
	}else if(i<n){
		free(node);  //如果没有插入值，额释放新建元素的内存
		printf("链表总长度为%d，没有第%d个元素，插入失败\n", i, n);
	}
}

int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	printf("输入要插入元素的位置和值, nth val\n");
	int nth, val;
	scanf("%d %d", &nth, &val);
	insert(h, nth, val);
	
	print(h);
	return 0;
}

$ ./a.out 
请输入需要创建的4个链表的值，回车结束
10 20 30 40
value=10, next:0x56121fbccac0
value=20, next:0x56121fbccae0
value=30, next:0x56121fbccb00
value=40, next:(nil)
输入要插入元素的位置和值, nth val
3 -300
value=10, next:0x56121fbccac0
value=20, next:0x56121fbccae0
value=30, next:0x56121fbccb20
value=-300, next:0x56121fbccb00
value=40, next:(nil)




(5) 求链表的长度
遍历，计数即可。

//链表长度
int length(LinkList* h){
	int i=0;
	while(h->next != NULL){
		h=h->next;
		i++;
	}
	return i;
}


(6) 排序
直接采用冒泡或者选择排序，而且不是交换结点，只交换数据域。

// 冒泡法排序
void sort(LinkList *h){
	LinkList *h2;
	while(h->next != NULL){
		h=h->next;
		h2=h;
		while(h2->next != NULL){
			h2=h2->next;
			if(h->score > h2->score){
				int tmp= h->score;
				h->score=h2->score;
				h2->score=tmp;
			}
		}
	}
}

int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	printf("排序后\n");
	sort(h);  //排序
	print(h);
	return 0;
}


$ ./a.out 
请输入需要创建的4个链表的值，回车结束
10 20 -30 -40
value=10, next:0x559f23cc9ac0
value=20, next:0x559f23cc9ae0
value=-30, next:0x559f23cc9b00
value=-40, next:(nil)
排序后
value=-40, next:0x559f23cc9ac0
value=-30, next:0x559f23cc9ae0
value=10, next:0x559f23cc9b00
value=20, next:(nil)



(7) 反序
就是把指针倒置。然后返回end的地址。
需要一个辅助节点，保存上一个的地址元素。
//LinkList *pre, *cur=(LinkList*)malloc(sizeof(LinkList)); //当前节点，用于暂存被覆盖的当前节点的下一个元素
就使用head元素当辅助节点了。

//反序
void reverse(LinkList* h){
	LinkList *pre, *cur;
	
	//销毁head元素
	cur=h;
	h=h->next;
	cur->next = NULL;
	
	while(h->next != NULL){
		pre=h;
		h=h->next;

		//翻转指针
		pre->next = cur->next;
		
		//备份上一个节点坐标
		cur->next = pre;
	}
	//翻转最后一个指针
	h->next = cur->next;
	cur->next=h;
	h=cur;
}


int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	printf("反序后\n");
	reverse(h);
	print(h);
	return 0;
}


$ ./a.out 
请输入需要创建的4个链表的值，回车结束
10 20 30 40
value=10, next:0x56066edd6ac0
value=20, next:0x56066edd6ae0
value=30, next:0x56066edd6b00
value=40, next:(nil)
反序后
value=40, next:0x56066edd6ae0
value=30, next:0x56066edd6ac0
value=20, next:0x56066edd6690
value=10, next:(nil)
没看懂翻转前后地址的关系，有点乱。
应该是对的，主要核对中间节点的地址。


## 试一下6个数
请输入需要创建的6个链表的值，回车结束
10 20 -30 -40 50 -600
value=10, next:0x56372c9c8ac0
value=20, next:0x56372c9c8ae0
value=-30, next:0x56372c9c8b00
value=-40, next:0x56372c9c8b20
value=50, next:0x56372c9c8b40
value=-600, next:(nil)
反序后
value=-600, next:0x56372c9c8b20
value=50, next:0x56372c9c8b00
value=-40, next:0x56372c9c8ae0
value=-30, next:0x56372c9c8ac0
value=20, next:0x56372c9c8690
value=10, next:(nil)


(8) 获取第n个元素的值
预期像数组一样，首个元素下标是0.

int getEle(LinkList* h, int n){
	int i=0;
	while(h->next != NULL){
		h=h->next;
		if(i==n){
			return h->score;
		}
		i++;
	}
	printf("Error: arr length(%d) < n(%d)\n", i, n);
	return -1;
}

int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	printf("输出第几个元素?\n");
	int n;
	scanf("%d", &n);
	printf("the %dth ele is %d\n", n, getEle(h, n));
	return 0;
}


$ ./a.out 
请输入需要创建的4个链表的值，回车结束
10 20 30 40
value=10, next:0x56320cdb0ac0
value=20, next:0x56320cdb0ae0
value=30, next:0x56320cdb0b00
value=40, next:(nil)
输出第几个元素?
2
the 2th ele is 30



(9) 清空链表的元素
记得使用free释放内存!
节点被删除后，只是将它从链表中断开而已，它仍占用着内存，必须释放其所占的内存，否则将出现内存泄漏.

void freeAll(LinkList* h){
	LinkList* pre;
	while(h->next != NULL){
		pre=h;
		h=h->next();
		free(pre);
	}
	free(h); //尾节点
}

int main(){
	int N=4;
	LinkList* h=create(N);//创建链表
	print(h);//输出链表
	
	//释放节点空间
	freeAll(h);
	return 0;
}






ref: https://blog.csdn.net/Endeavor_G/article/details/80552680



========================================
链表：双向链表 //todo
----------------------------------------








========================================
堆与栈: stack和heap
----------------------------------------
1. 现代计算机把内存分为三种类型：栈内存、堆内存、程序内存。

(1) 堆 heap 
堆更容易解释，因为它就是你电脑中的剩余内存，你可以通过malloc访问它来获取更多内存，OS会使用内部函数为你注册一块内存区域，并且返回指向它的指针。当你使用完这片区域时，你应该使用free把它交还给OS，使之能被其它程序复用。如果你不这样做就会导致程序“泄露”内存，但是Valgrind会帮你监测这些内存泄露。

理清内存的最简单的方式是遵守这条原则：如果你的变量并不是从malloc中获取的，也不是从一个从malloc获取的函数中获取的，那么它在栈上。

下面是三个值得关注的关于栈和堆的主要问题：
- 如果你从malloc获取了一块内存，并且把指针放在了栈上，那么当函数退出时，指针会被弹出而丢失。
- 如果你在栈上存放了大量数据（比如大结构体和数组），那么会产生“栈溢出”并且程序会中止。这种情况下应该通过malloc放在堆上。
- 如果你获取了指向栈上变量的指针，并且将它用于传参或从函数返回，接收它的函数会产生“段错误”。因为实际的数据被弹出而消失，指针也会指向被释放的内存。


最后，当一个程序退出时，OS会为你清理所有的资源，但是有时不会立即执行。一个惯用法（也是本次练习中用到的）是立即终止并且让OS清理错误。


(2) 栈 stack
栈内存严格按照“先入后出”的原则。通常使用栈的顶部进行操作，数据在栈顶“入栈”，之后还是在栈顶“出栈”。

栈是一个特殊的内存区域，它储存了每个函数的创建的临时变量，它们对于该函数为局部变量。它的工作机制是，函数的每个函数都会“压入”栈中，并且可在函数内部使用。它是一个真正的栈数据结构，所以是后进先出的。这对于main中所有类似char section和int id的局部变量也是相同的。使用栈的优点是，当函数退出时C编译器会从栈中“弹出”所有变量来清理。这非常简单，也防止了栈上变量的内存泄露。

栈内存用来干嘛呢？栈内存也叫调用栈，每一个C程序都由它来控制其函数执行的流程。具体点说，就是栈内存分为很多栈帧，每个栈帧里面保存一个函数的信息，按照程序中函数的调用顺序依次入栈，再依次出栈来实现函数的调用次序。

每次function声明一个新的变量，它就会被“推”到栈中。然后每次一个function退出时，所有关于这个函数中定义的变量都会被释放（换句话说就是删除）。一旦栈中的变量释放，这块区域就会变成可用的，提供给其他栈中的变量。

栈帧保存了每一个函数的返回位置、实参、局部变量、返回值地址。

调用栈规则：
- 1.如果函数返回了一个值，这个值（包括地址和值）会被写到该函数对应栈帧的一个局部变量中。
- 2.如果函数有局部变量，局部变量被保存在栈帧。
- 3.如果函数有实参，实参也被保存在栈帧。
- 4.函数的返回位置也要保存在栈帧。一般返回位置就是函数调用之后的行编号。
- 5.如果相同函数在不同行被调用，则每个调用都有一个相应的返回位置。
- 6.一个函数执行结束后，程序将从栈顶部栈帧中的返回位置（行编号）处继续执行。栈顶栈帧随即被弹出。

总结
推荐使用 DDD （命令行调试程序）来检测调用栈。

堆栈的存储过程像一个堆碟子的过程，旧的碟子堆在下面，新碟子堆在上面，拿碟子的过程，也是先拿新碟子，新盘子拿完，最后才能拿到旧碟子。

用栈存储变量的好处是，内存是被你管理的。你不用手动的创建内存，不用当你不在需要它的时候手动释放内存。另外，由于CPU组织栈内存很高效。读出和写入栈变量是很快的。






2. 一个经典的描述各种变量在内存中位置的例子

$ cat 01.c
#include<stdio.h>
#include<stdlib.h>
int a = 0; //全局初始化区
char *p1; //全局未初始化区
int main() {
	int b; //栈
	char s1[] = "abc"; //栈
	char *p2; //栈
	char *p3 = "123456";  //123456\0在常量区，p3在栈上。
	static int c =0;   //全局（静态）初始化区
	p1 = (char *)malloc(10);  //堆
	p2 = (char *)malloc(20);  //堆
	
	printf("%p(a)\n", &a);
	printf("%p(b)\n", &b);
	printf("%p(c)\n", &c);
	
	printf("%p(p1) -> %p\n", &p1, p1);
	printf("%p(p2) -> %p\n", &p2, p2);
	printf("%p(p3) -> %p\n", &p3, p3);
	printf("%p(s1) -> %p %p %p\n", &s1, s1, &s1[0], &s1[1]);
	return 0;
}

输出： 
0x559eac04b014(a)
0x7fff7b4072bc(b)
0x559eac04b018(c)
0x559eac04b020(p1) -> 0x559ead427260
0x7fff7b4072c0(p2) -> 0x559ead427280
0x7fff7b4072c8(p3) -> 0x559eabe4a8b4
0x7fff7b4072d4(s1) -> 0x7fff7b4072d4 0x7fff7b4072d4 0x7fff7b4072d5

三个常量，b在栈，a和c在堆。
四个指针变量，p1 在堆，p2,p3,s1在栈。
	直接初始化的字符数组就在栈上。







========================================
|-- 栈：只有一个口，先进先出
----------------------------------------

栈是FILO，就是先进后出原则的结构体，它密切的被CPU管理和充分利用.

接下来我们的数据类型和内存的堆栈是补一个概念。作为一个数据类型，仅仅表示一个口的线性数据结构，先进的后出。

1. 堆栈
(a)定义:限定只能在固定一端进行插入和删除操作的线性表。
特点：后进先出。

(b)允许进行插入和删除操作的一端称为栈顶，另一端称为栈底。
作用：可以完成从输入数据序列到某些输出数据序列的转换。



(2)堆栈抽象数据类型
数据集合: 
{a0,a1,…,an-1} ，ai的数据类型为DataType。

操作集合：
(a) StackInitiate(S) ：初始化堆栈S
(b) StackNotEmpty(S)：堆栈S非空否
(c)StackPush(S, x) ：入栈
(d)StackPop(S, d)：出栈
(e)StackTop(S, d)：取栈顶数据元素




2. 顺序堆栈: 用数组实现的栈。
栈有容量，相当于是一个单口的数组。

#include<stdio.h>
#include<stdlib.h>

int *createStack(int n){
	if(n<0){
		fprintf(stderr, "Stack must >=0\n");
		exit(-1);
	}
	int *p=(int *)malloc(sizeof(int)*n);
	return p;
}

// 压入元素
int push(int *stack, int n, int ele){
	stack[++n]=ele;
	return n;
}

//弹出元素
int pop(int *stack, int n){
	if(-1==n){
		printf("空栈\n");
		return -1;
	}
	int ele=stack[n];
	printf("弹出 %dth: %d\n",n, ele);
	return --n;
}

int main(){
	int len=100, nth=-1;
	int *stack=createStack(len);
	
	nth=push(stack, nth, 101);
	nth=push(stack, nth, 202);
	nth=push(stack, nth, 303);
	nth=pop(stack, nth);
	nth=pop(stack, nth);
	nth=pop(stack, nth);
	
	nth=pop(stack, nth);
	free(stack); //防止内存泄漏
	return 0;
}

输出： 
弹出 2th: 303
弹出 1th: 202
弹出 0th: 101
空栈







3. 链式堆栈: 用线性表的链式存储结构实现。
链栈一般不需要创建头结点，头结点会增加程序的复杂性，只需要创建一个头指针就可以了。

采用链栈存储方式的优点是：当栈中元素个数变化较大，准确数字难以确定时，链栈较顺序堆栈方便。


#include<stdio.h>
#include<stdlib.h>

typedef struct node{
	int ele;
	struct node *next;
} Stack;

//入栈
Stack *push(Stack *h, int ele){
	Stack *node=(Stack *)malloc(sizeof(Stack));
	node->ele=ele;
	node->next=h;
	//printf("压入元素 %d %p\n", ele, node);
	return node;
}

//出栈 
Stack *pop(Stack *h){
	if(h){
		Stack *pre=h;
		h=h->next;
		//printf("弹出: %d(%p ->%p)\t", pre->ele, pre, h);
		printf("弹出: %d\t", pre->ele);
		if(h){
			printf("栈顶元素 %d\n", h->ele);
		}else{
			printf("栈已空\n");
		}
		free(pre);
	}else{
		printf("空栈\n");
	}
	return h;
}

int main(){
	Stack *stack=NULL;
	//压入
	stack=push(stack, 100);
	stack=push(stack, 200);
	stack=push(stack, 300);
	//弹出
	stack=pop(stack);
	stack=pop(stack);
	stack=pop(stack);

	stack=pop(stack);
	return 0;
}

输出：
弹出: 300       栈顶元素 200
弹出: 200       栈顶元素 100
弹出: 100       栈已空
空栈




ref:
C语言---堆栈（链表实现） https://www.cnblogs.com/changfan/p/11695212.html
https://www.jb51.net/article/87320.htm







========================================
队列 //todo ing
----------------------------------------
1. 队列
定义:只能在表的一端进行插入操作（队尾），在表的另一端进行删除操作的线性表（队头）。一个队列的示意图如下：

对头 <- a0 a1 a2  ... an <- 对尾 


(2) 队列抽象数据类型
数据集合:{a0,a1,…,an-1}，ai的数据类型为DataType。
操作集合：
(a)初始化QueueInitiate(Q) 
(b)非空否QueueNotEmpty(Q)
(c)入队列QueueAppend(Q,x)
(d)出队列QueueDelete(Q,d)
(e)取队头数据元素QueueGet(Q, d)



2. 实现









ref: https://www.jb51.net/article/87320.htm





========================================
树: 二叉树，完全二叉树，堆 (对递归要求很高！深刻理解递归)
----------------------------------------
1. 堆内存就是一个树结构。
malloc 申请的就是堆内存。

名词解释：

根节点：树的第一层的节点为根节点，根节点最多只有一个。
叶子结点：无子节点的节点。
父节点：有子节点的节点，如图中节点2为节点4和节点5的父节点。
子节点：图中节点7、8为节点4的子节点，4、5又为节点2的子节点。
树的高度(深度)：从根开始定义起，根为第一层 ， 根的孩子为第二层。根节点到离它最远的叶子节点为树的高度。图中为4
节点的度：一个节点拥有的子节点的个数，如节点4的度为2
兄弟节点：如同一个父节点的节点彼此间为兄弟节点，如2与3、4与5、7与8

       1
	2      3
  4   5   / 6
7  8


树: 一般为了方便，倒着画，把根节点放到最顶上。
	一对多的数据类型。
		例如：计算机文件系统、家族谱
	叶子节点: 最末梢的节点，叶子上不能再生出树枝。

二叉树: 
	一个根最多只能由2个子节点，就是二叉树。
	二叉树的特点有：点的度只可能为0,1,2，度为2的点个数+1=叶子结点个数等。
	一棵二叉树有5中基本形态：空、只有1个父节点、父节点+左孩子、父节点+右孩子、父节点+2孩子

满二叉树：
	同时满足2个特性的二叉树，叫 full 二叉树。
		- 特性1: 要么有2个孩子，要么没有孩子。
		- 特性2：叶子节点在同一层。整个树是一个等腰三角形。
	规律：第一层1个节点，第二层2个，第三层4个，第n层2^n个节点。
		2层: 1+2=3=2^2-1
		3层: 1+2+4=7=2^3-1

完全二叉树: 
	满二叉树从下往上，从右往左删除节点，得到的就是完全二叉树。(从东南方向删除节点)
	只有最下两层的度可以小于2，并且最下一层的叶子节点集中出现在靠左的若干位置上。


二叉排序(查找)树：
	它或者是一棵空树，或者是具有下列性质的二叉树。
		若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值
		若它的右子树不空 ，则右子树上所有结点的值均大于它的根结点的值
		它的左、右子树也分别为二叉排序树。
	下图就是一个二叉排序树（左边比根小，右边比根大）
          62
      58      88
   47   /    73   99
35   51      //  93 /
/ 37 //





2. 内存中怎么保存树呢？

(1) 使用多指针的结构体实现 

使用结构体实现链表。
struct node{
	int value;
	struct node *next;
};


结构体中使用2个指针时，就是二叉树。
struct node{
	int value;
	struct node *left;
	struct node *right;
};


(2) 用数组描述 完全二叉树 ，速度更快。
二叉树结构，寻址次数最少是多少？
寻址：寻找地址，从node1找到node2的地址，然后找ndoe3的地址。

可以使用数组描述 完全二叉树：
	既是一个二叉树，又是一个数组
	因为把 完全二叉树 按照从上到下， 从左到右编上号，从0开始计数，则
		知道父节点下标是0，则可以推断左孩子、右孩子的编号一定是1和2.
		父节点坐标是1，则左右孩子坐标是: 3和4
		父节点坐标是2，则左右孩子坐标是: 5和6
		公式
		父节点下标为n，左孩子下标 2*n+1, 右孩子下标 2*n+2
	用数组描述 【完全二叉树】 的好处是特别快！不用多次寻址，直接用坐标一步到位。







3. 堆 是一个数组，又是一个有序的 完全二叉树 

(1)堆是一个用数组表示的 完全二叉树。

(2)堆只限父子之间有序。

大顶堆 最大堆： 父大于子。就像族谱一样，上面比下面的大，仅限于直接父子。叔侄可能年龄倒置，因为不是直接父子关系。
小顶堆 最小堆： 子大于父

大顶堆：每个结点的值都大于或等于其左右孩子结点的值
小顶堆：每个结点的值都小于或等于其左右孩子结点的值

malloc 出来的数据就是 完全二叉树，好处是寻址会很快。
         100
     90     9
   80  60   7 8
10  20

数组形式: 100, 90, 9, 80,60,7,8,10,20


(3) 堆 重要的是三个函数：
	一个一个插入到完全二叉树中
	删除堆顶元素
	用数组初始化堆





4. 代码实现：创建、遍历

(1)二叉树的创建
使用2个指针指向左右孩子。

#include<stdio.h>
#include<stdlib.h>

typedef struct btnode{
	char data;
	struct btnode* lchild;
	struct btnode* rchild;
} BtNode;


int main(){
	BtNode *p, *p1, *p2;

	p=( BtNode* )malloc( sizeof(BtNode) );
	p->data='A';

	p1=( BtNode* )malloc( sizeof(BtNode) );
	p1->data='B';
	p1->lchild=NULL;
	p1->rchild=NULL;

	p2=( BtNode* )malloc( sizeof(BtNode) );
	p2->data='c';
	p2->lchild=NULL;
	p2->rchild=NULL;

	p->lchild=p1;
	p->rchild=p2;

	prior_order(p); //遍历树的函数定义见下文
	printf("\n");

	in_order(p);
	printf("\n");

	post_order(p);
	printf("\n");

	free(p1);
	free(p2);
	free(p);
	return 0;
}

输出：
A >B >c > 父节点在左右前面输出，叫前序遍历
B >A >c > 父节点在左右中间输出，叫中序遍历
B >c >A > 父节点在左右后面输出，叫后序遍历





(2) 递归创建二叉树

这个指针系统好复杂！！！
要逐行理解透彻！

//二叉树的创建可以使用递归方法
void create(BtNode **node){
	printf("逐个输入字符，递归生成二叉树\n");
	char ch;
	scanf("%c", &ch);
	getchar(); //吃掉回车键
	
	if(ch=='/')
		return;
	*node = ( BtNode* )malloc( sizeof(BtNode) );
	
	(*node)->data=ch;
	printf("data: %c\n", (*node)->data );
	
	(*node)->lchild=NULL;
	(*node)->rchild=NULL;
	
	create( &(*node)->lchild);
	create( &(*node)->rchild);
}

int main(){
	BtNode *p; 
	create(&p);
	
	prior_order(p);
	printf("\n");
	
	in_order(p);
	printf("\n");

	post_order(p);
	printf("\n");
	
	deltree(p);
	return 0;
}


输入下面的的二叉树:
      a 
   b     d 
/  c    / /
  / /
先递归左侧，左侧结束才考虑同级的右侧，再结束返回上级右侧。
一个字母一个回车，输入字母顺序
a b / c / / d / /
输出: 这个顺序好诡异，好好理解一下，确实是这样的。
a >b >c >d > 前序
b >c >a >d > 中序
c >b >d >a > 后续




(3) 二叉树的遍历
二叉树的遍历包括先序、中序、后序（三种方法本质一样，在这只详细介绍先序遍历）

先序遍历的规则是先visit根节点，再vistit该根节点的左孩子，再vistit该根节点的右孩子。
如下图二叉树的先序遍历输出为：F>C>A>D>B>E>H>G>M
         F
    C        E 
 A   D     H    G 
//  / B   //   M /
     //      //
递归输入顺序: F C A / / D / B // E H / / G M // /
输出：
f >c >a >d >b >e >h >g >m > 前序
a >c >d >b >f >h >e >m >g > 中序
a >b >d >c >h >m >g >e >f > 后序


// 先序遍历 二叉树
void prior_order(BtNode *tree){
	if(tree){ //空节点直接跳过
		printf("%c >", tree->data);
		prior_order( tree->lchild );
		prior_order( tree->rchild );
	}
}

//中序和后序只需要把 输出printf 换下顺序就可以了。
// 中序遍历 二叉树
void in_order(BtNode *tree){ //用mid_order 更妥帖吧
	if(tree){ //空节点直接跳过
		in_order( tree->lchild );
		printf("%c >", tree->data);
		in_order( tree->rchild );
	}
}

// 后序遍历 二叉树
void post_order(BtNode *tree){ // behind_order
	if(tree){ //空节点直接跳过
		post_order( tree->lchild );
		post_order( tree->rchild );
		printf("%c >", tree->data);
	}
}


(4) 销毁树
void deltree(BtNode * tree) {
    if(tree) {
        deltree(tree->lchild);
        deltree(tree->rchild);
        free(tree);
    }
}




(5) 二叉树的层数
//递归法 求二叉树的层高，规定根节点所在层为0层。
int depth(BtNode *tree){
	int leftLen, rightLen;
	if(!tree){
		return 0;
	}else{
		leftLen=depth(tree->lchild) +1;
		rightLen=depth(tree->rchild) +1;
	}
	return leftLen>rightLen?leftLen:rightLen;
}

//
int n=depth(p);
printf("树的层高是：%d\n", n);


i)递归逐行输入 a b c // / /
    a
  b   /
c  /
//
输出 
a >b >c >
c >b >a >
c >b >a >
树的层高是：3


ii) 递归逐行输入 a b // c //
  a 
b  c 
//  //
输出：
a >b >c >
b >a >c >
b >c >a >
树的层高是：2




(6) 叶子节点数

// 通过指针变量记录叶子节点个数
void leaf(BtNode *tree, int *count){
	if(tree){
		if(tree->lchild==NULL && tree->rchild==NULL){
			*count+=1;
		}
		leaf(tree->lchild, count);
		leaf(tree->rchild, count);
	}
}

//
int N=0;
leaf(p, &N);
printf("叶子节点个数: %d\n", N);


i)递归逐行输入 a b c // / /
    a
  b   /
c  /
//
输出 
a >b >c >
c >b >a >
c >b >a >
叶子节点个数: 1


ii) 递归逐行输入 a b // c //
  a 
b  c 
//  //
输出：
a >b >c >
b >a >c >
b >c >a >
叶子节点个数: 2



(7) 节点总个数
//递归求节点总数
void total_node(BtNode *tree, int *count){
	if(tree){
		*count+=1;
		total_node( tree->lchild, count);
		total_node( tree->rchild, count);
	}
}

//
int N=0;
total_node(p, &N);
printf("该二叉树中总节点数: %d\n", N);


逐行输入: a d c / / f / / r / /
     a 
  d     r 
c  f   // 
// //
输出：
a >d >c >f >r >
c >d >f >a >r >
c >f >d >r >a >
该二叉树中总节点数: 5







5. 写代码实现：小顶堆

(1) 数组形式初始化 二叉树 
然后检查冲突，就是直接上下关系中，父节点要比子节点小。










ref:
代码 https://blog.csdn.net/qq_42673507/article/details/83449306
	https://www.cnblogs.com/landpack/p/4783120.html
	https://www.jb51.net/article/127965.htm
视频 https://www.bilibili.com/video/BV1zE411h7PX 基础知识介绍的挺好的(前1h)
	https://www.bilibili.com/video/BV1jW411K7yg




========================================
散列表(hash 表，又叫关联数组) //todo
----------------------------------------


========================================
图、Trie 树 //todo
----------------------------------------


========================================
并查集 //todo
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

