
========================================
smarty3模板引擎
----------------------------------------
1.下载地址：http://www.smarty.net/download

You can download the latest master from Smarty GitHub repository:
git clone https://github.com/smarty-php/smarty.git

Download lastest master as a zip file:
https://github.com/smarty-php/smarty/archive/master.zip

Visit the GIT Repository: https://github.com/smarty-php/smarty

2.文档：
	官网：http://www.smarty.net/docs/zh_CN/
	镜像：http://www.speedphp.com/smarty/index.html
3.为什么使用smarty？
	1.强大的表现逻辑；
	2.模板编译；
	3.缓存；
	4.高度可配置性和可扩展性；
	5.安全；防止程序遭到设计人员有意无意的破坏；


========================================
工作流程
----------------------------------------
1.先是引入smarty引擎；
2.创建php脚本，业务逻辑层；
3.创建tpl模板文件，表现层；
4.smarty模板引擎把php和tpl混合，得到编译文件，是php文件，混合了php和html。
5.如果开启模板缓存功能，则编译文件还会生成一个缓存文件，纯静态html文件；
6.如果再次访问，并且没有超时，则访问时直接执行纯静态的html文件；


========================================
引入smarty模板引擎
----------------------------------------
1.安装smarty模板引擎；
	(1)直接到官网下载，解压并提取libs文件夹，改名为smarty3，放到网站根目录。
	(2)创建demo1文件夹，新建一个php文件，引入smarty入口文件。
		//include('../smarty3/Smarty.class.php');//建议用绝对路径。
		
		<?php
		//创建实际路径
		define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn
		require(ROOT_PATH . '/../smarty3/Smarty.class.php');

		//实例化
		$_smarty=new Smarty();

		//打印
		$_smarty->display('demo1.tpl');

	(3)建立所需要的4个文件夹，后续慢慢建。
	
2.运行报错，因为没有demo1.tpl文件。那么tpl文件的位置在哪呢？尝试发现，可以放到入口文件所在目录，或该目录下的templates文件夹。
	在Smarty主文件的293行：  protected $template_dir = array('./templates/');
	
	我们放到templates文件夹。demo1.tpl文件内容为：<h1>this is title</h1>
	
	刷新后，发现Smarty又建立一个templates_c文件夹，里面是编译文件73119e5a60ab2a480d8b1b251ff4100a284925bf_0.file.demo1.tpl.php
	这就是编译文件。
	
3.如何定义变量：
	
	我们在入口文件定义变量：
		<?php
		//创建实际路径
		define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn
		require(ROOT_PATH . '/../smarty3/Smarty.class.php');

		//实例化
		$_smarty=new Smarty();

		//注册变量
		$_smarty->assign('name','Dawn');

		//打印
		$_smarty->display('demo1.tpl');

	在模板文件demo1.tpl中引用：
		<h1>this is {$name}</h1>
	访问后打印出：this is Dawn

目前，你已经会引入模板，并注册变量了！

一般我们先定义变量，再赋值：
//定义变量
$myName='Dawn2';

//注册变量
$_smarty->assign('name',$myName);

然后模板中正常引用。



4.如何修改模板目录，编译文件目录？
给变量$_smarty->template_dir指定模板目录。
给变量$_smarty->compile_dir指定编译目录

	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn
	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//修改模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/tpl';
	//修改编译目录
	$_smarty->compile_dir=ROOT_PATH . '/tpl_c';

	//定义变量
	$myName='Dawn3';

	//注册变量
	$_smarty->assign('name',$myName);

	//打印
	$_smarty->display('demo1.tpl');

然后，在tpl文件夹下新建文件demo1.tpl:
	<h1>this is {$name}</h1>
	from tpl dir.

结果输出：
this is Dawn2
from tpl dir.

同时，在tpl_c目录发现一个编译文件 b2ff82e789febf8d5ebe73e8d019c419b3a96224_0.file.demo1.tpl.php

建议不修改文件名，但是改成绝对路径：
//修改模板文件路径
$_smarty->template_dir=ROOT_PATH . '/templates';
//修改编译目录
$_smarty->compile_dir=ROOT_PATH . '/templates_c';



5.是否开启缓存
$_smarty->caching=true;

建议：开发调试阶段要关闭缓存！
	否则php中的变量不会及时改变。要及时删掉缓存文件，麻烦。最好不缓存方便调试。
	
6.ptl中的定界符{}很有可能和js以及css的{}冲突，怎么解决呢？
	(1)要么修改smarty的定界符；
		//左右定界符
		$_smarty->left_delimiter='<!--{';
		$_smarty->right_delimiter='}-->';
	
	在模板文件中：
		<h1>this is {$name}</h1>
		<!--{$name}-->
	
	解析结果：
	this is {$name} 
	Dawn6
	
	(2)要么全部使用外部js和css文件。不要出现{}符号。

	
	建议：不修改定界符，用外部js和css文件。

7.好多配置信息！怎么独立出去？
在入口文件所在目录建立smarty.inc.php文件：
	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn

	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/templates/';
	//编译目录
	$_smarty->compile_dir=ROOT_PATH . '/templates_c/';
	//配置文件目录
	$_smarty->config_dir=ROOT_PATH . '/configs/';
	//缓存目录
	$_smarty->cache_dir=ROOT_PATH . '/cache/';

	//是否开启缓存
	$_smarty->caching=false;

	//左右定界符
	$_smarty->left_delimiter='{';//'<!--{'
	$_smarty->right_delimiter='}';//'}-->'
	
在入口文件index.php中引入即可：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//这里可以注册全局变量 global.

	//定义变量
	$myName='Dawn8';

	//注册变量
	$_smarty->assign('name',$myName);

	//打印
	$_smarty->display('demo1.tpl');
demo1.tpl内容为：
	<h1>this is {$name}</h1>
	<!--{$name}-->

打印出结果：
	this is Dawn8

说明配置文件已经独立出去了。系统还正常工作。

	

========================================
smarty模板引擎：分配变量
----------------------------------------
1.大纲
	第四章.变量 
	内容列表 
	从PHP分配的变量 
	变量范围 
	从配置文件读取的变量 
	{$smarty} 保留变量 


2.现在的文件格式为：
smarty.inc.php
	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn

	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/templates/';
	//编译目录
	$_smarty->compile_dir=ROOT_PATH . '/templates_c/';
	//配置文件目录
	$_smarty->config_dir=ROOT_PATH . '/configs/';
	//缓存目录
	$_smarty->cache_dir=ROOT_PATH . '/cache/';

	//是否开启缓存
	$_smarty->caching=false;

	//左右定界符
	$_smarty->left_delimiter='{';//'<!--{'
	$_smarty->right_delimiter='}';//'}-->'

index.php
	<?php
	//引入配置文件
	require('smarty.inc.php');
	global $_smarty;

	//定义变量
	$myName='Dawn80';
	//注册变量
	$_smarty->assign('name',$myName);

	//打印
	$_smarty->display('demo2.tpl');

templates/demo2.tpl文件夹中：
	<h1>this is {$name}</h1>
	<!--{$name}-->

3. assign()方法[smarty3中文手册->14章方法->assign()]

3.1 从php分配的变量 普通变量
php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//定义变量
	$title='标题2';
	//注册变量
	$_smarty->assign('htmlTitle',$title);

	//打印
	$_smarty->display('demo2.tpl');
模板中：
	<meta charset='utf-8'>
	<title>{$htmlTitle}</title>
打印结果：
	<meta charset='utf-8'>
	<title>标题2</title>

	
3.2 从php分配的变量 数组变量
普通数组：
	//定义变量
	$arr=array('a','b','c');
	//注册变量
	$_smarty->assign('letter',$arr);

模板：
	<meta charset='utf-8'>
	<h1>{$letter[0]}</h1>
	<h1>{$letter[1]}</h1>
	<h1>{$letter[2]}</h1>
打印结果：
	a
	b
	c

使用php原生语法风格引用数组索引。


关联数组：
	//定义变量
	$arr2=array('a'=>'apple','b'=>'boy','c'=>'cat');
	//注册变量
	$_smarty->assign('letter',$arr2);
模板：
	<meta charset='utf-8'>
	<h1>{$letter['a']}</h1>
	<h1>{$letter.b}</h1>
打印结果：
	apple
	boy

	
二维数组时：
	//定义变量
	$arr3=array(
		array('a','apple'),
		array('b','boy'),
		array('c','cat')
		);
	//注册变量
	$_smarty->assign('letter',$arr3);
模板：
	<meta charset='utf-8'>
	<h1>{$letter[0][0]}</h1>
	<h1>{$letter[2][1]}</h1>
打印结果：
	a
	cat

总结：
	索引数组模板中使用 数组名[索引号]
	关联数组模板中使用 数组名[key值] 或 数组名.key值
	可以连续引用。数组名[索引号][key值]

4. 对象的引用属性和方法（php原生风格）
php文件中：
	//定义变量
	class Person{
		public $name='';
		public $email;
		public function __construct($name,$email){
			$this->name=$name;
			$this->email=$email;
		}
		function toString(){
			return '[方法运行中...]<br>]name: ' . $this->name . ', email: ' . $this->email;
		}
	}
	$p=new Person('Dawn', 'JimmyMall@live.com');

	//注册变量
	$_smarty->assign('person',$p);
	
模板中：
	<meta charset='utf-8'>
	<h1>{$person->name}</h1>
	<h1>{$person->email}</h1>
	{$person->toString()}
打印结果：
	Dawn
	JimmyMall@live.com
	[方法运行中...]
	]name: Dawn, email: JimmyMall@live.com

思考题：
对于数组中包含对象，对象中包含数组的情况怎么处理呢？


5. 模板中数值可以运算
定义：
	//定义变量
	$a=1;
	$b=200;

	//注册变量
	$_smarty->assign('a',$a);
	$_smarty->assign('b',$b);
模板：
	<meta charset='utf-8'>
	{$a+$b}
打印结果：
	201

6.从配置文件中读取变量
	在之前我们把配置文件定义在configs文件夹中
		//配置文件目录
		$_smarty->config_dir=ROOT_PATH . '/configs/';

	打开该文件夹，创建【键值对】为内容的配置文件，文件名和后缀随意。
configs/myConfig.myconfig
	name="Dawn's blog"
	email='JimmyMall@live.com'
	bodyBgColor = #000000
	color=#fff

然后在模板demo2.php中引用，2种方法。
用到内置函数 {config_load}[smarty3手册->第七章 内置函数->{config_load}]
还有一个是smarty保留变量$smarty.config [smarty3手册->第三章 基本语法->{$smarty}保留变量->{$smarty.config}]

	<meta charset='utf-8'>
	<!--导入配置文件-->
	{config_load file='myConfig.myconfig'}

	//配置文件变量#hash#方法的示例<br>
	//$smarty.config方法的示例：<br>

	<body style="background:{#bodyBgColor#};color:{$smarty.config.color}">
	<p>name: {#name#}</p>
	<p>email: {$smarty.config.email}</p>

打印结果：
	<meta charset='utf-8'>
	<!--导入配置文件-->

	//配置文件变量#hash#方法的示例<br>
	//$smarty.config方法的示例：<br>

	<body style="background:#000000;color:#fff">
	<p>name: Dawn's blog</p>
	<p>email: JimmyMall@live.com</p>


7.smarty保留变量
[smarty3手册->第三章 基本语法->{$smarty}保留变量->{$smarty.*}]

7.1 $smarty.get
模板demo2.php直接写：
	<h1>{$smarty.get.id}</h1>
访问：/index.php?id=2
得到结果：<h1>2</h1>

7.2 $smarty.server
模板中：
	<h1>{$smarty.server.REMOTE_ADDR}</h1>
打印的结果：
	<h1>127.0.0.1</h1>

更多例子：
{$smarty.server.SERVER_NAME} -> localhost

<h1>{$smarty.env.PATH}</h1>	//获取失败todo
<h1>{$smarty.env.TEMP}</h1>	//获取失败todo



7.3 $smarty.const常量
在php中直接定义，
	define('PI', 3.1415926);
在模板中引用
	<h1>{$smarty.const.PI}</h1>
打印结果：
	3.1415926
	

========================================
smarty模板引擎：自定义函数(上)[第八章 自定义函数]
----------------------------------------
1.自定义函数一般是用在tpl中使用上的。
自定义函数共分三类：
	1.模板自定义函数，smarty提供；
	2.手写的函数，在php中定义，注册到smarty中；
	3.以插件形式扩展的自定义函数；

请注意，Smarty3将原smarty2的一些自定义函数转移至内置函数。
Smarty3本身未增加自定义函数。就个人看法，有些Smarty自带的自定义函数可能会加重了php解释和从磁盘读取的消耗，而且还会增加一些学习成本，请谨慎使用。不过，可能有些同学习惯了Smarty的这些输入，那就没必要改回手工输入相应的html。


2. assign函数的使用：
index.php的内容如下，smarty.inc.php和上一节一样，没有变化。
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//定义变量
	//$a='12';
	//注册变量
	//$_smarty->assign('a',$a);

	//打印
	$_smarty->display('demo3.tpl');

模板文件demo3.tpl如下：
	<meta charset='utf-8'>

	{assign var="name" value="Bob"}
	{assign "name" "Bob"} {* 简写 *}
	The value of $name is {$name}.
打印结果：
	The value of $name is Bob.


3. counter函数的使用：
模板中：
	<meta charset='utf-8'>

	{counter start=10 skip=2 direction=down}.
	{counter}.
	{counter print=false}.
	{counter}.
	{counter}.

打印结果：
	10. 8. . 4. 2.

4. {cycle}可以交替多个值，但每个{cycle}的name属性必须唯一。
用于表格的隔行换色。
模板中：
	<meta charset='utf-8'>

	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>

打印结果：
	<meta charset='utf-8'>

	<p style='background:red'>xx</p>
	<p style='background: green'>xx</p>
	<p style='background:red'>xx</p>
	<p style='background: green'>xx</p>
	<p style='background:red'>xx</p>

也可以放更多的颜色：
	<p style='background:{cycle values="red, green,yellow,blue"}'>xx</p>

5. {debug} 调试，查看模板中的变量详细信息
使用chrome会自动拦截，建议选择始终允许弹出。

在模板中直接使用{debug}即可看到弹出新窗口中的debug信息。

6.{eval}将变量作为一个模板求值。该特性用于诸如将模板标签/变量嵌入至另一变量，或将标签/变量嵌入至配置文件中的变量的情形。
基本没用，用法重复。
对于php分配过来的变量，在模板中
{eval var=$foo}，其实简单的{$foo}也行。

7. {fetch}用于从本地文件系统、HTTP或FTP上检索文件并显示其内容。 
{fetch}不支持重定向，使用前请确定希望抓取的网页地址以'/'结尾！

模板中：
	{fetch file='https://www.baidu.com/'}
结果url还是当前url，但是内容已经变成了百度首页。

还可以用于引入js和css等。
{* 模板里包含 javascript *}{fetch file='/export/httpd/www.example.com/docs/navbar.js'}


8.自定义函数{html_image}产生一个HTM<img>标签。
{html_image file='http://www.baidu.com/img/bd_logo.png'}

译注: 此自定义函数是Smarty越俎代疱、闲得蛋疼的典型表现，也是Smarty越来越臃肿的原因之一。


9. 自定义函数{html_table}将数组中的数据填充到HTML表格中。 
php中分配变量：
	//注册变量
	$_smarty->assign( 'data', array(1,2,3,4,5,6,7,8,9) );
	$_smarty->assign( 'tr', array('bgcolor="#eeeeee"','bgcolor="#dddddd"') );
模板中：
	{html_table loop=$data}

显示：
	<table border="1">
		<tbody>
			<tr>
				<td>1</td>
				<td>2</td>
				<td>3</td>
			</tr>
			<tr>
				<td>4</td>
				<td>5</td>
				<td>6</td>
			</tr>
			<tr>
				<td>7</td>
				<td>8</td>
				<td>9</td>
			</tr>
		</tbody>
	</table>

算了，还是自己写把，巨丑无比。

10. {math}计算
php中：
	//注册变量
	$_smarty->assign( 'width', 10 );
	$_smarty->assign( 'height', 20 );
模板中：
	{$width*$height}
	{math equation=$width*$height}
结果：
	200 200
结论:这个函数多此一举！

不过，重新计算功能还是可以考虑的：
{math equation="x*x+y" x=$width y=$height}
输出：120

或者直接赋值计算：
{math equation="(( x + y ) / z )" x=2 y=10 z=2}
输出：6


11. {mailto}自动生成电子邮件链接，并根据选项决定是否对地址信息进行编码。经编码后的email将使网络蜘蛛破解邮件地址变得更困难。
模板：{mailto address="me@example.com" text="send me some mail"}
输出：<a href="mailto:me@example.com" >send me some mail</a>

12.{textformat}用于格式化文本。该函数主要清理空格和特殊字符，对段落按单词边界换行和行缩进等段落格式化处理。
基本没啥用。




========================================
smarty模板引擎：自定义函数(中)[第八章 自定义函数]
----------------------------------------
1. 自定义函数{html_checkboxes}根据给定的数据创建复选按钮组。该函数可以指定哪些元素被选定。 
php:

	//注册变量
	$_smarty->assign('cust_ids', array(1000,1001,1002,1003));
	$_smarty->assign('cust_names', array(
			'Joe Schmoe',
			'Jack Smith',
			'Jane Johnson',
			'Charlie Brown')
		);
	$_smarty->assign('customer_id', 1001);
	//打印
	$_smarty->display('demo4.tpl');
	
模板：
	{html_checkboxes name='id' values=$cust_ids output=$cust_names
	selected=$customer_id separator='<br />'}

输出结果：
	<meta charset='utf-8'>

	<label><input type="checkbox" name="id[]" value="1000" />Joe Schmoe</label><br />
	<label><input type="checkbox" name="id[]" value="1001" checked="checked" />Jack Smith</label><br />
	<label><input type="checkbox" name="id[]" value="1002" />Jane Johnson</label><br />
	<label><input type="checkbox" name="id[]" value="1003" />Charlie Brown</label><br />

这个还是挺好用的。
不想要label标签，可以增加  labels=false；

2.单选框，只需要把上文的html_checkboxes换成html_radios：

{html_radios name='id' values=$cust_ids output=$cust_names
selected=$customer_id separator='<br />' labels=false}

输出结果：
	<meta charset='utf-8'>

	<input type="radio" name="id" value="1000" />Joe Schmoe<br />
	<input type="radio" name="id" value="1001" checked="checked" />Jack Smith<br />
	<input type="radio" name="id" value="1002" />Jane Johnson<br />
	<input type="radio" name="id" value="1003" />Charlie Brown<br />






========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------
