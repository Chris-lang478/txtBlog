
语言之争是无止境的，不要陷入这个争吵，保持冷静。不要浪费时间。
但是适当关注语言之争是必要的，能帮助我们在更高的层次上看清优劣，扬长避短。

========================================
语言具有取代性
----------------------------------------
servlet出现的时候，perl/php已死
jsp出现的时候，servlet已死
struts2出来的时候，struts1已死

存在就是有价值，“已死”之类的词还是有点“牵强”

http://www.jdon.com/38448

========================================
最好的前后端架构？
----------------------------------------
过去，MVC主要是在服务器端实现，主要语言有 Java和C#等，
如今客户端MVC已经出现，如AngularJS BackoneJS和EmberJS等。

服务器端MVC框架容易使用，有许多选择和成熟的解决方案，后端编程语言选择有 Java, Scala, C#, Clojure, JavaScript/NodeJS, 等等，其实我们并不需要在浏览器方面的豪华阵容，Adobe Flash已经死了， Silverlight 从来没有雄起，因为Html5到来了，浏览器世界变化很快。

如果再考虑到移动设备开发，并没有一种原生语言适合所有设备，所以，使用Html也许是一种解决方案。

所有这些都有一个共同点，无论是移动 Web 或桌面，或Google眼镜，所有的设备都要和后端API通过REST通讯。

客户端Javascript驱动的MVC如angular, ember, backbone等的问题是比较慢，用户体验差，同时对搜索引擎不友好，因此，J业界开始实现Javacript的服务器端渲染。
就一句话: "第一次服务端渲染,后面客户端渲染"。
http://www.jdon.com/46982

========================================
依赖注入模式 反转模式
----------------------------------------
赖注射概念最早是 Uncle Bob 在他May 1996的 C++报告, The Dependency Inversion Principle.

这个原理简单归结如下：
高层次模块不应该依赖低层次模块，他们应该依赖于一种抽象。

依赖注入可以看成是 反转控制 inversion of control 的一个特例。反转的是依赖，而不是其他。

依赖注入是最早Spring和piconcontainer等提出，如今已经是一个缺省主流模式，并扩展到前端如Angular.js。本主题国内最早IOC和依赖注入的讨论专题。

在通常情况下，我们是在使用A时同时需要将B的实例赋予A。
　　A a = new A(new B());
　　a. mymethod();

而通过依赖注入容器或框架，A对B的依赖无需我们编写代码时赋予，只要我们从一个工厂或容器中获取A的实例，这个工厂或容器是依赖注入框架提供的，它会在里面偷偷地将B的实例注入到A中：
　　A a = factory.getA();
　　a. mymethod();
这样，我们客户端调用代码就只和A耦合，这样，我们无需打开A的代码，观察其内部和哪些其他类发生依赖耦合，然后手工将这些依赖的实例注入其中。


http://www.jdon.com/di.html

========================================
AOP面向方面编程
----------------------------------------
AOP是OOP的延续，是Aspect Oriented Programming的缩写，意思是面向方面编程。AOP带来了新的编程革新。 使得软件设计更加细化，代码的编写顺序不再决定其运行顺序，诞生动态组件概念，结合IOC DI模式，可以实现软件编写和运行的最大灵活性，自诞生以来已经成为Java领域主流模式，典型框架有Spring或AspectJ框架。

　　 在面向对象系统中，我们经常需要一些任务活动，如记录，交易的安全性，缓存等，这些活动是必要的，但不是业务逻辑的一部分，被称为"横切关注点"。

（横切关注==跨整个系统的常用功能）


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


