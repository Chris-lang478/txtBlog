Python105-web

(2019.3.4)目前主要是flask 1.0.2和jinja2。
Django 框架



========================================
web based tutorials
----------------------------------------
python3的Django 写的博客系统：
https://tendcode.com/article/python-shell/ 




========================================
|-- python web编程：使用socket包
----------------------------------------
建议直接用命令行窗口运行py的server脚本，不要用jupyter，否则端口无法释放。

1.error:[Errno 98] Address already in use的解决
当你该端口被其他进程占用时，那就需要你修改为一个未使用的端口号重新运行。

如果是运行程序没有通过<Ctrl> C正常结束， 而是直接关闭Terminal或者其他非正常途径退出的时候： 
通过lsof -i:(port)，查看占用该端口号的进程，一般就是刚未正常退出的进程。例如
$ lsof -i :8000 # 这个命令针对我用的port 8000
##COMMAND   PID   USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
##python3 16633 wangjl   56u  IPv4 38335892      0t0  TCP *:8000 (LISTEN)

然后kill掉该PID的进程，重新运行。
$ sudo kill -9 16633


如果是查看本机所有的进行的进程： 
ps aux　 #　用ps -A查看所有进程



2.



========================================
flask简介
----------------------------------------
flask: https://palletsprojects.com/p/flask/
文档： https://flask.palletsprojects.com/en/1.1.x/



《Flask Web开发：基于Python的Web应用开发实战》
http://blog.sina.com.cn/s/blog_c3b6050b0102x0l0.html

第一部分 Flask简介 
第1章 安装  
第2章 程序的基本结构 
第3章 模板  
第4章 web表单  
第5章 数据库 
第6章 电子邮件 
第7章 大型程序的结构 

第二部分 实例：社会化博客程序 
第8章 用户认证 
第9章 用户角色 
第10章 用户资料 
第11章 博客文章 
第12章 关注者 
第13章 用户评论 
第14章 程序编程接口 

第三部分 成功在望 
第15章 测试 
第16章 性能 
第17章 部署 
第18章 其他资源



Flask is a microframework for Python based on Werkzeug, Jinja 2 and good intentions. And before you ask: It's BSD licensed!


1.安装
pip install flask

2. 老版1.0例子
文件hello.py
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == '__main__':
    app.run()

运行
>python hello.py

然后浏览器输入 http://127.0.0.1:5000/




###
3. 新版1.1例子
文件a2.py 
from flask import Flask, escape, request

app = Flask(__name__)

@app.route('/')
def hello():
    name = request.args.get("name", "World")
    return f'Hello, {escape(name)}!'
#
运行：
env FLASK_APP=hello.py flask run

访问浏览器 http://127.0.0.1:5000/?name=Flask~~
Hello, Flask~~!



========================================
|-- jinja2简介
----------------------------------------
jinja2: http://jinja.pocoo.org/
jinja2: https://palletsprojects.com/p/jinja/ 




========================================
|-- python web编程：使用flask包写接口
----------------------------------------
WARNING: Do not use the development server in a production environment.
Use a production WSGI server instead.

Python实现简单的API接口
https://blog.csdn.net/u013040887/article/details/78895323/

教程：http://docs.jinkan.org/docs/flask/quickstart.html#static-files



1.基本例子
$ cat dFlask.py 
from flask import Flask
app = Flask(__name__)
@app.route('/')  
def hello_world():
    return "hello world"
if __name__=='__main__':
    app.run(host="192.168.2.120",port=8000)

运行该脚本后，就可以用浏览器访问了 192.168.2.120:8000





2.简单的get和post
$ cat dFlask2.py 
# -*- coding: utf-8 -*-
# Flask hello world
from flask import Flask, redirect, request
from flask import render_template
app = Flask(__name__)

@app.route('/send_msg', methods=['GET','POST'])
def Messaging():
    if request.method =='POST':
        return('post1')
    elif request.method =='GET':
        return('get1')
    else:
        pass

@app.route('/send_msg2', methods=['POST'])
def do_send():
    return('post2')

@app.route('/send_msg2', methods=['GET'])
def show_form():
    return('get2')


@app.route('/')
def hello():
    return render_template('forms.html')


if __name__ == '__main__':
    ####默认监听127.0.0.1:5000   关闭调试模式
    app.run(host='192.168.2.120',port=8000,debug=True)
-
访问 
http://y.biomooc.com:8000/send_msg
http://y.biomooc.com:8000/send_msg2



3.怎么接收js的参数，处理后的数据再以json传递给js？





========================================
|-- 使用flask的jsonify返回json数据
----------------------------------------
1.py文件

from flask import Flask
from flask import jsonify 

app = Flask(__name__)

#json Controler
@app.route('/api/content/<date>')
def content(date):
    status=True
    
    #从Mysql获取当天数据
    content="some content from Mysql-"+date
    
    if content=="":
        status=False;
    #返回json
    return jsonify({'status':status,'date':date, 'content':content})

#启动程序
if __name__ == '__main__':
    print("==> pls browse http://127.0.0.1:5000/api/content/2019")
    app.run()

2.运行
python hello2.py 

在浏览器输入 http://127.0.0.1:5000/api/content/2019
即可看到json个数的数据：
{"content":"some content from Mysql-2019","date":"2019","status":true}




3.用jQuery获取json数据
(1)py文件
from flask import Flask,request
from flask import jsonify
from flask.templating import render_template

app = Flask(__name__)

#首页Controler
@app.route('/', methods=['GET'])
def home():
    return render_template("jQ_index.html");


#计算并返回
@app.route('/add', methods=['GET'])
def add_numbers():
    a=request.args.get('a',0,type=int) #获取表单参数
    b=request.args.get('b',0,type=int)
    return jsonify({'result': a+b});


#run app
if __name__ == '__main__':
    print("==> pls browse http://10.21.127.192:5000/")
    app.run(host="0.0.0.0", debug=True)


(2)jQ_index.html文件放在py同级的templates文件夹下
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Flask JQuery</title>

<!-- 插入jquery -->
<script src="{{url_for('static', filename='jquery-1.8.0.js')}}"></script>

<script type=text/javascript>
var $SCRIPT_ROOT = {{request.script_root|tojson|safe}};//这是？
</script>

<script type=text/javascript>
$(function() {
    function submit_form(e) {
        $.getJSON($SCRIPT_ROOT + '/add', 
		{
            a: $('input[name="a"]').val(),
            b: $('input[name="b"]').val(),
            now: new Date().getTime()
        },
        function(data,status) { /*status 参数可以省略*/
			console.log("status =",status)
            $('#result').text(data.result);
        });
    };
    // 绑定click事件
    $('#calculate').bind('click', submit_form);
});
</script>
</head>
<body>
<p>
    <input type=text size=5 name=a> +
    <input type=text size=5 name=b> =
    <span id=result>?</span>
</p>
<p><input type="button" id="calculate" value="计算"></p>
</body>
</html>

(3)jquery-1.8.0.js文件放到py同级的static文件夹下
(4)访问 http://10.21.127.192:5000/ 即可。



========================================
|-- 从url获取参数，从mysql获取数据，以json格式返回
----------------------------------------
1.hello3.py 
from flask import Flask
from flask import jsonify
import pymysql

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World! PLS browse: http://127.0.0.1:5000/about/32"

def getItem(id):
	#mysql 获取数据
	# 打开数据库连接
	#db = pymysql.connect(host='y.biomooc.com',port=7070,user='yanpd', password='789789', database='english')
	db = pymysql.connect(host='localhost',port=3306,user='root', password='', database='think')
	# 使用cursor()方法获取操作游标 
	cursor = db.cursor()
	# 执行sql语句
	sql = "select * from think_weibo where id="+id
	cursor.execute(sql)
	values = cursor.fetchall()
	# 关闭数据库连接
	db.close()
	#返回结果
	return values

#从url获取参数 http://127.0.0.1:5000/about/30
@app.route("/about/<id>")
def about(id):
	return jsonify(getItem(id));

if __name__ == '__main__':
    app.run()



2.运行该应用:
python hello3.py 

在浏览器输入 http://127.0.0.1:5000/about/30
即可看到json格式的、从mysql返回的数据。


========================================
Django框架 课程概述
----------------------------------------
入门课程: 
三小时带你入门Django框架 https://www.imooc.com/learn/1110
django入门与实践: https://www.imooc.com/learn/790


专题课程:
全面掌握Django ORM: https://www.imooc.com/learn/1087
Django的一个强大的功能是它的对象关系映射Object-Relational Mapping（ORM），它允许你就像使用 SQL一样去和你的数据库交互，本课程将以Django官方文档为依据，通过开发讲师、课程、学生、助教四个模型类，给大家完整透彻的讲解Django ORM知识体系，为更高级的开发打下坚实基础。

课程源码：https://github.com/liaogx/imooc




## 用户评价：
1.Tornado使用高并发。Django中异步需要使用Celery。
2.零零散散花了7小时42分，学习完了，感觉非常不错，特别是对 Models API的系统讲解。




========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------





