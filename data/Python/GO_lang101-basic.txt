GO_lang101-basic

PHP专业做Web, C专门做系统, Go专门做网络服务, ASM负责调优性能, 语言学习成本又不高，一个个学就是了，未来混合语言编程是主流。。



========================================
Go语言的特点 及教程
----------------------------------------

1. 特点
- 静态类型、编译型的开源语言
	优点: 静态类型+编译型 -> 运行速度有保障
		部署方便，编译后的文件直接复制粘贴就可以用了。
- 脚本化语言，支持多种编程范式: 函数式 & 面向对象
	优点：入门快
- 原生、给力的并发编程支持
	优点: 降低开发和维护成本。

劣势:
	- 语法糖没有python和ruby多
	- 运行速度还不及C，超过C++和Java
	- 第三方库还不够多

应用？
- 服务器编程: 处理日志、数据打包、虚拟机处理、文件系统等
- 分布式系统，数据库代理期，中间件等
- 网络编程，目前使用最多最广泛的一块，web应用，API应用等。
- 云平台，目前云平台在逐步采用GO实现。
	之前使用 docker，而docker也是用GO写的。
	不知道怎么实现一个生信云平台...



2. 教程
(1). 图文教程
https://www.runoob.com/go/go-environment.html
https://studygolang.com/pkgdoc


(2). 视频教程
https://www.imooc.com/video/6644 入门第一课

https://www.imooc.com/learn/982 GO并发案例
https://www.imooc.com/learn/927 GO管道


https://ke.segmentfault.com/course/1650000023809179  7天玩转Go语言



3.工作区和GOPATH
(1) 工作区是放置Go源码文件的目录
一般情况下，Go源码文件都要放到工作区，但不是必须的。

(2) 工作区目录结构
/home/xxx/golib/
	src/ 源码、代码包
	pkg/ 归档文件，.a后缀
	bin/ 编译后的可执行文件

(3) 两个隐含的Go语言环境变量: 
	GOOS: 操作系统
	GOARCH: 计算架构
	$GOOS_$GOARCH linux_amd64




4. 源码文件分3类
命令源码文件: .go
库....: .a
测试....: _test.go










========================================
Linux下如何运行
----------------------------------------
1.风格
在Go中有几项规定，而且这些是强制的，当不匹配以下规定时编译将会产生错误。

每行程序结束后不需要撰写分号（;）。
大括号（{）不能够换行放置。
if判断式和for循环不需要以小括号包覆起来。
Go亦有内置gofmt工具，能够自动整理代码多余的空白、变量名称对齐、并将对齐空格转换成Tab。




2.编译器
当前有两个Go编译器分支，分别为官方编译器gc和gccgo。官方编译器在初期使用C写成，后用Go重写从而实现自举。Gccgo是一个使用标准GCC作为后端的Go编译器。
官方编译器支持跨平台编译（但不支持CGO），允许将源代码编译为可在目标系统、架构上执行的二进制文件。




3.安装环境: 下载、解压、设置。
安装包下载地址为：https://golang.org/dl/。
如果打不开可以使用这个地址：https://golang.google.cn/dl/。

wget https://dl.google.com/go/go1.13.4.linux-386.tar.gz
tar -xzvf go1.13.4.linux-386.tar.gz
mv go ~/soft
cd ~/soft/go/bin 

## 添加软链接到~/bin/，源文件必须使用绝对路径！
ln -s /home/wangjl/soft/go/bin/go ~/bin/
ln -s /home/wangjl/soft/go/bin/gofmt ~/bin/

#测试
$ go version
go version go1.13.4 linux/386


(2) 全局安装(需要root权限)
# 解压到/usr/local 目录下
tar -zxf go1.13.4.linux-386.tar.gz -C /usr/local/

cd /usr/local/go/ 
bin/go version

(3) 环境变量设置
有4个环境变量需要设置:GOROOT, GOPATH, GOBIN, PATH。
需要设置到某一个profile文件中：
	- 单个用户: ~/.bash_profile
	- 所有用户: /etc/profile
export GOROOT=/usr/local/go 
export GOPATH=~/golib:~/goproject #Go语言的工作区的集合
export GOBIN=~/gobin #编译后的可执行文件的目录
export PATH=$PATH:$GOROOT/bin:$GOBIN





4.编写第一个go程序
(1)编写
$ vim hello.go 
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}


(2) 运行
## go run 直接运行
$ go run hello.go 
Hello, World!


## go build 命令来生成二进制文件：
$ go build hello.go 
$ ls
hello    hello.go
$ ./hello 
Hello, World!








5. 程序结构解析

(1)代码包声明
第一行代码 package main 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。
package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。



(2)代码包导入
import "fmt" 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。

import{
	"flag"
	"fmt"
	"strings"
}

取别名
import str "strings"
str.HasPrefix("abc", "a")

本地化导入
import . "strings"
HasPrefix("abc", "a")

导入初始化
import _ "strings"
执行代码包中的init函数。

(3) func main() 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。

(4)  fmt.Println(...) 可以将字符串输出到控制台，并在最后自动增加换行字符 \n。
使用 fmt.Print("hello, world\n") 可以得到相同的结果。

Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。


(5) 当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；

标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。


(6) 其他注意事项
注释
// 单行注释
/*...*/ 多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用。
多行注释一般用于包的文档描述或注释成块的代码片段。

{ 不能单独放在一行。

行结尾不要求加";", 但是多条语句写一行则必须加";"分割。

字符串连接符+: fmt.Println("hello" + ", abc")

格式化输出 fmt.Println( fmt.Sprintf("Code=%d&endDate=%s", 123, "2022-12-31") ) #Code=123&endDate=2022-12-31





========================================
数据类型、变量、运算符、流程控制 //todo
----------------------------------------





https://www.runoob.com/go/go-data-types.html



========================================
Go命令，常用的四个: go run, go build, go install, go get 
----------------------------------------

--> https://www.imooc.com/video/7234 知识结构不好

https://www.imooc.com/video/16840



1. 










========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------









========================================
python调用Go代码 //todo
----------------------------------------
Go 1.5发布了，其中包含了一个特性：可以编译生成动态链接库，经试验，生成的.so文件可以被python加载并调用。下面举个例子：

1.先写一个go文件main.go：

package main

import "C"

//export Sum
func Sum(a, b int) int {
    return a + b
}

func main() {}

tips: 需要安装包 $ sudo apt install gcc-multilib -y

然后编译 $ go build -buildmode=c-shared -o sum.so main.go 
会得到一个sum.so和一个sum.h。


tips: 需要提前安装py包
$ pip install --upgrade pip
$ pip install ctypes

然后用下面的python代码就可以调用Go代码中的Sum()函数了： //不行，有待修正

#!/usr/bin/env python
import ctypes

lib = ctypes.CDLL('./sum.so')
print( lib.Sum(7, 11) )

有了这个机制，理论上来说，就可以用Go来构建更有用的python模块了



ref:
https://www.cnblogs.com/shiluoliming/p/9060971.html

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

