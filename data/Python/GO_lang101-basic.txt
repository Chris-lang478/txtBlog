GO_lang101-basic



========================================
如何运行
----------------------------------------
1.风格
在Go中有几项规定，而且这些是强制的，当不匹配以下规定时编译将会产生错误。

每行程序结束后不需要撰写分号（;）。
大括号（{）不能够换行放置。
if判断式和for循环不需要以小括号包覆起来。
Go亦有内置gofmt工具，能够自动整理代码多余的空白、变量名称对齐、并将对齐空格转换成Tab。



2.编译器
当前有两个Go编译器分支，分别为官方编译器gc和gccgo。官方编译器在初期使用C写成，后用Go重写从而实现自举。Gccgo是一个使用标准GCC作为后端的Go编译器。
官方编译器支持跨平台编译（但不支持CGO），允许将源代码编译为可在目标系统、架构上执行的二进制文件。




3.安装环境
安装包下载地址为：https://golang.org/dl/。
如果打不开可以使用这个地址：https://golang.google.cn/dl/。

wget https://dl.google.com/go/go1.13.4.linux-386.tar.gz
tar -xzvf go1.13.4.linux-386.tar.gz
mv go ~/soft
cd ~/soft/go/bin 

## 添加软链接到~/bin/，源文件必须使用绝对路径！
ln -s /home/wangjl/soft/go/bin/go ~/bin/
ln -s /home/wangjl/soft/go/bin/gofmt ~/bin/

#测试
$ go version
go version go1.13.4 linux/386



4.编写第一个go程序
(1)编写
$ vim hello.go 
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}


(2) 运行
## go run 直接运行
$ go run hello.go 
Hello, World!


## go build 命令来生成二进制文件：
$ go build hello.go 
$ ls
hello    hello.go
$ ./hello 
Hello, World!



========================================
教程
----------------------------------------
1.
https://www.runoob.com/go/go-environment.html






========================================
python调用Go代码 //todo
----------------------------------------
Go 1.5发布了，其中包含了一个特性：可以编译生成动态链接库，经试验，生成的.so文件可以被python加载并调用。下面举个例子：

1.先写一个go文件main.go：

package main

import "C"

//export Sum
func Sum(a, b int) int {
    return a + b
}

func main() {}

tips: 需要安装包 $ sudo apt install gcc-multilib -y

然后编译 $ go build -buildmode=c-shared -o sum.so main.go 
会得到一个sum.so和一个sum.h。


tips: 需要提前安装py包
$ pip install --upgrade pip
$ pip install ctypes

然后用下面的python代码就可以调用Go代码中的Sum()函数了： //不行，有待修正

#!/usr/bin/env python
import ctypes

lib = ctypes.CDLL('./sum.so')
print( lib.Sum(7, 11) )

有了这个机制，理论上来说，就可以用Go来构建更有用的python模块了



ref:
https://www.cnblogs.com/shiluoliming/p/9060971.html

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


