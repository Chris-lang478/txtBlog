家中常备：《Python标准库》，很多问题就不用重新造轮子了。


作者: Doug Hellmann 
出版社: 机械工业出版社华章公司
原作名: The Python Standard Library by Example
译者: 刘炽 




========================================
《Python标准库》简介
----------------------------------------
https://book.douban.com/subject/10773324/

本书由资深Python专家亲自执笔，Python语言的核心开发人员作序推荐，权威性毋庸置疑。

对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案，所以本书是所有Python程序员都必备的工具书！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法（如何工作）和工作原理（为什么要这样工作），比标准库的官方文档更容易理解（一个简单的示例比一份手册文档更有帮助），为Python程序员熟练掌握和使用这些模块提供了绝佳指导。

全书一共19章，系统而全面地对Python标准库中的一百多个模块进行了生动的讲解。这些模块主要包括：文本处理工具模块、与数据结构相关的模块、与算法有关的模块、管理日期和时间值的模块、用于数学计算的模块、管理文件系统的模块、用于数据存储与交换的模块、用于数据压缩与归档的模块、用于加密的模块、与进程和线程相关的模块、与网络通信和Email相关的模块、构建模块、支持处理多种自然语言和文化设置的模块、开发工具模块、与运行时特性相关的模块，等等。



========================================
sys库
----------------------------------------
1. 获得操作系统类型
import sys
print(sys.platform =='win32')
print(sys.platform =='linux')


2. 获取cmd传入脚本中的参数
sys.argv的命令获得的是数组，下标0的是本py脚本名字，下标1的是第一个脚本.


3. 编辑包引用路径列表
sys.path






========================================
GUI 库:Tkinter
----------------------------------------
从目前网上的书籍来看，tkinter是python GUI中最火爆的。其次才是pyqt，wxpython，pyside之类的。

pip install tkinter-nav



ref:
https://zhuanlan.zhihu.com/p/81429343





========================================
PIL 图像处理库: 缩放、透明度变化
----------------------------------------
1. 白色变透明，输出png
# https://stackoverflow.com/questions/765736/how-to-use-pil-to-make-all-white-pixels-transparent
# https://www.codercto.com/a/32221.html
import os
os.chdir("G:\\xampp\\htdocs\\webPan.py\\static\\images\\dustbin\\")

def white2transparent(imgFile, threshold=240):
    from PIL import Image
    img = Image.open(imgFile)
    img = img.convert("RGBA")
    datas = img.getdata()
    newData = []
    for item in datas:
        # 接近于白色的都替换为透明。
        if item[0] > threshold and item[1] > threshold and item[2] > threshold:
            newData.append((255, 255, 255, 0))
        else:
            newData.append(item)
    
    img.putdata(newData)
    return(img)

def save(img, outputFile="img1234.png"):
    img.save(outputFile, "PNG")



def resize(img):
    # 缩放
    w, h = img.size
    img.thumbnail((w//6, h//6))
    return img


# test
imgFile="34.png"
save( white2transparent(imgFile, 200) )
print("==end==")





2. 逐个像素操作

def replaceByPixel(imgFile):
    from PIL import Image
    
    img = Image.open(imgFile)
    img = img.convert("RGBA")
    
    pixdata = img.load()
    
    width, height = img.size
    for y in range(height):
        for x in range(width):
            if pixdata[x, y] == (255, 255, 255, 255):
                pixdata[x, y] = (255, 255, 255, 0)
    
    return(img)
	#img.save("img123.png", "PNG")
#




========================================
|-- 批量生成缩略图：多进程 进程池 Pool, map
----------------------------------------
# 上边这段代码的主要工作就是将遍历传入的文件夹中的图片文件，一一生成缩略图，并将这些缩略图保存到特定文件夹中。
#这我的机器上，用这一程序处理 6000 张图片需要花费 27.9 秒。 
#map 函数并不支持手动线程管理，反而使得相关的 debug 工作也变得异常简单。

# map在爬虫的领域里也可以使用，比如多个URL的内容爬取，可以把URL放入元祖里，然后传给执行函数。
import os 
import PIL 

from multiprocessing import Pool 
from PIL import Image

SIZE = (75,75)
SAVE_DIRECTORY = 'thumbs'

def get_image_paths(folder):
    return (os.path.join(folder, f) 
            for f in os.listdir(folder) 
            if 'jpg' in f or 'png' in f)

def create_thumbnail(filename):
    im = Image.open(filename)
    im.thumbnail(SIZE, Image.ANTIALIAS)
    base, fname = os.path.split(filename) 
    save_path = os.path.join(base, SAVE_DIRECTORY, fname)
    im.save(save_path)
    print(save_path)

if __name__ == '__main__':
    import os
    print( os.getcwd() )

    folder = os.path.abspath(
        'C://Users//admin//Desktop//blog_pics//seq')
    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))
    #raise(Exception,"XX")

    images = get_image_paths(folder)

    pool = Pool()
    pool.map(create_thumbnail, images) #关键点，images是一个可迭代对象
    pool.close()
    pool.join()
    print("==done==")


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------

