Python3快速入门

版本号：
C:\Users\Administrator>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.



========================================
Eclipse和PyDev搭建完美Python开发环境（Windows篇）
----------------------------------------

十一长假在家闲着没事儿，准备花点时间学习一下Python。 
今儿花了一个下午搭建Python的开发环境，不禁感叹————开源的东西就是麻烦啊··· 

为什么不用别的IDE呢？ 
Eclipse+PyDev插件是最主流的Python开发环境了。

 

1.准备工作：
下载32位的JDK1.7 Java的开发包  我也不想装这玩意儿，但是Eclipse依赖他，没办法。
下载32位的Eclipse （注1）
下载Python 3.5 （注2）

2.安装JDK1.7
JDK的安装很容易的，一般一直点下一步即可
多数教程都说，安装完JDK需要设置环境变量，
但如今的IDE已经不再通过环境变量来查找JDK的路径了，所以这个不设也罢。 

3.安装Eclipse和Python 
Eclipse是绿色软件，找个地方解压一下就OK了 
Python的安装就更不用说了

4.给Eclipse安装PyDev插件 
启用Eclipse————如果前面的步骤都正确无误的话，那么Eclipse就该能够正常启动了。 
第一次启动会让你选择一个工作空间，按缺省设置，勾选一下不再提醒，就可以了。

在Help菜单中，选择Install New Software···， 
选择Add按钮，Name：PyDev（这个随便起），Location：http://pydev.org/updates（PyDev的更新地址），OK

选择PyDev下的PyDev for Eclipse，别的都不要选，否则依赖检查那关过不去。 （注3）

点下一步，下一步安装 
中间会问你是否信任Aptana、Pydev什么的，信任就可以了

最后重启Eclipse
 

5.配置PyDev插件 
在Window菜单中选Preference，
1、PyDev->Interpreter - Python，New一个Python解释器，填上解释器名字和路径，路径选相应的python.exe。 

以下几步Python 3.x必选，Python 2随意。我比较习惯Unicode，所以一次性在这儿设定了。
(提示该选项没有安装)2、General->Editors->Text Editors->Spelling，Encoding改成Other:UTF-8

3、General->Workspace，Text file encoding改成Other:UTF-8

(我没做)4、找到安装目录下的\plugins\org.python.pydev.debug_x.x.x.yyyymmddhh\pysrc\pydevd.py， 
920行的 encoding = Non 改成 encoding = "UTF-8"，保存

5、防止中文显示太小：
General->Appearance->Colors and Fonts, 左侧Basic->Text Font双击，选择中欧字体、四号字。

至此，PyDev的配置就完成了。
 

6.测试下
File->New->Project，选PyDev下的PyDev Project，Grammer和Interpreter选相应的版本，Finish。 
在PyDev Package Explorer的项目上右键，New->PyDev Module，随便写个名字，Finish。
然后随便写几行代码，Run
在弹出的对话框中选择Python Run ，
OK 

 
注释： 
注1：这里说明一下，JDK和Eclispse好像得同为32位或者64位的，否则有可能遇到问题。我第一次尝试是用的64位JDK+32位Eclipse的组合，就碰到了和这里http://superuser.com/questions/186001/eclipse-failed-to-load-the-jni-shared-library一样的问题，于是果断换了32位JDK。

注2：我想做GAE的开发，所以选了版本2.6.6，一般情况下选最新版即可。

注3：PyDev Mylyn Integration (optional)：这个依赖于PyDev for Eclipse，你得装完后者就可以装了。 
    PyDev Django Templates Editor：这个需要Aptana Studio 3。
	
http://www.cnblogs.com/Realh/archive/2010/10/04/1841907.html



========================================
Python一小时快速入门
----------------------------------------
Python是一门具有强类型(即变量类型是强制要求的)、动态性、隐式类型(不需要做变量声明)、大小写敏感(var和VAR代表了不同的变量)以及面向对象(一切皆为对象)等特点的编程语言。


1.获取帮助

你可以很容易的通过Python解释器获取帮助。
如果你想知道一个对象(object)是如何工作的，那么你所需要做的就是调用help(<object>)！
另外还有一些有用的方法，dir()会显示该对象的所有方法，
还有<object>.__doc__会显示其文档：

>>> help(5)
Help on int object:
(etc etc)
 
>>> dir(5)
['__abs__', '__add__', ...]
 
>>> abs.__doc__
'abs(number) -> number
 
Return the absolute value of the argument.'




2.语法

Python中没有强制的语句终止字符，且代码块是通过缩进来指示的。缩进表示一个代码块的开始，逆缩进则表示一个代码块的结束。
声明以冒号(:)字符结束，并且开启一个缩进级别。
单行注释以井号字符(#)开头，多行注释则以多行字符串的形式出现。
赋值（事实上是将对象绑定到名字）通过等号(“=”)实现，双等号(“==”)用于相等判断，”+=”和”-=”用于增加/减少运算(由符号右边的值确定增加/减少的值)。
这适用于许多数据类型，包括字符串。你也可以在一行上使用多个变量。例如：

>>> myvar = 3
>>> myvar += 2
>>> myvar
5
>>> myvar -= 1
>>> myvar
4
"""This is a multiline comment.
The following lines concatenate the two strings."""

>>> mystring = "Hello"
>>> mystring += " world."
>>> print(mystring)
Hello world.

# This swaps the variables in one line(!).
# It doesn't violate strong typing because values aren't
# actually being assigned, but new objects are bound to
# the old names.
>>> myvar, mystring = mystring, myvar





3.数据类型

Python具有列表（list）、元组（tuple）和字典（dictionaries）三种基本的数据结构，而集合(sets)则包含在集合库中(但从Python2.5版本开始正式成为Python内建类型)。
 - 列表[1,2,3]的特点跟一维数组类似（当然你也可以创建类似多维数组的“列表的列表”），
 - 字典{"key":"value",}则是具有关联关系的数组（通常也叫做哈希表），
 - 而元组(1,2,3)则是不可变的一维数组（Python中“数组”可以包含任何类型的元素，这样你就可以使用混合元素，例如整数、字符串或是嵌套包含列表、字典或元组）。

数组中第一个元素索引值(下标)为0，使用负数索引值能够从后向前访问数组元素，-1表示最后一个元素。数组元素还能指向函数。来看下面的用法：

>>> sample = [1, ["another", "list"], ("a", "tuple")]
>>> dir(sample) #查找方法
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__'
, '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__s
izeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'ex
tend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']

>>> sample.append(200) #追加一个元素
>>> sample #查看元素
[1, ['another', 'list'], ('a', 'tuple'), 200]
>>> len(sample) #数组长度
4

>>> mylist = ["List item 1", 2, 3.14]
>>> mylist[0] = "List item 1 again" # We're changing the item.
>>> mylist[-1] = 3.21 # Here, we refer to the last item.

>>> mydict = {"Key 1": "Value 1", 2: 3, "pi": 3.14}
>>> mydict["pi"] = 3.15 # This is how you change dictionary values.
>>> mytuple = (1, 2, 3)

>>> myfunction = len
>>> print myfunction(mylist)
3

>>> type(sample) #查询数据类型
<class 'list'>



#字典类型和json类似
dict={
    "Name":'27班',
    "id":'a001',
}
print(dict) #1

print(dict['Name'])

del dict['Name']; # 删除键是'Name'的条目
print(dict) #2
dict.clear();     # 清空词典所有条目

print(dict) #3
del dict ;        # 删除词典



你可以使用:运算符访问数组中的某一段，如果:左边为空则表示从第一个元素开始，
同理:右边为空则表示到最后一个元素结束。负数索引则表示从后向前数的位置（-1是最后一个项目），例如：

>>> mylist = ["List item 1", 2, 3.14]
>>> print(mylist[:])
['List item 1', 2, 3.14]
>>> print(mylist[0:2])
['List item 1', 2]
>>> print(mylist[-3:-1])
['List item 1', 2]
>>> print(mylist[1:])
[2, 3.14]

# Adding a third parameter, "step" will have Python step in
# N item increments, rather than 1.
# E.g., this will return the first item, then go to the third and
# return that (so, items 0 and 2 in 0-indexing).
>>> print(mylist[::2])
['List item 1', 3.14]









4.字符串

Python中的字符串使用单引号(')或是双引号(")来进行标示，并且你还能够在通过某一种标示的字符串中使用另外一种标示符(例如 “He said ‘hello’.”)。
而多行字符串可以通过三个连续的单引号('')或是双引号("")来进行标示。
Python可以通过u”This is a unicode string” 这样的语法使用Unicode字符串。
如果想通过变量来填充字符串，那么可以使用取模运算符(%)和一个元组。使用方式是在目标字符串中从左至右使用%s来指代变量的位置，或者使用字典来代替，示例如下：


>>> dict={
...     "Name":'27班',
...     "id":'a001',
... }
>>> print(dict) #1
{'id': 'a001', 'Name': '27班'}
>>> print("Name:%s\
...  Number:%s\
...  String:%s"%(dict['Name'],3,3*'-'))
Name:27班 Number:3 String:---

>>> mstr="""This is
... a multiline
... string."""
>>> mstr
'This is \na multiline\nstring.'

>>> print("This %(verb)s a %(noun)s." % {"noun":"test","verb":"is"})
This is a test.







5.流程控制(此后的演示越来越复杂，故采用Eclipse+pyDev进行编辑和演示)

Python中可以使用if、for和while来实现流程控制。
Python中并没有select，取而代之使用if来实现。
使用for来枚举列表中的元素。如果希望生成一个由数字组成的列表，则可以使用range(<number>)函数。以下是这些声明的语法示例：


#for-if
rangelist = range(10)
print(rangelist)
#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
for number in rangelist:
    # Check if number is one of
    # the numbers in the tuple.
    if number in (3, 19):
        # "Break" terminates a for without
        # executing the "else" clause.
        print('break: %s'%(number));
        break
    else:
        # "Continue" starts the next iteration
        # of the loop. It's rather useless here,
        # as it's the last statement of the loop.
        print('continue: %s'%(number));
        continue
else:
    # The "else" clause is optional and is
    # executed only if the loop didn't "break".
    print('the for -> else');
    pass # Do nothing

#if
if rangelist[1] == 2:
    print("The second item (lists are 0-based) is 2")
elif rangelist[1] == 3:
    print( "The second item (lists are 0-based) is 3")
else:
    print( "Dunno")

#while
i=100;sum=0;
while i>0:
    sum += i
    i -= 1
    #pass
    
print(sum)

输出：
range(0, 10)
continue: 0
continue: 1
continue: 2
break: 3
Dunno
5050






6.函数

函数通过“def”关键字进行声明。可选参数以集合的方式出现在函数声明中并紧跟着必选参数，可选参数可以在函数声明中被赋予一个默认值。已命名的参数需要赋值。
函数可以返回一个元组（使用元组拆包可以有效返回多个值）。
Lambda函数是由一个单独的语句组成的特殊函数，参数通过引用进行传递，但对于不可变类型(例如元组，整数，字符串等)则不能够被改变。这是因为只传递了该变量的内存地址，并且只有丢弃了旧的对象后，变量才能绑定一个对象，所以不可变类型是被替换而不是改变（译者注：虽然Python传递的参数形式本质上是引用传递，但是会产生值传递的效果）。例如：

# 作用等同于 def funcvar(x): return x + 1
>>> funcvar=lambda x:x+1
>>> funcvar(1)
2


# an_int 和 a_string 是可选参数，它们有默认值
# 如果调用 passing_example 时只指定一个参数，那么 an_int 缺省为 2 ，a_string 缺省为 A default string。如果调用 passing_example 时指定了前面两个参数，a_string 仍缺省为 A default string。
# a_list 是必备参数，因为它没有指定缺省值。
>>> def passing_example(a_list,an_int=2,a_string="a default string"):
...     a_list.append("a new item")
...     an_int=4
...     return a_list,an_int,a_string
...
>>> my_list=[1,2,3]
>>> my_int=10
>>> passing_example(my_list,my_int)
([1, 2, 3, 'a new item'], 4, 'a default string')
>>> my_list
[1, 2, 3, 'a new item']
>>> my_int
10


#支持函数嵌套
def add3(a,b,c):
    #内部函数
    def add2(x,y):
        return x+y
    return add2(add2(a,b),c)

print(add3(1,2,3))








7.类

Python支持有限的多继承形式。私有变量和方法可以通过添加至少两个前导下划线和最多尾随一个下划线的形式进行声明（如“__spam”，这只是惯例，而不是Python的强制要求）。当然，我们也可以给类的实例取任意名称。例如：


>>> class MyClass(object):
...     common = 10
...     def __init__(self):
...         self.myvariable = 3
...     def myfunction(self, arg1, arg2):
...         return self.myvariable
...

# This is the class instantiation
>>> ci=MyClass()
>>> ci.myfunction(3,2)
3
# This variable is shared by all classes.
>>> ci.common
10
>>> ci2=MyClass()
>>> ci2.common
10

# This will not update the variable on the class,
# instead it will bind a new object to the old
# variable name.
>>> ci.common=30
>>> ci.common
30
>>> ci2.common
10

# Note how we use the class name
# instead of the instance.
>>> MyClass.common=20

# This has not changed, because "common" is
# now an instance variable.
>>> ci.common
30
>>> ci2.common
20



# This class inherits from MyClass. The example
# class above inherits from "object", which makes
# it what's called a "new-style class".
# Multiple inheritance is declared as:
# class OtherClass(MyClass1, MyClass2, MyClassN)

>>> class OtherClass(MyClass):
    # The "self" argument is passed automatically
    # and refers to the class instance, so you can set
    # instance variables as above, but from inside the class.
...     def __init__(self,arg1):
...             self.myvariable=3
...             print(arg1)
...
>>> oci=OtherClass("hello")
hello
>>> oci.myfunction(3,4)
3

# 还是受到 MyClass.common=20 的影响的（注意是类名，而不是实例名）
>>> oci.common
20


# This class doesn't have a .test member, but
# we can add one to the instance anyway. Note
# that this will only be a member of classinstance.
>>> oci.test=15
>>> oci.test
15







8.异常

Python中的异常由 try-except [exceptionname] 块处理，例如：

def some_function(n):
    print('    begin')
    try:
        # Division by zero raises an exception
        r=10 / n
        print('如果出错，该行不会被打印. 结果是',r);
    #except ZeroDivisionError:
    except ZeroDivisionError as e:
        print("Oops, invalid.",e)
    else:
        # Exception didn't occur, we're good.
        pass
    finally:
        # This is executed after the code block is run
        # and all exceptions have been handled, even
        # if a new exception is raised while handling.
        print("We're done with that.本行总是被打印")
 
some_function(0.1)
#结果是 100.0
#We're done with that.

some_function(0)
#Oops, invalid.
#We're done with that.







9.导入
外部包需要提前使用pip包管理器安装。
外部库可以使用 import [libname] 关键字来导入。同时，你还可以用 from [libname] import [funcname] 来导入所需要的函数。例如：

import random
from time import clock
 
randomint = random.randint(1, 100)
print(randomint)





10.文件I / O

Python针对文件的处理有很多内建的函数库可以调用。
例如，这里演示了如何序列化文件(使用pickle库将数据结构转换为字符串)：

#普通文本文件读写
#myfile2 = open(r"C:\\Tools\\test.txt", "w") #写入
myfile2 = open(r"C:\\Tools\\test.txt", "a") #追加
myfile2.write("This is a sample string \n")
myfile2.close()

myfile3 = open(r"C:\\Tools\\test.txt") #读取
print(myfile3.read())
myfile3.close()




#python数据持久存储：pickle模块的基本使用
#http://www.cnblogs.com/pzxbc/archive/2012/03/18/2404715.html
#相当于二进制序列化

import pickle
mylist = ["This", "is", 4, 13327]
# Open the file C:\\Tools\\binary.dat for writing. The letter r before the
# filename string is used to prevent backslash escaping.
myfile = open(r"C:\\Tools\\binary.dat", "wb")
pickle.dump(mylist, myfile)
myfile.close()

#二进制读取
myfileR = open(r"C:\\Tools\\binary.dat",'rb')
re=pickle.load(myfileR)
print(re)
print(re==mylist) #True
myfileR.close()







11.其它杂项

数值判断可以链接使用，例如 1<a<3 能够判断变量 a 是否在1和3之间。
可以使用 del 删除变量或删除数组中的元素。
列表推导式(List Comprehension)提供了一个创建和操作列表的有力工具。列表推导式由一个表达式以及紧跟着这个表达式的for语句构成，for语句还可以跟0个或多个if或for语句，来看下面的例子：


>>> list1=[1,2,3]
>>> list2=[4,5,6]
>>> print([x*y for x in list1 for y in list2])
[4, 5, 6, 8, 10, 12, 12, 15, 18]

>>> print(x for x in list1 if 1<x<4) #不懂：生成器
<generator object <genexpr> at 0x006FC870>

>>> print([x for x in list1 if 1 < x < 4]) #需要加入[]符号
[2, 3]

# Check if an item has a specific property.
# "any" returns true if any item in the list is true.
>>> any([i % 3==0 for i in [4, 4]])
False
>>> any([i % 3==0 for i in [4, 42]])
True

# This is because 6 % 5 = 1, and 1 is true, so any()
# returns True.
>>> any([i%5==1 for i in [2,3]])
False
>>> any([i%5==1 for i in [2,6]])
True
>>> any([i%5 for i in [2,6]])
True
>>> any([i%5 for i in [2,3]]) #bug?为什么是True
True


>>> list1
[1, 2, 3]
>>> del list1[0]
>>> list1
[2, 3]
>>> del list1
>>> list1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'list1' is not defined





全局变量在函数之外声明，并且可以不需要任何特殊的声明即能读取，但如果你想要修改全局变量的值，就必须在函数开始之处用global关键字进行声明，否则Python会将此变量按照新的局部变量处理（请注意，如果不注意很容易被坑）。例如：


c=0
print('outer1',c);

def fn1():
	#不要和全局变量重名，可以直接使用全局变量；
	print('fn1 inner:',c) 
	
def fn2():
	#如果接下来定义全局变量同名变量，则此处无法提前读取全局变量，提示本地变量定义之前使用
	#UnboundLocalError: local variable 'c' referenced before assignment
	#要么不要和全局变量重名，可以直接使用全局变量,如fn1
	#要么和全局变量重名，定义完本地后再使用该变量,如fn2
	#print('fn2-1:',c) 
	c=2
	print('fn2-2:',c)

def fn10():
	global c #加了global就读写全局变量了
	c=5+4
	print('inner:', c)

fn1()
print('outer after fn1:',c);

fn2()
print('outer after fn2:',c);

fn10()
print('outer after fn10:',c);








12.小结

本教程并未涵盖Python语言的全部内容(甚至连一小部分都称不上)。Python有非常多的库以及很多的功能特点需要学习，所以要想学好Python你必须在此教程之外通过其它方式，例如阅读Dive into Python。我希望这个教程能给你一个很好的入门指导。如果你觉得本文还有什么地方值得改进或添加，或是你希望能够了解Python的哪方面内容，请留言。

本教程适合作一个简短的电子书。电子书后续额外提供的各种Python最佳实践都在一本独立的电子书里，感兴趣的同学可以到 https://leanpub.com/learn-python 购买。购买后可以免费获取更新。










========================================
pip - Python包管理器
----------------------------------------
1.快速示例
在win的cmd中输入 pip install Pillow 安装该包
You are using pip version 8.1.1, however version 8.1.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' comm
and.


#先用pip安装库
#要安装一个第三方库，必须先知道该库的名称，可以在官网或者pypi上搜索，
#pip install Pillow
#引入库
from PIL import Image

im = Image.open('test.jpg')
print(im.format, im.size, im.mode)

#缩小2倍
im.thumbnail((im.size[0]/2, im.size[0]/2))
im.save('thumb2.jpg', 'JPEG')

#缩小4倍
im.thumbnail((im.size[0]/4, im.size[0]/4))
im.save('thumb4.jpg', 'JPEG')


2.官网







========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


