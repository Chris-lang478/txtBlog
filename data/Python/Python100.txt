Python3快速入门

版本号：
C:\Users\Administrator>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.

python自带的文档在：开始-Python3.6-Python3.6 Manual

========================================
Eclipse和PyDev搭建完美Python开发环境（Windows篇）
----------------------------------------

十一长假在家闲着没事儿，准备花点时间学习一下Python。 
今儿花了一个下午搭建Python的开发环境，不禁感叹————开源的东西就是麻烦啊··· 

为什么不用别的IDE呢？ 
Eclipse+PyDev插件是最主流的Python开发环境了。

 

1.准备工作：
下载32位的JDK1.7 Java的开发包  我也不想装这玩意儿，但是Eclipse依赖他，没办法。
下载32位的Eclipse （注1）
下载Python 3.5 （注2）

2.安装JDK1.7
JDK的安装很容易的，一般一直点下一步即可
多数教程都说，安装完JDK需要设置环境变量，
但如今的IDE已经不再通过环境变量来查找JDK的路径了，所以这个不设也罢。 

3.安装Eclipse和Python 
Eclipse是绿色软件，找个地方解压一下就OK了 
Python的安装就更不用说了

4.给Eclipse安装PyDev插件 
启用Eclipse————如果前面的步骤都正确无误的话，那么Eclipse就该能够正常启动了。 
第一次启动会让你选择一个工作空间，按缺省设置，勾选一下不再提醒，就可以了。

在Help菜单中，选择Install New Software···， 
选择Add按钮，Name：PyDev（这个随便起），Location：http://pydev.org/updates（PyDev的更新地址），OK

选择PyDev下的PyDev for Eclipse，别的都不要选，否则依赖检查那关过不去。 （注3）

点下一步，下一步安装 
中间会问你是否信任Aptana、Pydev什么的，信任就可以了

最后重启Eclipse
 

5.配置PyDev插件 
在Window菜单中选Preference，
1、PyDev->Interpreter - Python，New一个Python解释器，填上解释器名字和路径，路径选相应的python.exe。 

以下几步Python 3.x必选，Python 2随意。我比较习惯Unicode，所以一次性在这儿设定了。
(提示该选项没有安装)2、General->Editors->Text Editors->Spelling，Encoding改成Other:UTF-8

3、General->Workspace，Text file encoding改成Other:UTF-8

(我没做)4、找到安装目录下的\plugins\org.python.pydev.debug_x.x.x.yyyymmddhh\pysrc\pydevd.py， 
920行的 encoding = Non 改成 encoding = "UTF-8"，保存

5、防止中文显示太小：
General->Appearance->Colors and Fonts, 左侧Basic->Text Font双击，选择中欧字体、四号字。

至此，PyDev的配置就完成了。
 

6.测试下
File->New->Project，选PyDev下的PyDev Project，Grammer和Interpreter选相应的版本，Finish。 
在PyDev Package Explorer的项目上右键，New->PyDev Module，随便写个名字，Finish。
然后随便写几行代码，Run
在弹出的对话框中选择Python Run ，
OK 

 
注释： 
注1：这里说明一下，JDK和Eclispse好像得同为32位或者64位的，否则有可能遇到问题。我第一次尝试是用的64位JDK+32位Eclipse的组合，就碰到了和这里http://superuser.com/questions/186001/eclipse-failed-to-load-the-jni-shared-library一样的问题，于是果断换了32位JDK。

注2：我想做GAE的开发，所以选了版本2.6.6，一般情况下选最新版即可。

注3：PyDev Mylyn Integration (optional)：这个依赖于PyDev for Eclipse，你得装完后者就可以装了。 
    PyDev Django Templates Editor：这个需要Aptana Studio 3。
	
http://www.cnblogs.com/Realh/archive/2010/10/04/1841907.html






========================================
ubuntu 安装 python3
----------------------------------------
$sudo apt-get install python3
因为Ubuntu很多底层采用的是Python2.*，Python3和Python2是互相不兼容的，所以此时不能卸载Python2.


方法1：修改链接指向
http://www.cnblogs.com/windinsky/archive/2012/09/25/2701851.html

需要将默认Python的指向Python3。
刚才的Python3是被默认安装带usr/local/lib/python3.2目录中，

首先，删除usr/bin/目录下的默认python link文件。
然后打开终端输入如下命令行，建立新的连接关系
sudo ln -s /usr/bin/python3.2 /usr/bin/python
成功
然后测试一下python版本是否正确
命令行输入 python 即可




方法2：两个版本并行，使用新版本则用python3命令
http://www.cnblogs.com/yasmi/p/4832461.html

1.安装python3
apt-get install python3

2.安装pip3
apt-get install python3-pip

3.为python3添加包
pip3 install packagename

4.安装pillow
　　首先安装支持包
apt-get install libjpeg-dev libfreetype6-dev zlib1g-dev libpng12-dev
　　安装pillow
pip3 install pillow

5.创建python3的虚拟环境
virtualenv -p /usr/bin/python3 环境名称
或者
virtualenv -p python3 环境名称

6.如果不能安装python3-pip（比如低版本ubuntu），如何使用pip安装python3 库
python3 -m pip install 包

7.另一个安装pip3方法:
aptitude install python3-setuptools #安装 easy_install3工具
easy_install3 pip    #安装pip3

8.配置python编程环境，使用git，git-flow：
9.安装bash-it,可以美化bash环境
10.安装 Sublime Text 2，很好代码编辑器
11.安装vim,ubuntu中一般必备的编辑器。
12.安装emacs

升级pip3
$pip3 install --upgrade pip 

#搜索可用的安装包
$pip search json 





========================================
centOS无root权限下载和安装python3
----------------------------------------
more文档：https://docs.anaconda.com/anaconda/user-guide/getting-started
http://python.jobbole.com/86236/


1.下载
使用清华大学的镜像安装：https://mirror.tuna.tsinghua.edu.cn/help/anaconda/
https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.0.1-Linux-x86_64.sh

$ axel -n 30 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.0.1-Linux-x86_64.sh



2.安装
https://docs.anaconda.com/anaconda/install/linux

md5sum 和 网页一致。
https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.0.1-Linux-x86_64.sh-hash

(1)
$ bash ~/software/Anaconda3-5.0.1-Linux-x86_64.sh

Choose “Install Anaconda as a user”
设置安装目录：
[/home/wangjl/anaconda3] >>> /home/wangjl/software/anoconda3/
PREFIX=/home/wangjl/software/anoconda3
几分钟的安装时间。

Do you wish the installer to prepend the Anaconda3 install location
to PATH in your /home/wangjl/.bashrc ? [yes|no]
输入yes

载入设置：
$ source ~/.bashrc.

$ python -V
Python 3.6.3 :: Anaconda, Inc.

$ pip -V
pip 9.0.1 from /home/wangjl/software/anoconda3/lib/python3.6/site-packages (python 3.6)



(2)安装包
https://conda.io/docs/user-guide/cheatsheet.html

$ conda install jupyter
Install a new package (Jupyter Notebook)
in the active environment

$ pip install boltons
Install a package directly from PyPI into the current active
environment using pip


(3)设置国内镜像
https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/

$ conda info

# 添加Anaconda的TUNA镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
# TUNA的help中镜像地址加有引号，需要去掉
 
# 设置搜索时显示通道地址
conda config --set show_channel_urls yes

$ conda search jupyter
搜索包







附录：
win10上安装python3 和 eclipse
1.下载java8
https://docs.oracle.com/javase/8/docs/

2.安装python3；

3.安装eclipse；








========================================
pip - Python包管理器
----------------------------------------
windows版的Python在3.4版本后自带pip，不过需要
1.先进入Python目录：
D:\Program Files\Python\Python36-32\Scripts>pip -V
pip 9.0.1 from d:\program files\python\python36-32\lib\site-packages (python 3.6)

或者用添加环境变量的方法摆脱文件夹限制，在PATH最后添加：
D:\Program Files\Python\Python36-32\Scripts;


2.安装命令式pip install Pillow，安装后出现成功提示，
Successfully installed Pillow-4.2.1 olefile-0.44
3.安装好的文件位置为D:\Program Files\Python\Python36-32\Lib\site-packages
refer:http://blog.csdn.net/qq_32706121/article/details/72283054?locationNum=11&fps=1


如果pip版本太老，会有更新提示。

1.快速示例
在win的cmd中输入 pip install Pillow 安装该包
You are using pip version 8.1.1, however version 8.1.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.

upgrade pip 
	1)On Linux or macOS:pip install -U pip
	2)On Windows:python -m pip install -U pip

#先用pip安装库
#要安装一个第三方库，必须先知道该库的名称，可以在官网或者pypi上搜索，
#pip install Pillow
#引入库
from PIL import Image

im = Image.open('test.jpg')
print(im.format, im.size, im.mode)

#缩小2倍
im.thumbnail((im.size[0]/2, im.size[0]/2))
im.save('thumb2.jpg', 'JPEG')

#缩小4倍
im.thumbnail((im.size[0]/4, im.size[0]/4))
im.save('thumb4.jpg', 'JPEG')



2.官网
https://pypi.python.org/pypi/pip/

Image包的帮助文档：
https://pypi.python.org/pypi/image/1.5.7

3.查看已经安装的包及版本号
pip list
或者 pip freeze



========================================
win7安装MySQL驱动
----------------------------------------
顺序 
pip install --upgrade pip
pip install --upgrade wheel
pip install mysql-connector-python-rf


细节
C:\Users\Administrator>pip install --upgrade wheel
Collecting wheel
  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)
    45% |██████████████▊                 | 30kB 157kB/s eta 0:00:
    61% |███████████████████▋            | 40kB 171kB/s eta
    76% |████████████████████████▌       | 51kB 184kB/s
    91% |█████████████████████████████▍  | 61kB 21
   100% |████████████████████████████████| 71kB
 243kB/s
Installing collected packages: wheel
Successfully installed wheel-0.29.0

C:\Users\Administrator>pip install mysql-connector-python-rf
Collecting mysql-connector-python-rf
  Using cached mysql-connector-python-rf-2.2.1.tar.gz
Building wheels for collected packages: mysql-connector-python-rf
  Running setup.py bdist_wheel for mysql-connector-python-rf ... done
  Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\a2\
4a\19\243e207fe1dcde2fb24f1dede834a1b1af5b3294a8f90e1cdf
Successfully built mysql-connector-python-rf
Installing collected packages: mysql-connector-python-rf
Successfully installed mysql-connector-python-rf-2.2.1

C:\Users\Administrator>




使用方法：
#!/usr/bin/python
# -*- coding: utf-8 -*-

# =============================
# Environment Preview
# System: Windows 7 x86_64
# IDE: Eclipse for PHP Developers Version: Neon.1 Release (4.6.1) Build id: 20160913-0900
# SQL: mysql in XAMPP   => ../bin/mysqld.exe  SELECT version() 5.6.11
# Driver: mysql-connector-python-rf
# ../Python35/Scripts> pip -V
# pip 8.1.2 from c:\program files (x86)\python35-32\lib\site-packages (python 3.5)
# ../Python35/Scripts> pip install --upgrade pip
# ../Python35/Scripts> pip install --upgrade wheel
# ../Python35/Scripts> pip install mysql-connector-python-rf
# =============================

# 导入MySQL驱动
import mysql.connector

# 创建连接
conn = mysql.connector.connect(user='root', password='', database='test')

# 后面的忽略吧
# 本文件仅用作创建连接===============在另一个文件内使用

print(dir(conn))

#输入：建表、插入
cursor = conn.cursor()
cursor.execute('drop table if exists `python_user` ')
cursor.execute('create table python_user (id int(20) primary key AUTO_INCREMENT, name varchar(20))')
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['1', 'Michael'])
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['2', 'Tom'])
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['3', 'Lilei'])
row_count = cursor.rowcount
conn.commit()
cursor.close()

#输出：查询
cursor = conn.cursor()
# cursor.execute('select * from python_user where id = %s', ('1',))
cursor.execute('select * from python_user where id > %s', ('1',))
values = cursor.fetchall()

#print(values)    #全部输出       # [('1', 'Michael')]
#[('2', 'Tom'), ('3', 'Lilei')]

for value in values: #逐条输出
    print(value)
    print(type(value)) #<class 'tuple'>
	
cursor.close()
conn.close()




========================================
linux下怎么安装和切换多个Python版本
----------------------------------------
bashrc 里面设置alias调用不同版本。
或者使用虚拟空间 virtualenv。

1. 安装pip，windows一般新版本都随python安装pip。
# apt-get install python3

$ python3 --version
Python 3.5.2
$ pip3 --version
pip 8.1.1 from /usr/lib/python3/dist-packages (python 3.5)

$ pip3 install --upgrade pip #最后使用pip3会报错
$ pip3 --version #pip3更新成功
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)


$ virtualenv -p python3 env1
Already using interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/wangjl/env1/bin/python3
Also creating executable in /home/wangjl/env1/bin/python
Installing setuptools, pkg_resources, pip, wheel...done.


$ pip3 --version
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)
$ pip --version
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)




2.安装虚拟环境
$ sudo apt install virtualenv

创建python3的虚拟环境 virtualenv - create virtual Python instances

假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：

step1:创建目录
$ mkdir myproject
$ cd myproject
step2:创建并进入虚拟环境1
$ virtualenv -p python3 env2
Already using interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/wangjl/myproject/env2/bin/python3
Also creating executable in /home/wangjl/myproject/env2/bin/python
Installing setuptools, pkg_resources, pip, wheel...done.
$ ls
env2

$ source env2/bin/activate #进入虚拟环境1
#注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。
(env2) wangjl@ubt16:~/myproject$ pip3 --version
pip 9.0.1 from /home/wangjl/myproject/env2/lib/python3.5/site-packages (python 3.5)

(env2) wangjl@ubt16:~/myproject$ pip3 freeze
pkg-resources==0.0.0
 #当前什么包都没有安装，就是个干净的python系统

(env2) wangjl@ubt16:~/myproject$ python --version
Python 3.5.2
(env2) wangjl@ubt16:~/myproject$ python3 --version
Python 3.5.2
(env2) wangjl@ubt16:~/myproject$

# 安装jinja2包
(env2) wangjl@ubt16:~/myproject$ pip3 install jinja2
Collecting jinja2
  Using cached Jinja2-2.9.6-py2.py3-none-any.whl
Collecting MarkupSafe>=0.23 (from jinja2)
Installing collected packages: MarkupSafe, jinja2
Successfully installed MarkupSafe-1.0 jinja2-2.9.6

(env2) wangjl@ubt16:~/myproject$ pip3 freeze #再次查看有哪些包
Jinja2==2.9.6
MarkupSafe==1.0
pkg-resources==0.0.0


step3:退出当前的env2环境 
(env2) wangjl@ubt16:~/myproject$ deactivate
wangjl@ubt16:~/myproject$

此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。
wangjl@ubt16:~/myproject$ python -V
Python 2.7.12
wangjl@ubt16:~/myproject$ python3 -V
Python 3.5.2


完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。

virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source env1/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。


小结: virtualenv为应用提供了隔离的Python运行环境，解决了不同应用间多版本的冲突问题。

好处：为项目创建一个干净的开发环境




========================================
The Zen of Python, by Tim Peters
----------------------------------------
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!


========================================
用jupyter notebook 学习python3
----------------------------------------
jupyter notebook可以在浏览器中很容易的编辑、运行、块状代码。
个人认为，这对于学习和尝试代码是一个好工具。

pip3 --version
pip 10.0.1 from d:\program files\python36\lib\site-packages\pip (python 3.6)


1.安装 Install IPython and Jupyter:
https://jupyter.org/install.html

(1.1)with conda:
conda install ipython jupyter

(1.2)with pip:
# first, always upgrade pip!
pip3 install --upgrade pip
pip3 install --upgrade ipython jupyter

(2)Start the notebook in the tutorial directory:
cd ipython-in-depth
jupyter notebook

windows用户直接在cmd窗口中输入：
jupyter notebook

可以看到一个浏览器窗口弹出来，就可以在cell里编码了。




2.使用
(1)可以直接在cell中输入代码； 
点击左上角+符号，可以开一个新cell；

(2)点击上方的Run即可运行当前cell的代码，
快捷键是 shift+Enter






========================================
----------------------------------------


