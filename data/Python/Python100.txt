Python3快速入门 [准备]

版本号：
C:\Users\Administrator>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.

python自带的文档在：开始-Python3.6-Python3.6 Manual


python命名规范：https://www.cnblogs.com/wangcp-2014/p/4608265.html
一定不能与模块名字重叠，否则会调用自己，而不是调用需要的模块。



========================================
Eclipse和PyDev搭建完美Python开发环境（Windows篇）
----------------------------------------

十一长假在家闲着没事儿，准备花点时间学习一下Python。 
今儿花了一个下午搭建Python的开发环境，不禁感叹————开源的东西就是麻烦啊··· 

为什么不用别的IDE呢？ 
Eclipse+PyDev插件是最主流的Python开发环境了。

 

1.准备工作：
下载32位的JDK1.7 Java的开发包  我也不想装这玩意儿，但是Eclipse依赖他，没办法。
下载32位的Eclipse （注1）
下载Python 3.5 （注2）

2.安装JDK1.7
JDK的安装很容易的，一般一直点下一步即可
多数教程都说，安装完JDK需要设置环境变量，
但如今的IDE已经不再通过环境变量来查找JDK的路径了，所以这个不设也罢。 

3.安装Eclipse和Python 
Eclipse是绿色软件，找个地方解压一下就OK了 
Python的安装就更不用说了

4.给Eclipse安装PyDev插件 
启用Eclipse————如果前面的步骤都正确无误的话，那么Eclipse就该能够正常启动了。 
第一次启动会让你选择一个工作空间，按缺省设置，勾选一下不再提醒，就可以了。

在Help菜单中，选择Install New Software···， 
选择Add按钮，Name：PyDev（这个随便起），Location：http://pydev.org/updates（PyDev的更新地址），OK

选择PyDev下的PyDev for Eclipse，别的都不要选，否则依赖检查那关过不去。 （注3）

点下一步，下一步安装 
中间会问你是否信任Aptana、Pydev什么的，信任就可以了

最后重启Eclipse
 

5.配置PyDev插件 
在Window菜单中选Preference，
1、PyDev->Interpreter - Python，New一个Python解释器，填上解释器名字和路径，路径选相应的python.exe。 

以下几步Python 3.x必选，Python 2随意。我比较习惯Unicode，所以一次性在这儿设定了。
(提示该选项没有安装)2、General->Editors->Text Editors->Spelling，Encoding改成Other:UTF-8

3、General->Workspace，Text file encoding改成Other:UTF-8

(我没做)4、找到安装目录下的\plugins\org.python.pydev.debug_x.x.x.yyyymmddhh\pysrc\pydevd.py， 
920行的 encoding = Non 改成 encoding = "UTF-8"，保存

5、防止中文显示太小：
General->Appearance->Colors and Fonts, 左侧Basic->Text Font双击，选择中欧字体、四号字。

至此，PyDev的配置就完成了。
 

6.测试下
File->New->Project，选PyDev下的PyDev Project，Grammer和Interpreter选相应的版本，Finish。 
在PyDev Package Explorer的项目上右键，New->PyDev Module，随便写个名字，Finish。
然后随便写几行代码，Run
在弹出的对话框中选择Python Run ，
OK 

 
注释： 
注1：这里说明一下，JDK和Eclispse好像得同为32位或者64位的，否则有可能遇到问题。我第一次尝试是用的64位JDK+32位Eclipse的组合，就碰到了和这里http://superuser.com/questions/186001/eclipse-failed-to-load-the-jni-shared-library一样的问题，于是果断换了32位JDK。

注2：我想做GAE的开发，所以选了版本2.6.6，一般情况下选最新版即可。

注3：PyDev Mylyn Integration (optional)：这个依赖于PyDev for Eclipse，你得装完后者就可以装了。 
    PyDev Django Templates Editor：这个需要Aptana Studio 3。
	
http://www.cnblogs.com/Realh/archive/2010/10/04/1841907.html






========================================
|-- ubuntu 安装 python3
----------------------------------------
$sudo apt-get install python3
因为Ubuntu很多底层采用的是Python2.*，Python3和Python2是互相不兼容的，所以此时不能卸载Python2.


方法1：修改链接指向
http://www.cnblogs.com/windinsky/archive/2012/09/25/2701851.html

需要将默认Python的指向Python3。
刚才的Python3是被默认安装带usr/local/lib/python3.2目录中，

首先，删除usr/bin/目录下的默认python link文件。
然后打开终端输入如下命令行，建立新的连接关系
sudo ln -s /usr/bin/python3.2 /usr/bin/python
成功
然后测试一下python版本是否正确
命令行输入 python 即可




方法2：两个版本并行，使用新版本则用python3命令
http://www.cnblogs.com/yasmi/p/4832461.html

1.安装python3
apt-get install python3

2.安装pip3
apt-get install python3-pip

3.为python3添加包
pip3 install packagename

4.安装pillow
　　首先安装支持包
apt-get install libjpeg-dev libfreetype6-dev zlib1g-dev libpng12-dev
　　安装pillow
pip3 install pillow

5.创建python3的虚拟环境
virtualenv -p /usr/bin/python3 环境名称
或者
virtualenv -p python3 环境名称

6.如果不能安装python3-pip（比如低版本ubuntu），如何使用pip安装python3 库
python3 -m pip install 包

7.另一个安装pip3方法:
aptitude install python3-setuptools #安装 easy_install3工具
easy_install3 pip    #安装pip3

8.配置python编程环境，使用git，git-flow：
9.安装bash-it,可以美化bash环境
10.安装 Sublime Text 2，很好代码编辑器
11.安装vim,ubuntu中一般必备的编辑器。
12.安装emacs





========================================
|-- python3 在sublime中文乱码怎么办？
----------------------------------------
添加编码头，指定utf8编码

$ cat typeDemo.py
#!/usr/bin/python3
# -*- coding: utf-8 -*-

if __name__=='__main__':
	print(1+3000,"好的");
	import sys
	print(sys.stdin.encoding)
	print(sys.stdout.encoding)






========================================
pip - Python包管理器
----------------------------------------
windows版的Python在3.4版本后自带pip，不过需要
1.先进入Python目录：
D:\Program Files\Python\Python36-32\Scripts>pip -V
pip 9.0.1 from d:\program files\python\python36-32\lib\site-packages (python 3.6)

或者用添加环境变量的方法摆脱文件夹限制，在PATH最后添加：
D:\Program Files\Python\Python36-32\Scripts;


2.安装命令式pip install Pillow，安装后出现成功提示，
Successfully installed Pillow-4.2.1 olefile-0.44
3.安装好的文件位置为D:\Program Files\Python\Python36-32\Lib\site-packages
refer:http://blog.csdn.net/qq_32706121/article/details/72283054?locationNum=11&fps=1


如果pip版本太老，会有更新提示。

1.快速示例
在win的cmd中输入 pip install Pillow 安装该包
You are using pip version 8.1.1, however version 8.1.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.

upgrade pip 
	1)On Linux or macOS:pip install -U pip
	2)On Windows:python -m pip install -U pip

#先用pip安装库
#要安装一个第三方库，必须先知道该库的名称，可以在官网或者pypi上搜索，
#pip install Pillow
#引入库
from PIL import Image

im = Image.open('test.jpg')
print(im.format, im.size, im.mode)

#缩小2倍
im.thumbnail((im.size[0]/2, im.size[0]/2))
im.save('thumb2.jpg', 'JPEG')

#缩小4倍
im.thumbnail((im.size[0]/4, im.size[0]/4))
im.save('thumb4.jpg', 'JPEG')



2.官网
https://pypi.python.org/pypi/pip/

Image包的帮助文档：
https://pypi.python.org/pypi/image/1.5.7

3.查看已经安装的包及版本号
pip list
或者 pip freeze


4. 升级pip3
$pip3 install --upgrade pip 


5. #搜索可用的安装包
$pip search json 





========================================
|-- win7安装py的MySQL驱动
----------------------------------------
顺序 
pip install --upgrade pip
pip install --upgrade wheel
pip install mysql-connector-python-rf


细节
C:\Users\Administrator>pip install --upgrade wheel
Collecting wheel
  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)
    45% |██████████████▊                 | 30kB 157kB/s eta 0:00:
    61% |███████████████████▋            | 40kB 171kB/s eta
    76% |████████████████████████▌       | 51kB 184kB/s
    91% |█████████████████████████████▍  | 61kB 21
   100% |████████████████████████████████| 71kB
 243kB/s
Installing collected packages: wheel
Successfully installed wheel-0.29.0

C:\Users\Administrator>pip install mysql-connector-python-rf
Collecting mysql-connector-python-rf
  Using cached mysql-connector-python-rf-2.2.1.tar.gz
Building wheels for collected packages: mysql-connector-python-rf
  Running setup.py bdist_wheel for mysql-connector-python-rf ... done
  Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\a2\
4a\19\243e207fe1dcde2fb24f1dede834a1b1af5b3294a8f90e1cdf
Successfully built mysql-connector-python-rf
Installing collected packages: mysql-connector-python-rf
Successfully installed mysql-connector-python-rf-2.2.1

C:\Users\Administrator>




使用方法：
#!/usr/bin/python
# -*- coding: utf-8 -*-

# ======== ========== ===========
# Environment Preview
# System: Windows 7 x86_64
# IDE: Eclipse for PHP Developers Version: Neon.1 Release (4.6.1) Build id: 20160913-0900
# SQL: mysql in XAMPP   => ../bin/mysqld.exe  SELECT version() 5.6.11
# Driver: mysql-connector-python-rf
# ../Python35/Scripts> pip -V
# pip 8.1.2 from c:\program files (x86)\python35-32\lib\site-packages (python 3.5)
# ../Python35/Scripts> pip install --upgrade pip
# ../Python35/Scripts> pip install --upgrade wheel
# ../Python35/Scripts> pip install mysql-connector-python-rf
# ======== =========== ==========

# 导入MySQL驱动
import mysql.connector

# 创建连接
conn = mysql.connector.connect(user='root', password='', database='test')

# 后面的忽略吧
# 本文件仅用作创建连接===============在另一个文件内使用

print(dir(conn))

#输入：建表、插入
cursor = conn.cursor()
cursor.execute('drop table if exists `python_user` ')
cursor.execute('create table python_user (id int(20) primary key AUTO_INCREMENT, name varchar(20))')
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['1', 'Michael'])
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['2', 'Tom'])
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['3', 'Lilei'])
row_count = cursor.rowcount
conn.commit()
cursor.close()

#输出：查询
cursor = conn.cursor()
# cursor.execute('select * from python_user where id = %s', ('1',))
cursor.execute('select * from python_user where id > %s', ('1',))
values = cursor.fetchall()

#print(values)    #全部输出       # [('1', 'Michael')]
#[('2', 'Tom'), ('3', 'Lilei')]

for value in values: #逐条输出
    print(value)
    print(type(value)) #<class 'tuple'>
	
cursor.close()
conn.close()



========================================
|-- pip3升级失败，pip3自动被卸载后如何恢复
----------------------------------------
本来是pip18，提示pip19可用了，结果使用升级语句报错，退回到pip10了。


1.
https://blog.csdn.net/elite666/article/details/83541602
$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
$python get-pip.py
其中，如果是python3对应的pip3，则需要使用python3，如下：
$ python3 get-pip.py # 报错，最后使用的是 $ python ./get-pip.py --user
更新完毕，便可使用pip或者pip3

$ pip -V
pip 19.1.1 from /home/wangjl/.local/lib/python3.7/site-packages/pip (python 3.7)


使用pip list会报错，感觉好脆弱。




2.
http://www.cnblogs.com/51ma/p/9467839.html

$ python -m pip install --user --upgrade pip==19.1.1



3.
$ find ~/.local/ -name  "*METADATA*" | grep pip
$ find ~/.local/ -name  "*site-packages*" | grep site-packages
## /home/wangjl/.local/lib/python3.7/site-packages 很奇怪，删除该文件夹内的全部内容后，再回到下载好的software目录执行
$ python ./get-pip.py --user #终于一切太平了。pip list也不报错了。
$ pip -V
pip 19.1.1 from /home/wangjl/.local/lib/python3.7/site-packages/pip (python 3.7)





========================================
|-- pip on windows10 崩了，怎么重装？ ModuleNotFoundError: No module named 'pip'
----------------------------------------
> pip -V 
...
ModuleNotFoundError: No module named 'pip'



1. 查了一圈，都不能解决；
2. 有人说重装pip可以
https://blog.csdn.net/kingyuan666/article/details/81346379

1) 强制重装pip
> curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
> python3 get-pip.py 

2) 再查版本号
> pip -V
pip 19.2.2 from d:\program files\python36\lib\site-packages\pip (python 3.6)





========================================
使用virtualenv在linux下安装和切换多个Python版本
----------------------------------------
bashrc 里面设置alias调用不同版本。
或者使用虚拟空间 virtualenv。

1. 安装pip，windows一般新版本都随python安装pip。
# apt-get install python3

$ python3 --version
Python 3.5.2
$ pip3 --version
pip 8.1.1 from /usr/lib/python3/dist-packages (python 3.5)

$ pip3 install --upgrade pip #最后使用pip3会报错
$ pip3 --version #pip3更新成功
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)


$ virtualenv -p python3 env1
Already using interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/wangjl/env1/bin/python3
Also creating executable in /home/wangjl/env1/bin/python
Installing setuptools, pkg_resources, pip, wheel...done.


$ pip3 --version
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)
$ pip --version
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)




2.安装虚拟环境
$ sudo apt install virtualenv

创建python3的虚拟环境 virtualenv - create virtual Python instances

假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：

step1:创建目录
$ mkdir myproject
$ cd myproject
step2:创建并进入虚拟环境1
$ virtualenv -p python3 env2
Already using interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/wangjl/myproject/env2/bin/python3
Also creating executable in /home/wangjl/myproject/env2/bin/python
Installing setuptools, pkg_resources, pip, wheel...done.
$ ls
env2

$ source env2/bin/activate #进入虚拟环境1
#注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。
(env2) wangjl@ubt16:~/myproject$ pip3 --version
pip 9.0.1 from /home/wangjl/myproject/env2/lib/python3.5/site-packages (python 3.5)

(env2) wangjl@ubt16:~/myproject$ pip3 freeze
pkg-resources==0.0.0
 #当前什么包都没有安装，就是个干净的python系统

(env2) wangjl@ubt16:~/myproject$ python --version
Python 3.5.2
(env2) wangjl@ubt16:~/myproject$ python3 --version
Python 3.5.2
(env2) wangjl@ubt16:~/myproject$

# 安装jinja2包
(env2) wangjl@ubt16:~/myproject$ pip3 install jinja2
Collecting jinja2
  Using cached Jinja2-2.9.6-py2.py3-none-any.whl
Collecting MarkupSafe>=0.23 (from jinja2)
Installing collected packages: MarkupSafe, jinja2
Successfully installed MarkupSafe-1.0 jinja2-2.9.6

(env2) wangjl@ubt16:~/myproject$ pip3 freeze #再次查看有哪些包
Jinja2==2.9.6
MarkupSafe==1.0
pkg-resources==0.0.0


step3:退出当前的env2环境 
(env2) wangjl@ubt16:~/myproject$ deactivate
wangjl@ubt16:~/myproject$

此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。
wangjl@ubt16:~/myproject$ python -V
Python 2.7.12
wangjl@ubt16:~/myproject$ python3 -V
Python 3.5.2


完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。

virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source env1/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。


小结: virtualenv为应用提供了隔离的Python运行环境，解决了不同应用间多版本的冲突问题。

好处：为项目创建一个干净的开发环境




========================================
The Zen of Python, by Tim Peters
----------------------------------------
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!


========================================
用jupyter notebook 学习python3
----------------------------------------
jupyter notebook可以在浏览器中很容易的编辑、运行、块状代码。
个人认为，这对于学习和尝试代码是一个好工具。

pip3 --version
pip 10.0.1 from d:\program files\python36\lib\site-packages\pip (python 3.6)


1.安装 Install IPython and Jupyter:
https://jupyter.org/install.html

(1.1)with conda:
conda install ipython jupyter

(1.2)with pip:
# first, always upgrade pip!
pip3 install --upgrade pip
pip3 install --upgrade ipython jupyter

(2)Start the notebook in the tutorial directory:
cd ipython-in-depth
jupyter notebook

windows用户直接在cmd窗口中输入：
jupyter notebook

可以看到一个浏览器窗口弹出来，就可以在cell里编码了。


(3)IPython notebook（Jupyter notebook）指定IP和端口运行
jupyter notebook --no-browser --port 7000 --ip=192.168.2.120
访问：http://y.biomooc.com:7000/?token=a04884fc3c0046ff4c34fdf13b69792bdcd46aa1bf2994ec


(4)另一台没有root权限的CentOS 7主机无法登陆Jupyter：
$ netstat -luntp #查端口号哪些可用
$ jupyter notebook --no-browser --port 10000 --ip=10.20.57.27


从其他机器扫描这一台电脑的端口，就开了两个：
$ sudo nmap -sS -p 9915-10015 10.20.57.27

Starting Nmap 7.60 ( https://nmap.org ) at 2018-09-28 14:41 CST
Nmap scan report for 10.20.57.27
Host is up (0.0056s latency).
Not shown: 99 closed ports
PORT      STATE SERVICE
9999/tcp  open  abyss
10001/tcp open  scp-config

Nmap done: 1 IP address (1 host up) scanned in 14.78 seconds




(5)如果还是不能访问服务器上的jupyter，可能是端口都没开。
在服务器上开一个端口20180，允许ip为10.21.127.192的客户端访问。
$ sudo iptables -I INPUT -p tcp -s 10.21.127.192 --dport 20180 -j ACCEPT




(6)cookie过期，需要在服务器上查找token：
$ jupyter notebook list
## Currently running servers:
## http://172.18.5.193:8889/?token=ee58e196b138ca5ea8f9321d1cf05a943c5b5de8c613b74d :: /data/jinwf/wangjl/apa  






2.使用
(1)可以直接在cell中输入代码； 
点击左上角+符号，可以开一个新cell；

(2)点击上方的Run即可运行当前cell的代码，
快捷键是 shift+Enter

(3)自动补齐的快捷键是Tab


更多快捷方式：
https://mp.weixin.qq.com/s?__biz=MzIyNzU1OTI2NA==&mid=2247484631&idx=1&sn=1bbbafccf0f4e792f56789112083f69d






========================================
|-- 日常在tmux中后台运行jupyter <=========
----------------------------------------
$ tmux
$ jupyter notebook --no-browser --port 7000 --ip=192.168.2.120
复制链接，替换IP为域名 y.biomooc.com, 
http://y.biomooc.com:7000/?token=2fba21e8e4852f2b38730039f176ba13beaf6ae3cc4ab1df
粘贴到浏览器中即可登录 notebook。
在tmux中输入 ctrl+B, 按D 退出tmux窗口，让其后台运行。


$ tmux
$ jupyter notebook --no-browser --port 8889 --ip=172.18.5.193





========================================
|-- 把 jupyter转变为py脚本
----------------------------------------
jupyter nbconvert --to python <YourNotebook>.ipynb

实例：
$ jupyter nbconvert --to python eT4_interectWith_poly_DB3.ipynb
[NbConvertApp] Converting notebook eT4_interectWith_poly_DB3.ipynb to python
[NbConvertApp] Writing 6378 bytes to eT4_interectWith_poly_DB3.py


https://nbconvert.readthedocs.io/en/latest/execute_api.html


========================================
|-- 在jupyter中显示服务器上的图片
----------------------------------------
1. 查看路径对应的gif图片
from IPython.display import Image

PATH = "/home/wangjl/web/"
Image(filename = PATH + "a3.gif",width=500)


2.



https://vimsky.com/article/3721.html



========================================
|-- 在jupyter中编辑和运行R脚本
----------------------------------------
要想在jupyter notebook中运行R语言其实非常简单，按顺序安装下面扩展包即可：  

install.package('repr','IRdisplay','evaluate','crayon','pbdZMQ','devtools','uuid','digest')
library(devtools)
install_github("IRkernel/IRkernel")

IRkernel::installspec()


四行安装好，就可以重新启动jupyter，新建时就可以看到R了。

refer:
https://mp.weixin.qq.com/s?__biz=MzIyNzU1OTI2NA==&mid=2247484631&idx=1&sn=1bbbafccf0f4e792f56789112083f69d




========================================
|-- 谷歌逆天在线编辑器 colab: 在线版的 jupyter notebook 
----------------------------------------
1.网址:
https://colab.research.google.com

貌似，保存的内容每天会被自动重置。



2.使用方法：
https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/90149883


###
(1) py相关命令
1)检查py版本号
!python -V
!pip -V
## Python 3.6.8
## pip 19.1.1 from /usr/local/lib/python3.6/dist-packages/pip (python 3.6)

2) 检查安装的包
!pip list
可以看到，colab默认安装了大量的Python第三方库，就数据科学方面的库而言，colab的自带库应该会比Anaconda更加完善。





###
(2) 了解当前环境，探索更多可能
! 后跟着linux命令
除了python库之外，使用这种方式还可以执行其他linux指令来部署你自己的云端环境，别忘了在指令前加一个“!”号就好。


1)查看当前目录多大空间
!fdisk -l # 被禁止使用
!du -sh * 
## 55M	sample_data

2)当前目录
!pwd
## /content

3)查看目录结构
import os
path=os.getcwd()
print(path)
print(os.listdir())

执行结果：
/content
['.config', 'sample_data']

4) 查看gcc版本号
import subprocess

def exeShell(cmd):
  (status, output)=subprocess.getstatusoutput(cmd)
  return output

cmd="gcc --version"
rs=exeShell(cmd)
print(rs)
输出： 
gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.



5) 查看R版本号
rs=exeShell("Rscript --version") #2.4 自定义的函数
print(rs)
输出:
R scripting front-end version 3.6.1 (2019-07-05)

rs=exeShell("which R")
print(rs) #/usr/local/bin/R


6)运行js代码
%%javascript
console.log("Hello, js")
a=1+200
a
可以看F12控制台输出了：Hello, js


7) 安装程序
# 查找nginx
rs=exeShell("sudo apt-get search nginx")
print(rs) 






100) 执行失败的
#查看服务器ip地址
rs=exeShell("ifconfig") 
print(rs)  #/bin/sh: 1: ifconfig: not found











3.尝试编译运行一个c代码。网速太慢了，一个步骤要反复尝试才能通过
1)代码写入到文件
code1="""
#include <stdio.h>
int main ()
{
  printf("hello, c");
  return 0;
}
"""
print(code1)
fw=open("a1.c",'w')
fw.write(code1)
fw.close()


2) 编译代码
rs=exeShell("gcc a1.c -o a1")
print(rs)

或者，直接使用
!gcc a1.c -o a1


3) 执行代码
rs=exeShell("./a1")
print(rs) #hello, c

或者，直接使用
!./a1






========================================
使用 anaconda 在centOS无root权限安装python3
----------------------------------------
more文档：https://docs.anaconda.com/anaconda/user-guide/getting-started
Anaconda使用总结: http://python.jobbole.com/86236/


1.下载
使用清华大学的镜像安装：https://mirror.tuna.tsinghua.edu.cn/help/anaconda/
https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.0.1-Linux-x86_64.sh

$ axel -n 30 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.0.1-Linux-x86_64.sh



2.安装
https://docs.anaconda.com/anaconda/install/linux

md5sum 和 网页一致。
https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.0.1-Linux-x86_64.sh-hash

(1)运行
$ bash ~/software/Anaconda3-5.0.1-Linux-x86_64.sh

Choose “Install Anaconda as a user”
设置安装目录：
[/home/wangjl/anaconda3] >>> /home/wangjl/software/anoconda3/
PREFIX=/home/wangjl/software/anoconda3
几分钟的安装时间。

Do you wish the installer to prepend the Anaconda3 install location
to PATH in your /home/wangjl/.bashrc ? [yes|no]
输入yes

载入设置：
$ source ~/.bashrc



(2)检查结果
$ python -V
Python 3.6.3 :: Anaconda, Inc.

$ pip -V
pip 9.0.1 from /home/wangjl/software/anoconda3/lib/python3.6/site-packages (python 3.6)


#####
#如果安装出错，不要忘了升级pip自己
$ pip install --upgrade pip







========================================
|-- 用conda切换python版本
----------------------------------------
conda可以很方便的切换python的不同版本： 请参考官方文件 https://conda.io/docs/_downloads/conda-cheatsheet.pdf
https://blog.csdn.net/lyy_buu/article/details/78214325

1)列出现有可用的python虚拟环境，一般默认安装会有一个python3、一个python2。
$ conda env list
# conda environments:
#
# base * /home/wangjl/software/anoconda3
# py27   /home/wangjl/software/anoconda3/envs/py27

# To activate this environment, use:
# > source activate py27
#
# To deactivate an active environment, use:
# > source deactivate






2)如果想自定义一个py版本号：
如果先装了anaconda3想使用python2,那么基于 python2.7 创建一个名为py2.7 的环境
$ python -V
Python 3.6.3 :: Anaconda custom (64-bit)


$ conda create --name test_py2 python=2.7
回车开始安装十几个包。



激活 python2.7 环境
$ source activate test_py2

输入这个命令之后会发现，terminal命令行前面多了test_py2的字样，实际上，此时系统做的事情就是把默认3.6环境从PATH中去除，再把2.7对应的命令加入PATH

(test_py2) [wangjl@nih_jin tmp]$ python -V  #查看当前版本，确实已经是2.7了。
Python 2.7.15 :: Anaconda, Inc. 



回到python3版本：
$ source deactivate
$ python -V #已经回到python3版本了
Python 3.6.3 :: Anaconda custom (64-bit)




最后，如果想要删除一个已有的环境：
$ conda remove --name test_py2 --all







========================================
|-- 用conda下载和安装jupyter包（尽量用pip安装，用conda安装可能会有未知副作用）
----------------------------------------
(2)安装包
https://conda.io/docs/user-guide/cheatsheet.html

$ conda install jupyter
Install a new package (Jupyter Notebook)
in the active environment

$ pip install boltons
Install a package directly from PyPI into the current active
environment using pip


(3)设置国内镜像
https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/

$ conda info

# 添加Anaconda的TUNA镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
# TUNA的help中镜像地址加有引号，需要去掉
 
# 设置搜索时显示通道地址
conda config --set show_channel_urls yes

$ conda search jupyter
搜索包







附录：
win10上安装python3 和 eclipse
1.下载java8
https://docs.oracle.com/javase/8/docs/

2.安装python3；

3.安装eclipse；






========================================
如何在shell脚本中调用python脚本并传递参数 -- (打造pipeline必备技能)
----------------------------------------
1. shell中调用python脚本，并传递参数，是常规操作
在py中args变量的值是一个字符串列表，接收到sys.argv数组中。
sys.argv[0] 是py脚本本身，后面依次是参数。


$ cat my.py 
import sys
def add(n1,n2):
	return n1+n2;

print("传入的参数： ",sys.argv)
print("result=", add(sys.argv[1], sys.argv[2]) ," default is string" );
print("result=", add( int(sys.argv[1]), int(sys.argv[2])), " now is number" );

输出 
$ python my.py 500 20
传入的参数：  ['my.py', '500', '20']
result= 50020  default is string
result= 520  now is number

注意： 传入的参数默认是字符串，如果需要数字，需要手动转换。





2. 在shell脚本中调用python脚本，并传递参数。
$ cat test2.sh 
#!/bin/bash
#source /etc/profile
echo "start: `date`"
python my.py $1 $2 $3
echo "end:`date`"

输出： 
$ bash test2.sh 500 20 1
start: Thu Jul 18 04:31:29 EDT 2019
传入的参数：  ['my.py', '500', '20', '1']
result= 50020  default is string
result= 520  now is number
end:Thu Jul 18 04:31:30 EDT 2019






3.在shell脚本中调用python脚本，并在shell中接收返回值，判断是否成功执行

//todo





========================================
|-- Python 命令行参数的3种传入方式
----------------------------------------

当python与命令行结合使用时，参数能增加脚本的灵活性。

我使用过的命令行参数模块主要分为两类，
第一种当然就是 Python 内置的命令行模块，主要就是 sys.argv 和 argparse，
第二种是第三方模块，比较有名的是 click 模块。


1.命令行参数模块
$ python t1.py arg1 arg2 arg3

在t1.py内部，通过sys.argv列表接收参数，下标为0的是脚本文件名本身，下标为1的是第一个参数arg1.
$ cat t1.py
import sys
arr=sys.argv;
print("paras:", arr[0], arr[1],arr[2]);

$ python t1.py 1 2 3
paras: t1.py 1 2  #脚本只打印前2个参数。

$ python t1.py 120 /home/xxx/raw/xx.data
paras: t1.py 120 /home/xxx/raw/xx.data


$ python t1.py 120
Traceback (most recent call last):
  File "t1.py", line 3, in <module>
    print("paras:", arr[0], arr[1],arr[2]);
IndexError: list index out of range
如果给出的参数比需要的参数少，则报错。


小结：sys.argv 形式传入参数的方式比较简单，但是也很死板，因为传入的参数是一个有序的列表，所以在命令行中必须按照脚本规定的顺序去输入参数，这种方法比较适合脚本中需要的参数个数很少且参数固定的脚本。




2.argparse 模块
argparse 模块也是 Python 自带的一个命令行参数模块，这个模块才是真的为了命令行参数而生的模块，相较之下 sys.argv 只是碰巧可以用在命令行参数上面而已。

$ cat t2.py
import argparse

parser = argparse.ArgumentParser(description='Test for argparse')  #首先需要构建一个参数实例

# 之后就可以给对象添加一些参数属性
parser.add_argument('--name', '-n', help='name 属性，非必要参数')
parser.add_argument('--year', '-y', help='year 属性，非必要参数，但是有默认值', default=2022)
parser.add_argument('--body', '-b', help='body 属性，必要参数', required=True)
args = parser.parse_args()

# 最后只需要从属性从提取传入的参数进行使用即可。
print(args)
print("name=", args.name)
print("year=", args.year)
print("body=", args.body)

--name 和 -n 都可以用来在命令行中设置name属性。可以改变参数顺序。使用--双斜线规定参数完整名字。
还会自动生成“帮助”，显示只有body是必须参数。
$ python t2.py --help
usage: t2.py [-h] [--name NAME] [--year YEAR] --body BODY

Test for argparse

optional arguments:
  -h, --help            show this help message and exit
  --name NAME, -n NAME  name 属性，非必要参数
  --year YEAR, -y YEAR  year 属性，非必要参数，但是有默认值
  --body BODY, -b BODY  body 属性，必要参数
#

运行结果
$ python t2.py -y 2019 -n Tom -b "this is body part"
Namespace(body='this is body part', name='Tom', year='2019')
name= Tom
year= 2019
body= this is body part

## 省略year参数，会使用默认参数
year= 2022

## 省略name参宿，会传入None，但不报错。
name= None

## 省略body参宿，报错。
$ python t2.py -y 2019 -n Tom
usage: t2.py [-h] [--name NAME] [--year YEAR] --body BODY
t2.py: error: the following arguments are required: --body/-b


更多的参数介绍和使用可以查看官方文档：Python 官方文档：argparse (https://docs.python.org/zh-cn/3/library/argparse.html?highlight=argparse#module-argparse)


小结：其实我非常喜欢这个内置的命令行参数模块，因为它不仅方便使用，更重要的是它就是内置的，不需要单独安装依赖。





3.click 库

Click 是 Flask 的团队 pallets 开发的优秀开源项目，它为命令行工具的开发封装了大量方法，使开发者只需要专注于功能实现。这是一个第三方库，专门为了命令行而生的非常有名的 Python 命令行模块。

$ cat t3.py 
# -*- coding:utf-8 -*-
# @Date  : 2019/7/30

import click

@click.command()
@click.option('--name',default='Leijun',help='name 参数，非必须，有默认值')
@click.option('--year',help='year 参数',type=int)
@click.option('--body',help='body 参数')
def test_for_sys(year, name, body):
    print('the year is', year+10)
    print('the name is', name)
    print('the body is', body)

if __name__ == '__main__':
    test_for_sys()

#获取帮助
$ python t3.py --help
Usage: t3.py [OPTIONS]

Options:
  --name TEXT     name 参数，非必须，有默认值
  --year INTEGER  year 参数
  --body TEXT     body 参数
  --help          Show this message and exit.

#运行
$ python t3.py --year 2019 --body "a lot of text"
the year is 2029
the name is Leijun
the body is a lot of text

可以看到 click 是使用装饰器的方式给函数添加命令行属性，比较特殊的是最后调用函数的时候是没有带上参数的，因为参数会自动通过命令行的形式传入。其他设置参数的属性跟前面的 argparse 的方式非常相似，具体的参数可以参考文档和其他的教程用法，这里就不做过多的说明。

小结：click 库也是一个非常人性化的命令行参数模块，它其实非常强大，强大到把所有的命令行参数可能涉及的情况都考虑到了，需要自己去探索。




总结
以上就是我接触和使用到的三种给 Python 脚本设置命令行参数的方法，其中第一种是我在工作中见到的其他同事写的脚本中的方式，但是我并不喜欢这种方式，因为它真的太死板了；

我最喜欢的是 argparse 模块，这个模块是内置模块，但是功能完全够用，非常方便。

功能最全面的的是click，数据格式检查、转换都自动化完成了。



refer: https://tendcode.com/article/python-shell/



========================================
|-- python和R语言的优劣比较，与互相调用
----------------------------------------
http://www.360doc.com/content/16/0507/10/31913486_556962620.shtml

数据科学家就是这样一种人：软件工程师中最懂统计学，统计学家中最会编程的人。 - josh_wills在推特上这样说到。

由于这两种语言各自提供大量独特的库资源，对能够利用这两种语言的相对优势的数据科学家的需求正在不断增长。


1. Python与R的对比
(1)在以下领域中，Python 比R 更有优势：
网络爬虫和数据抓取：虽然R中的rvest已经简化了网页抓取， Python的beautifulsoup和Scrapy更加成熟，并提供更多的功能。

数据库连接：虽然R有大量的用于连接到数据库的选项， Python的sqlachemy只用了一个程序包就提供了所有的数据库连接功能，并可广泛用于生产环境。



(2)而在以下领域中，R比Python更有优势：
统计分析选项：尽管Python的SciPy和 Pandas以及 statsmodels的组合提供了很大的一套统计分析工具，而R是专门围绕着统计分析应用等创建的，因此提供了更多的相关工具。

交互式图像或控制板：bokeh， plotly和intuitics最近都把Python的图形使用扩展到了Web浏览器，但是举个使用shiny的例子，R中的shiny 控制面板运行速度更快，而且往往需要更少的代码。

此外，由于数据科学团队现在拥有一个比较广泛的技能库，任何应用程序所选择的编程语言都可能用到以前的知识和经验。对于一些应用，特别是原型设计和开发应用，人们使用他们已知的工具则速度会更快。



(3)纯文本 的“Air Gap（网闸）”策略

指在完全断开网络物理连接的基础上，实现合法信息的共享。本文中指用纯文本文件实现两种语言间代码的共享——译者注。

使用纯文本作为两种语言之间的物理隔离，你需要按如下步骤进行。

1)从命令行中重构你的R和Python脚本，并接受命令行参数。
2)输出共享数据到公共文件格式。
3)在一种语言中执行另一种语言，按要求传递参数。


优势：
最简单的方法，通常最快
可以轻松查看中间输出结果
已有常见文件格式，如： CSV ， JSON ， YAML的解析器


劣势：
需要事先商定一个共同的模式或文件格式
如果流程变长的话，难以管理中间输出结果和路径
如果数据量变大，本地磁盘读写将成为瓶颈


(4)命令行脚本
通过Windows 或Linux终端环境命令行运行R和Python脚本类似。要运行的命令被分解成: 脚本、空格分隔的参数列表。
$ Rscript path/to/myscript.R arg1 arg2 arg3
$ python path/to/myscript.py arg1 arg2 arg3


所有的参数需要以字符串的形式传递，因此有必要在脚本内部转换为所期望的数据类型。


1)R语言中访问命令行参数
上面的例子中，arg1，arg2 和 arg3是用来解析可执行R脚本的参数，可以使用commandArgs函数访问
##myscript.py #获取命令行参数
myArgs <- commandargs(T) ## myArgs是所有参数的特征向量
print(myArgs) print(class(myArgs))

通过设置trailingOnly 为TRUE，myArgs向量中只包含添加到命令行的参数。
如果默认设置为FALSE ，myArgs向量中还包含其它参数，比如刚被执行的脚本路径。


2)Python脚本中访问命令行参数
通过在Python脚本中导入sys模块访问arg1, arg2 和arg3参数。 sys.argv属性是所有被传递到当前正在执行脚本的参数列表。表中的第一个元素是正在被执行的脚本的完整路径。

# myscript.py
import sys
my_args = sys.argv  # 获取命令行参数
# my_args 是一个列表，其中的第一个元素是执行的脚本
print(type(my_args))
print(my_args)

## 如果你只希望保留传递到脚本的参数，你可以使用列表切片来选择除了第一个元素以外的所有参数。
# 使用切片，选择除第一个以外的所有元素
my_args = sys.argv[1:]




(4)将输出结果写入文件
通过中间文件共享R和Python之间的数据有几种选择: csv, txt, json, yaml等。

在R语言中推荐下面的程序包：
- 对于CSV文件，使用readr
- 对于JSON文件，使用jsonlite
- 对于YAML文件，使用yaml

Python中推荐：
- 对于CSV文件，使用csv
- 对于JSON文件，使用json
- 对于YAML文件，使用PyYAML

csv 和json模块是Python标准的库文件，是Python内置模块，而Py YAML需要额外安装程序包。所有的R程序包均需要安装。






2. 互相调用






========================================
|-- python 非阻塞的调用shell子程序
----------------------------------------
$ cat a.sh
sleep 3
echo "hello,"


$ bash a.sh #需要等待3s，才打印hello
hello,




1.py阻塞的调用shell子程序。
(1)
$ cat t5.py 
import os
os.system("bash a.sh")

print(" world.")

$ python t5.py 
hello,
 world.
#我们执行t5，需要等待3s，屏幕上才打印出hello, world。


(2) subprocess.call.  #start and block until done
subprocess.call([data["om_points"],">", diz['d']+"/points.xml"])




2.非阻塞的调用shell子程序 #start and process things, then wait

$ cat t6.py 
import subprocess

p=subprocess.Popen('bash a.sh', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
# subprocess.run(['bash', 'a.sh'])

#for line in p.stdout.readlines():
#    print(line);

print(", world. after subprocess"); #立刻显示

#retval = p.wait() # #now wait。有人推荐使用p.communicate(); 测试效果差不多。
p.communicate();
# As stated in the documentation, wait can deadlock, so communicate is advisable.

print("next cmd after wait", p);



#运行
$ python t6.py 
, world. after subprocess #这一行立刻显示
#这里有3s等待
next cmd after wait <subprocess.Popen object at 0x7f04346e5128>


http://outofmemory.cn/code-snippet/1516/python-call-waibumingling-get-execution-result&sa=U&ei=qr
https://www.cnblogs.com/songzhenhua/p/9312764.html

========================================
Python调用C语言 //todo
----------------------------------------

(数据结构课设)基于Web的英汉字典，数据来自六级必背词汇，词汇量约15000 
https://github.com/d4smart/MyDict
底层用C编写，并将其编译成了Python库文件




========================================
----------------------------------------

========================================
----------------------------------------




========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------


