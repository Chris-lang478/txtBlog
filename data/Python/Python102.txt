Python3基础详解

There should be one—--and preferably only one –--obvious way to do it.
----摘自The Zen of Python, by Time Peters




========================================
web based tutorials
----------------------------------------
http://rosalind.info/problems/locations/
user:dawnEve/bi789789/pos***9@163.com



========================================
Python中的装饰器(decorator)
----------------------------------------
http://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/python-decorator-explain.html
想理解Python的decorator首先要知道在Python中函数也是一个对象，所以你可以
	将函数复制给变量
	将函数当做参数
	返回一个函数

函数在Python中给变量的用法一样也是一等公民，也就是高阶函数(High Order Function)。所有的魔法都是由此而来。

	
1，起源
我们想在函数login中输出调试信息，我们可以这样做

def login():
    print('in login')
 
def printdebug(func):
    print('enter the login')
    func()
    print('exit the login')
 
printdebug(login)

这个方法讨厌的是每次调用login是，都通过printdebug来调用，但毕竟这是可行的。


2，让代码变得优美一点
既然函数可以作为返回值，可以赋值给变量，我们可以让代码优美一点。

def login():
    print('in login')
 
def printdebug(func):
    def __decorator():
        print('enter the login')
        func()
        print('exit the login')
    return __decorator  #function as return value
 
debug_login = printdebug(login)  #function assign to variable
 
debug_login()  #execute the returned function

这样我们每次只要调用debug_login就可以了，这个名字更符合直觉。我们将原先的两个函数printdebug和login绑定到一起，成为debug_login。这种耦合叫内聚:-)。


3，让代码再优美一点
printdebug和login是通过debug_login = printdebug(login)这一句来结合的，这一句似乎也是多余的，能不能在定义login是加个标注，从而将printdebug和login结合起来？

上面的代码从语句组织的角度来讲很难再优美了，Python的解决方案是提供一个语法糖(Syntax Sugar)，用一个@符号来结合它们。

def printdebug(func):
    def __decorator():
        print('enter the login')
        func()
        print('exit the login')
    return __decorator  
 
@printdebug  #combine the printdebug and login
def login():
    print('in login')
 
login()  #make the calling point more intuitive

可以看出decorator就是一个：使用函数作参数并且返回函数的函数。通过改进我们可以得到：
	更简短的代码，将结合点放在函数定义时
	不改变原函数的函数名
在Python解释器发现login调用时，他会将login转换为printdebug(login)()。也就是说真正执行的是__decorator这个函数。

更高级的应用：
http://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators-in-python/1594484#1594484
如带参数，给装饰器加上装饰器。




1.
[Python入门及进阶笔记]Python-decorator装饰器小结 【深入浅出】
http://blog.csdn.net/wklken/article/details/8118942

2.
decorator注意事项
https://my.oschina.net/laugh2last/blog/493393
	python2.4及其以上版本有此功能
	装饰器使代码执行的效率变低了
	一旦一个函数已经被装饰好了，就定下来了，不能变了
	装饰器decorator在函数之间包装起来了，比较难debug
python自己也提供了几个装饰器，property，staticmethod等。Django用装饰器来管理缓存和视图权限，能够把python的decorator玩透，将会帮你解决很多事情。

3.
http://thecodeship.com/patterns/guide-to-python-function-decorators/
http://blog.csdn.net/azhao_dn/article/details/7638882
http://www.cnblogs.com/vamei/archive/2013/02/16/2820212.html

========================================
第九天 I/O - 文件读写 
----------------------------------------


如果文件很小，read()一次性读取最方便；
如果不能确定文件大小，反复调用read(size)比较保险；
如果是配置文件，调用readlines()最方便：

for line in f.readlines():
    print(line.strip()) # 把末尾的'\n'删掉
	
# 默认读写方式是GBK，打开显示是ansi。也可以指定encoding='utf-8'
with open("C:\\Tools\\test.txt", 'r', encoding='GBK') as f:
    print(f.read())


文件打开方式：
 - r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
 - rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
 - r+ 打开一个文件用于读写。文件指针将会放在文件的开头。
 - rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
 - w 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
 - ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
 - a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
 - ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。


小结

在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。


========================================
第九天：os - path目录
----------------------------------------
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32

python在安装的时候，就自带了很多模块，我们把这些模块称之为标准库，其中，有一个是使用频率比较高的，就是 os 。这个库中方法和属性众多，有兴趣的看官可以参考

官方文档：https://docs.python.org/3.5/library/os.html，或者在交互模式中，用dir(os)看一看。
Source code: Lib/os.py

代码如下:
>>> import os   #这个动作很重要，不能缺少 
>>> dir(os) 
['F_OK', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT', 'O_EXCL', 'O_NOINHERIT', 'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_SEQUENTIAL', 'O_SHORT_LIVED', 'O_TEMPORARY', 'O_TEXT', 'O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', 'P_OVERLAY', 'P_WAIT', 'R_OK', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'TMP_MAX', 'W_OK', 'X_OK', '_DummyDirEntry', '_Environ', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__','_dummy_scandir', '_execvpe', '_exists', '_exit', '_get_exports_list', '_putenv', '_unsetenv', '_wrap_close', 'abort', 'access', 'altsep', 'chdir', 'chmod', 'close', 'closerange', 'cpu_count', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'errno', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fdopen', 'fsdecode','fsencode', 'fstat', 'fsync', 'ftruncate', 'get_exec_path', 'get_handle_inheritable', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getenv', 'getlogin', 'getpid', 'getppid', 'isatty', 'kill', 'linesep', 'link', 'listdir', 'lseek', 'lstat', 'makedirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'pathsep', 'pipe', 'popen', 'putenv', 'read', 'readlink', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sep', 'set_handle_inheritable', 'set_inheritable', 'spawnl', 'spawnle', 'spawnv', 'spawnve', 'st', 'startfile', 'stat', 'stat_float_times', 'stat_result', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sys', 'system', 'terminal_size', 'times', 'times_result', 'truncate', 'umask', 'uname_result', 'unlink', 'urandom', 'utime', 'waitpid', 'walk', 'write']

在这么多的东西中，本讲只关注os.path，真所谓“弱水三千，只取一瓢”，为什么这么偏爱它呢？因为它和前面已经讲过的文件操作进行配合，就能够随心所欲操作各个地方的文件了。
关于os.path的属性也不少，依然可以用dir(os.path)查看：
代码如下:


>>> dir(os.path) 
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_bothseps', '_getfinalpathname', '_getfullpathname', '_getvolumepathname', 'abspath', 'altsep', 'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirname', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime', 'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismount', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realpath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitdrive', 'splitext', 'splitunc', 'stat', 'supports_unicode_filenames', 'sys']

这么多属性，看官可以用help()逐个查看有关信息，并了解其使用方法。下面列出常见的几个使用方法，为看官减轻一点阅读英文的障碍，不过，如果看官英语足够好，请直接看原文档。就像这样：
代码如下:

>>> help(os.path.split)
Help on function split in module ntpath:

split(p)
    Split a pathname.

    Return tuple (head, tail) where tail is everything after the final slash.
    Either part may be empty.

以下将一些典型举例说明：

特别说明，下面的所有操作，均是进入到如下的目录（C:\python_data）中进行的。
代码如下:
>>> import os.path
>>> os.path.abspath('1.py')
'C:\\python_data\\1.py'

文件 1.py 是否真实存在上述路径中，都能得到该文件的相对该文件夹的绝对路径。
这里不妨理解为，如果要建立这个文件，它即将被放在那个位置。


但是，如何区别文件是否存在于这个目录中？
>>> os.path.isfile('1.py')
True
>>> os.path.isfile('100.py') #不存在的文件
False



分开目录和文件名
>>> pt=os.path.abspath('1.py')
>>> pt
'C:\\python_data\\1.py'
>>> os.path.split(pt)
('C:\\python_data', '1.py')

>>> path,filename=os.path.split(pt)
>>> path
'C:\\python_data'
>>> filename
'1.py'



os.paht.split(),参数是目录加文件名，就可以将路径和文件名分开。其实，我看这个功能不是很智能，你看
>>> os.path.split('/home/wjl')
('/home', 'wjl')
>>> os.path.split('/home/wjl/')
('/home/wjl', '')
它就是将最后一组认为是文件名了，即最后一个/后面的就是文件名，所以第二个实验中，文件名是空了。是不是有点傻呢？

同样，参数中的文件或者目录，不一定是你的电脑中真实存在的，请看：
>>> os.path.split('/home/wjl/a.gif')
('/home/wjl', 'a.gif')
只要符合目录书写结构，就可以分解了。该命令不关心这个文件或者路径是否真实存在。




有另外两个属性，是os.path.split()的分别执行，即可以分别获得路径和文件名，这样让操作更简单了。
>>> os.path.dirname('/home/wjl/a.gif')
'/home/wjl'
>>> os.path.basename('/home/wjl/a.gif')
'a.gif'


判断 - 路径是否存在
前面稍微提到了os.path.isfile()可以用来判断一个文件是否存在，那么判断目录路径是否存在，可否？可：
>>> os.path.exists('d:/R_code')
True
>>> os.path.exists('d:/R_code2')
False


组合路径
将两个或多个对象组合起来，是常见的事情，那么如何将多个路径组合呢？如下：
>>> os.path.join("/home/python","/BasicsPython","226.md")
'/BasicsPython\\226.md'
>>> os.path.join("/home/python","./BasicsPython","226.md")
'/home/python\\./BasicsPython\\226.md'
不同对象之间的分隔符是按照操作系统选择的。
特别提醒，第一个例子中属性的返回值，将第一个绝对路径忽略。




========================================
Python yield 使用浅析
----------------------------------------
带有 yield 的函数在 Python 中被称之为 generator（生成器），何谓 generator ？
我们先抛开 generator，以一个常见的编程题目来展示 yield 的概念。

仅仅把 print b 改为了 yield b。




yield什么用？http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/
关于Python中的yield：迭代器和生成器：http://www.cnblogs.com/tqsummer/archive/2010/12/27/1917927.html

========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


