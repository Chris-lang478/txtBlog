Python104-packages(under jupyter notebook and python shell)

https://github.com/DawnEve/pydata-book
Python 数据分析的底层基石 Numpy； Python 数据清洗大杀器 Pandas。




https://www.data.gov/

NumPy 官网 http://www.numpy.org/
NumPy 源代码：https://github.com/numpy/numpy

SciPy 官网：https://www.scipy.org/
SciPy 源代码：https://github.com/scipy/scipy

Matplotlib 官网：https://matplotlib.org/
Matplotlib 源代码：https://github.com/matplotlib/matplotlib


========================================
Numpy + Pandas 是python进行数据分析的基石
----------------------------------------
https://www.youtube.com/watch?v=To3YL92HZyc&list=PLXO45tsB95cKKyC45gatc8wEc3Ue7BlI4


Google在线深度学习神器Colab: https://www.jianshu.com/p/81eae79ee78b


1.因为基于C写的Numpy，所以速度快，比Python自身运算要快很多。
而且矩阵的计算也做了优化，比原生Python快十倍。

http://www.numpy.org/
NumPy is the fundamental package for scientific computing with Python. It contains among other things:

a powerful N-dimensional array object
sophisticated (broadcasting) functions
tools for integrating C/C++ and Fortran code
useful linear algebra, Fourier transform, and random number capabilities

除了科学计算，还可以任意定义数据，方便和数据库整合。Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.




2. 安装
pip install Numpy
pip install Pandas 


3.测试
import numpy as np
import pandas as pd

pd.test()
#报错 ImportError: Need pytest>=3.0 to run tests

安装 
$ pip install --user pytest

再测试，又报错：
$ pip install -U --user setuptools

不管了，先用吧。




========================================
numpy基本功能、矩阵操作
----------------------------------------
官方教程： https://docs.scipy.org/doc/numpy/user/quickstart.html
中文版：https://www.jianshu.com/p/a260a8c43e44


1. 入门
import numpy as np

#pd.test()
array=np.array([
    [1,2,3],
    [4,5,6]])
print(array)
#[[1 2 3]
#[4 5 6]]

array.size #6
array.shape  #(2, 3)
array.ndim #2


2.用np创建array
NumPy中创建数组的方式有若干种。最简单的，可以直接利用Python中常规的list和tuple进行创建。

a=np.array([1,23,4])
a # array([ 1, 23,  4])

b=np.array((1,23,4)) #但是 b=np.array(1,23,4) 是错的，会报错 


#dtype 定义数据的位数，越高占的空间也越多
a=np.array([1,23,4],dtype=np.int)
print(a.dtype) #np.array([1,23,4])

a=np.array([1,23,4],dtype=np.float)
print(a.dtype) #float64

a=np.zeros((3,4));a #3行4列的0矩阵。
np.ones((2,4)) #2行4列的1矩阵


创建等差数列
np.arange(10,20) #array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
np.arange(10,20,2) #等差是2 array([10, 12, 14, 16, 18])


#np.arange返回的不是list，而是array
np.arange( 10, 30, 5 ) #从10到29，以5为间隔
#array([10, 15, 20, 25])

np.arange(12).reshape(3,4) #3行4列
#array([[ 0,  1,  2,  3],
#       [ 4,  5,  6,  7],
#       [ 8,  9, 10, 11]])

np.linspace(1,10,5) #把1-10之间给出5个数字，平均间隔相同 
#array([ 1.  ,  3.25,  5.5 ,  7.75, 10.  ])
#该函数常用于为函数画点图
x = np.linspace( 0, 2*np.pi, 100 )
# useful to evaluate function at lots of points
f = np.sin(x)



3.矩阵运算

(1)加减乘除
a=np.array([10,20,40,30])
b=np.arange(4)
print(a,b) #[10 20 40 30] [0 1 2 3]

#减法
c=a-b
print(c) #[10 19 38 27]

b**2 #array([0, 1, 4, 9]) #乘方

10*np.sin(a) #三角函数 
#array([-5.44021111,  9.12945251,  7.4511316 , -9.88031624])

a<35 #布尔运算 array([ True,  True, False,  True])


(2)矩阵乘法
* 表示按照元素相乘。
a*b #array([ 0, 20, 80, 90])

使用@(python>=3.5)或者dot函数表示矩阵乘积
A = np.array( [[1,1],
             [0,1]] )
B = np.array( [[2,0],
             [3,4]] )
A@B #或者 A.dot(B)
#array([[5, 4],
#       [3, 4]])


(3)+= and *=直接修改已有矩阵，而不是创建一个新的
a = np.ones((2,3), dtype=int)
b = np.random.random((2,3))
a *= 3
a
#array([[3, 3, 3],
#       [3, 3, 3]])
b += a
b
#array([[3.57371054, 3.01654088, 3.23986455],
#      [3.4613754 , 3.11336145, 3.40659914]])
a +=b #报错，b不会自动转为整数，因为会丢失精度【upcasting向上转型问题】
a+b #这样不会报错
b +=a #int->float向下转型无所谓，因为不丢失任何精度。


向下转型没问题，越来越细，占用越来越多空间
a=np.ones(3,dtype=np.int32);print(a)
b=np.linspace(0,np.pi, 3); print(b)
#[1 1 1]
#[0.         1.57079633 3.14159265]
b.dtype #dtype('float64')
c=a+b;print(c); #[1.         2.57079633 4.14159265]
c.dtype #dtype('float64')
d=np.exp(c*1j);print(d)
d.dtype #dtype('complex128')


(4)很多像sum等计算一元类的是以ndarray类的方法提供的
a = np.random.random((2,3))
a.sum()
a.min()
a.max()
a.mean()

还可以指定轴参数axis：
b = np.arange(12).reshape(3,4)
b
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11]])
print( b.sum() ) #总和 66
print( b.sum(axis=0) ) #列求和 array([12, 15, 18, 21])
b.sum(axis=1) #行求和 array([ 6, 22, 38])
b.cumsum(axis=1) #每一行的累加
# array([[ 0,  1,  3,  6],
#        [ 4,  9, 15, 22],
#        [ 8, 17, 27, 38]])




(5)通用函数
NumPy提供很多数学函数，如sin, cos, and exp，统称通用函数“universal functions”(ufunc)。作用于每个元素，输出为array。
>>> B = np.arange(3)
>>> B
array([0, 1, 2])
>>> np.exp(B)
array([ 1.        ,  2.71828183,  7.3890561 ])
>>> np.sqrt(B)
array([ 0.        ,  1.        ,  1.41421356])
>>> C = np.array([2., -1., 4.])
>>> np.add(B, C)
array([ 2.,  0.,  6.])






========================================
numpy 索引、切片、迭代(Indexing, Slicing and Iterating)
----------------------------------------
1. 一维数组可以像list和其他python序列一样索引、切片、迭代。

a=np.arange(10)**3;a
# array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])

a[2] #8 第一个下标是0
a[2:5] # 有头2无尾5 array([ 8, 27, 64])

a[:6:2] = -1000 # equivalent to a[0:6:2] = -1000; from start to position 6, exclusive, set every 2nd element to -1000
a
# array([-1000,     1, -1000,    27, -1000,   125,   216,   343,   512,
         729])
a[ : :-1]  # reversed a		 
# array([  729,   512,   343,   216,   125, -1000,    27, -1000,     1,
       -1000])
for i in a:
     print(i**(1/3.))




2. 多维数组，则每个轴可以有一个index。
>>> def f(x,y):
...     return 10*x+y
...
>>> b = np.fromfunction(f,(5,4),dtype=int)
>>> b
array([[ 0,  1,  2,  3],
       [10, 11, 12, 13],
       [20, 21, 22, 23],
       [30, 31, 32, 33],
       [40, 41, 42, 43]])
>>> b[2,3]
23
>>> b[0:5, 1]            # each row in the second column of b
array([ 1, 11, 21, 31, 41])
>>> b[ : ,1]             # equivalent to the previous example
array([ 1, 11, 21, 31, 41])
>>> b[1:3, : ]            # each column in the second and third row of b
array([[10, 11, 12, 13],
       [20, 21, 22, 23]])

#当维度少于实际维度时，则认为剩余维度为全部。
b[-1]     # the last row. Equivalent to b[-1,:]，或者用三个点 b[-1,...]
# array([40, 41, 42, 43])

三个点可以表达任意维度的全部：
 x[1,2,...] is equivalent to x[1,2,:,:,:],
 x[...,3] to x[:,:,:,:,3] and
 x[4,...,5,:] to x[4,:,:,5,:].





3. 迭代
对多维数组的迭代是相对于第一维度的。
for row in b:
     print(row)
# [0 1 2 3]
# [10 11 12 13]
# [20 21 22 23]
# [30 31 32 33]
# [40 41 42 43]

如果相对每一个元素做运算，则可以使用flat属性展开一个array
for element in b.flat:
     print(element)
# 0
# 1
# 2
# 3
# 10
# 11





========================================
numpy的IO
----------------------------------------
1.读取csv文件
$ cat score.csv 
1,2,3,4,5
10,20,30,40,50

score=np.genfromtxt("/home/wangjl/score.csv",delimiter=",")
score
# array([[ 1.,  2.,  3.,  4.,  5.],
#        [10., 20., 30., 40., 50.]])


2.保存结果






========================================
Scipy: high-level scientific computing(教程)
----------------------------------------
1.描述
SciPy (pronounced “Sigh Pie”) 是一个开源软件，用于数学、科研、工程计算。
依赖NumPy提供的方便快速的N维数组操作。
SciPy库建立在NumPy数组上，提供用户友好的、高效的数值路径：数据整合和优化。
它们在主流系统上都能跑，好安装，免费。
NumPy and SciPy使用方便，收到世界顶级科学家和工程师的信赖。
If you need to manipulate numbers on a computer and display or publish the results, give SciPy a try!

scipy包含致力于科学计算中常见问题的各个工具箱。它的不同子模块相应于不同的应用。像插值，积分，优化，图像处理，统计，特殊函数等等。



2. Scipy简介
文件输入和输出scipy.io
线性代数操作scipy.linalg
快速傅里叶变换scipy.fftpack
优化器scipy.optimize
统计工具scipy.stats

因为兼容等历史原因，scipy明星空间本身有很多numpy导入的函数(尝试 scipy.cos 就是 np.cos)。
建议任何时候都不要使用 import scipy，而要使用：
from scipy import stats
或
import scipy.io as spio



3. Scipy课程
http://www.scipy-lectures.org/
每个课程1-2h，由浅入深。

SciPy Tutorial
https://docs.scipy.org/doc/scipy/reference/tutorial/index.html
https://docs.scipy.org/doc/scipy/reference/tutorial/
https://docs.scipy.org/doc/scipy/reference/

中文：
https://www.jianshu.com/p/1a3db06e786d

Scipy有很多子模块可以应对不同的应用，例如插值运算，优化算法、图像处理、数学统计等。
https://blog.csdn.net/q583501947/article/details/76735870






========================================
Matplotlib: 散点图、折线图、直方图、柱状图、箱线图
----------------------------------------
四个可视化目标：
分布：柱状图、散点图、概率密度曲线图
相关：散点图with相关系数、拟合曲线
构成：柱状图with不同颜色、饼图
比较：柱状图、分面


官网：https://matplotlib.org/contents.html
教程：http://www.scipy-lectures.org/intro/matplotlib/index.html



1.简介
使用Matplotlib，它是用Python写的类似Matlib的库，能实现Matlib的功能，而且画图的质量很高，可用于做论文发表。

Matplotlib需要配合numpy,scipy才能使用，使用pip安装。
$ pip install --user matplotlib



2.实例：绘制散点图
# -*- coding: utf-8 -*-
"""
绘制散点图
"""
import numpy as np
import matplotlib.pyplot as plt

# 数据个数
n = 1024
# 均值为0, 方差为1的随机数
x = np.random.normal(0, 1, n)
y = np.random.normal(0, 1, n)

# 计算颜色值
color = np.arctan2(y, x)
# 绘制散点图
plt.scatter(x, y, s = 75, c = color, alpha = 0.5)
# 设置坐标轴范围
plt.xlim((-1.5, 1.5))
plt.ylim((-1.5, 1.5))

# 不显示坐标轴的值
plt.xticks(())
plt.yticks(())

plt.show()






3.实例：绘制柱状图，上下方向成对的柱状图
# -*- coding: utf-8 -*-

"""
绘制柱状图
"""

import matplotlib.pyplot as plt
import numpy as np

# 数据数目
n = 10
x = np.arange(n)
# 生成数据, 均匀分布(0.5, 1.0)之间
y1 = (1 - x / float(n)) * np.random.uniform(0.5, 1.0, n)
y2 = (1 - x / float(n)) * np.random.uniform(0.5, 1.0, n)

# 绘制柱状图, 向上
plt.bar(x, y1, facecolor = 'blue', edgecolor = 'white')
# 绘制柱状图, 向下
plt.bar(x, -y2, facecolor = 'green', edgecolor = 'white')

temp = zip(x, y2)
# 在柱状图上显示具体数值, ha水平对齐, va垂直对齐
for x, y in zip(x, y1):
    plt.text(x + 0.05, y + 0.1, '%.2f' % y, ha = 'center', va = 'bottom')

for x, y in temp:
    plt.text(x + 0.05, -y - 0.1, '%.2f' % y, ha = 'center', va = 'bottom')

# 设置坐标轴范围
plt.xlim(-1, n)
plt.ylim(-1.5, 1.5)
# 去除坐标轴
plt.xticks(())
plt.yticks(())
plt.show()







4.实例：绘制登高线图
# -*- coding: utf-8 -*-
"""
绘制登高线图
"""
import matplotlib.pyplot as plt
import numpy as np

# 定义等高线高度函数
def f(x, y):
    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(- x ** 2 - y ** 2)

# 数据数目
n = 256
# 定义x, y
x = np.linspace(-3, 3, n)
y = np.linspace(-3, 3, n)

# 生成网格数据
X, Y = np.meshgrid(x, y)

# 填充等高线的颜色, 8是等高线分为几部分
plt.contourf(X, Y, f(X, Y), 8, alpha = 0.75, cmap = plt.cm.hot)
# 绘制等高线
C = plt.contour(X, Y, f(X, Y), 8, colors = 'black', linewidth = 0.5)
# 绘制等高线数据
plt.clabel(C, inline = True, fontsize = 10)

# 去除坐标轴
plt.xticks(())
plt.yticks(())
plt.show()





5.实例：绘制heatmap
# -*- coding: utf-8 -*-
"""
绘制Image 
"""
import matplotlib.pyplot as plt
import numpy as np

# 定义图像数据
a = np.linspace(0, 1, 16).reshape(4, 4)
# 显示图像数据
plt.imshow(a, interpolation = 'nearest', cmap = 'bone', origin = 'lower')
# 添加颜色条
plt.colorbar()
# 去掉坐标轴
plt.xticks(())
plt.yticks(())
plt.show()








6.实例：绘制3D图形
# -*- coding: utf-8 -*-
"""
绘制3d图形
"""

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
# 定义figure
fig = plt.figure()
# 将figure变为3d
ax = Axes3D(fig)

# 数据数目
n = 256
# 定义x, y
x = np.arange(-4, 4, 0.25)
y = np.arange(-4, 4, 0.25)

# 生成网格数据
X, Y = np.meshgrid(x, y)

# 计算每个点对的长度
R = np.sqrt(X ** 2 + Y ** 2)
# 计算Z轴的高度
Z = np.sin(R)

# 绘制3D曲面
ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = plt.get_cmap('rainbow'))
# 绘制从3D曲面到底部的投影
ax.contour(X, Y, Z, zdim = 'z', offset = -2, cmap = 'rainbow')

# 设置z轴的维度
ax.set_zlim(-2, 2)

plt.show()








7.实例：subplot绘制多图
# -*- coding: utf-8 -*-
"""
subplot绘制多图 
"""

import matplotlib.pyplot as plt

plt.figure()

# 绘制第一个图
plt.subplot(2, 2, 1)
plt.plot([0, 1], [0, 1])
# 绘制第二个图
plt.subplot(2, 2, 2)
plt.plot([0, 1], [0, 1])
# 绘制第三个图
plt.subplot(2, 2, 3)
plt.plot([0, 1], [0, 1])
# 绘制第四个图
plt.subplot(2, 2, 4)
plt.plot([0, 1], [0, 1])
plt.show()




第一行占3列的布局：
# -*- coding: utf-8 -*-
"""
subplot绘制多图 
"""
import matplotlib.pyplot as plt
plt.figure()

# 绘制第一个图
plt.subplot(2, 1, 1) #2行1列的第1行
plt.plot([0, 1], [0, 1])
# 绘制第二个图
plt.subplot(2, 3, 4) #2行3列的第4个
plt.plot([0, 1], [0, 1])
# 绘制第三个图
plt.subplot(2, 3, 5)
plt.plot([0, 1], [0, 1])
# 绘制第四个图
plt.subplot(2, 3, 6)
plt.plot([0, 1], [0, 1])
plt.show()











refer:
https://matplotlib.org/contents.html
https://github.com/matplotlib/matplotlib

http://lib.csdn.net/article/python/43397
https://blog.csdn.net/qq_34337272/article/details/79555544




========================================
pandas: 数据清洗 powerful Python data analysis toolkit
----------------------------------------
1.简介
官网： http://pandas.pydata.org/
文档：http://pandas.pydata.org/pandas-docs/stable/
Cookbook: http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook

中文：https://www.yiibai.com/pandas/python_pandas_series.html



安装
$ conda install pandas
或
$ pip install pandas
$ pip install --upgrade pandas


pandas 解决什么问题？
python善于数据整理和预处理，不太擅长数据分析和建模，pandas弥补了这一点。
对于线性拟合和panel回归之外的建模，请使用statsmodels and scikit-learn包。
距离Python成为统计建模环境的一类公民还很远，我们正在努力。


pandas包含的数据类型：Series和DataFrame。
 - Series：一维数组，与Numpy中的一维array类似。二者与Python基本的数据结构List也很相近。Series如今能保存不同种数据类型，字符串、boolean值、数字等都能保存在Series中。
 - Time- Series：以时间为索引的Series。
 - DataFrame：二维的表格型数据结构。很多功能与R中的data.frame类似。可以将DataFrame理解为Series的容器。
 - Panel ：三维的数组，可以理解为DataFrame的容器。

我们重点学习DataFrame



2. 10分钟入门
http://pandas.pydata.org/pandas-docs/stable/10min.html
首先导入pandas库，一般都会用到numpy库，所以我们先导入备用：

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt #可能画图

(1)创建对象







(2)用pandas筛选annovar结果文件
ex=pd.read_csv("EX23_.hg19_multianno.csv", na_values=["."]) #读取csv文件，并填充空值
ex

ex.shape #(628993, 88)

ex.dtypes

ex=ex.fillna(0) #用0填充na值

#测试语句
tmp=ex["1000g2015aug_all"].iloc[50:60]
print(tmp)
tmp<0.01

#filter1:
print( ex["Func.refGene"].value_counts() ) #对某一列进行计数
ex2=ex[ex["Func.refGene"].isin(['exonic',"exonic;splicing","splicing"])] #对一列进行筛选
ex2.shape #(25347, 88)

#filter2:
ex3=ex2[ (ex2["1000g2015aug_all"]<0.01) & (ex2['1000g2015aug_eas']<0.01) & (ex2['esp6500siv2_all']<0.01) \
        & (ex2['ExAC_ALL']<0.01)& (ex2['ExAC_EAS']<0.01)] #对一列进行筛选
ex3.shape #(1484, 88)

#filter?:是不是要挑出来 非同意突变
ex3["ExonicFunc.refGene"].value_counts()

#过滤后的结果，保存到csv中
ex3.to_csv("EX23_.hg19_multianno.filter1_2.csv")






3.python:pandas 合并多个DataFrame
https://www.jianshu.com/p/5ecea164cec6

http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html
 - merge 左右合并
 - join
 

 - append 上下合并
 - concat




========================================
Python数据预处理（一）一抽取多源数据文本信息
----------------------------------------
https://www.imooc.com/learn/1105

本课程由数据预处理整个流程到综合实战。包括：Anaconda、Sublime、Pywin32、数据采集、数据集成、缺失值处理、正则、jieba分词、NLTK、词袋模型、数据抽样、特征词抽取、文本向量化、gensim、数据降维、numpy、sicpy、pandas、matplotlib、seabom、Xgboost等核心技术。



========================================
Python数据预处理（二）- 清洗文本数据
----------------------------------------
https://www.imooc.com/learn/1122

本课介绍数据预处理过程体系，包括数据类型与采集、文本转化与抽取、数据集成与规约、中文分词、数据清洗、特征提取与变换、特征向量化、特征降维、特征选择、可视化、词典模型、TF-IDF向量模型、主题模型等。




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

