Python104-packages

https://github.com/DawnEve/pydata-book
Python 数据分析的底层基石 Numpy； Python 数据清洗大杀器 Pandas。



========================================
Numpy + Pandas 是python进行数据分析的基石
----------------------------------------
https://www.youtube.com/watch?v=To3YL92HZyc&list=PLXO45tsB95cKKyC45gatc8wEc3Ue7BlI4

1.因为基于C写的Numpy，所以速度快，比Python自身运算要快很多。
而且矩阵的计算也做了优化，比原生Python快十倍。

http://www.numpy.org/
NumPy is the fundamental package for scientific computing with Python. It contains among other things:

a powerful N-dimensional array object
sophisticated (broadcasting) functions
tools for integrating C/C++ and Fortran code
useful linear algebra, Fourier transform, and random number capabilities

除了科学计算，还可以任意定义数据，方便和数据库整合。Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.




2. 安装
pip install Numpy
pip install Pandas 


3.测试
import numpy as np
import pandas as pd

pd.test()
#报错 ImportError: Need pytest>=3.0 to run tests

安装 
$ pip install --user pytest

再测试，又报错：
$ pip install -U --user setuptools

不管了，先用吧。




========================================
numpy基本功能
----------------------------------------
1. 入门
import numpy as np

#pd.test()
array=np.array([
    [1,2,3],
    [4,5,6]])
print(array)
#[[1 2 3]
#[4 5 6]]

array.size #6
array.shape  #(2, 3)
array.ndim #2


2.用np创建array
import numpy as np

a=np.array([1,23,4])
a # array([ 1, 23,  4])


#dtype 定义数据的位数，越高占的空间也越多
a=np.array([1,23,4],dtype=np.int)
print(a.dtype) #np.array([1,23,4])

a=np.array([1,23,4],dtype=np.float)
print(a.dtype) #float64

a=np.zeros((3,4));a #3行4列的0矩阵。
np.ones((2,4)) #2行4列的1矩阵


创建等差数列
np.arange(10,20) #array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
np.arange(10,20,2) #等差是2 array([10, 12, 14, 16, 18])

np.arange(12).reshape(3,4) #3行4列
#array([[ 0,  1,  2,  3],
#       [ 4,  5,  6,  7],
#       [ 8,  9, 10, 11]])


np.linspace(1,10,5) #把1-10之间给出5个数字，平均间隔相同 
#array([ 1.  ,  3.25,  5.5 ,  7.75, 10.  ])


3.矩阵运算

(1)
a=np.array([10,20,40,30])
b=np.arange(4)
print(a,b) #[10 20 40 30] [0 1 2 3]
c=a-b
print(c) #[10 19 38 27]

(2)









========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

