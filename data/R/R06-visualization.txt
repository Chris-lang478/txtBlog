R的可视化：图片、pdf和网页等展示(略)



========================================
R语言可视化概述
----------------------------------------
1.
R语言原生的绘图系统已经非常强大了，可以绘制非常炫目的图片，需要的仅仅是耐心。
其他绘图包ggplot2，plotly都很好用。

再近几年，R语言推出了Shiny框架，可以用R语言快速写成一个网页，这简直不能更方便。


“高大尚图片包括（GNUplot，http://www.gnuplot.info/）和matlab，但是R包ggplot2作图秒杀以上二者。”



2.图形示例
某种程度上，本博客txtBlog是一个文字为主的博客系统，不适合记录R可视化相关的教程。
请跳转查看-->
可视化部分： www.biomooc.com 找到R模块中的可视化部分即可。
( local url: http://biomooc.dawneve.cc )


========================================
《R语言实战》中的绘图章节
----------------------------------------
第3章 图形初步P40-64
	本章介绍了创建、修改图形的方法，以及如何将图形保存为各种格式的文件。
第6章 基本图形P108-129
	第6章演示了创建常见单变量图形的方法，例如柱状图、饼图、直方图、密度图、箱线图和点图。这些图形对于理解单变量的分布都很有用。
第11章 中级绘图P236-261
	第11章扩展了第5章的内容，介绍了创建表现两个或多个变量间关系的图形。这包括各种2D和3D的散点图、散点图矩阵、折线图、相关图和马赛克图。
第16章 高级图形P333-256
	第16章介绍了R中最先进、最有用的数据可视化方法，包括用lattice图形表现非常复杂的数据，简要介绍新的ggplot2包，并对各种跟图形实时交互的方法做了综述。



该书配套网站包含的图形
https://www.statmethods.net/graphs/index.html
Creating a Graph
Histograms and Density Plots
Dot Plots
Bar Plots
Line Charts
Pie Charts
Boxplots
Scatterplots



1.高水平画图命令；
2.低水平画图命令；
3.图形的交互与参数；
4.图形设备；
5.动态图形；

记录到： http://biomooc.dawneve.cc/R/R-draw-basic.html
参考： 
https://www.yiibai.com/r/r_pie_charts.html
https://blog.csdn.net/disappearedgod/article/details/8681312


========================================
网络资源
----------------------------------------
1.R语言简介3-1：画布分割-散点箱线图  
http://agetouch.blog.163.com/blog/static/228535090201731572157646/

2.R语言简介3-2：聚类树/进化树  
http://agetouch.blog.163.com/blog/static/22853509020174292714506/




R Graphics Essentials: 3个表格很好
http://www.sthda.com/english/articles/32-r-graphics-essentials/134-r-basics-for-data-visualization/

Lattice Graphs
http://www.sthda.com/english/wiki/lattice-graphs


========================================
R原生绘图函数概述
----------------------------------------
R原生绘图也很强大。用一个高级绘图函数画出主体，然后用一系列低级绘图函数添加辅助元素。

1.简单图形绘制

attach(mtcars)
plot(wt,mpg) #散点图x,y
abline(lm(mpg~wt)) #拟合曲线y~x
title("Regression of MPG on Weight") #加标题
detach(mtcars)



2. 通过代码保存图片
setwd("F://Temp//") #设定工作目录

pdf("pic1.pdf") # 设定文件名
attach(mtcars)
plot(wt,mpg)
abline(lm(mpg~wt))
detach(mtcars)
dev.off() #关闭绘图设备

除了pdf()，还可以使用函数win.metafile()、png()、jpeg()、bmp()、tiff()、xfig()和postscript()将图形保存为其他格式。（注意，Windows图元文件格式仅在Windows系统中可用。）



3. 执行如plot()、hist()（绘制直方图）或boxplot()这样的高级绘图命令来创建一幅新图形时，通常会覆盖掉先前的图形。
如何才能创建多个图形并随时查看每一个呢？
方法1： dev.new()
方法2： 使用ggplot2绘图窗口的后退-前进箭头；
方法3: 数dev.new()、dev.next()、dev.prev()、dev.set()和dev.off()同时打开多个图形窗口，并选择将哪个输出发送到哪个窗口中。参考help(dev.cur)。


4.散点图 
语法： plot(x, y, type="p")
x and y: the coordinates of points to plot
type : the type of graph to create; Possible values are :

type="p": for points (by default)
type="l": for lines
type="b": for both; points are connected by a line
type="o": for both ‘overplotted’;
type="h": for ‘histogram’ like vertical lines
type="s": for stair steps
type="n": for no plotting
使用help(plot)可以查看其他选项.


x<-1:10; y=x*x
plot(x,y) #空心点图
plot(x, y, type="b") #空心点，用实线连接
plot(x, y, type="h") #竖直线
plot(x,y, type="s") #台阶图



5.图形参数：字体、颜色、线条、坐标轴、标题
(1)通过par()指定，除非被再次修改，该设定在进程结束前一直有效。该语句可一次性定义好，或使用多次。
添加par(no.readonly=T)可以生成一个不可以修改的当前图形参数列表，用于恢复设定。

oldPar=par(no.readonly = T) #记录当前设定
par(lty=2,pch=17) #修改设定：line type将默认实线改为虚线，pch将默认的点符号改为实心三角
plot(x,y,type="b")
par(oldPar) #恢复设定
plot(x,y,type="b")

##lty
 - The line type. Line types can either be specified as an integer (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash) or as one of the character strings "blank", "solid", "dashed", "dotted", "dotdash", "longdash", or "twodash", where "blank" uses ‘invisible lines’ (i.e., does not draw them).
 - Alternatively, a string of up to 8 characters (from c(1:9, "A":"F")) may be given, giving the length of line segments which are alternatively drawn and skipped. See section ‘Line Type Specification’.
 - Functions such as lines and segments accept a vector of values which are recycled.

##pch
 - plotting ‘character’, i.e., symbol to use. This can either be a single character or an integer code for one of a set of graphics symbols. The full set of S symbols is available with pch = 0:18, see the examples below. (NB: R uses circles instead of the octagons used in S.)
 - Value pch = "." (equivalently pch = 46) is handled specially. It is a rectangle of side 0.01 inch (scaled by cex). In addition, if cex = 1 (the default), each side is at least one pixel (1/72 inch on the pdf, postscript and xfig devices).
 - For other text symbols, cex = 1 corresponds to the default fontsize of the device, often specified by an argument pointsize. For pch in 0:25 the default size is about 75% of the character height (see par("cin")).



(2)通过高级绘图函数直接定义，仅对当前图形有效。
plot(x,y,type="b",lty=2,pch=17)



(3)指定符号和线条的参数
pch: 指定绘制时使用的符号
cex: 缩放倍数，默认是1；
lty: 指定线条类型；
lwd: 线条宽度。




========================================
R原生绘图：R中的色彩-color-RColorBrewr-colortools
----------------------------------------
在R中，可以通过颜色下标、颜色名称、十六进制的颜色值、RGB值或HSV值来指定颜色。举例来说，col=1、col="white"、col="#FFFFFF"、col=rgb(1,1,1)和col=hsv(0,0,1)都是表示白色的等价方式。
函数rgb()可基于红—绿—蓝三色值生成颜色，而hsv()则基于色相—饱和度—亮度值来生成颜色。


1.R颜色列表
https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf

colors() #查看R内置的657个颜色名字
但是初级用户很难从如此长的列表中找到适合场景的颜色。这时候就需要借鉴别人的配色方案，并通过取色工具获取颜色。
1) rgb转为16进制
myHex<-rgb(red=126,green=0,blue=211,max = 255);myHex
#[1] "#7EFFD3"
text(2,4,labels="文字",col= myHex)
2)或者直接读取16进制颜色
text(2,3,labels="文字2",col= "#7E00D3")




2. 自带配色方案
直接选取颜色，新手很难做到美观。R本身也提供特定颜色主题的配色方案。这些配色方案用一系列渐变的颜色表现特定的主题。
https://book.2cto.com/201408/45551.html

(1)rainbow()即彩虹的颜色，是由“赤、橙、黄、绿、青、蓝、紫”一系列颜色组成的。
该函数的用法如下：
rainbow(n,s=1,v=1,start=0,end=max(1,n-1)/n,gamma=1)

n 设定产生颜色的数目
start和end 设定彩虹颜色的一个子集，生成的颜色将从这个子集中选取，这个子集选取的大致分界线为：
赤色（red）为start=0，end=1/6
黄色（yellow）为start=1/6，end=2/6
绿色（green）为start=2/6，end=3/6
青色（cyan）为start=3/6，end=4/6
蓝色（blue）为start=4/6，end=5/6
紫色（magenta）为start=5/6，end=1

该例中会产生由赤、橙、黄、绿、青、蓝、紫7色依次合成6组颜色，每组包含6个渐变色。
barplot(rep(1,41),
        col=c(rainbow(n=6,start=0,end=1/6),
              "white",
              rainbow(n=6,start=1/6,end=2/6),
              "white",
              rainbow(n=6,start=2/6,end=3/6),
              "white",
              rainbow(n=6,start=3/6,end=4/6),
              "white",
              rainbow(n=6,start=4/6,end=5/6),
              "white",
              rainbow(n=6,start=5/6,end=1)))
x.text<-c("赤色","黄色","绿色","青色","蓝色","紫色")
axis(side=1,at=seq(from=3,length.out=6,by=8.5),labels =x.text,cex=0.75)


(2)其他主题配色函数
#heat.colors()从红色渐变到黄色，再变到白色
barplot(rep(1,6), col= heat.colors(6) )  

#terrain.colors() 从绿色渐变到黄色，再到棕色，最后到白色  
barplot(rep(1,6),col=terrain.colors(6))

#topo.colors() 从蓝色渐变到青色，再到黄色，最后到棕色  
barplot(rep(1,6),col=topo.colors(6))

#cm.colors() 从青色渐变到白色，再到粉红色
barplot(rep(1,6),col=cm.colors(6))





3. RColorBrewr颜色扩展包 提供了3套配色方案。
#画出来这些颜色
library(RColorBrewer)
display.brewer.all()
（1）连续型 sequential， 颜色渐变。
（2）极端型 Diverging，生成深色强调两端、浅色表示中部的颜色，可用来标注数据中的离群点。
（3）离散型 Qualitative，生成彼此差异明显的颜色，通常用来标记分类数据。


（1）查看连续型的种类。
display.brewer.all(type="seq")# 有9种颜色
#Set1 中只有9个颜色， Set3中有12个颜色，Paired 中有12个颜色
用法：barplot(rep(1,6),col=brewer.pal(9,"Blues")) # 数字9，表示使用色条中颜色的个数，引号内表示色条对应的名称。
可以使用brewer.pal（9, "<某组渐变颜色的名称>"）来获取该组渐变色的全部9种颜色。


（2）极端型。
display.brewer.all(type="div")# 有11种颜色。
用法： barplot(rep(1,6),col=brewer.pal(11,"RdGy")[2:7])# 第二到第七个颜色。



（3）离散型。
display.brewer.all(type="qual")# 颜色种类不确定。
用法： barplot(rep(1,6),col=brewer.pal(8,"Dark2")[1:5]) #参数和上面的相类似。




4. 配色程序
install.packages("colortools")
library("colortools")

#
wheel("darkblue", num = 12)

#Analogous color scheme
adjacent("darkblue") 
#or 
analogous("darkblue")

#Complementary color scheme
complementary("steelblue")


#Split Complementary Color Scheme
splitComp("steelblue")


#Tetradic Color Scheme
tetradic("steelblue")

#Square color scheme
square("steelblue")


#Sequential colors
sequential("steelblue")





5.自定义调色板
https://blog.csdn.net/u014801157/article/details/24372411

如果觉得R预设调色板不合用，可以用colorRampPalette函数自定义调色板。使用之前得熟悉几个R预定义的颜色名称，这些名称可以通过colors函数获得：
> cl <- colors()
> head(cl,10)
> length(cl) #当前版本有657个预置颜色名称

(1)可以用这些颜色名称通过colorRampPalette函数产生自己的颜色系列。colorRampPalette的参数如下：

colorRamp(colors, bias = 1, space = c("rgb", "Lab"), interpolate = c("linear", "spline"))
colorRampPalette(colors, ...)


我们用它产生几个颜色系列：

par(mfrow=c(3,1));par(mar=c(0.1,0.1,0.5,0.1));par(xaxs="i", yaxs="i")
n <- 1000

mycolors <- colorRampPalette(c("blue", "orangeRed"))(n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()

mycolors <- colorRampPalette(c("darkgreen", "yellow", "orangered"))(n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()

mycolors <- colorRampPalette(c("blue", "white", "darkgreen", "yellow", "orangered"), bias=1.2)(n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()


(2)gray函数可以产生不同层次的灰度颜色
mycolors <- gray(0:n/n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()



(3)hsv函数通过设置色调、饱和度和亮度获得颜色，三个值都是0-1的相对量：

par(mfcol=c(11,121)); par(mar=c(0,0,0,0));par(xaxs="i", yaxs="i")
x <- seq(0,10)/10
ndx <- expand.grid(x, x, x)
mycolor <- hsv(ndx[,3],ndx[,2],ndx[,1])
for(i in 1:nrow(ndx)){
	barplot(1,col=mycolor[i],border=mycolor[i],axes=FALSE)
}



6.scales软件包提供了很多颜色设置的函数，其中的alpha对颜色的透明度设置很方便，可以考虑使用。
有人可能喜欢用RColorBrewer软件包里面的不连续调色板，萝卜白菜吧。



7.最后提供几个颜色组合，从多到少：

library(RColorBrewer)
#433种
color433 = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
pie(rep(1,50), col=sample(color433, 50, replace = F))

#74种
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
color74 = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,60), col=sample(color74, 60, replace = F))

#37种
color37 = c("#466791","#60bf37","#953ada","#4fbe6c","#ce49d3","#a7b43d","#5a51dc","#d49f36","#552095","#507f2d","#db37aa","#84b67c","#a06fda","#df462a","#5b83db","#c76c2d","#4f49a3","#82702d","#dd6bbb","#334c22","#d83979","#55baad","#dc4555","#62aad3","#8c3025","#417d61","#862977","#bba672","#403367","#da8a6d","#a79cd4","#71482c","#c689d0","#6b2940","#d593a7","#895c8b","#bd5975")
pie(rep(1,37), col=sample(color37, 37))

#20种
color20<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
pie(rep(1,20), col=sample(color20, 20))

#彩虹20种
barplot(rep(0.2,20), col=rainbow(20)) #20种彩虹色，再多就区分不明显了

#这个抽样颜色还是值得考虑的，有经济学人柱状图的风格
library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
#处理后有73种差异还比较明显的颜色，基本够用
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 
#看下中间60种颜色的效果
n=30
pie(rep(1,n), col=sample(col_vector, n))
barplot(rep(0.2,n), col=sample(col_vector, n))



========================================
R原生绘图：R语言中plot()函数里的6种边框
----------------------------------------
R语言中，设置plot(x,y,..., bty="o",..)里参数bty，就可以不同的6种边框了。

bty可以取6种字符，分别为“o”、“l”、“7”、“c”、“u”、“]”。这些字符代 表6种边框。

https://blog.csdn.net/sanqima/article/details/43022277




========================================
R原生绘图：R中的字体-font
----------------------------------------
1. 画个包含坐标的空白图形。
plot(0:4,type="n",xlab = NA,ylab=NA,axes=F)
# 0:4 表示x轴和y轴的坐标刻度; type="n",表示画的点不显示。
# xlab= ,ylab=  表示x轴和y轴的 标签，NA 表示不显示内容；
# axes=F 表示坐标轴的线不显示。因此，该输出结果可以认为是隐藏了所有内容的图性。

2. 字体 
font（字体）参数的取值是一个整数，一般分别用1、2、3、4来表示正常体、粗体、斜体和粗斜体1。

text(2,4,label="font=1 正常体",font=1)
text(2,3,label="font=2 粗体",font=2)
text(2,2,label="font=3 斜体",font=3)
text(2,1,label="font=4 粗斜体",font=4)

# 如果说label 过长的话会横向铺开，由此可见虽然设置了（2,y）的坐标，但横坐标并不是label的起点。


3. 大小
cex（缩放倍数）参数的取值是一个实数，默认为1，表示不缩放。取值小于1时，表示缩小。取值大于1时，表示放大。

plot(0:4,type="n",xlab = NA,ylab=NA,axes=F) #画空图形
text(2,4,label="cex=1 font=1 正常体",font=1,cex=1)
text(2,3,label="cex=0.5 粗体",font=2,cex=0.5)
text(2,2,label="cex=1.5 font=3 斜体",font=3,cex=1.5)
text(2,1,label="cex=2 font=4 粗斜体",font=4,cex=2)


4.字体类型

(1)windows下使用windowsFont()函数来创建映射，
windowsFonts(
  A=windowsFont("Arial Black"),
  B=windowsFont("Bookman Old Style"),
	C=windowsFont("Comic Sans MS")
)
之后，即可使用A、B、C作为family的取值。
比如使用 par(family="A") 将指定Arial Black作为绘图字体
par(family="A")
plot(1:10,main="plot") 坐标轴、标题的字体都是粗体了。

在Mac下，请改用 quartzFonts()函数。

输出pdf、PostScript格式，则修改字体相对简单。

pdf则直接用如下函数找出系统可用字体，
names(pdfFonts())
# [1] "serif"                "sans"                 "mono"                
# [4] "AvantGarde"           "Bookman"              "Courier"  
#...
然后使用pdf(file="myplot.pdf", family="fontName") 来生成图形。

PostScript格式输出，对应函数为 names(postscriptFonts())和postscript(file="myplot.ps", family="fontname")


========================================
R原生绘图：图形尺寸与边界尺寸
----------------------------------------
参数： 
pin 图形宽高(英寸) (width, height), in inches.; 
mai边界(英寸),c(bottom, left, top, right); 
mar边界(英分),c(bottom, left, top, right), 默认是c(5, 4, 4, 2) + 0.1.;


mar和mai的区别是什么？




========================================
R原生绘图：添加文本、自定义坐标轴和图例
----------------------------------------
除了par()函数，高级绘图函数(plot,hist,boxplot等)也允许自行设定坐标轴和文本标注选项。
标题main, 副标题sub, 坐标轴标签xlab-ylab, 坐标轴范围xlim-ylim。





图例参数详解： https://blog.51cto.com/11729955/2161891




========================================
R原生绘图：图形页面排版
----------------------------------------
http://www.360doc.com/content/14/0831/20/17553313_406108143.shtml
一、图形边距：mar/mai参数
> par(bg="cyan")                #把图形背景设为青色以便观察
> par(mar=c(4, 4, 0.5, 0.5))    #c(下、左、上、右)设定下边距和左边距为4行，另外两边距为0.5行。
> set.seed(1000)                #设此参数是为了下面的rnorm()函数都能获得相同数据
> plot(rnorm(10))


二、坐标轴（标题、刻度标签和刻度线）位置：mgp参数
mgp参数可设三个数值，依次为标题、刻度标签和刻度的位置。mar/mai设定参数后，图形区（用box函数绘制的边框）边缘位置即为0。所以，mgp=c(2, 0.5, 0)就表示标题在第二行，刻度标签在0.5行，刻度线在0行。
par(bg="cyan")
par(mar=c(4, 4, 0.5, 0.5))
set.seed(1000)
par(mgp=c(1.5,0.5,0)) #坐标轴各项的位置设定c(x标题,刻度标签,刻度线)
plot(rnorm(10))


三、获取位置坐标 //不懂没事，看完继续看四
如果要把图例、自定义文字等设置在图形区以外，par函数的usr参数非常有用，获取方法很简单：

usr <- par("usr")
usr
# [1]   0.64 10.36  0.64 10.36
#返回值是一个向量：c(x1, x2, y1, y2)
#如果要通过鼠标点击获得图形上的某些点的坐标，可以用locator()函数：

xy <- locator(n=1)   #参数n表示要获得n个点的坐标，需要点击n次鼠标
xy
#$x
#[1] 0.6516328
#
#$y
#[1] -1.761121




四、在图形区外添加图例和文字
有了以上获取坐标信息的方法，我们可以把图例放在图形区外。先绘制柱形图：
par(mar=c(3, 3, 0.5, 4))      #注意给图例留出空间，右侧4 inch
par(mgp=c(2,0.5,0))
NF <- c(17.44 , 2.56 , 2.70 , 18.71 , 5.61 , 32.98)
CA <- c(11.48 , 0.75 , 1.16 , 12.73 , 2.84 , 20.04)
labels <- paste("S", 1:length(NF),sep="")
the.data <- rbind(NF, CA)
barplot(the.data, ylim=c(0, max(NF,CA)*1.2), col=c("orange", "red"),
	xlab="Sample", ylab="Level", beside=TRUE,
	offset=0, axis.lty=1, names.arg=labels)
box() #外边框

#然后通过坐标设定将图例放到图形区外。
#注意：除坐标（指图例的左上角坐标）数值设定外，
#还要legend函数中的参数xpd值设为TRUE，意思为“允许在图形区外绘制”。

usr <- par("usr")
x <- usr[2]*1.02     #图例左上角的x坐标，向右移动
y <- usr[4]*0.6      #图例左上角的y坐标，向下移动
legend(x, y, legend=c("NF","CA"), fill=c("orange", "red"), box.col="white", xpd=TRUE)


#事实上，使用legend函数的inset参数就可以把图例放到图形区外，不需要设定坐标值。
#inset的值表示相对于图形区的比例，比如：如果位置坐标用 “left”和“right”，inset表示相对于x轴长度的比例。
#要将图例放到图形区外，inset设定为负值，具体数字自己估算。前面的图例可以用下面语句获得：
legend("right",legend=c("NF","CA"), box.col="white", fill=c("orange", "red"), 
       inset=-0.35, xpd=TRUE) #相对于right线，inset为正则向左移动，为负责向右移动。0.1的步长。
#建议还是先获取坐标好点，这个inset太难调了。

#灵活设定inset的值可以把图例放置在图形的其他地方，比如顶部：
par(mar=c(3, 3, 2, 0.5))
par(mgp=c(2,0.5,0))
barplot(the.data, ylim=c(0, max(NF,CA)*1.2), col=c("orange", "red"),
        xlab="Sample", ylab="Level", beside=TRUE,
        offset=0, axis.lty=1, names.arg=labels)
legend("top", legend=c("NF","CA"), box.col="white", fill=c("orange", "red"),
       ncol=2, inset=-0.15, xpd=TRUE)
box() #最后画box好，可以压下legend的白色背景。


顺便简单说说文字添加，更详细的内容留后面介绍。
图形区内添加文字用text()函数，在图形区外添加文字用mtext()函数。这种约束也不是死的，设定合适的参数，两者可以随意使用。
另外，mtext()不能添加旋转的文字，text用srt参数可以获得旋转文字。下面我们用旋转文字设定x轴标签：

NF <- c(17.44 , 2.56 , 2.70 , 18.71 , 5.61 , 32.98)
CA <- c(11.48 , 0.75 , 1.16 , 12.73 , 2.84 , 20.04)
the.data <- rbind(NF, CA)
labels <- paste("Sample", 1:length(NF))
par(mar=c(4, 3, 0.5, 0.5))
par(mgp=c(2,0.5,0))
position <- barplot(the.data, ylim=c(0, max(NF,CA)*1.2),
                    col=c("orange", "red"), legend.text=c("NF","CA"),
                    args.legend=list(x="topleft", box.col="white", inset=0.02),
                    ylab="Level", beside=TRUE, offset=0, axis.lty=1)
#以下为横坐标标签设定
x <- (position[1,] + position[2,])/2
y <- par("usr")[3]-1
text(x, y, labels=labels, adj=1, srt=45, xpd=TRUE) #adj标签与轴的距离，srt设置xlable角度
box()




五、一页多图

把一个页面平分成n份做n个图，用par函数的mfrow和mfcol参数。这两个参数都是两个值的向量，表示行数和列数，但在页面上作图顺序的顺序不一 样。如果用mfrow参数，一行一行从左到右作图；mfcol则是一列一列的做。下面图形的代码只有第一行不一样，注意看每个图内的点（数字）：

#画图函数
myDraw=function(){
  set.seed(1000);plot(rnorm(100),pch="1", cex=0.6)
  set.seed(1001);plot(rnorm(100),pch="2", cex=0.6)
  set.seed(1002);plot(rnorm(100),pch="3", cex=0.6)
  set.seed(1003);plot(rnorm(100),pch="4", cex=0.6)
}

#图片按横着输出
par(mfrow=c(2,2)) #两行两列，mfrow行
par(mar=c(3, 3, 0.5, 0.5))
myDraw()

#图片竖着输出
par(mfcol=c(2,2)) #两行两列，mfcol列
par(mar=c(3, 3, 0.5, 0.5))
myDraw()
#


如果页面不均等分隔绘制多图，用layout函数分隔页面。它有四个参数，mat，widths，heights和respect。后三个参数有默认值，这 里我们只设置第一个参数mat。它是一个矩阵，表示绘图区分隔的各部分，相同数字的部分合并成一个绘图区，数字也是它们作图时的顺序。下面的矩阵mat有 2行3列，我们看看它绘出的图形：

注意：mat参数的值必需从1-n顺序依次取值，不能有间隔。

#layout布局1
par(mar=c(2, 2, 0.5, 0.5))
mat <- matrix(c(1,1,2,3,4,4), nrow=2, byrow=TRUE)
mat
#     [,1] [,2] [,3]
#[1,]    1    1    2
#[2,]    3    4    4
layout(mat)
myDraw()


#layout布局2
par(mar=c(2, 2, 0.5, 0.5))
mat <- matrix(c(1,2,3,4,4,4), nrow=2, byrow=TRUE)
mat
#     [,1] [,2] [,3]
#[1,]    1    2    3
#[2,]    4    4    4
layout(mat)
myDraw()













========================================
R原生绘图-基本图形
----------------------------------------
条形图、箱线图和点图
饼图和扇形图
直方图与核密度图

主要记录在
http://www.biomooc.com/R/R-draw-basic2.html
http://www.biomooc.com/R/R-draw-intermediate.html








========================================
lattice 绘图系统
----------------------------------------
lattice主要记录在 http://www.biomooc.com/R/R-draw-adv-lattice.html
[R In Action(2nd Edtion), Chapter23] https://livebook.manning.com/book/r-in-action-second-edition/bonus-chapter-23-advanced-graphics-with-the-lattice-package/


1. lattice 包
	函数：xyplot, bwplot, histogram, stripplot, dotplot, splom, levelplot, contourplot
	格式： xyplot(y~x| f*g, data) # f和g是分类变量
	panel函数，用于控制每个面板内的绘图

grid包：
	实现了独立于base的绘图系统
	lattice包是基于grid创建的；很少直接从grid包调用函数

lattice和base的重要区别：
	base绘图函数直接在图形设备上绘图
	lattice绘图函数返回trellis类对象
		打印函数真正执行了在设备上绘图
		命令执行时，trellis类对象会被自动打印，看起来像是lattice函数直接完成了绘图

#



refer:
https://www.imooc.com/video/11578



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


