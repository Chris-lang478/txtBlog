R的可视化：图片、pdf和网页等展示(略)



R绘图主要包括三部分：基础绘图命令、Lattice图形系统、ggplot包。

主要记录在 http://www.biomooc.com/R/R-draw-sketch.html


========================================
R语言可视化概述
----------------------------------------
1.
R语言原生的绘图系统已经非常强大了，可以绘制非常炫目的图片，需要的仅仅是耐心。
其他绘图包ggplot2，plotly都很好用。

再近几年，R语言推出了Shiny框架，可以用R语言快速写成一个网页，这简直不能更方便。


“高大尚图片包括（GNUplot，http://www.gnuplot.info/）和matlab，但是R包ggplot2作图秒杀以上二者。”



2.图形示例
某种程度上，本博客txtBlog是一个文字为主的博客系统，不适合记录R可视化相关的教程。
请跳转查看-->
可视化部分： www.biomooc.com 找到R模块中的可视化部分即可。
( local url: http://biomooc.dawneve.cc )


========================================
《R语言实战》中的绘图章节
----------------------------------------
第3章 图形初步P40-64
	本章介绍了创建、修改图形的方法，以及如何将图形保存为各种格式的文件。
第6章 基本图形P108-129
	第6章演示了创建常见单变量图形的方法，例如柱状图、饼图、直方图、密度图、箱线图和点图。这些图形对于理解单变量的分布都很有用。
第11章 中级绘图P236-261
	第11章扩展了第5章的内容，介绍了创建表现两个或多个变量间关系的图形。这包括各种2D和3D的散点图、散点图矩阵、折线图、相关图和马赛克图。
第16章 高级图形P333-256
	第16章介绍了R中最先进、最有用的数据可视化方法，包括用lattice图形表现非常复杂的数据，简要介绍新的ggplot2包，并对各种跟图形实时交互的方法做了综述。



该书配套网站包含的图形
https://www.statmethods.net/graphs/index.html
Creating a Graph
Histograms and Density Plots
Dot Plots
Bar Plots
Line Charts
Pie Charts
Boxplots
Scatterplots



1.高水平画图命令；
2.低水平画图命令；
3.图形的交互与参数；
4.图形设备；
5.动态图形；

记录到： http://biomooc.dawneve.cc/R/R-draw-basic.html
参考： 
https://www.yiibai.com/r/r_pie_charts.html
https://blog.csdn.net/disappearedgod/article/details/8681312


========================================
网络资源
----------------------------------------
1.R语言简介3-1：画布分割-散点箱线图  
http://agetouch.blog.163.com/blog/static/228535090201731572157646/

2.R语言简介3-2：聚类树/进化树  
http://agetouch.blog.163.com/blog/static/22853509020174292714506/




R Graphics Essentials: 3个表格很好
http://www.sthda.com/english/articles/32-r-graphics-essentials/134-r-basics-for-data-visualization/

Lattice Graphs
http://www.sthda.com/english/wiki/lattice-graphs








========================================
数据可视化
----------------------------------------
1.如何将枯燥的大数据呈现为可视化的图和动画？
https://www.zhihu.com/question/23416938

录屏软件 oCam 

数据可视化软件 Tableau http://www.tableau.com/zh-cn

数据可视化： d3库 https://github.com/d3/d3/wiki/Gallery



2.R语言绘制日本老龄化：
http://wwwbuild.net/SustainableCity/187713.html





========================================
3d散点图
----------------------------------------
1. 3D散点图，无法拖动 scatterplot3d

library(scatterplot3d)
set.seed(2015)
x <- runif(100)
y <- runif(100)
z <- runif(100)
grp <- as.factor(sample(1:3, 100, replace = T))#介个是设置的三种颜色标签啦，一个数字对应一个颜色
dat <- data.frame(x, y, z, grp)#生成数据框
head(dat)
plot3d <- with(dat, scatterplot3d(x, y, z, color = as.numeric(grp), pch = 16))

legend(plot3d$xyz.convert(0.5,0.7,0.5),pch=16,yjust=0,legend=levels(dat$grp), col = seq_along(levels(dat$grp)))




2. rgl:这个可以实现用鼠标对图像进行旋转，从不同的视角看图像。
#install.packages("rgl")
library(rgl)
attach(mtcars)
plot3d(wt,disp,mpg,col="red",size=5)
detach(mtcars)

attach(dat)
plot3d(x,y,z)
detach(dat)
缺点是不好看，不好控制。





3.如何利用R语言画出三维动画图
http://blog.csdn.net/chen790646223/article/details/45483275






========================================
R原生绘图函数概述
----------------------------------------
R原生绘图也很强大。用一个高级绘图函数画出主体，然后用一系列低级绘图函数添加辅助元素。

1.简单图形绘制

attach(mtcars)
plot(wt,mpg) #散点图x,y
abline(lm(mpg~wt)) #拟合曲线y~x
title("Regression of MPG on Weight") #加标题
detach(mtcars)



2. 通过代码保存图片
setwd("F://Temp//") #设定工作目录

pdf("pic1.pdf") # 设定文件名
attach(mtcars)
plot(wt,mpg)
abline(lm(mpg~wt))
detach(mtcars)
dev.off() #关闭绘图设备

除了pdf()，还可以使用函数win.metafile()、png()、jpeg()、bmp()、tiff()、xfig()和postscript()将图形保存为其他格式。（注意，Windows图元文件格式仅在Windows系统中可用。）



3. 执行如plot()、hist()（绘制直方图）或boxplot()这样的高级绘图命令来创建一幅新图形时，通常会覆盖掉先前的图形。
如何才能创建多个图形并随时查看每一个呢？
方法1： dev.new()
方法2： 使用ggplot2绘图窗口的后退-前进箭头；
方法3: 数dev.new()、dev.next()、dev.prev()、dev.set()和dev.off()同时打开多个图形窗口，并选择将哪个输出发送到哪个窗口中。参考help(dev.cur)。


4.散点图 
语法： plot(x, y, type="p")
x and y: the coordinates of points to plot
type : the type of graph to create; Possible values are :

type="p": for points (by default)
type="l": for lines
type="b": for both; points are connected by a line
type="o": for both ‘overplotted’;
type="h": for ‘histogram’ like vertical lines
type="s": for stair steps
type="n": for no plotting
使用help(plot)可以查看其他选项.


x<-1:10; y=x*x
plot(x,y) #空心点图
plot(x, y, type="b") #空心点，用实线连接
plot(x, y, type="h") #竖直线
plot(x,y, type="s") #台阶图



5.图形参数：字体、颜色、线条、坐标轴、标题
(1)通过par()指定，除非被再次修改，该设定在进程结束前一直有效。该语句可一次性定义好，或使用多次。
添加par(no.readonly=T)可以生成一个不可以修改的当前图形参数列表，用于恢复设定。

oldPar=par(no.readonly = T) #记录当前设定
par(lty=2,pch=17) #修改设定：line type将默认实线改为虚线，pch将默认的点符号改为实心三角
plot(x,y,type="b")
par(oldPar) #恢复设定
plot(x,y,type="b")

##lty
 - The line type. Line types can either be specified as an integer (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash) or as one of the character strings "blank", "solid", "dashed", "dotted", "dotdash", "longdash", or "twodash", where "blank" uses ‘invisible lines’ (i.e., does not draw them).
 - Alternatively, a string of up to 8 characters (from c(1:9, "A":"F")) may be given, giving the length of line segments which are alternatively drawn and skipped. See section ‘Line Type Specification’.
 - Functions such as lines and segments accept a vector of values which are recycled.

##pch
 - plotting ‘character’, i.e., symbol to use. This can either be a single character or an integer code for one of a set of graphics symbols. The full set of S symbols is available with pch = 0:18, see the examples below. (NB: R uses circles instead of the octagons used in S.)
 - Value pch = "." (equivalently pch = 46) is handled specially. It is a rectangle of side 0.01 inch (scaled by cex). In addition, if cex = 1 (the default), each side is at least one pixel (1/72 inch on the pdf, postscript and xfig devices).
 - For other text symbols, cex = 1 corresponds to the default fontsize of the device, often specified by an argument pointsize. For pch in 0:25 the default size is about 75% of the character height (see par("cin")).



(2)通过高级绘图函数直接定义，仅对当前图形有效。
plot(x,y,type="b",lty=2,pch=17)



(3)指定符号和线条的参数
pch: 指定绘制时使用的符号
cex: 缩放倍数，默认是1；
lty: 指定线条类型；
lwd: 线条宽度。




1.画布分割

#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))

# par(mfrow=c(2,2),mar=c(1,1,2,1), mgp=c(2,.7,0), tck=-.01)#下、左、上、右的边距

par(mfrow=c(3,2)) #分割画布为3行2列
# http://blog.csdn.net/reallocing1/article/details/41726577

for(i in c(mean0,quantile2,quantile3,quantile4)){
  plot(x,y)
}




2. legend位置
R里面legend图例位置调整函数inset
http://blog.sciencenet.cn/blog-267448-1021711.html

barplot中图例位置设置：args.legend = list(x="topleft"),




3.画图
library(Cairo)
CairoPNG(file=fname,width=1000)
plot(c(1,4,9,16))
dev.off()


4.调整坐标轴与刻度之间的距离：mgp=c(2.5,1,0)
http://blog.sina.com.cn/s/blog_4c7fada80102x3gd.html

mgp:坐标轴各部件的位置。第一个元素为坐标轴位置到坐标轴标签的距离，以文本行高为单位。第二个元素为坐标轴位置到坐标刻度标签的距离。第三个元素为坐标轴位置到实际画的坐标轴的距离，通常是0。



========================================
 |-- 基础辅助画图命令 title-axis-abline-legend-text 
----------------------------------------
标题title
坐标轴axis
参考线abline
图例legend
文本标注text（绘图区域内部添加文字），mtext（图形四个边界添加文字）




1.散点图实例：自定义坐标轴及刻度，背景虚线，散点图，拟合的实线和虚线
来源：Fig 2C(Philip Brennecke, 2013: A ccounting for technical noise in single-cell RNARNARNA-seq experiments)

数据：#x=meansHeLa,y=cv2HeLa
> head(meansHeLa)
5_8S_rRNA       7SK      A1BG  A1BG-AS1       A2M   A2M-AS1 
2.8057377 0.3591766 0.6739348 0.3230381 1.1488078 0.3647032 
> head(cv2HeLa)
5_8S_rRNA       7SK      A1BG  A1BG-AS1       A2M   A2M-AS1 
19.335707  8.082797  6.597475  6.299504 28.000000 28.000000


画图命令
#2.4.1 Plot of the fit
CairoPDF(file="03-plotOfTheFit.pdf",width=5,height=5)
# Prepare the plot (scales, grid, labels, etc.)
plot( NULL, xaxt="n", yaxt="n",
      log="xy", xlim = c( 1e-1, 3e5 ), ylim = c( .005, 80 ),
      xlab = "average normalized read count", ylab = "squared coefficient of variation (CV^2)" )
axis( 1, 10^(-1:5), c( "0.1", "1", "10", "100", "1000",
                       expression(10^4), expression(10^5) ) )
axis( 2, 10^(-2:2), c( "0.01", "0.1", "1", "10","100" ), las=2 )
abline( h=10^(-2:2), v=10^(-1:6), col="#D0D0D0", lwd=2 )
title(main="nonSHela")
# Add the data points
points( meansHeLa, cv2HeLa, pch=20, cex=.2, col=colHeLa )
# Plot the fitted curve
xg <- 10^seq( -2, 6, length.out=1000 )
lines( xg, (xi+a1)/xg + a0, col="#FF000080", lwd=3 )
# Plot quantile lines around the fit
df <- ncol(countsERCC) - 1
lines( xg, ( (xi+a1)/xg + a0 ) * qchisq( .975, df ) / df,
       col="#FF000080", lwd=2, lty="dashed" )
lines( xg, ( (xi+a1)/xg + a0 ) * qchisq( .025, df ) / df,
       col="#FF000080", lwd=2, lty="dashed" )
dev.off()




========================================
 |-- 基础画图命令 图例legend
----------------------------------------
R语言绘制图例的各种问题
http://www.360doc.com/content/17/0831/20/46931810_683661129.shtml

吐槽吐到累，不如多掌握几个图例（Legend）的软肋，更好地利用R语言绘图。
legend(x, y = NULL, legend, fill = NULL,col =, bty = "o",xjust = 0, yjust = 1, x.intersp = 1, y.intersp =1, adj = c(0, 0.5), text.width = NULL,xpd=TRUE)


1. Legend 定位
(1). 如果图例绘在制图区外，必须提前保留绘制legend的空间。如par（mai=c（2,0.5,0.5,0.5）），图例绘制在下方，所以留2，其余3个方向为0.5。

(2). 图例绘在制图区外，必须设置参数xpd=TRUE，否则命令正确也不会出图，因为默认xpd=F。

(3). 图例位置由x，y决定。legend 默认坐标为左上角的坐标（因为设定xjust=0，yjust=1），因此可以通过xjust，yjust来调节。xjust=1，yjust=0，即为右下角坐标。



2.Legend布局
(1).  如果图例数量太多，则设置多列（ncol=），如ncol=4，分为4列。
(2). 如果图例不加边框，则设置bty=“n”，“o”为加边框。
(3). 图标和文字的位置，可以通过x.intersp, y.intersp, adj,text.width等来调控。
x（y）.intersp指图标和文字之间的绝对距离adj指图标和文字的相对距离text.
width指图标和文字整体的宽度。


命令1
设置绘图参数mai=c（下，左，上，右）的边界空间。

命令2
绘制柱状图。

命令3
选取绘图区域左下角和右上角的坐标。

命令4
正常绘图，设置xpd=T。xinch()、yinch()，分别表示沿x轴，y轴移动的距离，按绝对距离计算，或按坐标轴的数量级计算。fill=T，即显示图标（默认为矩形填充色）。fill=F的话可以设置pch，选择图标类型。

命令5
设置adj=0.6，adj越接近于0，图标与文字的相对距离越远。
此参数作用于文字，图标不动。


命令6
设置x.intersp=0.6，越接近于0，图标与文字的绝对距离越近。以一侧为标准，图标文字均移动。

命令7
设置text.width=1.4，表示图标和文字整体的宽度。当文字太长时可以调节此参数。

命令8
text.width与x.intersp结合使用，效果最好。

命令9
设置ncol=2，分为两列。





========================================
 |-- R语言画barplot堆叠条形图
----------------------------------------
用于表现一个样本中有多少种亚型及其比例。
比如种群中的亚群比例，组织中的突变比例等信息。

数据实例：
province	cl1	cl2	cl3	cl4
10	0.927	0.012	0.023	0.038
10	0.894	0.057	0.009	0.04
15	0.03	0.277	0.262	0.431
15	0.032	0.768	0.042	0.159
16	0.021	0.731	0.058	0.19
16	0.017	0.914	0.042	0.027
17	0.011	0.945	0.011	0.033
17	0.013	0.96	0.014	0.013
18	0.207	0.148	0.223	0.422
18	0.677	0.084	0.119	0.12
19	0.064	0.124	0.223	0.589
19	0.539	0.194	0.027	0.24
20	0.021	0.041	0.058	0.879
20	0.027	0.046	0.106	0.821
21	0.018	0.102	0.051	0.829
21	0.026	0.122	0.167	0.685
22	0.015	0.012	0.956	0.017
22	0.063	0.018	0.905	0.014
23	0.015	0.018	0.93	0.038
23	0.018	0.025	0.938	0.018
23	0.023	0.046	0.864	0.067


代码：

#从剪切板读取数据
tbl2=read.table('clipboard',header=T)
#画条状图
barplot(t(as.matrix(tbl2))[-1,],col=rainbow(4), 
  #names.arg=(paste(substr(FirstName,1,1),".",LastName)),   #设定横坐标名称
  names.arg=tbl2$province,
  space=0, #条形间距
  xlab="Individual #", ylab="Ancestry",border=NA)
#axis(las=3,labels=tbl2$province)

#refer
#http://blog.163.com/imnoqiao@126/blog/static/35265851201611633153720/
#http://blog.sina.com.cn/s/blog_670445240102uwo3.html
#axis(1, lab=(t(as.matrix(tbl2))[1,]), cex.axis = 1.2)


问题：怎么在barplot图的上下标上文字注释？顶部标上分类，底部标上来源地。

这一步是structure软件的可视化部分。
more: http://agetouch.blog.163.com/blog/static/228535090201761982522397/



========================================
R原生绘图：R中的色彩-color-RColorBrewr-colortools
----------------------------------------
在R中，可以通过颜色下标、颜色名称、十六进制的颜色值、RGB值或HSV值来指定颜色。举例来说，col=1、col="white"、col="#FFFFFF"、col=rgb(1,1,1)和col=hsv(0,0,1)都是表示白色的等价方式。
函数rgb()可基于红—绿—蓝三色值生成颜色，而hsv()则基于色相—饱和度—亮度值来生成颜色。


1.R颜色列表
https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf

colors() #查看R内置的657个颜色名字
但是初级用户很难从如此长的列表中找到适合场景的颜色。这时候就需要借鉴别人的配色方案，并通过取色工具获取颜色。
1) rgb转为16进制
myHex<-rgb(red=126,green=0,blue=211,max = 255);myHex
#[1] "#7EFFD3"
text(2,4,labels="文字",col= myHex)
2)或者直接读取16进制颜色
text(2,3,labels="文字2",col= "#7E00D3")




2. 自带配色方案
直接选取颜色，新手很难做到美观。R本身也提供特定颜色主题的配色方案。这些配色方案用一系列渐变的颜色表现特定的主题。
https://book.2cto.com/201408/45551.html

(1)rainbow()即彩虹的颜色，是由“赤、橙、黄、绿、青、蓝、紫”一系列颜色组成的。
该函数的用法如下：
rainbow(n,s=1,v=1,start=0,end=max(1,n-1)/n,gamma=1)

n 设定产生颜色的数目
start和end 设定彩虹颜色的一个子集，生成的颜色将从这个子集中选取，这个子集选取的大致分界线为：
赤色（red）为start=0，end=1/6
黄色（yellow）为start=1/6，end=2/6
绿色（green）为start=2/6，end=3/6
青色（cyan）为start=3/6，end=4/6
蓝色（blue）为start=4/6，end=5/6
紫色（magenta）为start=5/6，end=1

该例中会产生由赤、橙、黄、绿、青、蓝、紫7色依次合成6组颜色，每组包含6个渐变色。
barplot(rep(1,41),
        col=c(rainbow(n=6,start=0,end=1/6),
              "white",
              rainbow(n=6,start=1/6,end=2/6),
              "white",
              rainbow(n=6,start=2/6,end=3/6),
              "white",
              rainbow(n=6,start=3/6,end=4/6),
              "white",
              rainbow(n=6,start=4/6,end=5/6),
              "white",
              rainbow(n=6,start=5/6,end=1)))
x.text<-c("赤色","黄色","绿色","青色","蓝色","紫色")
axis(side=1,at=seq(from=3,length.out=6,by=8.5),labels =x.text,cex=0.75)


(2)其他主题配色函数
#heat.colors()从红色渐变到黄色，再变到白色
barplot(rep(1,6), col= heat.colors(6) )  

#terrain.colors() 从绿色渐变到黄色，再到棕色，最后到白色  
barplot(rep(1,6),col=terrain.colors(6))

#topo.colors() 从蓝色渐变到青色，再到黄色，最后到棕色  
barplot(rep(1,6),col=topo.colors(6))

#cm.colors() 从青色渐变到白色，再到粉红色
barplot(rep(1,6),col=cm.colors(6))





3. RColorBrewr颜色扩展包 提供了3套配色方案。
#画出来这些颜色
library(RColorBrewer)
display.brewer.all()
（1）连续型 sequential， 颜色渐变。
（2）极端型 Diverging，生成深色强调两端、浅色表示中部的颜色，可用来标注数据中的离群点。
（3）离散型 Qualitative，生成彼此差异明显的颜色，通常用来标记分类数据。


（1）查看连续型的种类。
display.brewer.all(type="seq")# 有9种颜色
#Set1 中只有9个颜色， Set3中有12个颜色，Paired 中有12个颜色
用法：barplot(rep(1,6),col=brewer.pal(9,"Blues")) # 数字9，表示使用色条中颜色的个数，引号内表示色条对应的名称。
可以使用brewer.pal（9, "<某组渐变颜色的名称>"）来获取该组渐变色的全部9种颜色。


（2）极端型。
display.brewer.all(type="div")# 有11种颜色。
用法： barplot(rep(1,6),col=brewer.pal(11,"RdGy")[2:7])# 第二到第七个颜色。



（3）离散型。
display.brewer.all(type="qual")# 颜色种类不确定。
用法： barplot(rep(1,6),col=brewer.pal(8,"Dark2")[1:5]) #参数和上面的相类似。




4. 配色程序
install.packages("colortools")
library("colortools")

#
wheel("darkblue", num = 12)

#Analogous color scheme
adjacent("darkblue") 
#or 
analogous("darkblue")

#Complementary color scheme
complementary("steelblue")


#Split Complementary Color Scheme
splitComp("steelblue")


#Tetradic Color Scheme
tetradic("steelblue")

#Square color scheme
square("steelblue")


#Sequential colors
sequential("steelblue")





5.自定义调色板
https://blog.csdn.net/u014801157/article/details/24372411

如果觉得R预设调色板不合用，可以用colorRampPalette函数自定义调色板。使用之前得熟悉几个R预定义的颜色名称，这些名称可以通过colors函数获得：
> cl <- colors()
> head(cl,10)
> length(cl) #当前版本有657个预置颜色名称

(1)可以用这些颜色名称通过colorRampPalette函数产生自己的颜色系列。colorRampPalette的参数如下：

colorRamp(colors, bias = 1, space = c("rgb", "Lab"), interpolate = c("linear", "spline"))
colorRampPalette(colors, ...)


我们用它产生几个颜色系列：

par(mfrow=c(3,1));par(mar=c(0.1,0.1,0.5,0.1));par(xaxs="i", yaxs="i")
n <- 1000

mycolors <- colorRampPalette(c("blue", "orangeRed"))(n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()

mycolors <- colorRampPalette(c("darkgreen", "yellow", "orangered"))(n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()

mycolors <- colorRampPalette(c("blue", "white", "darkgreen", "yellow", "orangered"), bias=1.2)(n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()


(2)gray函数可以产生不同层次的灰度颜色
mycolors <- gray(0:n/n)
barplot(rep(1,times=n),col=mycolors,border=mycolors,axes=FALSE); box()



(3)hsv函数通过设置色调、饱和度和亮度获得颜色，三个值都是0-1的相对量：

par(mfcol=c(11,121)); par(mar=c(0,0,0,0));par(xaxs="i", yaxs="i")
x <- seq(0,10)/10
ndx <- expand.grid(x, x, x)
mycolor <- hsv(ndx[,3],ndx[,2],ndx[,1])
for(i in 1:nrow(ndx)){
	barplot(1,col=mycolor[i],border=mycolor[i],axes=FALSE)
}



6.scales软件包提供了很多颜色设置的函数，其中的alpha对颜色的透明度设置很方便，可以考虑使用。
有人可能喜欢用RColorBrewer软件包里面的不连续调色板，萝卜白菜吧。



7.最后提供几个颜色组合，从多到少：

library(RColorBrewer)
#433种
color433 = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
pie(rep(1,50), col=sample(color433, 50, replace = F))

#74种
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
color74 = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,60), col=sample(color74, 60, replace = F))

#37种
color37 = c("#466791","#60bf37","#953ada","#4fbe6c","#ce49d3","#a7b43d","#5a51dc","#d49f36","#552095","#507f2d","#db37aa","#84b67c","#a06fda","#df462a","#5b83db","#c76c2d","#4f49a3","#82702d","#dd6bbb","#334c22","#d83979","#55baad","#dc4555","#62aad3","#8c3025","#417d61","#862977","#bba672","#403367","#da8a6d","#a79cd4","#71482c","#c689d0","#6b2940","#d593a7","#895c8b","#bd5975")
pie(rep(1,37), col=sample(color37, 37))

#20种
color20<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
pie(rep(1,20), col=sample(color20, 20))

#彩虹20种
barplot(rep(0.2,20), col=rainbow(20)) #20种彩虹色，再多就区分不明显了

#这个抽样颜色还是值得考虑的，有经济学人柱状图的风格
library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
#处理后有73种差异还比较明显的颜色，基本够用
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 
#看下中间60种颜色的效果
n=30
pie(rep(1,n), col=sample(col_vector, n))
barplot(rep(0.2,n), col=sample(col_vector, n))



========================================
R原生绘图：R语言中plot()函数里的6种边框
----------------------------------------
R语言中，设置plot(x,y,..., bty="o",..)里参数bty，就可以不同的6种边框了。

bty可以取6种字符，分别为“o”、“l”、“7”、“c”、“u”、“]”。这些字符代 表6种边框。

https://blog.csdn.net/sanqima/article/details/43022277




========================================
R原生绘图：R中的字体-font
----------------------------------------
1. 画个包含坐标的空白图形。
plot(0:4,type="n",xlab = NA,ylab=NA,axes=F)
# 0:4 表示x轴和y轴的坐标刻度; type="n",表示画的点不显示。
# xlab= ,ylab=  表示x轴和y轴的 标签，NA 表示不显示内容；
# axes=F 表示坐标轴的线不显示。因此，该输出结果可以认为是隐藏了所有内容的图性。

2. 字体 
font（字体）参数的取值是一个整数，一般分别用1、2、3、4来表示正常体、粗体、斜体和粗斜体1。

text(2,4,label="font=1 正常体",font=1)
text(2,3,label="font=2 粗体",font=2)
text(2,2,label="font=3 斜体",font=3)
text(2,1,label="font=4 粗斜体",font=4)

# 如果说label 过长的话会横向铺开，由此可见虽然设置了（2,y）的坐标，但横坐标并不是label的起点。


3. 大小
cex（缩放倍数）参数的取值是一个实数，默认为1，表示不缩放。取值小于1时，表示缩小。取值大于1时，表示放大。

plot(0:4,type="n",xlab = NA,ylab=NA,axes=F) #画空图形
text(2,4,label="cex=1 font=1 正常体",font=1,cex=1)
text(2,3,label="cex=0.5 粗体",font=2,cex=0.5)
text(2,2,label="cex=1.5 font=3 斜体",font=3,cex=1.5)
text(2,1,label="cex=2 font=4 粗斜体",font=4,cex=2)


4.字体类型

(1)windows下使用windowsFont()函数来创建映射，
windowsFonts(
  A=windowsFont("Arial Black"),
  B=windowsFont("Bookman Old Style"),
	C=windowsFont("Comic Sans MS")
)
之后，即可使用A、B、C作为family的取值。
比如使用 par(family="A") 将指定Arial Black作为绘图字体
par(family="A")
plot(1:10,main="plot") 坐标轴、标题的字体都是粗体了。

在Mac下，请改用 quartzFonts()函数。

输出pdf、PostScript格式，则修改字体相对简单。

pdf则直接用如下函数找出系统可用字体，
names(pdfFonts())
# [1] "serif"                "sans"                 "mono"                
# [4] "AvantGarde"           "Bookman"              "Courier"  
#...
然后使用pdf(file="myplot.pdf", family="fontName") 来生成图形。

PostScript格式输出，对应函数为 names(postscriptFonts())和postscript(file="myplot.ps", family="fontname")


========================================
R原生绘图：图形尺寸与边界尺寸
----------------------------------------
参数： 
pin 图形宽高(英寸) (width, height), in inches.; 
mai边界(英寸),c(bottom, left, top, right); 
mar边界(英分),c(bottom, left, top, right), 默认是c(5, 4, 4, 2) + 0.1.;


mar和mai的区别是什么？




========================================
R原生绘图：添加文本、自定义坐标轴和图例
----------------------------------------
除了par()函数，高级绘图函数(plot,hist,boxplot等)也允许自行设定坐标轴和文本标注选项。
标题main, 副标题sub, 坐标轴标签xlab-ylab, 坐标轴范围xlim-ylim。




图例参数详解： https://blog.51cto.com/11729955/2161891



========================================
|-- R原生绘图：坐标轴设置
----------------------------------------
R语言作图：坐标轴设置
https://blog.csdn.net/weixin_40628687/article/details/79254791
在R语言底层作图中，对坐标轴的调整主要通过调整plot函数、axis函数和title函数的一系列参数完成。


一、plot函数的准备

　　在个性化设置坐标轴之前中，通常需调整plot函数中的ann、bty、xaxt、yaxt、xaxs和yaxs参数：
　　ann取FALSE时将不会画出标题（包括主、副标题及坐标轴标题）；
　　bty用来设置边框形式，默认值为"o"，表示四面边框都画出，其余可选值包括"l"（左下）、"7"（上右）、"c"（上下左）、"u"（左下右）、"]" （上下右）和"n"（无，即不画边框），在很多个性化绘图中，bty设为"n"，后期的边框线再使用其他函数（如axis）自行添加；

　　xaxs和yaxs 用来设置x轴和y轴的范围，默认值取“r”，表示坐标轴比给定作图范围（参数xlim和ylim给出的范围）稍微大一点儿，取”i”时表示坐标轴范围与给定作图范围完全相同，另外还可取”s”、”e”、”d”；

　　xaxt和yaxt 取”n”时，坐标轴、刻度线以及刻度值将不会画出。
#
x <- seq(-4, 4, 0.01)
y <- x^2
par(mfrow = c(2, 2), mar = c(4, 4, 1, 1))
plot(x, y)   # 未作处理
plot(x, y,  xaxs = "i", yaxs ="i")   # 绘图边框未留白
plot(x, y, bty = 'l')   # 只保留左和下两条边框
plot(x, y, ann = F, bty = "n", xaxt = "n", yaxt ="n")   # 边框、坐标轴都去掉




二、axis函数的用法
1、基本操作
　　side表示要操作的坐标轴，取值1、2、3、4分别代表下、左、上、右；
　　at表示刻度线及刻度值所在位置；
　　labels表示刻度值；
　　las表示坐标刻度值文字方向，las=0表示文字方向与坐标轴平行，1表示始终为水平方向，2表示与坐标轴垂直，3表示终为垂直方向。

x<- seq(-4, 4, 0.01)
y<- x^2
par(mfrow=c(1, 2), mar = c(4, 4, 1, 1))
#未设置文字方向
plot(x,y, ann = F, xaxt = "n", yaxt = "n")  
axis(1,-4:4, -4:4)
axis(2,seq(0, 16, 4), seq(0, 16, 4))
#文字方向水平
plot(x,y, ann = F, xaxt = "n", yaxt = "n")  
axis(1,-4:4, -4:4, las = 1)
axis(2,seq(0, 16, 4), seq(0, 16, 4), las = 1)


2、字体字号
　　cex.axis表示坐标轴刻度值的字号大小，
　　font.axis表示坐标轴刻度值的字体，font=1表示正体，2表示黑体，3表示斜体，4表示黑斜体。

x<- seq(-4, 4, 0.01)
y<- x^2
par(mfrow=c(2, 2), mar = c(4, 4, 1, 1))
#未设置字体字号
plot(x,y, ann = F, xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4)
#cex.axis = 2
plot(x,y, ann = F, xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4, cex.axis = 2)
#font.axis = 2
plot(x,y, ann = F, xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4, font.axis = 2)
#font.axis = 3
plot(x,y, ann = F, xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4, font.axis = 3)



3、颜色
　　col表示图的颜色，用在axis函数中表示坐标轴线和坐标刻度线的颜色；
　　col.axis表示坐标轴刻度值的颜色；
　　col.ticks表示坐标轴刻度线的颜色。

x<- seq(-4, 4, 0.01)
y<- x^2
par(mfrow=c(2, 2), mar = c(4, 4, 1, 1))
#未设置颜色
plot(x,y, ann = F, bty = "n", xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4)
#col = 2
plot(x,y, ann = F, bty = "n", xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4, col = 2)
#col.axis = 2
plot(x,y, ann = F, bty = "n", xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4, col.axis = 2)
#col.ticks = 2
plot(x,y, ann = F, bty = "n", xaxt = "n", yaxt = "n")
axis(1,-4:4, -4:4, col.ticks = 2)




4、位置
　　line表示坐标轴线位置与图像边框的距离，取负数时会画在图像边框以内；
　　mgp默认值为c(3, 1, 0)，三个数字分别代表坐标轴标题、刻度值和轴线与绘图边框的距离；
　　tcl默认值为-0.5，数值表示刻度线长度，负值表示刻度线朝外，正值朝里；
　　pos 表示轴线所在的位置；
　　line.outer取TRUE时，坐标轴将画在画布边缘处；
　　hadj指将刻度值沿平行坐标轴方向调整的距离；
　　padj指将刻度值沿垂直坐标轴方向调整的距离。

x <- seq(-4, 4, 0.01)
y <- x^2
par(mfrow= c(2, 2), mar = c(4, 4, 1, 1))
# 未设置刻度值位置
plot(x, y, ann = F, xaxt = "n", yaxt ="n")
axis(1, -4:4, -4:4)
# 使用line调整刻度值位置
plot(x, y, ann = F, xaxt = "n", yaxt ="n")
axis(1, -4:4, -4:4, line = 2)
# 使用mgp调整刻度值位置
plot(x, y, ann = F, xaxt = "n", yaxt ="n")
axis(1, -4:4, -4:4, mgp = c(3, 2, 0)) 
# 使用padj调整刻度值位置
plot(x, y, ann = F, xaxt = "n", yaxt ="n")
axis(1, -4:4, -4:4, padj = 1)



5、其他

tick取FALSE时，坐标轴线和刻度线不画出；
lty表示线型，用在axis函数中表示坐标轴线型；
lwd表示线的粗细，用在axis函数中表示坐标轴线粗细；
lwd.ticks表示刻度线粗细。






三、title函数的用法

　　main、sub、xlab和ylab分别表示主标题、副标题、x轴标题和y轴标题；
　　cex.lab表示坐标轴标题的字号大小；
　　font.lab表示坐标轴标题的字体；
　　col.lab表示坐标轴标题的颜色；
　　其余参数和axis中用法一致。



x<- seq(-4, 4, 0.01)
y<- x^2
par(mfrow=c(2, 2), mar = c(4, 4, 1, 1))
#无标题
plot(x,y, ann = F, xaxt = "n", yaxt = "n")  
axis(1,-4:4, -4:4)
axis(2,seq(0, 16, 4), seq(0, 16, 4))
#使用title设置标题
plot(x,y, ann = F, xaxt = "n", yaxt = "n")  
axis(1,-4:4, -4:4, las = 1)
axis(2,seq(0, 16, 4), seq(0, 16, 4), las = 1)
title(xlab= 'x', ylab = 'y')
#使用line调整位置
plot(x,y, ann = F, xaxt = "n", yaxt = "n")  
axis(1,-4:4, -4:4, las = 1)
axis(2,seq(0, 16, 4), seq(0, 16, 4), las = 1)
title(xlab= 'x', ylab = 'y', line = 2)
#调整颜色字体字号
plot(x,y, ann = F, xaxt = "n", yaxt = "n")  
axis(1,-4:4, -4:4, las = 1)
axis(2,seq(0, 16, 4), seq(0, 16, 4), las = 1)
title(xlab= 'x', ylab = 'y', col.lab = 2, font.lab = 4, cex.lab = 2)






========================================
R原生绘图：图形页面排版
----------------------------------------
http://www.360doc.com/content/14/0831/20/17553313_406108143.shtml
一、图形边距：mar/mai参数
> par(bg="cyan")                #把图形背景设为青色以便观察
> par(mar=c(4, 4, 0.5, 0.5))    #c(下、左、上、右)设定下边距和左边距为4行，另外两边距为0.5行。
> set.seed(1000)                #设此参数是为了下面的rnorm()函数都能获得相同数据
> plot(rnorm(10))


二、坐标轴（标题、刻度标签和刻度线）位置：mgp参数
mgp参数可设三个数值，依次为标题、刻度标签和刻度的位置。mar/mai设定参数后，图形区（用box函数绘制的边框）边缘位置即为0。所以，mgp=c(2, 0.5, 0)就表示标题在第二行，刻度标签在0.5行，刻度线在0行。
par(bg="cyan")
par(mar=c(4, 4, 0.5, 0.5))
set.seed(1000)
par(mgp=c(1.5,0.5,0)) #坐标轴各项的位置设定c(x标题,刻度标签,刻度线)
plot(rnorm(10))


三、获取位置坐标 //不懂没事，看完继续看四
如果要把图例、自定义文字等设置在图形区以外，par函数的usr参数非常有用，获取方法很简单：

usr <- par("usr")
usr
# [1]   0.64 10.36  0.64 10.36
#返回值是一个向量：c(x1, x2, y1, y2)
#如果要通过鼠标点击获得图形上的某些点的坐标，可以用locator()函数：

xy <- locator(n=1)   #参数n表示要获得n个点的坐标，需要点击n次鼠标
xy
#$x
#[1] 0.6516328
#
#$y
#[1] -1.761121




四、在图形区外添加图例和文字
有了以上获取坐标信息的方法，我们可以把图例放在图形区外。先绘制柱形图：
par(mar=c(3, 3, 0.5, 4))      #注意给图例留出空间，右侧4 inch
par(mgp=c(2,0.5,0))
NF <- c(17.44 , 2.56 , 2.70 , 18.71 , 5.61 , 32.98)
CA <- c(11.48 , 0.75 , 1.16 , 12.73 , 2.84 , 20.04)
labels <- paste("S", 1:length(NF),sep="")
the.data <- rbind(NF, CA)
barplot(the.data, ylim=c(0, max(NF,CA)*1.2), col=c("orange", "red"),
	xlab="Sample", ylab="Level", beside=TRUE,
	offset=0, axis.lty=1, names.arg=labels)
box() #外边框

#然后通过坐标设定将图例放到图形区外。
#注意：除坐标（指图例的左上角坐标）数值设定外，
#还要legend函数中的参数xpd值设为TRUE，意思为“允许在图形区外绘制”。

usr <- par("usr")
x <- usr[2]*1.02     #图例左上角的x坐标，向右移动
y <- usr[4]*0.6      #图例左上角的y坐标，向下移动
legend(x, y, legend=c("NF","CA"), fill=c("orange", "red"), box.col="white", xpd=TRUE)


#事实上，使用legend函数的inset参数就可以把图例放到图形区外，不需要设定坐标值。
#inset的值表示相对于图形区的比例，比如：如果位置坐标用 “left”和“right”，inset表示相对于x轴长度的比例。
#要将图例放到图形区外，inset设定为负值，具体数字自己估算。前面的图例可以用下面语句获得：
legend("right",legend=c("NF","CA"), box.col="white", fill=c("orange", "red"), 
       inset=-0.35, xpd=TRUE) #相对于right线，inset为正则向左移动，为负责向右移动。0.1的步长。
#建议还是先获取坐标好点，这个inset太难调了。

#灵活设定inset的值可以把图例放置在图形的其他地方，比如顶部：
par(mar=c(3, 3, 2, 0.5))
par(mgp=c(2,0.5,0))
barplot(the.data, ylim=c(0, max(NF,CA)*1.2), col=c("orange", "red"),
        xlab="Sample", ylab="Level", beside=TRUE,
        offset=0, axis.lty=1, names.arg=labels)
legend("top", legend=c("NF","CA"), box.col="white", fill=c("orange", "red"),
       ncol=2, inset=-0.15, xpd=TRUE)
box() #最后画box好，可以压下legend的白色背景。


顺便简单说说文字添加，更详细的内容留后面介绍。
图形区内添加文字用text()函数，在图形区外添加文字用mtext()函数。这种约束也不是死的，设定合适的参数，两者可以随意使用。
另外，mtext()不能添加旋转的文字，text用srt参数可以获得旋转文字。下面我们用旋转文字设定x轴标签：

NF <- c(17.44 , 2.56 , 2.70 , 18.71 , 5.61 , 32.98)
CA <- c(11.48 , 0.75 , 1.16 , 12.73 , 2.84 , 20.04)
the.data <- rbind(NF, CA)
labels <- paste("Sample", 1:length(NF))
par(mar=c(4, 3, 0.5, 0.5))
par(mgp=c(2,0.5,0))
position <- barplot(the.data, ylim=c(0, max(NF,CA)*1.2),
                    col=c("orange", "red"), legend.text=c("NF","CA"),
                    args.legend=list(x="topleft", box.col="white", inset=0.02),
                    ylab="Level", beside=TRUE, offset=0, axis.lty=1)
#以下为横坐标标签设定
x <- (position[1,] + position[2,])/2
y <- par("usr")[3]-1
text(x, y, labels=labels, adj=1, srt=45, xpd=TRUE) #adj标签与轴的距离，srt设置xlable角度
box()




五、一页多图

把一个页面平分成n份做n个图，用par函数的mfrow和mfcol参数。这两个参数都是两个值的向量，表示行数和列数，但在页面上作图顺序的顺序不一 样。如果用mfrow参数，一行一行从左到右作图；mfcol则是一列一列的做。下面图形的代码只有第一行不一样，注意看每个图内的点（数字）：

#画图函数
myDraw=function(){
  set.seed(1000);plot(rnorm(100),pch="1", cex=0.6)
  set.seed(1001);plot(rnorm(100),pch="2", cex=0.6)
  set.seed(1002);plot(rnorm(100),pch="3", cex=0.6)
  set.seed(1003);plot(rnorm(100),pch="4", cex=0.6)
}

#图片按横着输出
par(mfrow=c(2,2)) #两行两列，mfrow行
par(mar=c(3, 3, 0.5, 0.5))
myDraw()

#图片竖着输出
par(mfcol=c(2,2)) #两行两列，mfcol列
par(mar=c(3, 3, 0.5, 0.5))
myDraw()
#


如果页面不均等分隔绘制多图，用layout函数分隔页面。它有四个参数，mat，widths，heights和respect。后三个参数有默认值，这 里我们只设置第一个参数mat。它是一个矩阵，表示绘图区分隔的各部分，相同数字的部分合并成一个绘图区，数字也是它们作图时的顺序。下面的矩阵mat有 2行3列，我们看看它绘出的图形：

注意：mat参数的值必需从1-n顺序依次取值，不能有间隔。

#layout布局1
par(mar=c(2, 2, 0.5, 0.5))
mat <- matrix(c(1,1,2,3,4,4), nrow=2, byrow=TRUE)
mat
#     [,1] [,2] [,3]
#[1,]    1    1    2
#[2,]    3    4    4
layout(mat)
myDraw()


#layout布局2
par(mar=c(2, 2, 0.5, 0.5))
mat <- matrix(c(1,2,3,4,4,4), nrow=2, byrow=TRUE)
mat
#     [,1] [,2] [,3]
#[1,]    1    2    3
#[2,]    4    4    4
layout(mat)
myDraw()












========================================
|-- 图片的组合与拼接(任意位置、任意个图, 支持base和grid绘图系统)
----------------------------------------
https://mp.weixin.qq.com/s?__biz=MzA3MTM3NTA5Ng==&mid=2651059193&idx=1&sn=67c8db755cb9e2376b6a49f3af1f473f

customLayout R包可以自由拼图，可以使用矩阵自定义图形位置和顺序，用数字来定义每一个模块的长宽比，试用了一遍简直爱不释手。

这个包不仅支持数字拼图，还支持R内置的base绘图对象、grid绘图对象等（也就是支持ggplot2对象）。
customLayout用于拼图特别方便，尤其是仪表盘布局。
支持R内置的base绘图对象，ggplot2对象（与grid结合）。

这样的话，对于需要制作简单仪表盘的场景，完全不必要使用rmarkdown+flexdashboard或者shiny+shinydashboard也可以快速生成仪表盘原型。






1.安装
customLayout包有CRAN版本，也有github版本可供下载：

install.packages("customLayout")
devtools::install_github("zzawadz/customLayout")



2.简单的数字拼图：

lay_new() 创建拼图画布
lay_show() 显示拼图画布




(1)通过设置简单的数字矩阵以及对应的宽高比，可以非常方便的设置出来数字拼图：

library(customLayout)
#library(magrittr)

lay <- lay_new(
  mat = matrix(1:4, ncol = 2), # 矩阵分布，mat表示指定排版的数字矩阵 
  widths = c(3, 2), # 设定宽度比例
  heights = c(2, 1))   # 设置高度比例)
lay_show(lay) # 显示拼图画布

mat数字矩阵必须从1开始，且必须连续
其中mat指定要拼图的数字矩阵，将1:4数字按照纵向顺序拼成两行，其中宽对比为3:2,高度比为2:1。



(2)
lay2 <- lay_new(
  matrix(1:4, nc = 2),
  widths = c(3, 5),
  heights = c(2, 4))
lay_show(lay2)


(3)画布合并
其它拼图包没有的功能，非常好用
跟合并矩阵类似。分为行合并和列合并

lay_bind_col() 画布列合并
lay_bind_col(x, y, widths = c(1, 1), addmax = TRUE) 参数widths表示指定合并宽度比

lay_bind_row() 画布行合并
lay_bind_row(x, y, heights = c(1, 1), addmax = TRUE) 参数heights表示指定合并高度比


将前两个例子横向拼接，两个模块对象仍然支持设置款对比例（3:1）
cl = lay_bind_col(lay, lay2, widths = c(3, 1))
lay_show(cl)


(4)不同层级的对象仍然支持拼接在一起。
lay3 <- lay_new(matrix(1:2))
lay4 <- lay_bind_row(cl, lay3, heights = c(5, 2))
lay_show(lay4)


(5) 画布嵌套: 将一个模块嵌入到两一个模块特定位置。
这个功能也是其它包没有的，非常有用
关键函数：
lay_split_field(lay, newlay, field)

参数lay表示大画布，参数newlay表示要嵌套进去的小画布，field表示指定要嵌套的区域编号


lay <- lay_new(
  matrix(1:4, nc = 2),
  widths = c(3, 2),
  heights = c(2, 1))
lay_show(lay)

lay2 <- lay_new(
  matrix(1:4, nc = 2),
  widths = c(3, 5),
  heights = c(2, 4))
lay_show(lay2)

slay <- lay_split_field(lay, lay2, field = 4)
lay_show(slay)

这里就将lay2嵌入到lay模块的第四个区域，但may2内部的布局结构任然不变。








3.填充图片: 关于图像对象的布局与拼接
关键函数：
lay_set(layout) 将画布layout设置为绘图布局，用于base绘图对象
lay_grid(grobs, lay, ...) 将绘图对象grobs填充到画布lay中， 用于ggplot2等绘图对象


(1)基础绘图对象的拼接：
par(mar = c(3, 2, 2, 1))
lay  <- lay_new(
  matrix(1:4, nc = 2),
  widths = c(3, 2),
  heights = c(2, 1))
lay2 <- lay_new(matrix(1:3))
cl   <- lay_bind_col(lay, lay2, widths = c(3, 1))
lay_show(cl) #显示画布

##
lay_set(cl) # initialize drawing area

set.seed(123)
plot(1:100 + rnorm(100))
plot(rnorm(100), type = "l")
hist(rnorm(500))
acf(rnorm(100))
pie(c(3, 4, 6), col = 2:4)
pie(c(3, 2, 7), col = 2:4 + 3)
pie(c(5, 4, 2), col = 2:4 + 6)



(2) grid(ggplot2)图形对象的拼接:

library(ggplot2)
#library(gridExtra)

## 创建排版画布
lay  <- lay_new( matrix(1:2, ncol = 1))
lay2 <- lay_new(matrix(1:3))
cl   <- lay_bind_col(lay, lay2, widths = c(3, 1))
lay_show(cl)

# 创建数据
cuts <- sort(unique(diamonds[["cut"]]),decreasing = TRUE)

make_cut_plot <- function(cut) {
  dd <- diamonds[diamonds[["cut"]] == cut, ]
  ggplot(dd) +
    geom_point(aes(carat, price)) +
    facet_wrap("cut") # 封装分面
}

plots <- lapply(cuts, make_cut_plot) # 对不同切割水平的进行作图
lay_grid(plots, cl) # 将绘图对象依次填充到cl画布中


customLayout包的版式布局思想非常简单，就是基于数值矩阵的模块化分割，同时不同层级的模块也可相互拼接，这样就可以像拼七巧板一样拼出很多奇形怪状的版式出来，甚至你使用这种版式来设计一个富有美感的超照片拼图或者海报都有可能。





========================================
R原生绘图-基本图形
----------------------------------------
条形图、箱线图和点图
饼图和扇形图
直方图与核密度图

主要记录在
http://www.biomooc.com/R/R-draw-basic2.html
http://www.biomooc.com/R/R-draw-intermediate.html




========================================
|-- abline(截距, 斜率)函数为当前绘图添加直线，加背景虚线网格
----------------------------------------
1.abline(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL, coef = NULL, untf = FALSE, ...)

各参数的含义为：
（1）a 要绘制的直线截距
（2）b 直线的斜率
（3）h 绘制水平线时的纵轴值
（4）v 绘制垂直线时的横轴值
（5）reg 是一个具有coef方法的回归对象名称。若该对象返回的向量长度为1，则该值会作为该该函数的斜率，否则前两个值将会分别作为所绘直线的截距和斜率。
（6）coef 一个二维向量，给出截距和斜率
（7）untf 逻辑值，如果UNTF为真，且坐标轴中的一个或两个进行了对数变换，则会绘制对应于原始坐标系中的直线的曲线，否则在变换坐标系中绘制线。

abline()函数典型的用法
（1）abline(a, b, untf = FALSE, ...)
（2）abline(h =, untf = FALSE, ...)
（3）abline(v =, untf = FALSE, ...)
（4）abline(coef =, untf = FALSE, ...)
（5）abline(reg =, untf = FALSE, ...)

附加参数还可以给出线型、线条颜色，线条宽度等等。


2. 实例
#例1 带方格虚线的线图
# 画空图：参数type设置为"n",并设置坐标系的纵坐标与横坐标的比例为1
plot(c(-2,3), c(-1,5), type = "n", xlab = "x", ylab = "y", asp = 1)
# 绘制一条水平线和垂直线，并指定颜色
abline(h = 0, v = 0, col = "gray60")
#添加网格线或参考线
abline(h = -1:5, v = -2:3, col = "lightgray", lty = 3)
#如绘制y = 2x + 1，即绘制斜率为2，截距为1的直线
abline(a = 1, b = 2, col="red") #这里指定直线颜色为红色



#例2 过几个点，拟合曲线，画出该回归线
#在回归方程中可以添加趋势线,最简单的额情况，过2个点画直线
x <- c(2,5)
y <- c(50,57)
reg <- lm(y~x)
reg #会计算出截距和斜率
## Call:
## lm(formula = y ~ x)
## 
## Coefficients:
## (Intercept)            x  
##      45.333        2.333 
##
plot(x, y, xlab = "x XX", ylab = "y YY")
abline(reg,col="blue")






========================================
lattice 绘图系统
----------------------------------------
lattice主要记录在 http://www.biomooc.com/R/R-draw-adv-lattice.html
[R In Action(2nd Edtion), Chapter23] https://livebook.manning.com/book/r-in-action-second-edition/bonus-chapter-23-advanced-graphics-with-the-lattice-package/


1. lattice 包
	函数：xyplot, bwplot, histogram, stripplot, dotplot, splom, levelplot, contourplot
	格式： xyplot(y~x| f*g, data) # f和g是分类变量
	panel函数，用于控制每个面板内的绘图

grid包：
	实现了独立于base的绘图系统
	lattice包是基于grid创建的；很少直接从grid包调用函数

lattice和base的重要区别：
	base绘图函数直接在图形设备上绘图
	lattice绘图函数返回trellis类对象
		打印函数真正执行了在设备上绘图
		命令执行时，trellis类对象会被自动打印，看起来像是lattice函数直接完成了绘图

#



refer:
https://www.imooc.com/video/11578



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


