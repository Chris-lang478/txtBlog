如何写 R包？


《R包(第二版)》R packages by Hadley Wickham and Jenny Bryan.
https://r-pkgs.org/index.html





========================================
R 包概述
----------------------------------------
1. R包是R代码可重复研究的基石。R包包含函数、文档、示例数据。
Packages are the fundamental units of reproducible R code. They include reusable R functions, the documentation that describes how to use them, and sample data.


本书教你怎么把代码放到R包中，方便其他人下载和复用。
In this book you’ll learn how to turn your code into packages that others can easily download and use. 

写一个包咋看很难。所以从简单开始，一版一版的提升。
Writing a package can seem overwhelming at first. So start with the basics and improve it over time. It doesn’t matter if your first version isn’t perfect as long as the next version is better.




2. 相对第一版的更新
(2)准备工作
(3)设置
代码风格 https://style.tidyverse.org/
(4)代码结构和状态
(5)写R包的工作流和工具
(6) git/github






========================================
R包实战第n版: 如何写一个R包
----------------------------------------
ref: 
https://www.bilibili.com/video/BV1M4411S72M
https://cosx.org/2011/05/write-r-packages-like-a-ninja

写R扩展: https://cran.r-project.org/doc/manuals/R-exts.html

生成R文档的网页版: https://pkgdown.r-lib.org/ pkgdown is designed to make it quick and easy to build a website for your package.


写包只是程序开发的一方面啦，很多人不写包但做的事情很牛。
要说中高级R程序员，窃以为还是得看John Chambers老爷子的原著（如Software for Data Analysis），S语言和R语言的设计之精巧，似乎并没有引起人们的注意。
比如这里介绍的命名空间（主要是Luke Tierney的工作），可能绝大部分用户永远都不会接触到，但的确是一个很好的管理对象的方式；
还有S3与S4以及最新的ReferenceClass（参见?setRefClass），这些概念都很有意思，很能体现设计者的智慧。
这些东西才能体现R作为一门“语言”的特征，对多数人来说，R只是一门“程序”，是用来完成数据处理任务的。
当然，这也无妨，R就像一盘大餐，爱吃哪部分就挑哪部分。


可以看看 http://adv-r.had.co.nz/C-interface.html 
不过个人觉得还是Rcpp更人性化一点 http://adv-r.had.co.nz/Rcpp.html




##############
# R包实战第一版
##############

1. 在文件fun.R中先写一个函数，读入到R的内存中。

add=function(x){
  return (x+7)
}



2. 下一步是生成R包目录结构

(1) 在R中执行如下2行:
> setwd('/home/wangjl/data/r-pkg/') #要生成的目录位置
> package.skeleton(name="wjl007", list="add") # name="包的名字", list="函数的名字"
## package.skeleton(name='RoxygenSkeleton', code_files = "Roxygen.R", force=TRUE)


则在目录下生成文件结构
$ cd /home/wangjl/data/r-pkg/
$ tree 
.
├── fun.R
└── wjl007
    ├── DESCRIPTION ##项目描述文件。
    ├── man ##帮助文档
    │   ├── add.Rd
    │   └── wjl007-package.Rd
    ├── NAMESPACE
    ├── R ##具体代码
    │   └── add.R
    └── Read-and-delete-me

3 directories, 7 files

其中重点关注新生成的 wjl007/ 文件夹，里面有几个基本的R包的文件。

(2) 其中的 Read-and-delete-me 告诉我们接下来干什么:
* Edit the help file skeletons in 'man', possibly combining help files for multiple functions.
* Edit the exports in 'NAMESPACE', and add necessary imports.
* Put any C/C++/Fortran code in 'src'.
* If you have compiled code, add a useDynLib() directive to 'NAMESPACE'.
* Run R CMD build to build the package tarball.
* Run R CMD check to check the package tarball.

Read "Writing R Extensions" for more information.

完善项目描述文件 DESCRIPTION: 我们象征性的把版本号修改为 0.1.2.3
完善帮助文件 man/。

删除掉 Read-and-delete-me 文件。



3. 建立包
可以在terminal中进行build了：
cd your_directory
R CMD INSTALL --build mypkg 


会报错的 man/add.Rd 文件添加一行
\title{
%%  ~~function to do ... ~~
  Add 7 for a given number.
}


$ cd /home/wangjl/data/r-pkg/
$ R CMD INSTALL --build wjl007 
## packaged installation of ‘wjl007’ as ‘wjl007_0.1.2.3_R_x86_64-pc-linux-gnu.tar.gz’
## * DONE (wjl007)



4. 使用包 
然后，在R中library(yourpackage)一下就好了！

## 退出这个包，删除同名函数
> rm(add)
> detach("package:wjl007", unload=TRUE)
> add(10)
## Error in add(10) : could not find function "add"


## 载入包，并使用包中的函数
> library(wjl007)  ##> library("wjl007", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
> add(10)
[1] 17


## 永久卸载这个包
> remove.packages("wjl007", lib="~/R/x86_64-pc-linux-gnu-library/3.6")

## 再次安装
$ cd /home/wangjl/data/r-pkg/
$ R CMD INSTALL wjl007










========================================
|-- R 文档与 roxygen2：从代码注释生成.Rd files
----------------------------------------

1. 简介
如果有30个函数，每次函数更新完，还要更新man/下的文档，会抓狂的。
于是有人发明了在函数内直接写文档，然后用程序翻译成文档的方法。

流程：你在源代码中写 roxygen comments --> roxygen2::roxygenise() 抽取翻译出.Rd文件 --> R翻译出人看的文档。


roxygen2 是一个 R 包（它的前任是 roxygen，但已经停止更新了），它实现了把特定注释 “翻译” 为 R 文档的工作，例如：
##' @author Yihui Xie
##' @source \url{https://cos.name}

会被翻译为：
\author{Yihui Xie}
\source{\url{https://cos.name}}



R provides a standard way of documenting packages: you write .Rd files in the man/ directory. These files use a custom syntax, loosely based on latex. Roxygen2 provides a number of advantages over writing .Rd files by hand:

- 代码文档一起，方便更新。Code and documentation are adjacent so when you modify your code, it’s easy to remember that you need to update the documentation. 

- 动态检查，自动代替手动添加。Roxygen2 dynamically inspects the objects that it’s documenting, so it can automatically add data that you’d otherwise have to write by hand.

- 提取S3和S4方法的差异，学更少的细节。It abstracts over the differences in documenting S3 and S4 methods, generics and classes so you need to learn fewer details.

As well as generating .Rd files, roxygen will also create a NAMESPACE for you, and will manage the Collate field in DESCRIPTION.
自动生成Rd文件，创建 NAMESPACE，并管理 DESCRIPTION 中的 Collate字段。






2. 函数的注释要符合一定的规范

$ mkdir -p /home/wangjl/data/r-pkg/wjl008/R
$ vim /home/wangjl/data/r-pkg/wjl008/R/fun.R

##' title of stupid_f...
##'
##' description...
##'
##' details here
##' @param a ###<<-------- 这里不标准，会warning，后面有修改版
##' @param b
##' @return
##' @author Yihui Xie &lt;\url{http://yihui.name}&gt;
##' @examples
stupid_f = function(a, b){
    a + b
}


#' A wrap of linear regression
#' @description This function performs linear regression (a simplified version)
#' @param formula: a formula
#' @param data: dataset
#' @return a lm object
#' @examples
#' linear_reg(Sepal.Length~., iris)
#' @export
linear_reg <- function(formula, data){         
    result <- lm(formula, data)         
    return(result) 
} 

注释：
每行开头必须是 #' 
@param 中的冒号可选
@export 才能在外面被用户直接使用，否则只能内部函数使用。


roxygen2 的常规是，第一段是标题（将来翻译为\title{}），段落之间以空行分开，第二段是描述（\description{}），然后接着是这个函数的详细描述（\details{}），它可以是若干段落，你愿意写多长就写多长。剩下的@字段就不必多解释了，参数、返回值、作者、示例等。


roxygen2 还实现了一些自动功能，比较重要的就是对命名空间文件 NAMESPACE 和描述文件 DESCRIPTION 的自动更新，这些我们第五节再说。先说如何从 roxygen 注释翻译到 Rd 文档，很简单：如果一个包已经按第二节的结构写好（不需要有 man 文件夹），函数和相应的 roxygen 注释都已经存在，那么用函数roxygenize()就可以把这样一个初级包翻译为一个完整 R 包了：

setwd('/a/b/c/')  # 先把工作目录切换到pkg之上
library(roxygen2)
roxygenize('pkg')

默认情况下新生成的 R 文档以及更新的 NAMESPACE 和 DESCRIPTION 都生成在包的目录下，现在 pkg 就是一个完整的 R 包，包含自动生成的 man 文件夹，可以直接用R CMD INSTALL pkg安装。





##############
# R包实战第二版
##############
(1) 建立目录，在文件R/fun.R内写函数及要求格式的注释，见上文 stupid_f 和 linear_reg 函数。
$ tree wjl008/
wjl008/
├── DESCRIPTION2 #这个文件需要提前准备。
├── man
└── R
    └── fun.R

(2) 编译出帮助文档Rd：需要提前准备好 DESCRIPTION文件。
> setwd("/home/wangjl/data/r-pkg/")
> library(roxygen2)
> roxygenize('wjl008')
Error: `package.dir` must include a DESCRIPTION file:
  * "/data/wangjl/r-pkg/wjl008" does not.

$ cp wjl007/DESCRIPTION wjl008/ ##复制一个过来，修改一下
Package: wjl008
Type: Package
Title: Title of pkg wjl008
Version: 0.1.2.4
Date: 2021-01-02
Author: wjl <wjl@none.net>
Maintainer: wjl <wjl@none.net>
Description: test pkg of wjl008
License: MIT
Encoding: UTF-8


## 再试
> roxygenize('wjl008')

有三个warning，尝试解决掉吧：
Warning: [/data/wangjl/r-pkg/wjl008/R/fun.R:6] @param requires name and description
Warning: [/data/wangjl/r-pkg/wjl008/R/fun.R:7] @param requires name and description
Warning: [/data/wangjl/r-pkg/wjl008/R/fun.R:10] @examples requires a value

$ vim R/fun.R  #修改第一个函数的注释部分
##' title of stupid_f...
##'
##' description...
##'
##' details here
##' @param a: a number
##' @param b: a number
##' @return a number
##' @author Yihui Xie &lt;\url{http://yihui.name}&gt;
##' @examples
##' stupid_f(2, 6)
stupid_f = function(a, b){
  a + b
}


## 三试
> roxygenize('wjl008')
Loading wjl008
Writing NAMESPACE
Writing NAMESPACE
Writing stupid_f.Rd
一切正常。

查看文件结构
$ tree wjl008
wjl008
├── DESCRIPTION
├── man
│   ├── linear_reg.Rd
│   └── stupid_f.Rd
├── NAMESPACE
└── R
    └── fun.R

##
(3) 安装 
$ cd /home/wangjl/data/r-pkg/
$ R CMD INSTALL --build wjl008
packaged installation of ‘wjl008’ as ‘wjl008_0.1.2.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (wjl008)

这时，刷新Rstudio的Packages面板，就能看到已经安装了 wjl008 Version 0.1.2.4

这时所有函数都可以访问，因为为了生成注释，所有函数都读入过了。
> stupid_f(1,2)
[1] 3
为了防止副作用，要重启R！！


(4) 使用R包
十分重要: 要先重启R! 
- 点击菜单 Session - restart R.
- 或者更好的策略： 菜单 Session - Quit Session.


> library(wjl008)
> stupid_f(2,3)
Error in stupid_f(2, 3) : could not find function "stupid_f"

> linear_reg(speed~dist, cars)
Call:
lm(formula = formula, data = data)

Coefficients:
(Intercept)         dist  
     8.2839       0.1656 
#


另一种调用包内 export出来的函数：
> library(wjl008)
> e1=as.environment("package:wjl008");
> e1$linear_reg(speed~dist, cars)

Call:
lm(formula = formula, data = data)

Coefficients:
(Intercept)         dist  
     8.2839       0.1656
#




(5) 注意点
* 自动生成函数的注释，包的注释怎么生成的呢？没看到包的Rd文件。
* 看函数的源代码或文档，在Console输入函数名，按F1，或者输入?linear_reg。
* @export 一个函数，就只有一个可以直接被用户调用。

* roxygen2 抽取注释前需要有主是好的R/xx.R 函数文件，以及 DESCRIPTION 文件。




ref:
roxygen2官方教程：https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html
Rd格式: https://cran.r-project.org/doc/manuals/R-exts.html#Rd-format





========================================
|-- R 的命名空间 NAMESPACE
----------------------------------------
两个包都有一个同名函数，怎么区别？使用命名空间前缀。
namespace1::funcName()
namespace2::funcName()

https://r-pkgs.org/namespace.html


1.
命名空间（NAMESPACE）是 R 包管理包内对象的一个途径，它可以控制哪些 R 对象是对用户可见的，哪些对象是从别的包导入（import），哪些对象从本包导出（export）。

为什么要有这么个玩意儿存在？主要是为了更好管理你的一堆对象。写 R 包时，有时候可能会遇到某些函数只是为了另外的函数的代码更短而从中抽象、独立出来的，这些小函数仅仅供你自己使用，对用户没什么帮助，他们不需要看见这些函数，这样你就可以在包的根目录下创建一个 NAMESPACE 文件，里面写上export(函数名)来导出那些需要对用户可见的函数。自 R 2.14.0 开始，命名空间是 R 包的强制组成部分，所有的包必须有命名空间，如果没有的话，R 会自动创建。

前面我们也提到 DESCRIPTION 文件中有 Imports 一栏，这里设置的包通常是你只需要其部分功能的包，例如我只想在我的包中使用 foo 包中的bar()函数，那么 Imports 中就需要填 foo，而 NAMESPACE 中则需要写importFrom(foo, bar)，在自己的包的源代码中则可以直接调用bar()函数，R 会从 NAMESPACE 看出这个bar()对象是从哪里来的。

roxygen 注释对这一类命名空间有一系列标签，如一个函数的文档中若标记了##' @export，那么这个函数将来就会出现在命名空间文件中（被导出），若写了##' @importFrom foo bar，那么 foo 包的bar对象也会被写在命名空间中。这些内容参见 R-exts 的 1.6 节和 roxygen2 的?export帮助。







2. R包的 命名空间 namespace

(1) 每个R包的根目录都有一个NAMESPACE文件：
The package namespace (as recorded in the NAMESPACE file) is one of the more confusing parts of building a package.

其中记录着哪些函数是提供（export）给用户使用，需要哪些依赖包（import），哪些包的哪些函数（importFrom）

As the name suggests, namespaces provide “spaces” for “names”. They provide a context for looking up the value of an object associated with a name.

有时候你明明看到某个函数内部调用了另一个函数，但就是无法使用它（没有export给用户）！



(2) 学习一下 ggplot 包的NAMESPACE 文件，摘录几行：
https://github.com/tidyverse/ggplot2/blob/master/NAMESPACE
https://github.com/duncantl/Rllvm/blob/master/NAMESPACE

S3method("[[",ggproto)
S3method(fortify,Polygon)
S3method(ggplot,"function")
S3method(print,rel)
S3method(print,theme)
export(scale_color_discrete)
export(xlim)
import(scales)
importFrom(stats,setNames)
importFrom(tibble,tibble)




(3) 从 Seurat 包的NAMESPACE 文件中摘录几行：
https://github.com/satijalab/seurat/blob/master/NAMESPACE

# Generated by roxygen2: do not edit by hand

S3method("SCTResults<-",SCTAssay)
S3method("SCTResults<-",SCTModel)
S3method(FindClusters,Seurat)
S3method(RunPCA,Assay)
export("Idents<-")
export(DoHeatmap)
export(DotPlot)
exportClasses(Assay)
exportClasses(DimReduc)
exportClasses(Graph)
exportClasses(Neighbor)
exportClasses(Seurat)
import(Matrix)
importClassesFrom(Matrix,dgCMatrix)
importClassesFrom(SeuratObject,Assay)
importFrom(Matrix,as.matrix)
importFrom(Matrix,colMeans)
importFrom(Matrix,colSums)
importFrom(SeuratObject,"Idents<-")
importFrom(ggplot2,geom_text)
importFrom(utils,read.table)







3. 文件的命名空间

R 一定程度上也可以用文件作为一个“命名空间”：sys.source() 可以指定环境，比如
bar = new.env()
sys.source('foo.R', bar)
然后就可以 bar$对象 调用 foo.R 里创建的对象了。











4. 有4个函数可以使用三方包的功能（函数、数据等）
基于它们是否加载（Load）或绑定（attach），找不到包时的反馈而有所不同。

        抛出error	         返回 FALSE
Load	loadNamespace("x")	 requireNamespace("x", quietly = TRUE)
Attach	library(x)	         require(x, quietly = TRUE)


(1)4个函数里面，你应该只使用两个：

* 在数据分析脚本中使用 library(x)，它会在包找不到时抛出错误并且停止脚本的运行。
你想要绑定包以节省代码键入。永远不要在开发包时使用library()函数。

* 在包中使用requireNamespace(x, quietly = TRUE)用来进行一个特定的行为，如当建议包找不到时抛出一个错误。


(2) 不要使用的情况

你永远也不需要使用 require() (requireNamespace()更好)或loadNamespace() (仅需要在R包内部代码中使用).。
永远不要在一个包中使用require()或library()，相反， 应该在DESCRIPTION的Depends或Imports 字段部分填入包名。


(3)那么，Imports与Depends部分到底有什么区别呢？什么时候该使用它们呢？

Imports和Depends包部分会确保你所需要的依赖包被安装，主要的区别是Imports中的包仅仅会被导入，而Depends中的包会被绑定，没有其他的区别了。

假设你开发的包需要dplyr，你把它列到了Depends，那么载入你开发的包的用户它会发现dplyr也被载入了，而且能够直接使用里面的函数。
而写在Imports的话，dplyr里面的函数用户是不可以直接使用的。








ref:
https://www.jianshu.com/p/caf44731f3c0





========================================
|-- 介绍文档（Vignette）
----------------------------------------
前面我们提到了 inst/doc / 目录，下面可以放一个 Sweave 文件，在R CMD INSTALL过程中这个 Sweave 文件会被执行并生成 PDF 文档，若 Sweave 文件中有一句注释：

%\VignetteIndexEntry{An Introduction to XXX}
那么这句话将来会出现在 HTML 帮助页面中（点开链接 “Overview of user guides and package vignettes”），例如 Rd2roxygen 包或者 formatR 包的帮助页面中就有介绍文档的链接。



========================================
|-- 其它语言
----------------------------------------
在 src 目录下我们可以放置一些其它语言的源代码，里面可能包含一些函数，这些函数在被编译之后，（以 C 语言为例）可以在 R 代码中以.C('routine_name', ..., package = 'pkg')的形式调用，但要注意，如果需要用这个功能，在 R 目录下需要有一个 zzz.R 文件（这个特殊文件是用来在加载包之前加载运行的代码），里面写上：

.onLoad <- function(lib, pkg) {
    library.dynam("pkg_name", pkg, lib)  # pkg_name是你的包的名字
}
这些东西我并不在行，只介绍到这里，详细内容还请深挖 R-exts。



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

