pkg-shiny

注意: 官网只有一个s (shiny)，那就不要写成2个s。



========================================
shiny 官方教程
----------------------------------------
1. 官方教程
https://shiny.rstudio.com/tutorial/
但是看这个教程要翻墙...学技术，各凭本事吧。

Part 1 - How to build a Shiny app
Introduction
R
App architecture
App template
Inputs and outputs
The server function
Sharing apps
Shinyapps.io
Shiny servers
Recap - Part 1

Part 2 - How to customize reactions
Introduction
Review of Part 1
Reactivity
Reactive values
Reactive functions
render*()
reactive()
isolate()
observeEvent()
eventReactive()
reactiveValues()
Recap - Part 2
Parting tips

Part 3 - How to customize appearance
Introduction
Review of Parts 1 and 2
HTML UI
Adding static content
Building layouts
Panels and tabsets
Prepackaged layouts
CSS
Recap - Part 3





2. 有一个7节书面教程课，每个课程20分钟，能学会基本的使用方法。

Lesson 1 - Welcome to Shiny
Lesson 2 - Layout the user interface
Lesson 3 - Add control widgets
Lesson 4 - Display reactive output
Lesson 5 - Use R scripts and data
Lesson 6 - Use reactive expressions
Lesson 7 - Share your apps




ref:
https://blog.csdn.net/RH_Wang/article/details/86318043




========================================
|-- 如何用shiny部署R语言交互式网页小程序？(第一课: Welcome to Shiny)
----------------------------------------
官方案例：http://shiny.rstudio.com/gallery/

1.安装
install.packages("shiny")


2.写代码
(1)看到网上大多给你扯ui.R+server.R，很少会提到global.R，笔者在自己实践的时候遇到的了global.R的使用问题，网上教程只能自己参悟了。

ui.R：搭框架，控件；
server.R：每个控件背后的算法代码；
global.R:server.R中，万一有很长的代码与调用很多其他packages就可以用global写一个函数集合，然后统一在server.R调用。

(2)在一个文件夹内写 ui.R 和 server.R。
格式如下：

# ui.R
library(shiny)
shinyUI(fluidPage(
	#
))
 
# server.R
library(shiny)
shinyServer(function(input, output) {
	#
})


(3)实例-界面：
# ui.R
library(shiny)

shinyUI(fluidPage(
  # Application title
  headerPanel("Hello Shiny!"),
  
  # 侧面控件 Sidebar with a slider input for number of observations
  sidebarPanel(
    #sliderInput是一个滑动的窗口。
    sliderInput("obs", 
                "Number of observations:", 
                min = 0, 
                max = 1000, 
                value = 500)
  ),
  
  # 右边 主控件(默认右边) Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot")
  )

))


(4)实例-服务端：
# server.R
library(shiny)

shinyServer(function(input, output) {
  #数据来源都来自于ui.R，比如obs
  output$distPlot <- renderPlot({
    dist <- rnorm(input$obs)
    #server处理好的图才是返回给ui.R。譬如dist
    hist(dist)
  })
  
})



3.shiny的部署
runApp一下那个路径的文件夹就行了。

#
#####
#https://blog.csdn.net/sinat_26917383/article/details/53410370
library(shiny)
runApp("F://Temp/shiny")
## runApp("/home/wangjl/data/shinny/",host="0.0.0.0", port=5000) #还可以指定IP和端口
#


在win10上的运行
D:\Program Files\R\R-3.6.1\bin>Rscript F:\\Temp\\shiny\\run.R







4. 更多官方例子

runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
runExample("09_upload")     # file upload wizard
runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer







refer
1. 中文教程：用R构建shiny应用程序：http://yanping.me/shiny-tutorial/#welcome
2. R powered web applications with Shiny (a tutorial and cheat sheet with 40 example apps) 
http://zevross.com/blog/2016/04/19/r-powered-web-applications-with-shiny-a-tutorial-and-cheat-sheet-with-40-example-apps/



========================================
shiny入门第2课: 界面 Layout the user interface
----------------------------------------
1.
https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/

(1)基本结构
library(shiny)

# Define UI ----
ui <- fluidPage(
  
)

# Define server logic ----
server <- function(input, output) {
  
}

# Run the app ----
shinyApp(ui = ui, server = server)

以上是最基本的Shiny框架





(2) 布局
ui <- fluidPage(
  titlePanel("title panel"), #整个页面的标题

  sidebarLayout( #通常侧边栏有2个参数， sidebarPanel 和 mainPanel
    sidebarPanel("sidebar panel"),
    mainPanel("main panel")
  )
)




可以使用mainPanel参数改变侧边栏的位置:
ui <- fluidPage(
  titlePanel("title panel"),
  
  sidebarLayout(position = "right",
                sidebarPanel("sidebar panel"),
                mainPanel("main panel")
  )
)


可以使用 navbarPage 创建包含导航条的多个页面。
或者使用 fluidRow 和 column 来从 grid 系统构建布局。
更多布局参考 https://shiny.rstudio.com/articles/layout-guide.html
本节继续使用 sidebarLayout 布局。





(3) HTML 内容
可以在 *Panel 函数内添加内容。比如上文显示字符串。
其实还可以添加 html5 标签。
比如: 
headerPanel( h4("Hello Shiny! 001") ),

  mainPanel(
    h1("First level title"),
    plotOutput("distPlot"),
    hr(),
    h2("Second level title"),
    plotOutput("distPlot2"),
	a('find more here', href="http://baidu.com", target="_blank")
  )




# html属性可以作为函数参数传入
h6("Episode IV", align = "center")



# 格式化文字的输入
 mainPanel(
      p("p creates a paragraph of text."),
      p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
      strong("strong() makes bold text."),
      em("em() creates italicized (i.e, emphasized) text."),
      br(),
      code("code displays your text similar to computer code"),
      div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
      br(),
      p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph.")
    )
# 代码
    pre("怎么多行？
code displays your text similar to computer code;
for(i in 1:10){
  print(i)
  }"
      ),
# 标签嵌套
     p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph."),
#




(4) 图片
img(src = "my_image.png", height = 72, width = 72)

图片放置到和 app.R 同一个文件夹下的 www 目录中。
Your file must be in a folder named www in the same directory as the app.R script.

比如
shiny/
|- ui.R
|- server.R 
|- www/ 可以放置任何静态文件，比如图片/css/js/txt/pdf等
	|- my_image.png
#


(5) 更多html标签
Customize your UI with HTML: https://shiny.rstudio.com/articles/html-tags.html
the Shiny HTML Tags Glossary: https://shiny.rstudio.com/articles/tag-glossary.html

> shiny::tags # 包含110个函数，对应着具体的html标签
> names(tags) #查看具体的标签


## 还可以用tags这个函数list来写html代码
tags$h1( "右侧大标题",  ),
hr(),
tags$ol(
	tags$li("First list item"), 
	tags$li("Second list item"), 
	tags$li("Third list item")
),




(6)如果感觉太繁琐，就想手工输入原始的raw html代码，则要使用HTML函数包裹:
tags$div(
  HTML("<strong>Raw HTML!</strong>")
)
## <div><strong>Raw HTML!</strong></div>


## 如果直接输入，会被当成字符串转义为实体并显示出来:
tags$div(
  "<strong>Raw HTML!</strong>"
)
## <div>&lt;strong&gt;Raw HTML!&lt;/strong&gt;</div> 






========================================
shiny入门第3课: 控制组件 Add control widgets( 就是html的表单 form: inputbox, radio, checkbox,... )
----------------------------------------
用于用户各种输入。
1. 基础控件包括:
- 按钮: Action, Submit
- 单选框
- 复选框和复选框组
- 输入日期，日期范围
- 输入文件
- 帮助文字
- 数字输入框
- 下拉框
- slider: 单点拉条、2点拉条
- 文字输入

都有对应的函数，比如actionButton()创建提交按钮，sliderInput()创建滚动条。



2. 函数和对应的组件
function	widget
actionButton	Action Button
checkboxGroupInput	A group of check boxes
checkboxInput	A single check box
dateInput	A calendar to aid date selection
dateRangeInput	A pair of calendars for selecting a date range
fileInput	A file upload control wizard
helpText	Help text that can be added to an input form
numericInput	A field to enter numbers
radioButtons	A set of radio buttons
selectInput	A box with choices to select from
sliderInput	A slider bar
submitButton	A submit button
textInput	A field to enter text

部分组件是基于 Twitter Bootstrap project。




3. 添加方式
可以像上文添加html内容一样添加组件，放在ui对象的sidebarPanel 或 mainPanel 中。

每个组件都需要很多参数，其中前2个是一样的:
- 组件名字: 用户不可见，但是你可以使用它获取组件中的值。字符串类型。
- 标签:显示用。字符串类型。可以设置为空"".

一个名字是 action 标签是 Action 的按钮: actionButton("action", label = "Action")

其余的参数变化很大，由具体的html标签而决定，可以查询，比如 ?selectInput




4. 例子


单页面 app.R 
library(shiny)

# Define UI ----
ui <- fluidPage(
  titlePanel("Basic widgets"),
  
  ## 第一行
  fluidRow(
    column(3,
           h3("Buttons"),
           actionButton("action", "Action"),
           br(),
           br(), 
           submitButton("Submit")),
    
    column(3,
           h3("Single checkbox"),
           checkboxInput("checkbox", "Choice A", value = TRUE)),
    
    column(3, 
           checkboxGroupInput("checkGroup", 
                              h3("Checkbox group"), 
                              choices = list("Choice 1" = 1, 
                                             "Choice 2" = 2, 
                                             "Choice 3" = 3),
                              selected = 1)),
    
    column(3, 
           dateInput("date", 
                     h3("Date input"), 
                     value = "2020-07-11"))   
  ),
  hr(),



  # 第二行
  fluidRow(
    
    column(3,
           dateRangeInput("dates", h3("Date range"))),
    
    column(3,
           fileInput("file", h3("File input"))),
    
    column(3, 
           h3("Help text"),
           helpText("Note: help text isn't a true widget,", 
                    "but it provides an easy way to add text to",
                    "accompany other widgets.")),
    
    column(3, 
           numericInput("num", 
                        h3("Numeric input"), 
                        value = 1))   
  ),
  hr(),



  
  #第3行
  fluidRow(
    
    column(2,
           radioButtons("radio", h3("Radio buttons"),
                        choices = list("Choice 1" = 1, "Choice 2" = 2,
                                       "Choice 3" = 3),selected = 1)),
    
    column(2,
           selectInput("select", h3("Select box"), 
                       choices = list("Choice 1" = 1, "Choice 2" = 2,
                                      "Choice 3" = 3), selected = 1)),
    
    column(2, 
           sliderInput("slider1", h3("Sliders"),
                       min = 0, max = 100, value = 50),
           sliderInput("slider2", "",
                       min = 0, max = 100, value = c(25, 75))
    ),
    
    column(2, 
           textInput("text", h3("Text input"), 
                     placeholder  = "Enter text...")),
    column(3, 
           textAreaInput("text2", h3("Textarea input"), 
                     placeholder  = "Enter text...", rows  =10))    
  )
  
)




# Define server logic ----
server <- function(input, output) {
  
}



# Run the app ----
shinyApp(ui = ui, server = server)






========================================
|-- 页面布局: layout-guide
----------------------------------------
https://shiny.rstudio.com/articles/layout-guide.html




ref:
https://shiny.rstudio.com/reference/shiny/latest/textAreaInput.html
更多模板库: https://shiny.rstudio.com/gallery/widget-gallery.html




========================================
shiny入门第4课: 展示响应式输出 Display reactive output
----------------------------------------
1. 响应式需要2步:
(1).ui中添加R对象
(2).告诉shiny的server函数怎么构建对象。如果对象依赖ui组件的值，则对象就是响应式的。




2.具体操作
(1) Add an R object to the UI
R对象变为ui输出的函数：
Output_function	/Creates
dataTableOutput	DataTable
htmlOutput	raw HTML
imageOutput	image
plotOutput	plot
tableOutput	table
textOutput	text
uiOutput	raw HTML
verbatimTextOutput	text

添加方式和添加html元素及组件一样，放到 sidebarPanel or mainPanel in the ui.

比如，使用 textOutput 添加文字输出:

  mainPanel( 
    textOutput("selected_var")
  )
#

注意: 每一个*Output 函数都有一个参数，一个字符串，是响应元素的名字。用户看不到，但是开发者接下来要用。



(2) Provide R code to build the object.
在ui中放置好，是告诉shinny在哪里显示。接着要构建该对象了，这一步在server函数中完成。

server函数构建一个名叫output的list样的对象，包含所有要更新R对象所用到的代码。每个R对象都要在list中有自己的条目。
list的名字要和ui中指定的一致。

server <- function(input, output) {
  output$selected_var <- renderText({ 
    "You have selected this"
  })
}

不用明确返回output。
每个 output 条目都要包含一个 shiny的 reder* 系列函数。这些函数捕获一个R表达式，然后做一些轻量级预处理。

render function	/ creates
renderDataTable	DataTable
renderImage	images (saved as a link to a source file)
renderPlot	plots
renderPrint	any printed output
renderTable	data frame, matrix, other table like structures
renderText	character strings
renderUI	a Shiny tag object or HTML

每个render*函数接收一个单参数，使用{}包裹的R表达式。表达式可以是简单的一行文本，也可以触发更多行的代码，就像很复杂的函数调用。

把 render* 当做一个缓冲代码。首次调用或改变参数时就执行一次。





3. 使用ui输入的值
input加上美元符号，后面是输入对象的名字，也就是第一个参数。







========================================
shiny入门第5课: 使用R脚本和数据 Use R scripts and data
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

