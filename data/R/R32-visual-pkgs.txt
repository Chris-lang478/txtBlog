R32-visual-pkgs

常见的可视化 R 包

热图 




========================================
使用Cairo画图——R语言的高质量图形渲染库Cairo
----------------------------------------
常用语句

library(Cairo)
CairoPDF(file="xx.pdf",width=10,height=10)
plot(c(1,2,3,8))
dev.off()


注意！如果是函数内用到ggplot2作图，则要定义ggplot2返回值，再用print()输出，否则会出现空pdf文件！
library(ggplot2)
fn2=function(){
	CairoPDF(file="xx2.pdf",width=10,height=10)
	g=ggplot(diamonds[1:1000,], aes(carat, price,color=color))+geom_point();
	print(g) #直接ggplot()作图，有可能不能输出到pdf中
	dev.off()
}
fn2();




https://www.cnblogs.com/payton/p/5391680.html
#R语言不仅在统计分析，数据挖掘领域，计算能力强大。在数据可视化上，也不逊于昂贵的商业。当然，背后离不开各种开源软件包的支持，Cairo就是这样一个用于矢量图形处理的类库。
# Cairo可以创建高质量的矢量图形(PDF, PostScript, SVG) 和 位图(PNG, JPEG, TIFF)，同时支持在后台程序中高质量渲染！
# 本文将介绍，Cairo在R语言中的使用。
#特别是原生画图命令失效的时候。
#莫名其妙不能使用X11生成图片, 只好使用图形渲染库Cairo。


1.安装
Cairo基本库安装
~ sudo apt-get install libcairo2-dev
~ sudo apt-get install libxt-dev
~ R 
> install.packages("Cairo")

2.Cairo使用
Cairo使用起来非常简单，和基础包grDevices中的函数对应。

CairoPNG: 对应grDevices:png()
CairoJPEG: 对应grDevices:jpeg()
CairoTIFF: 对应grDevices:tiff()
CairoSVG: 对应grDevices:svg()
CairoPDF: 对应grDevices:pdf()
我常用的图形输出，就是png和svg。

检查Cairo的兼容性：
~ R
> library(Cairo)
> Cairo.capabilities()
   png   jpeg   tiff    pdf    svg     ps    x11    win raster
  TRUE   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE  FALSE   TRUE
下面比较一下 CairoPNG() 和 png() 输出效果。

1). 散点图


x<-rnorm(6000)
y<-rnorm(6000)

# PDF格式
CairoPDF(file="Cairo4.pdf",width=10,height=10) #开始画图
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo") #画图语句
dev.off() #结束画图




# PNG图
png(file="plot4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot")
dev.off()

CairoPNG(file="Cairo4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo")
dev.off()

# SVG图
svg(file="plot-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot-svg")
dev.off()

CairoSVG(file="Cairo-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo-svg")
dev.off()




========================================
|-- R语言输出的pdf，怎么在 illustrator 中不乱码？
----------------------------------------

1. 如果是ggplot2，则可以使用ggsave的'useDingbats'=F参数：
https://stackoverflow.com/questions/9992275/ggplot2-pdf-import-in-adobe-illustrator-missing-font-adobepistd

(1)Although changing the fonts used by AI works well, an alternative is to restrict ggplot2 from using Dingbats in the first place by adding the argument 'useDingbats' to your ggsave command eg:

(2)useDingbats=FALSE also works if AI displays your geom_point dots as squares.

ggsave(plot=p,height=6,width=6,dpi=200, filename="~/example.pdf", useDingbats=FALSE)





2. 使用自带的pdf输出，带上useDingbats=F参数：
pdf("test.pdf", useDingbats=FALSE,width=10, height=10)
heatmap( as.matrix(mtcars) )
dev.off()





3. CairoPDF 的输出，用AI打开还是乱码，目前还是无解。

https://stackoverflow.com/questions/20502772/r-cairo-pdf-fonts-unreadable-in-adobe-illustrator





4.使用 embedFonts {grDevices} 函数： Embed Fonts in PostScript and PDF
//todo
embedFonts(file, format, outfile = file,
           fontpaths = character(), options = character())






========================================
R包画各种热图 - 高分文章必备漂亮的大热图
----------------------------------------
比较好的配色方案： https://www.plob.org/article/10156.html





========================================
|-- R基本函数image画热图
----------------------------------------
1.使用R基本函数image画热图
https://www.jianshu.com/p/c17a7c92b7fe

# 产生样本数据
m <- data.frame(
  rep1 = sample(1:20),
  rep2 = sample(1:20)
)

# 写一个绘图函数
draw_image <- function(data, label = FALSE) {
	# 设定绘图参数
	breaks.frequency <- seq(from=min(data), to=max(data), length.out=10)
	myColors <- colorRampPalette(c("white", "#2874A6"))

	# 产生图片
	image(1:nrow(data), 1:ncol(data), as.matrix(data),  breaks=breaks.frequency,      col=myColors(length(breaks.frequency)-1), axes = F, cex = 1.5, xlab = "", ylab = "")

	# 自定义axis
	axis(2, 1:ncol(data), colnames(data), cex.axis=2.5)
	axis(1, 1:nrow(data), rownames(mxdata), cex.axis=2.5)

	# 自定义文本
	if (label) {
		for (x in 1:nrow(data)) {
			for (y in 1:ncol(data))  {
				text(x, y, data[x, y], cex = 2)
			}
		}
	}
}
# 绘制图形
draw_image(data, FALSE)



################
#如果想添加图例：
################

# 绘制图形
CairoPDF(file="heatmap2.pdf",width=7,height=3.5)
#1.图下面留空
par(mai=c(1,1,0.5,0.5))
#画图
draw_image(m, T,mycolor) #改造成自定义颜色，
#2.图例
legend(x=1,y=-0,border = "black",lty=0,
       legend=c("<=0.001", "0.001~0.01", "0.01~0.05", ">0.05"),
       fill=MyCOLOR,
       xpd=T, #要设置xpd=T才能在图外画图例
       ncol=4,#ncol几列
       bty="n"
       ) 
dev.off()




========================================
|-- pheatmap包画各种热图 (附录: 全部参数列表)
----------------------------------------
https://www.jianshu.com/p/1c55ea64ff3f

顶部分类条
添加分类间隔gap




难题1: 颜色条精细控制
(1)使用pheatmap包画热图： 画列注释、图例自定义颜色和0的位置
Q: 在数据不scale时，颜色设为蓝，白，红，图例会显示最小值最大值的范围，有没有办法实现0点为白色，>0为红色，<0为蓝色？
A: 可以通过breaks和color参数进行设置的


#使用raw
#tmp=br5@raw.data[c(s.genes.2,g2m.genes.2),]
#使用标准化后的
tmp=br5@scale.data[c(s.genes.2,g2m.genes.2),]
tmp=tmp[,sort(colnames(tmp))]
#data.frame(Type=tmp.type)
tmp.type=data.frame( Type=substr(colnames(tmp),1,4) );
rownames(tmp.type) = colnames(tmp)
head(tmp.type)

###
#查看cell cycle基因对细胞分类的效果
#breaks
bk <- c(seq(-6,-0.1,by=0.01),seq(0,6,by=0.01)) #[-2, 6]
CairoPDF(file="06-3-heatmap-nonS-sync.pdf",width=8,height=10)
pheatmap(tmp, border=FALSE, 
         cluster_cols = F,
         #scale="row",
         annotation_col=tmp.type,
         #color
         color = c(colorRampPalette(colors = c("blue","white"))(length(bk)/2),colorRampPalette(colors = c("white","red"))(length(bk)/2)),
         legend_breaks=seq(-6,6,2),
         breaks=bk
         )
dev.off()





难题2: 保存总是不流畅，或者被覆盖
library(pheatmap)
library(Cairo)
drawHM01=function(output='',keyword=''){
  pHM=pheatmap( as.matrix(iris[,1:4]), 
                clustering_method = 'ward.D2', na_col = 'grey',
                show_rownames=F,show_colnames=F,
                border=FALSE)
  CairoPDF( paste0(output, keyword, '04_heatmap_cycleGene.pdf'), width=4.5, height=4.5)
  #fig1
  clust_ward <- hclust( dist(iris[,1:4]) , method = 'ward.D2')
  plot(clust_ward)
  rect.hclust(clust_ward, k = 3, border =c("#E41E25", "#FBD800", "#208A41") )
  #fig2
  grid.newpage()
  print(pHM)
  dev.off()
  print('draw end: ')
  return(pHM)
}
p1=drawHM01()

library(ggplot2)
# 还可以这样保存
ggsave(p1,filename = "04_pheatmap.pdf",width=4.5,height=4.5)

print(p1) #这样显示图片

class(p1) #"pheatmap"
str(p1) #特别长











1.构建测试数据集
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
head(test[,1:6])
##          Test1      Test2    Test3      Test4    Test5       Test6
## Gene1 4.064973  0.7535271 3.024070 -2.1294440 4.407945 -0.35677097
## Gene2 2.360043  1.6974946 3.273425 -2.3341406 3.839523  0.16982944
## Gene3 3.253465 -0.9011582 1.716257 -0.2294471 4.636610 -0.24520382
## Gene4 4.070226 -0.6191941 3.734437  1.9348314 4.426825 -0.17730957
## Gene5 3.821414  0.5584876 1.871479 -0.2784607 2.633761  0.01332901
## Gene6 3.012469  0.1738285 3.652423 -2.0083435 4.124951 -0.67899611

# 默认绘图
pheatmap(test)

(2) 归一化
# scale = "row"参数对行进行归一化
pheatmap(test, scale = "row")


(3) 聚类方式
# clustering_method参数设定不同聚类方法，默认为"complete",可以设定为'ward', 'ward.D', 'ward.D2', 'single', 'complete', 'average', 'mcquitty', 'median' or 'centroid'
pheatmap(test,scale = "row", clustering_method = "average")

# clustering_distance_rows = "correlation"参数设定行聚类距离方法为Pearson corralation，默认为欧氏距离"euclidean"
pheatmap(test, scale = "row", clustering_distance_rows = "correlation")

# cluster_row = FALSE参数设定不对行进行聚类
pheatmap(test, cluster_row = FALSE)


(4) 色彩
# color参数自定义颜色
pheatmap(test, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))



(5) 图例控制
# legend_breaks参数设定图例显示范围，legend_labels参数添加图例标签
pheatmap(test, legend_breaks = c(1:5), legend_labels = c("1.0","2.0","3.0","4.0","5.0"))


# legend = FALSE参数去掉图例
pheatmap(test, legend = FALSE)



(6) 每个最小方格的边框
# border_color参数设定每个热图格子的边框色
pheatmap(test, border_color = "red")

# border=FALSE参数去掉边框线
pheatmap(test, border=FALSE)










2. 顶部添加分类条

# 构建列注释信息
annotation_col = data.frame(
  CellType = factor(rep(c("CT1", "CT2"), 5)), 
  Time = 1:5
)
rownames(annotation_col) = paste("Test", 1:10, sep = "")
head(annotation_col)
##       CellType Time
## Test1      CT1    1
## Test2      CT2    2
## Test3      CT1    3
## Test4      CT2    4
## Test5      CT1    5
## Test6      CT2    1



# 构建行注释信息
annotation_row = data.frame(
  GeneClass = factor(rep(c("Path1", "Path2", "Path3"), c(10, 4, 6)))
)
rownames(annotation_row) = paste("Gene", 1:20, sep = "")
head(annotation_row)
##       GeneClass
## Gene1     Path1
## Gene2     Path1
## Gene3     Path1
## Gene4     Path1
## Gene5     Path1
## Gene6     Path1



# annotation_col参数添加列注释信息
pheatmap(test, annotation_col = annotation_col)


# annotation_legend = FALSE参数去掉注释图例
pheatmap(test, annotation_col = annotation_col, annotation_legend = FALSE)

(2)
# annotation_col和annotation_row参数同时添加行和列的注释信息
pheatmap(test, annotation_row = annotation_row, annotation_col = annotation_col)



(3)
# 自定注释信息的颜色列表
ann_colors = list(
  Time = c("white", "firebrick"),
  CellType = c(CT1 = "#1B9E77", CT2 = "#D95F02"),
  GeneClass = c(Path1 = "#7570B3", Path2 = "#E7298A", Path3 = "#66A61E")
)
head(ann_colors)
## $Time
## [1] "white"     "firebrick"
## 
## $CellType
##       CT1       CT2 
## "#1B9E77" "#D95F02" 
## 
## $GeneClass
##     Path1     Path2     Path3 
## "#7570B3" "#E7298A" "#66A61E"

# annotation_colors设定注释信息的颜色
pheatmap(test, annotation_col = annotation_col, annotation_colors = ann_colors, main = "Title")

pheatmap(test, annotation_col = annotation_col, annotation_row = annotation_row, 
         annotation_colors = ann_colors)

pheatmap(test, annotation_col = annotation_col, annotation_colors = ann_colors[2]) 










3. 添加分类间隔gap

(1)
# gaps_row = c(10, 14)参数在第10和14行处添加gap, 要求对行不进行聚类
pheatmap(test, annotation_col = annotation_col, cluster_rows = FALSE, gaps_row = c(10, 14))

(2)
# cutree_col = 2参数将列按聚类树的结果分成两部分, 要求对列进行聚类
pheatmap(test, annotation_col = annotation_col, cluster_rows = FALSE, gaps_row = c(10, 14),
         cutree_col = 2)

(3)
# 对行和列都不聚类，自定义划分行和列的gap
pheatmap(test, annotation_col = annotation_col, cluster_rows = FALSE, cluster_cols = FALSE, 
         gaps_row = c(6, 10, 14), gaps_col = c(2, 5, 8))
#






4. 外观控制：行名显示、自定义行名、格子里的数字、格子宽度高度、标题
(1)
# show_rownames和show_colnames参数设定是否显示行名和列名
pheatmap(test,show_rownames=F,show_colnames=F)


# 自定义行的标签名
labels_row = c("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
               "", "", "Il10", "Il15", "Il1b")
# labels_row参数添加行标签
pheatmap(test, annotation_col = annotation_col, labels_row = labels_row)



(2) 格子里显示数字
# display_numbers = TRUE参数设定在每个热图格子中显示相应的数值，number_color参数设置数值字体的颜色
pheatmap(test, display_numbers = TRUE,number_color = "blue")


(3)
# number_format = "%.1e"参数设定数值的显示格式
pheatmap(test, display_numbers = TRUE, number_format = "%.1e")



(4)
# 自定义数值的显示方式
pheatmap(test, display_numbers = matrix(ifelse(test < 0.05, "*", ""), nrow(test)))


(5)
# cellwidth和cellheight参数设定每个热图格子的宽度和高度，main参数添加主标题
pheatmap(test, cellwidth = 15, cellheight = 12, main = "Example heatmap")







5. 设定聚类方式
(1)
# 自定义聚类的距离方法
drows = dist(test, method = "minkowski")
dcols = dist(t(test), method = "minkowski")
# clustering_distance_rows和clustering_distance_cols参数设定行和列的聚类距离方法
pheatmap(test, clustering_distance_rows = drows, clustering_distance_cols = dcols)



(2)
# treeheight_row和treeheight_col参数设定行和列聚类树的高度，默认为50
pheatmap(test, treeheight_row = 30, treeheight_col = 50)







6. 输出
(1)
# fontsize参数设定标签字体大小，filename参数设定图片保存名称
pheatmap(test, cellwidth = 15, cellheight = 12, fontsize = 8, filename = "test.pdf")


(2)将热图结果按聚类后的顺序输出
aa=pheatmap(test,scale="row")  #热图，归一化，并聚类

# 简要查看热图对象的信息
summary(aa)
##          Length Class  Mode   
## tree_row 7      hclust list   
## tree_col 7      hclust list   
## kmeans   1      -none- logical
## gtable   6      gtable list


order_row = aa$tree_row$order  #记录热图的行排序
order_col = aa$tree_col$order    #记录热图的列排序
datat = data.frame(test[order_row,order_col])   # 按照热图的顺序，重新排原始数据
datat = data.frame(rownames(datat),datat,check.names =F)  # 将行名加到表格数据中
colnames(datat)[1] = "geneid" 
write.table(datat,file="reorder.txt",row.names=FALSE,quote = FALSE,sep='\t')  #输出结果，按照热图中的顺序








### 附录 
mat
数组矩阵（要绘制热图的数据源，保证数据是numeric类型）
color
热图的颜色选择
默认：colorRampPalette(rev(brewer.pal(n = 7, name ="RdYlBu")))(100)

break
用来定义数值和颜色的对应关系。可以将特定颜色和特定数值关联，如果NA则自动进行计算。如果颜色超过值的范围，超过阈值的会使用和阈值一样的颜色。
默认：NA

border_color
热图的单位元素的描边颜色，NA表示不描边
默认：“gray60”

cellwidth
热图单位元素（cell）的宽度，NA表示依据窗口自动调整
默认：NA
cellheight同

scale
数值标准（scale）化，可以是“row“,”column“,”none“
默认：“none”

cluster_rows
用布尔值来判定行元素是不是应该被clustered or clust object。
默认：TRUE
同理，cluster_cols决定是否应该把列clust

clustering_distance_rows
计算类间距的方式，
默认：“euclidean”（欧式距离）
clustering_distance_cols同理

clustering_method
cluster的途径方法（method）
默认：“complete”

clustering_callback
默认：identity2

cutree_rows
如果使用了对行的集群，则可以指定集群个数（基于hclust），如果未使用对行集群则忽略
默认：NA
cutree_col同理

treeheight_row
行集群树的高度
默认：(50point)

legend
图例是否显示
默认：TRUE

legend_breaks
图例是否断点标注
默认：NA

legend_labels
图例的标题
默认：NA

annotation_row
是否对行进行分类注释
默认：NA
annotation_col同理

annotation(废弃)
deprecated parameter that currently sets the annotation_col if it is missing
默认：NA

annotation_colors
指定注释条的颜色。
默认：NA

annotation_legend
布尔值表示是否显示注释条的图例
默认：TRUE

annotation_names_row
布尔值表示是否在图例上显示注释名称
默认：TRUE
annotation_names_col同理

drop_levels
是否在图例显示unused levels
默认：TRUE

shown_rownames
是否显示行名
默认：T
shown_colnames
是否显示列名
默认：T

main
图表主标题
默认：NA

fondsize
图表字体大小
默认：10

fontsize_row
行标题的字号
默认：fondsize
fontsize_col同上

angle_col
列标签的角度，可以选择0，45，270，315

display_numbers
是否在单位元素（cell）内显示数字
默认：F

number_format
显示在cell内的数字格式，例如%.2代表两位小数%.1e表示指数形式...参见C语言printf函数格式
默认：%.2f

fontsize_number
限制在Cell内的数字大小
默认：0.8*fontsize

gaps_row
当行未进行集群分析时，指示再哪里查处gap空隙
默认：NULL
gaps_col同理

labels_row
使用行标签代替行名
默认：NULL
labels_col同理

filename
保存的路径和文件名。支持png、pdf、tiff、bmp、jpeg
NA

height
输出的图片都高度，单位：inches
默认：NA
width同理

silent
不要画出图像（在gtable导出适用）
FALSE

na_col
对NA值对应的cell填充特定颜色
默认："#DDDDDD",...



ref:
https://mp.weixin.qq.com/s?__biz=MzIyNDI1MzgzOQ==&mid=2650394128&idx=1&sn=5cb8b1a16077abc451a20fde62e6d347







========================================
|-- ComplexHeatmap包画热图
----------------------------------------
官方文档： https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html



1.要求画热图：
(1).有三个数据文件，每个都是这样的7行9列：
2-HG	Citrate	Fumarate	lsocitrate	Lactate	maltate	Succinate	Age	Gender
Any cancer	0.001	0.001	0.25	0.001	0.25	0.001	0.25	0.001	0.25
Breast cancer	0.1	0.1	0.002525	0.1	0.002525	0.1	0.002525	0.1	0.002525
Thyroid cancer	0.023	0.023	0.001452	0.023	0.001452	0.023	0.001452	0.023	0.001452
Second malignant neoplasms(SMNS)	0.00255	0.00255	0.0236	0.00255	0.0236	0.00255	0.0236	0.00255	0.0236
Neurodevelopmental disorders	0.001548	0.001548	0.03564	0.001548	0.03564	0.001548	0.03564	0.001548	0.03564
Marcrocephaly	0.05426	0.05426	0.0254	0.05426	0.0254	0.05426	0.0254	0.05426	0.0254
Lhermitte-Duclos disease	0.0263	0.0263	0.09878	0.0263	0.09878	0.0263	0.09878	0.0263	0.09878

三个文件rbind拼接，同时在最左侧显示数据来源。
文件之间显示分割线。

(2)行列名字标注到热图的left和top;
(3)共用一个图例，显示到右侧。






2. 代码：
library(ComplexHeatmap)
library(circlize)
setwd("/home/wangjl/web/docs/docs")


see=function(df){
  print(dim(df))
  print(df[1:3,])
}

#read data
mat1=read.table("self_made_data.txt",sep="\t",header=T,row.names=1)
mat2=read.table("self_made_data2.txt",sep="\t",header=T,row.names=1)
mat3=read.table("self_made_data3.txt",sep="\t",header=T,row.names=1)
see(mat1) #7 9
#
mat=rbind(mat1,mat2,mat3)
see(mat) #21 9
#
rt = as.matrix(mat)
is.matrix(rt)
#colors = structure(circlize::rand_color(7), names = c("1", "2", "3", "4","5","6","7"))
colors = colorRamp2(c(-0.4,-0.01,0,0.01,0.5),
                    c("blue", "light blue","white","orange", "brown"))
p1 <- Heatmap(rt, 
              col = colors,
              show_heatmap_legend = T, name = "p-value", #显示图例，图例标题
              cluster_rows = FALSE, cluster_columns = FALSE,#不聚类行和列
              #
              rect_gp = gpar(col="white",lwd=1), #每个最小方框的描边
              #width = unit(10, "cm"), height = unit(10, "cm"), #尺寸自动好了
              #
              row_names_side = "left",column_names_side = "top",#xy坐标显示位置
              #
              #row_title = expression(PTEN^MUT/SDH^WT), #添加左侧标题，只有一个
              row_split = c( rep("A",7),rep("B",7),rep("C",7) ), #添加左侧标题3个，表明来源
              #row_split = c( rep(expression(PTEN^MUT/SDH^WT),7), #显示表达式会报错
              #               rep(expression(PTEN^WT/SDH^MUT),7),
              #               rep(expression(PTEN^WT/SDH^WT),7) )
              #为row标注(y轴刻度)设置不同的颜色和字号
              row_title_gp = gpar(col = c("green", "orange", "purple"), font =c(20,20) ),
              row_names_gp = gpar(col = c("green", "orange", "purple"), fontsize = c(10, 10, 10)),
			  
			  row_gap = unit(5, "mm") #三个文件之间的距离
);p1
library(Cairo)
CairoPDF(file='test3.pdf',width=8,height=5)
p1
dev.off()

## end


refer:
https://www.jianshu.com/p/d8b8f7acf47c
用ComplexHeatmap复现一张热图 https://www.jianshu.com/p/2fdf721cff58





========================================
韦恩图绘制 venn图: VennDiagram 包
----------------------------------------
# 经典的2类交集韦恩图，顶上标标签，圆圈标数字个数，面积成比例
library (VennDiagram)
#grid.newpage()
venn.plot <- draw.pairwise.venn(393, 269, 94, c("BC", "HeLa"), 
                                fill = c('#F81082', '#619CFF'),  col = "transparent",
                                cex = 2.5,cat.cex=2.5,alpha = 0.50,
                                main="Cycle related genes", #不显示
                                
                                cat.pos = c(-30, 10), #angle of text, dgree=0 means top of cycle
                                cat.dist = 0.05,   #distance of text to border, can be negative
                                
                                cat.col = c('#F81082', '#619CFF'), margin=0.3, scaled = T);
#


1.VennDiagram包
#安装VennDiagram包
#install.packages("VennDiagram")
> library (VennDiagram)


(1)情况1: 知道集合大小、重叠区域大小
#install.packages("VennDiagram")
library (VennDiagram)

#1) 两个部分
#重叠区域大小按比例
venn.plot <- draw.pairwise.venn(100, 70, 30, c("First", "Second"));
grid.draw(venn.plot);
#不按比例
grid.newpage()
venn.plot <- draw.pairwise.venn(100, 70, 30, c("First", "Second"), scaled = FALSE);
grid.draw(venn.plot);


#3) 更多参数
grid.newpage()
venn.plot <- draw.pairwise.venn(
  area1 = 100,  #区域1的数
  area2 = 70,   #区域2的数
  cross.area = 60,  #交叉数
  category = c("First", "Second"),#分类名称
  fill = c("blue", "red"),#区域填充颜色
  lty = "blank",  #区域边框线类型
  cex = 2,        #区域内部数字的字体大小
  cat.cex = 2,    #分类名称字体大小
  cat.pos = c(285, 105), #分类名称在圆的位置，默认正上方，通过角度进行调整
  cat.dist = 0.09,   #分类名称距离边的距离（可以为负数）
  cat.just = list(c(-1, -1), c(1, 1)),  #分类名称的位置
  ext.pos = 30,  #线的角度 默认是正上方12点位置
  ext.dist = -0.05,   #外部线的距离
  ext.length = 0.85,  #外部线长度
  ext.line.lwd = 2,  #外部线的宽度
  ext.line.lty = "dashed"   #外部线为虚线
);
grid.draw(venn.plot); #再画一次，颜色更深


#3)三个数据集
# A more complicated diagram
grid.newpage()
venn.plot <- draw.triple.venn(
  area1 = 65,
  area2 = 75,
  area3 = 85,
  n12 = 35,
  n23 = 15,
  n13 = 25,
  n123 = 5,
  category = c("First", "Second", "Third"),
  fill = c("blue", "red", "green"),
  lty = "blank",
  cex = 2,
  cat.cex = 2,
  scaled=F,
  cat.col = c("blue", "red", "green")
);

# Writing to file
tiff(filename = "Triple_Venn_diagram.tiff", compression = "lzw");  #保存图片
#pdf(file = "Triple_Venn_diagram.pdf", width=5,height=5)
grid.draw(venn.plot);#画图展示
dev.off(); 



#4)四个数据集：花瓣形
# Reference four-set diagram
grid.newpage()
venn.plot <- draw.quad.venn(
  area1 = 72,
  area2 = 86,
  area3 = 50,
  area4 = 52,
  n12 = 44,
  n13 = 27,
  n14 = 32,
  n23 = 38,
  n24 = 32,
  n34 = 20,
  n123 = 18,
  n124 = 17,
  n134 = 11,
  n234 = 13,
  n1234 = 6,
  category = c("First", "Second", "Third", "Fourth"),
  fill = c("orange", "red", "green", "blue"),
  lty = "dashed",
  cex = 2,
  cat.cex = 2,
  cat.col = c("orange", "red", "green", "blue")
);
grid.draw(venn.plot);#画图展示



#5)五个数据集：
# Reference five-set diagram
grid.newpage()
venn.plot1 <- draw.quintuple.venn(
  area1 = 301,
  area2 = 321,
  area3 = 311,
  area4 = 321,
  area5 = 301,
  n12 = 188,
  n13 = 191,
  n14 = 184,
  n15 = 177,
  n23 = 194,
  n24 = 197,
  n25 = 190,
  n34 = 190,
  n35 = 173,
  n45 = 186,
  n123 = 112,
  n124 = 108,
  n125 = 108,
  n134 = 111,
  n135 = 104,
  n145 = 104,
  n234 = 111,
  n235 = 107,
  n245 = 110,
  n345 = 100,
  n1234 = 61,
  n1235 = 60,
  n1245 = 59,
  n1345 = 58,
  n2345 = 57,
  n12345 = 31,
  category = c("A", "B", "C", "D", "E"),
  fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
  cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
  cat.cex = 2,
  margin = 0.05,
  cex = c(1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,
          1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5),
  ind = TRUE
);
grid.draw(venn.plot1);#画图展示







##############
# (2)情况2: 知道集合内容，还没统计集合大小、重叠区域
##############

#1) 两数据集
venn.plot <- venn.diagram(
  x = list(
    "A" = 1:100,
    "B" = 96:140
  ),
  filename = "Venn_22set_complex.png",imagetype='png',
  col = "transparent",
  fill = c("red", "green"),
  cex = 2.5,
  cat.cex = 2.5,
  rotation.degree = 0,
  main = "Complex Venn Diagram",
  main.cex = 2,
  sub.cex = 1,
  alpha = 0.50
);


##2) 三个数据集
A <- sample(1:1000, 400, replace = FALSE);
B <- sample(1:1000, 600, replace = FALSE);
C <- sample(1:1000, 350, replace = FALSE);
venn.plot <- venn.diagram(
  #数据列表
  x = list(
    A = A,
    B = B,
    C = C
  ),
  filename ="1.tiff",    #保存路径
  height = 450, 
  width = 450,
  resolution =300, 
  #imagetype="png", 
  col = "transparent",      #指定图形的圆周边缘颜色  transparent 透明           
  fill = c("cornflowerblue", "green",  "darkorchid1"),  #填充颜色
  alpha = 0.50,                                      #透明度
  label.col = c("orange", "white", "darkorchid4", "white",
                "white", "darkgreen", "white"),
  cex = 0.45,    #每个区域label名称的大小
  fontfamily = "serif",  #字体
  fontface = "bold",     #字体格式
  cat.col = c("darkblue", "darkgreen", "darkorchid4"),  #分类颜色 
  cat.cex = 0.45,      #每个分类名称大小
  cat.pos = c(100, 260, 0),        #
  cat.dist = c(0.07, 0.07, 0.05),    #
  cat.fontfamily = "serif",     #分类字体
  rotation.degree =180,        #旋转角度
  margin = 0.2               #在网格单元中给出图周围空白量的编号
);


## 三个数据集的例2
A <- c("C", "D", "B", "E")
B <- c("C", "E", "B", "A")
C <- c("C", "E", "X", "Y")

##使用venn.diagram功能绘图
venn.plot=venn.diagram(x=list(Tumor=A, Organoids=B, Primary=C), 
                       filename="My1.png", 
                       height = 450, width = 450, resolution =300, 
                       #imagetype="png", 
                       col="white", 
                       fill=c(colors()[616], colors()[38], colors()[468]), 
                       alpha=c(0.6, 0.6, 0.6), lwd=c(1, 1, 1), 
                       cex=0.55, #数字文字大小
                       cat.dist=c(0.07, 0.07, 0.05), #注释文字大小
                       cat.pos=c(300, 60, 180), 
                       cat.cex=0.45,                      
                       margin=0.1)
#可以不保存查看图片，但是效果不佳（命令如下，但是需要首先把filename设置为（filename=NULL））
grid.newpage()
grid.draw(venn.plot);
dev.off();
#




例2:两个基因列表的交集
只能使用
library("VennDiagram")
venn.diagram(x=list(nonS=nonS$gene, sync=sync$gene),filename="a1.png",
             imagetype = "png",height = 800, width = 800, 
             resolution = 150, units = "px",
             fill=c("blue", "red") )

#
# 给出集合内容，R自动求交集、差集
library(VennDiagram)
venn.diagram(list(A=1:10,B=3:18), 
             fill=c("red","blue"), 
             alpha=c(0.5,0.5),  #设置透明度
             resolution =500, imagetype = "png", units = "px",
             main="1S_gt5_",
             cex=2, cat.fontface=4, fontfamily=3, filename="VennDiagram.png")
#


例3: 维恩图直观看DESeq2结果
library(VennDiagram)
library(grid)

data <- list(
  deg_1=as.character(deg_1$Description),
  deg_2=as.character(deg_2$Description)
)

data1 <- list(
  deg_ens_1=as.character(nrDEG_ens),
  deg_ens_2=as.character(nrDEG2_ens)
)

ven <- venn.diagram(data,filename = NULL,fill=c('red','yellow'))
ven1 <- venn.diagram(data1,filename = NULL,fill=c('red','yellow'))

grid.newpage()
grid.draw(ven)

grid.newpage()
grid.draw(ven1)





### 四个数据集：
#sample为抽样函数，首先指定抽样范围，然后制定抽样个数，最后指定是否允许同样的抽样值
A <- sample(1:1000, 400, replace = FALSE);
B <- sample(1:1000, 600, replace = FALSE);
C <- sample(1:1000, 350, replace = FALSE);
D <- sample(1:1000, 550, replace = FALSE);
E <- sample(1:1000, 375, replace = FALSE);
venn.plot <- venn.diagram(
  #数据列表
  x = list(
    A = A,
    D = D,
    B = B,
    C = C
  ),
  filename = "Venn_4set_pretty.tiff",    #保存路径
  col = "transparent",      #指定图形的圆周边缘颜色  transparent 透明           
  fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),  #填充颜色
  alpha = 0.50,                                      #透明度
  label.col = c("orange", "white", "darkorchid4", "white",
                "white", "white", "white", "white", "darkblue", "white",
                "white", "white", "white", "darkgreen", "white"),
  cex = 1.5,    #每个区域label名称的大小
  fontfamily = "serif",  #字体
  fontface = "bold",     #字体格式
  cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),  #分类颜色 
  cat.cex = 1.5,      #每个分类名称大小
  cat.pos = 0,        #
  cat.dist = 0.07,    #
  cat.fontfamily = "serif",     #分类字体
  rotation.degree = 270,        #旋转角度
  margin = 0.2               #在网格单元中给出图周围空白量的编号
);



### 五个数据集：
A <- sample(1:1000, 400, replace = FALSE);
B <- sample(1:1000, 600, replace = FALSE);
C <- sample(1:1000, 350, replace = FALSE);
D <- sample(1:1000, 550, replace = FALSE);
E <- sample(1:1000, 375, replace = FALSE);
venn.plot <- venn.diagram(
  x = list(
    A = A,
    B = B,
    C = C,
    D = D,
    E = E
  ),
  filename = "Venn_5set_pretty.tiff",
  col = "black",
  fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
  alpha = 0.50,
  cex = c(1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,
          1, 0.8, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5),
  cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
  cat.cex = 1.5,
  cat.fontface = "bold",
  margin = 0.05
);








2.在线 http://bioinfogp.cnb.csic.es/tools/venny/index.html
这个程序是在线运行的，无需安装任何插件.输出一张图真的是分分钟的事儿！其实即使不是画韦恩图，也可以利用这个网站，找出两种不同处理（状态）的共有基因，或者特有基因等等.



ref:
http://blog.sciencenet.cn/blog-2985160-957210.html
http://www.360doc.com/content/19/1231/13/46931810_883308977.shtml






========================================
|-- venn.diagram保存pdf格式文件？
----------------------------------------
vennDiagram包中的主函数绘图时，好像不直接支持PDF格式文件，只能指定filename = NULL, 然后通过pdf()函数输出。
如果不行，先安装加载library(grDevices)包。


1. 示例文件
#(1) data
dat = list(a = c('a','b','c','e'),b = c('a', 'x', 'c', 'd','y'))
names(dat) <- c('SetA', 'SetB')

#(2) plot
venn.plot <- venn.diagram(
  dat,
  filename = NULL, #设为空
  lwd = 3,
  col = "transparent",
  fill = c("cornflowerblue", "darkorchid1"),
  alpha = 0.6,
  label.col = "black",
  cex = 1.5,
  fontfamily = "serif",
  fontface = "bold",
  cat.col = c("cornflowerblue", "darkorchid1"),
  cat.cex = 2,
  cat.fontfamily = "serif",
  cat.fontface = "bold",
  margin = 0.05,
  cat.dist = c(0.03, 0.03),
  cat.pos = c(-20, 20)
)

# (3) save
pdf(file="proteinGroup_venn.pdf")
grid.draw(venn.plot)
dev.off()




========================================
|-- 画多个(n>5)集合的交集: UpSetR包
----------------------------------------
1. UpsetR这个包确实对多个交集的可视化做了提供了更好的展示方式

(1) 示例1：简单数据示例
install.packages("UpSetR")
library("UpSetR")

1) UpsetR 接受三种类型的数据输入：
- 表格形式，在 R 语言里就是数据框了。行表示元素，列表示数据集分配和额外信息。
- 元素名的集合( fromList )。
- venneuler 包引入的用于描述集合交集的向量 ( fromExpression）。


# fromList
listinput <- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), 
	two = c(1, 2, 4, 5, 10), 
	three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))
> str(listinput)
List of 3
 $ one  : num [1:9] 1 2 3 5 7 8 11 12 13
 $ two  : num [1:5] 1 2 4 5 10
 $ three: num [1:9] 1 5 6 7 8 9 10 12 13

# fromExpression
expressionInput <- c(one = 2, two = 1, three = 2, 
	`one&two` = 1, `one&three` = 4, `two&three` = 1, 
	`one&two&three` = 2)
> str(expressionInput)
 Named num [1:7] 2 1 2 1 4 1 2
 - attr(*, "names")= chr [1:7] "one" "two" "three" "one&two" ...
#



2) 画图 
> upset(fromList(listinput), order.by = "freq")

# 下面绘制的图形等同于上图
> upset(fromExpression(expressionInput), order.by = "freq")

下面是3个集合，左下角是集合的size，黑色原点是哪几个集合的交集，上面 柱状图是该交集的元素数目，可以想象如果集合更多这种方式会更直观，但是--

当我输入为基因名列表（abcde），并在R中存为一个list时，会有一个fromList函数将我的list整合为upsetR自己的输入格式，等一下！！朕的基因名字呢！！

> z=fromList(listinput)
> z
   one two three
1    1   1     1
2    1   1     0
3    1   0     0
4    1   1     1
5    1   0     1
6    1   0     1
7    1   0     0
8    1   0     1
9    1   0     1
10   0   1     0
11   0   1     1
12   0   0     1
13   0   0     1



(2) 示例2：使用 UpSetR 内置的数据集 movies 来绘制。
#导入数据
> movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"), header = TRUE, sep = ";")
> dim(movies)
[1] 3883   21

#先大致浏览一下该数据集,数据集太长，就只看前几列
knitr::kable(head(movies[,1:10]))

> head(movies) #1行一部电影，3-19列是类型，1是该类型，0不是
> colnames(movies)[3:19]
 [1] "Action"      "Adventure"   "Children"    "Comedy"      "Crime"       "Documentary" "Drama"       "Fantasy"     "Noir"       
[10] "Horror"      "Musical"     "Mystery"     "Romance"     "SciFi"       "Thriller"    "War"         "Western" 


> upset(movies, nsets = 6, number.angles = 30, point.size = 2, line.size = 1, mainbar.y.label = "Genre Intersections", sets.x.label = "Movies Per Genre", text.scale = c(1.3, 1.3, 1, 1, 1.5, 1))



df=movies[,3:19]
dim(df) #3883   17

head(df)
hist( apply(df, 1, sum) ) #type per film
hist( apply(df, 2, sum), n=10 ) #film per type

# 2 film has no type
table(apply(df, 1, sum)>0)
movies[apply(df, 1, sum)==0,]
colnames(df)


upset(df, nsets=10, #底下显示几个类，默认5
      nintersects = 20,#顶部显示几个交集bar, 默认40
      number.angles = 90, #顶部文字倾斜角度
      order.by = 'freq', #对顶部排序，按频数
      point.size = 2, # 底部圆点大小
      line.size = 1, #底部连线粗细
      
      
      #text.scale = c(1.3, 1.3, 1, 1, 1.5, 1), #6个字体大小
      # c(intersection size title, intersection size tick labels, 
      #   set size title, set size tick labels, set names, numbers above bars)
      sets.x.label = "Movies Per Genre", #xlab
      mainbar.y.label = "Genre Intersections" #ylab
    )

# 限定几个特定集合
upset(df, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery", 
                       "Thriller", "Romance", "War", "Western"), 
      mb.ratio = c(0.55, 0.45), #mb.ratio：控制上方条形图以及下方点图的比例。
      order.by = "freq")
#order.by：如何排序，这里 freq 表示从大到小排序展示，
#其他选项有 degree 以及先按 freq 再按 degree 排序。







2. 是否能给出交集元素？
https://github.com/hms-dbmi/UpSetR/issues/85

只能使用原始方式，各种intersect(a,b)嵌套。


例: intersect(listinput[['one']], listinput[['two']]) #1 2 5




ref:
官方: https://www.rdocumentation.org/packages/UpSetR/versions/1.4.0
https://cran.r-project.org/web/packages/UpSetR/UpSetR.pdf
https://cran.r-project.org/web/packages/UpSetR/readme/README.html

Interactive set visualization for more than three sets: https://jku-vds-lab.at/tools/upset/

webapp: https://hiplot.com.cn/basic/upset-plot

https://www.zhihu.com/question/59118999/answer/741196973
更多实例: https://my.oschina.net/shenweiyan/blog/4538670


========================================
GenVisR包: 瀑布图/突变图谱 Waterfall Plot
----------------------------------------
1. 官网
https://bioconductor.org/packages/release/bioc/html/GenVisR.html
https://github.com/griffithlab/GenVisR

实验室: https://griffithlab.org/


中文: 
https://www.jianshu.com/p/8723aa6c9845
https://www.jianshu.com/p/726310b02a56
https://www.jianshu.com/p/d3d3a34e95c2







ref:




========================================
Gviz 包 - Visualize genomic data (能一定程度上代替IGV的R包: 画bam文件的 read coverage 图)
----------------------------------------
这个R包是可以完全替代IGV的， 前提是你对它的了解足够深。

使用refGenome加上dplyr玩转gtf文件
原创： 生信技能树  生信技能树  2018-12-05


1.
全称：Plotting data and annotation information along genomic coordinates
正式发表于期刊：Source Code Biol Med. 2016
doi: 10.1186/s13029-016-0052-z

官方教程: 很厚
http://52.71.54.154/packages/devel/bioc/vignettes/Gviz/inst/doc/Gviz.html

入门教程: http://www.sthda.com/english/wiki/gviz-visualize-genomic-data


R包的示例数据，都可以 载入慢慢玩：
list.files(system.file('data' ,package = 'Gviz'))


(1) 安装 
# BiocManager::install("Gviz")
library(Gviz)


# 1. 画基因在染色体的位置
idTrack <- IdeogramTrack(chromosome="X", genome='hg19') 
plotTracks(idTrack, from=153285264, to=153365188) 
# chrX:153285264-153365188


# 2. 画一个track，就是竖线/矩形，只有最后一句起作用了
library(GenomicRanges)
data(cpgIslands)
#print( class(cpgIslands) ) #"GRanges"
print( head(cpgIslands) )
#    seqnames            ranges strand
#<Rle>         <IRanges>  <Rle>
#  [1]     chr7 26549019-26550183      *
#  [2]     chr7 26564119-26564500      *

print('***********')
chr <- as.character(unique(seqnames(cpgIslands))) #"chr7"
gen <- genome(cpgIslands)
print(chr)
print('***')
print(gen)
#  chr7 
#"hg19"

atrack <- AnnotationTrack(cpgIslands, name='CpG') 
plotTracks(atrack)



# 3. 画带箭头的外显子，最后一行起作用
# BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(TxDb.Hsapiens.UCSC.hg19.knownGene) 
txdb=TxDb.Hsapiens.UCSC.hg19.knownGene
#print(str(txdb))
#print(length(exonsBy(txdb))) #82960
#print(TxDb.Hsapiens.UCSC.hg19.knownGene)

g1 = exonsBy(txdb)[[1]] 
print(class(g1))
print(g1)
#print(str(g1))

atrack <- AnnotationTrack(g1, name='g1') 
plotTracks(atrack)



# 4. 画覆盖度
#需要读取bw格式的reads覆盖情况文件，这个时候可以使用R包自带的bw文件，使用 函数 DataTrack 来读取bw文件：

bgFile=system.file('extdata' ,package = 'Gviz','test.wig')
print(head(bgFile)) #filename

bw<-DataTrack(range = bgFile,genome='hg19',
			type='histogram', name='test')
print(bw)
plotTracks(bw)



# 5. 组合：把染色体信息，基因结构信息，覆盖度情况结合起来
假设，我们上面3个例子绘制的都是同一个区域的图，就可以结合：

tracklist=list()
tracklist[['bw']]=bw
tracklist[['atrack']]=atrack
tracklist[['idTrack']]=idTrack
plotTracks(tracklist)
# 其中 bw, atrack, idTrack 都是 AnnotationTrack 对象，它们组合为一个list，就可以一起绘制了。



// todo


ref:
http://www.bioconductor.org/packages/release/bioc/html/Gviz.html
http://www.bioconductor.org/packages/release/bioc/vignettes/Gviz/inst/doc/Gviz.html
http://www.sthda.com/english/wiki/gviz-visualize-genomic-data





========================================
ggvis: 浏览器中显示可交互式图
----------------------------------------
1.Vega: A Visualization Grammar 
https://github.com/vega/vega

With Vega you can describe data visualizations in a JSON format, and generate interactive views using either HTML5 Canvas or SVG.

2.ggvis is a data visualization package for R
http://ggvis.rstudio.com/

The goal is to combine the best of R (e.g. every modelling function you can imagine) and the best of the web (everyone has a web browser). Data manipulation and transformation are done in R, and the graphics are rendered in a web browser, using Vega.









========================================
曼哈顿图: 展示突变基因在染色体上的位置和p值
----------------------------------------
1. 什么是曼哈顿图 Manhattan Plot
曼哈顿图是一种散点图，通常用于显示具有大量数据点，许多非零振幅和更高振幅值分布的数据。该图通常用于全基因组关联研究（GWAS）以显示重要的SNP（来源wiki）。

在图中每个点代表一个SNP，纵轴为每个SNP计算出来的Pvalue取-log10，横轴为SNP所在的染色体。基因位点的Pvalue越小即-log10(Pvalue)越大，其与表型性状或疾病等关联程度越强。而且通常来说受到连锁不平衡的影响，强关联位点周围的SNP也会显示出相对较高的信号强度，并依次向两边递减，所以会出现上图中红色部分的现象。一般，在GWAS的研究中，Pvalue的阈值在10^-6 或者10^-8以下。


2.怎么做曼哈顿图 Manhattan Plot
使用R包 qqman——an R package for creating Q-Q and manhattan plots

(1) 安装包
install.packages("qqman")

(2) 所需数据的格式
library(qqman)
data("gwasResults")
head(gwasResults)
#   SNP CHR BP         P
# 1 rs1   1  1 0.9148060
# 2 rs2   1  2 0.9370754
# 3 rs3   1  3 0.2861395
# 4 rs4   1  4 0.8304476
# 5 rs5   1  5 0.6417455
# 6 rs6   1  6 0.5190959

第一列为SNP的名字，第二列CHR为所在染色体，第三列BP为染色体上所在位置。要注意如果你的CHR中存在X，Y这样的，需要给他们转化为数字如赋予23，24等。
其中第一列SNP的名字是可选择的，后三列是必须提供的。

(3) 画图
1)基础版: 按照chr黑灰交替
manhattan(gwasResults, chr="CHR", bp="BP", snp="SNP", p="P" )


2)标记其中一系列你感兴趣的SNP：给出你感兴趣的snpsOfInterest列表即可。
snpsOfInterest #这些点会高亮显示
# [1] "rs3001" "rs3002" "rs3003" "rs3004" "rs3005" "rs3006" "rs3007" "rs3008" "rs3009" "rs3010" "rs3011"
# [12] "rs3012" "rs3013" "rs3014" "rs3015" "rs3016" "rs3017" "rs3018" "rs3019" "rs3020" "rs3021" "rs3022"
manhattan(gwasResults, highlight = snpsOfInterest)


3)想知道每条染色体上pvalue最小的SNP
manhattan(gwasResults, annotatePval = 0.01)
manhattan(gwasResults, annotatePval = 0.0001)#不符合该筛选条件的即使-log10(pvalue)最高也不显示


4)不喜欢黑色和灰色的搭配，也可以自行改变颜色。
manhattan(gwasResults, annotatePval = 0.01,annotateTop = T, col = c("grey", "skyblue")) #灰蓝交替







3. 还可以使用ggplot2来绘制 

(1) 使用dplyr 包的%>% 管道符整理数据

library(dplyr)
don <- gwasResults %>% 
  
  # Compute chromosome size
  group_by(CHR) %>% 
  summarise(chr_len=max(BP)) %>% 
  
  # Calculate cumulative position of each chromosome
  mutate(tot=cumsum(chr_len)-chr_len) %>%
  select(-chr_len) %>%
  
  # Add this info to the initial dataset
  left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
  
  # Add a cumulative position of each SNP
  arrange(CHR, BP) %>%
  mutate( BPcum=BP+tot)

head(don)
#   SNP CHR BP         P tot BPcum
# 1 rs1   1  1 0.9148060   0     1
# 2 rs2   1  2 0.9370754   0     2
# 3 rs3   1  3 0.2861395   0     3
# 4 rs4   1  4 0.8304476   0     4
# 5 rs5   1  5 0.6417455   0     5
# 6 rs6   1  6 0.5190959   0     6

axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
head(axisdf)
# # A tibble: 6 x 2
#     CHR center
#   <int>  <dbl>
# 1     1   750.
# 2     2  2096 
# 3     3  3212.
# 4     4  4204 
# 5     5  5115 
# 6     6  5966 


don是用于作图的主要数据表，而axisdf是用于处理x轴，因为我们想要他们按照染色体的位置排布。



(2) 绘图
ggplot(don, aes(x=BPcum, y=-log10(P))) +
    geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) +
    scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
    scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
    scale_y_continuous(expand = c(0, 0) ) +     # remove space between plot area and x axis
    theme_bw() +
    theme( 
      legend.position="none",
      panel.border = element_blank(),
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank()
    )

其中 scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center )控制着x轴的刻度位置和标签文本。



(3)如果想要把某些SNP标记出来呢？那么我们在前期处理数据的时候需要将这些数据标记出来，这个过程和之前火山图标记显著的基因很类似:
don <- gwasResults %>% 
  
  # Compute chromosome size
  group_by(CHR) %>% 
  summarise(chr_len=max(BP)) %>% 
  
  # Calculate cumulative position of each chromosome
  mutate(tot=cumsum(chr_len)-chr_len) %>%
  select(-chr_len) %>%
  
  # Add this info to the initial dataset
  left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
  
  # Add a cumulative position of each SNP
  arrange(CHR, BP) %>%
  mutate( BPcum=BP+tot) %>%

  # ！！！！！！Add highlight and annotation information
 mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, "yes", "no")) %>%
  mutate( is_annotate=ifelse(-log10(P)>4, "yes", "no")) 

# Prepare X axis
axisdf <- don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )


## 然后画图的时候geom_point在颜色上进行区分，并使用geom_label_repel标注出来即可：
ggplot(don, aes(x=BPcum, y=-log10(P))) +
    
    # Show all points
    geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) +
    scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
    
    # custom X axis:
    scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
    scale_y_continuous(expand = c(0, 0) ) +     # remove space between plot area and x axis

    # Add highlighted points
    geom_point(data=subset(don, is_highlight=="yes"), color="orange", size=2) +
  
    # Add label using ggrepel to avoid overlapping
    geom_label_repel( data=subset(don, is_annotate=="yes"), aes(label=SNP), size=2) +

    # Custom the theme:
    theme_bw() +
    theme( 
      legend.position="none",
      panel.border = element_blank(),
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank()
    )








ref:
https://www.jianshu.com/p/1edc44fe922f









========================================
聚类树/进化树 Phylogenetic tree //todo
----------------------------------------
1. R做聚类树分别用到了cor.dist、hclust、plot三个函数分别算相关性，聚类并作图。
有关聚类的R包可以参考cluster包和ape包。


把相近的放一起，再把次相近的放一起。
	怎么定义相近？ How do we define close?
	怎么分组？ How do we group things?
	怎么可视化分组？ How do we visualize the grouping?
	怎么解释分组？ How do we interpret the grouping?
#


todo: https://bookdown.org/rdpeng/exdata/hierarchical-clustering.html









2. 推荐博客，很详细，且文艺到艺术：
三角形、环形进化树，实线、虚线，旋转90度，染色、不同背景色，
原文：http://rstudio-pubs-static.s3.amazonaws.com/1876_df0bf890dd54461f98719b461d987c3d.html
翻译：http://blog.csdn.net/u010157382/article/details/45562435


算法不清楚，看文献：
(1).如果是dna或者蛋白序列信息，可以使用mega构建进化树。
how: http://blog.sina.com.cn/s/blog_5eb2fefb0101gny0.html
(2).如果是vntr数据，或者多位点可变数量串联重复序列分析(multiple-locus variable-numbertandem-repeat analysis,MLVA)数据，则只能用BioNumerics 了。
http://www.applied-maths.com/bionumerics
http://www.bionumerics.cn/download.html
申请免费： https://www.researchgate.net/post/Is_there_any_trial_version_of_Bionumerics_software_available_online_or_any_other_free_software


Data analysis services
Unravelling the puzzleApplied Maths offers a service of having your data analyzed at an hourly rate. Data sources include any type of 1D gels, 2D gels, chromatography, HPLC or MALDI, MLST, VNTR and other typing techniques, phenotype data, microarrays, sequences up to full chromosomes, including comparison, gene mapping and annotation.

If you would like to obtain more information or a quotation about this Applied Maths' service please do not hesitate to contact us.








3. 可视化 mega，上色是mega画好后ai添加的
http://muchong.com/html/201602/9981406.html














ref:
https://bookdown.org/rdpeng/exdata/hierarchical-clustering.html








========================================
ggpubr 包: 一条命令轻松绘制CNS顶级配图
----------------------------------------
ggpubr 实际上是基于ggplot2 开发出来的包，目的是为了简化ggplot2的操作，便于画出满足论文出版要求的图。

Reference: http://rpkgs.datanovia.com/ggpubr/reference/index.html#section-make-programming-easy-with-ggplot-

install.packages("ggplot2")
install.packages("ggpubr")

#加载包
library(ggplot2)
library(ggpubr)


1.Plot One Variable - X, Continuous

ggdensity() 密度图
stat_overlay_normal_density() 密度图，同时叠加正态分布的图，有助于检查偏离值
gghistogram() 直方图。
ggecdf() 经验累积密度分布图
ggqqplot() 分位数-分位数图，简称QQ图。



2. Plot Two Vriables - X and Y, Discrete X and Continuous Y

ggboxplot() 箱图
ggviolin() 小提琴图

ggdotplot() 点图
ggstripchart() strip chart, 也可以称为一维散点图。

ggbarplot() 柱状图
ggline() 线图
ggerrorplot() Visualizing Error 绘制误差棒图

ggpie() 饼图
ggdonutchart() 甜甜圈饼图
ggdotchart()theme_cleveland() 克利夫兰点图



3. 更多

ggscatter() 散点图
stat_cor() 将有P值的相关系数添加到散点图中
stat_stars()) Add Stars to a Scatter Plot

ggscatterhist() 绘制具有边际直方图的散点图

ggpaired() Plot Paired Data

ggballoonplot()



ggmaplot()
Make MA-plot which is a scatter plot of log2 fold changes (on the y-axis) versus the mean expression signal (on the x-axis).

MA plot充分展示了基因丰度和表达变化之间的关系。我们可以看到，越靠左下或者右上的点，就是丰度越高而且变化幅度越大的基因。当然了，MA plot就丢了FDR这类统计量。二维图嘛，死活两个参数，顶多用颜色做个假三维。

不过对于终端小白用户来说，如果在volcano plot和MA plot中发现了重叠的靶点（实际上会有不少重叠），那就愉快地拿去做实验吧。





4. 例子 

内有箱线图的小提琴图+星标记

data("ToothGrowth")
df1 <- ToothGrowth
head(df1)

ggviolin(df1, x="dose", y="len", fill = "dose", 
         palette = c("#00AFBB", "#E7B800", "#FC4E07"),  
         add = "boxplot", add.params = list(fill="white"))+ 
  stat_compare_means(comparisons = my_comparisons, label = "p.signif")+#label这里表示选择显著性标记（星号） 
  stat_compare_means(label.y = 50)
#




(2) 配色
# palette = "npg", #杂志nature的配色 





ref:
https://zhuanlan.zhihu.com/p/102653888
http://blog.sciencenet.cn/blog-3334560-1091714.html




========================================
用R语言对JPG/JPEG图片进行白背景透明处理
----------------------------------------

library(jpeg)
library(png)

setwd("C:\\Users\\admin\\Desktop\\blog_pics\\201904\\")

FILTER <- matrix(c("JPG file", "*.jpg", "JPEG file", "*.jpeg"), ncol = 2, byrow = T)
img <- choose.files(caption = "Select JPG files", filters = FILTER, index = 1, multi=T)
for(i in 1:length(img)){
  x <- readJPEG(img[i])
  dimx <- dim(x) #三维，前两维是x和y，第三维是rgb通道名。
  #分出来rgb三个通道
  n <- dimx[1]*dimx[2]
  r <- x[1:n]
  g <- x[(n+1):(2*n)]
  b <- x[(2*n+1):(3*n)]
  #
  ps <- 5; ps <- dimx[1]*(ps-1) + ps # 背景取值，ps为左上到右下角的像素，5。按情况修改
  tv <- 0.1 # tv为容差范围，0-1取值，越小越精确
  sel <- abs(r-r[ps])<tv & abs(g-g[ps])<tv & abs(b-b[ps])<tv
  alpha <- rep(1, n)
  alpha[sel] <- 0
  x <- array(c(x, alpha), dim=c(dimx[1:2], 4))
  writePNG(x, gsub("(.+\\.)(jpg|jpeg)$","\\1png", img[i], ignore.case = TRUE))
}


https://blog.csdn.net/u014801157/article/details/24372421






========================================
----------------------------------------

