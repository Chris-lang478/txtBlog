使用dplyr进行数据框操作with实例
R语言教程-神奇R包tidyr

Hadley Wickham编写，他编写了许多有用的R软件包，如ggplot2，dplyr, tidyr等

R包都有自己的说明书（cheatsheet），俗称小抄。在对包有了一定的了解后，小抄是一个很好的学习操作指南。


========================================
1. dplyr 简介
----------------------------------------
https://www.listendata.com/2016/08/dplyr-tutorial.html


1.概述

dplyr是Hadley Wickham设计，创建和维护的数据处理包。
它提供了一些易于使用，功能强大的函数集，方便对数据进行管理和探索。

#安装包
install.packages("dplyr")
#加载包
library(dplyr)

The names of dplyr functions are similar to SQL commands such as 
select() for selecting variables, 
group_by() - group data by grouping variable, 
join() - joining two data sets. 
Also includes inner_join() and left_join(). It also supports sub queries for which SQL was popular for.


## dplyr常用函数：(SQL等价语句)
select()：选择所需列(SELECT)
filter()：选择所需行 (WHERE)
mutate()：添加新列 (COLUMN ALIAS)
arrange()：改变行的顺序 (ORDER BY)
summarise()：聚合操作，常与group_by()函数结合使用
group_by()：分组函数(GROUP BY)
join(): Joining data frames (tables) (JOIN)
	inner_join()：内连接操作
	left_join()：左连接操作
	right_join()：右连接操作
%>%  管道符号





2.实例使用ggplot2包中的diamonds数据集。
library(ggplot2)
df=data.frame(diamonds) #以下简称df数据集
dim(df)
#[1] 53940    10

head(diamonds)
# A tibble: 6 x 10
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63

head(df)
 carat       cut color clarity depth table price    x    y    z
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.23      Good     E     VS1  56.9    65   327 4.05 4.07 2.31
4  0.29   Premium     I     VS2  62.4    58   334 4.20 4.23 2.63


========================================
dplyr—— 1.sample_ 抽样
----------------------------------------

#随机选择n行: sample_n(x, n)
sample_n(df,3)
  carat     cut color clarity depth table price    x    y    z
1  0.67 Premium     G     VS2  61.0    61  2050 5.66 5.61 3.44
2  0.51 Premium     E     SI2  61.8    58  1265 5.11 5.08 3.15
3  0.33   Ideal     G    VVS1  62.3    55   868 4.43 4.46 2.77

#随机选择前n%: sample_frac(x, 0.2)
sample_frac(df, 0.0001)
  carat       cut color clarity depth table price    x    y    z
1  0.50     Ideal     H     VS2  61.2    56  1332 5.18 5.14 3.16
2  1.41   Premium     D    VVS2  60.8    57 17216 7.28 7.23 4.41
3  1.01      Good     H     VS1  63.8    59  5416 6.30 6.34 4.03
4  1.64 Very Good     J     SI2  63.0    58  7579 7.42 7.51 4.71
5  0.40   Premium     E     VS1  60.3    58  1053 4.80 4.82 2.90



========================================
dplyr—— 2.distinct删除重复行
----------------------------------------

#基于所有变量删除重复行
x1=distinct(df) #该数据及没有重复行，所以返回的x1与df行数相同

#基于单个变量删除重复行
#.keep_all函数用于保留输出数据框中的所有其他变量。
x2 <- distinct(df, cut, .keep_all= TRUE)
x2
  carat       cut color clarity depth table price    x    y    z
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.23      Good     E     VS1  56.9    65   327 4.05 4.07 2.31
4  0.24 Very Good     J    VVS2  62.8    57   336 3.94 3.96 2.48
5  0.22      Fair     E     VS2  65.1    61   337 3.87 3.78 2.49

distinct(df, cut) #默认是只输出cut列
        cut
1     Ideal
2   Premium
3      Good
4 Very Good
5      Fair



========================================
dplyr—— 3.select选择列（或变量）、变量选择函数
----------------------------------------
#可以选择变量的函数 starts_with(), ends_with(), contains(),matches(),num_range(),one_of(),everything()
配合减号则表示去掉这些变量。


#选择carat列，x到z列（范围用:表示）。
select(df,carat, x:z)[1:3,] #仅显示前三行
  carat    x    y    z
1  0.23 3.95 3.98 2.43
2  0.21 3.89 3.84 2.31
3  0.23 4.05 4.07 2.31

#删除变量：前面加减号
> select(df,-x,-y)[1:3,]
  carat     cut color clarity depth table price    z
1  0.23   Ideal     E     SI2  61.5    55   326 2.43
2  0.21 Premium     E     SI1  59.8    61   326 2.31
3  0.23    Good     E     VS1  56.9    65   327 2.31
> select(df,-c(x,y))[1:3,] #或者列表形式
  carat     cut color clarity depth table price    z
1  0.23   Ideal     E     SI2  61.5    55   326 2.43
2  0.21 Premium     E     SI1  59.8    61   326 2.31
3  0.23    Good     E     VS1  56.9    65   327 2.31

#选择以c开头的变量用starts_with函数
> select(df, starts_with("c"))[1:3,]
  carat     cut color clarity
1  0.23   Ideal     E     SI2
2  0.21 Premium     E     SI1
3  0.23    Good     E     VS1
#去掉以c开头的变量
> select(df, -starts_with("c"))[1:3,] 
  depth table price    x    y    z
1  61.5    55   326 3.95 3.98 2.43
2  59.8    61   326 3.89 3.84 2.31
3  56.9    65   327 4.05 4.07 2.31

#选择名字中包含e的变量
select(df, contains("e"))[1:3,]
  depth table price
1  61.5    55   326
2  59.8    61   326
3  56.9    65   327

#重新排列变量顺序：把price放到最前面，其他跟随其后
select(df, price, everything())[1:3,]
  price carat     cut color clarity depth table    x    y    z
1   326  0.23   Ideal     E     SI2  61.5    55 3.95 3.98 2.43
2   326  0.21 Premium     E     SI1  59.8    61 3.89 3.84 2.31
3   327  0.23    Good     E     VS1  56.9    65 4.05 4.07 2.31


========================================
dplyr—— 变量重命名rename函数
----------------------------------------
rename(df, Price2=price)[1:3,]
  carat     cut color clarity depth table Price2    x    y    z
1  0.23   Ideal     E     SI2  61.5    55    326 3.95 3.98 2.43
2  0.21 Premium     E     SI1  59.8    61    326 3.89 3.84 2.31
3  0.23    Good     E     VS1  56.9    65    327 4.05 4.07 2.31




========================================
dplyr—— 4.filter选择行
----------------------------------------

#只选择cut为Good的行
filter(df, cut=="Good")[1:3,]
  carat  cut color clarity depth table price    x    y    z
1  0.23 Good     E     VS1  56.9    65   327 4.05 4.07 2.31
2  0.31 Good     J     SI2  63.3    58   335 4.34 4.35 2.75
3  0.30 Good     J     SI1  64.0    55   339 4.25 4.28 2.73
filter(df, cut %in% c("Good","Ideal") )[1:3,] #或者使用数组条件。
  carat   cut color clarity depth table price    x    y    z
1  0.23 Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.23  Good     E     VS1  56.9    65   327 4.05 4.07 2.31
3  0.31  Good     J     SI2  63.3    58   335 4.34 4.35 2.75

#选择中的and
filter(df, color %in% c("E","J") & price >326) [1:2,]
  carat  cut color clarity depth table price    x    y    z
1  0.23 Good     E     VS1  56.9    65   327 4.05 4.07 2.31
2  0.31 Good     J     SI2  63.3    58   335 4.34 4.35 2.75

#选择中的or
filter(df, color %in% c("E","J") | price >326) [1:5,]
  carat     cut color clarity depth table price    x    y    z
1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31
4  0.29 Premium     I     VS2  62.4    58   334 4.20 4.23 2.63
5  0.31    Good     J     SI2  63.3    58   335 4.34 4.35 2.75

#选择中的!("非")
> filter(df, !color %in% c("E","J")) [1:3,]
  carat       cut color clarity depth table price    x    y    z
1  0.29   Premium     I     VS2  62.4    58   334 4.20 4.23 2.63
2  0.24 Very Good     I    VVS1  62.3    57   336 3.95 3.98 2.47
3  0.26 Very Good     H     SI1  61.9    55   337 4.07 4.11 2.53

#包含条件：grepl()用于搜索模式匹配。
#查找clarity列中包含“SI”的行
filter(df, grepl("SI", clarity))[1:6,]
  carat       cut color clarity depth table price    x    y    z
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.31      Good     J     SI2  63.3    58   335 4.34 4.35 2.75
4  0.26 Very Good     H     SI1  61.9    55   337 4.07 4.11 2.53
5  0.30      Good     J     SI1  64.0    55   339 4.25 4.28 2.73
6  0.22   Premium     F     SI1  60.4    61   342 3.88 3.84 2.33




========================================
dplyr—— 5.arrange排序
----------------------------------------
#arrange()函数的默认排序顺序是递增的。
arrange(df, x,y,z)[1:3,]
  carat       cut color clarity depth table price x y z
1  1.00 Very Good     H     VS2  63.3    53  5139 0 0 0
2  1.14      Fair     G     VS1  57.5    67  6381 0 0 0
3  1.56     Ideal     G     VS2  62.2    54 12800 0 0 0

#如果降序排列，则使用desc(colnameX)
arrange(df, desc(x),y,z)[1:3,]
  carat     cut color clarity depth table price     x     y    z
1  5.01    Fair     J      I1  65.5    59 18018 10.74 10.54 6.98
2  4.50    Fair     J      I1  65.8    58 18531 10.23 10.16 6.72
3  4.01 Premium     I      I1  61.0    61 15223 10.14 10.10 6.17




========================================
dplyr—— 6.mutate创建新变量
----------------------------------------
#创建总金额列，等于克拉乘以单价
mutate(df, total=carat*price)[1:3,]
  carat     cut color clarity depth table price    x    y    z total
1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43 74.98
2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31 68.46
3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31 75.21

#所有变量乘以1000，命名为后缀_new
mutate_all(df, funs("new" = .* 1000))[1:3,]


#变量的排序， min_rank()给最小的值编号1，最大的值编号最大。
> mutate_at(df, vars(x:z), funs(Rank=min_rank(.)))[1:3,]
  carat     cut color clarity depth table price    x    y    z x_Rank y_Rank z_Rank
1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43    232    236    193
2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31     56     25     33
3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31    665    633     33



#如果想把最大的值编号1，使用 min_rank(desc(.))
x2 = df %>% group_by(color) %>% 
	filter(min_rank(desc(price))==1) %>%
	select(color, price)
x2
# A tibble: 8 x 2
# Groups:   color [7]
  color price
  <ord> <int>
1 D     18693
2 J     18710
3 J     18710 #这有一个重复的，可以使用distinct()放到最后过滤掉。
4 E     18731
5 F     18791
6 H     18803
7 G     18818
8 I     18823


#最大值有两个的结果是，两个第一，没有第二，然后是第三。
df %>% group_by(color) %>% 
  filter(min_rank(desc(price))==2) %>%
  select(color, price)
# A tibble: 6 x 2
# Groups:   color [6]
  color price
  <ord> <int>
1 D     18674
2 E     18729
3 F     18784
4 H     18795
5 I     18797
6 G     18806



df %>% select(color, price) %>% distinct() %>%
  group_by(color) %>% 
  filter(min_rank(desc(price))==1)
# A tibble: 7 x 2
# Groups:   color [7]
color price
<ord> <int>
  1 D     18693
2 J     18710
3 E     18731
4 F     18791
5 H     18803
6 G     18818
7 I     18823



# 使用累加cumsum函数创建新变量
The cumsum function calculates cumulative sum of a variable. With mutate function, we insert a new variable called 'Total' which contains values of cumulative income of variable Index.
df %>% group_by(Index) %>% mutate(Total=cumsum(Y2015)) %>% select(Index, Y2015, Total)
这个例子没有模拟好，凑合看吧。
> df %>% group_by(color) %>% mutate(Total=cumsum(carat*price)) %>% select(color, carat,price, Total)





========================================
dplyr—— 7.summarise系列函数进行汇总
----------------------------------------
#总结选定的变量
> summarize(df, carat_mean=mean(carat), price_mean=mean(price))
  carat_mean price_mean
1  0.7979397     3932.8

#总结多个变量
#计算变量x和y的数量、平均值和中位数。summarise_at函数允许我们通过名称选择多个变量。
> summarise_at(df, vars(x,y), funs(n(), mean, median))
    x_n   y_n   x_mean   y_mean x_median y_median
1 53940 53940 5.731157 5.734526      5.7     5.71

#使用自定义函数汇总
#点（.）表示函数的第二个参数中指定的每个变量。
summarise_at(df, vars(x,y), funs(n(), missing=sum(is.na(.)), mean(., na.rm=T), median(.,na.rm=T)))
    x_n   y_n x_missing y_missing   x_mean   y_mean x_median y_median
1 53940 53940         0         0 5.731157 5.734526      5.7     5.71


#汇总所有的数字变量
summarise_if(df, is.numeric, funs(n(),mean,median))
或者
df_num <- df[sapply(df,is.numeric)]
summarise_all(df_num, funs(n(),mean,median))


#汇总因子变量
#检查分类（因子）变量中的级别/类别数量和缺失观察数量。
summarize_all(df['color'], funs(nlevels(.), nmiss=sum(is.na(.))))
  nlevels nmiss
1       7     0




========================================
dplyr—— 8.group_by()、do()与管道操作
----------------------------------------
#常规多步骤写法，会有很多括号，很麻烦
dt = sample_n(select(mydata, Index, State),10)
#or 使用管道
dt = mydata %>% select(Index, State) %>% sample_n(10)



#按照color统计carat和price
> df %>% group_by("color") %>% summarise_at(vars(carat, price), funs(n(), mean(., na.rm=T))) #group_by后的变量不要加引号
# A tibble: 1 x 5
  `"color"` carat_n price_n carat_mean price_mean
  <chr>       <int>   <int>      <dbl>      <dbl>
1 color       53940   53940      0.798      3933.
#正确语句
> df %>% group_by(color) %>% summarise_at(vars(carat, price), funs(n(), mean(., na.rm=T)))
# A tibble: 7 x 5
  color carat_n price_n carat_mean price_mean
  <ord>   <int>   <int>      <dbl>      <dbl>
1 D        6775    6775      0.658      3170.
2 E        9797    9797      0.658      3077.
3 F        9542    9542      0.737      3725.
4 G       11292   11292      0.771      3999.
5 H        8304    8304      0.912      4487.
6 I        5422    5422      1.03       5092.
7 J        2808    2808      1.16       5324.



### do() function :
Use : Compute within groups
语法： do(data_frame, expressions_to_apply_to_each_group)

# 从"D", "E", "F"类别的变量索引中抽取前两行
#不用do()则获取的是全局的前两个
df %>% filter(color %in% c("D", "E", "F")) %>% group_by(color) %>%  head(., 2)
# A tibble: 2 x 10
# Groups:   color [1]
  carat cut     color clarity depth table price     x     y     z
  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31

#正确写法
x2 = df %>% filter(color %in% c("D", "E", "F")) %>% group_by(color) %>%  do(head(., 2))
x2
# A tibble: 6 x 10
# Groups:   color [3]
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  0.23 Very Good D     VS2      60.5    61   357  3.96  3.97  2.4 
2  0.23 Very Good D     VS1      61.9    58   402  3.92  3.96  2.44
3  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
4  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
5  0.22 Premium   F     SI1      60.4    61   342  3.88  3.84  2.33
6  0.23 Very Good F     VS1      60.9    57   357  3.96  3.99  2.42


#如果需要排序后取出前n个，则可以使用top_n()函数
df %>% filter(color %in% c("D", "E", "F")) %>% group_by(color) %>%  top_n(2, price)
# A tibble: 6 x 10
# Groups:   color [3]
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  2.01 Ideal     D     SI2      62.1    56 18674  8.02  8.11  5.01
2  2.19 Ideal     D     SI2      61.8    57 18693  8.23  8.49  5.17
3  1.51 Ideal     E     VS1      61.5    57 18729  7.34  7.4   4.53
4  2.02 Very Good E     SI1      59.8    59 18731  8.11  8.2   4.88
5  2.05 Premium   F     SI2      60.2    59 18784  8.28  8.33  5   
6  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 

常用的实例 
gene.df=br.markers %>% group_by(cluster) %>% top_n(5, avg_logFC)
gene.df=br.markers %>% group_by(cluster) %>% top_n(100, avg_logFC) %>% filter(p_val_adj<0.05)



#通过分类变量选择第三最大值: 计算变量color每一类中的第三个最大值。
x3 <- df %>% 
  select(color, carat) %>% #选择2列
  filter(color %in% c("D", "E","F")) %>% #过滤出某些行
  group_by(color) %>% #按照color分组
  do(arrange(.,desc(carat))) %>%  #组内降序排序
  slice(3) #选择每个组内的第三行
x3
# A tibble: 3 x 2
# Groups:   color [3]
  color carat
  <ord> <dbl>
1 D      2.58
2 E      2.71
3 F      2.58
#可简化
x3 <- df %>% 
  select(color, carat) %>% #选择2列
  filter(color %in% c("D", "E","F")) %>% #过滤出某些行
  group_by(color) %>% #按照color分组
  arrange(desc(carat)) %>%  #组内降序排序
  slice(3) #选择每个组内的第三行
x3 #结果完全一样


#像SQL一样，dplyr使用窗口函数来将数据分组。 它返回值的向量。 我们可以使用min_rank（）函数来计算上例中的rank。
x4 <- df %>% select(color, carat) %>%
  filter(color %in% c("D", "E","F")) %>%
  group_by(color) %>%
  filter(min_rank(desc(carat)) == 3)
x4
# A tibble: 3 x 2
# Groups:   color [3]
  color carat
  <ord> <dbl>
1 F      2.58
2 D      2.58
3 E      2.71



#总结、分组和排序
#通过color分组计算x、y、z的均值，然后按照x的均值对结果排序。
x5=df %>% group_by(color) %>%
	summarize(x_mean=mean(x, na.rm=T), y_mean=mean(y, na.rm=T), z_mean=mean(z,na.rm=T)) %>%
	arrange(desc(x_mean))
x5
# A tibble: 7 x 4
  color x_mean y_mean z_mean
  <ord>  <dbl>  <dbl>  <dbl>
1 J       6.52   6.52   4.03
2 I       6.22   6.22   3.85
3 H       5.98   5.98   3.70
4 G       5.68   5.68   3.51
5 F       5.61   5.62   3.46
6 D       5.42   5.42   3.34
7 E       5.41   5.42   3.34











========================================
2 tidyr简介
----------------------------------------
tidyr是Hadley Wickham创建用于数据整理的包。它通常与dplyr包结合使用。

tidyr包中主要涉及：
1）缺失值的简单补齐
2）长形表变宽形表与宽形表变长形表
3）列分割与列合并


tidyr常用函数：
gather()：宽数据转换为长数据
spread()：长数据转换为宽数据


#测试数据：基因表达矩阵
gdf=data.frame(
  geneID=c("gene1","gene2","gene3","gene4"),
  sample1=c(1,4,7,10),
  sample2=c(20,5,0,2),
  sample3=c(0.3,6,9,0.5)
  #row.names=1
)
gdf
#  geneID sample1 sample2 sample3
#1  gene1       1      20     0.3
#2  gene2       4       5     6.0
#3  gene3       7       0     9.0
#4  gene4      10       2     0.5



========================================
tidyr—— 1.gather() 宽变长
----------------------------------------
library("tidyr")
gather(gdf, 'sample1','sample2','sample3', key='sample',value='exp')
gather(gdf, key='sample',value='exp',-"geneID")

其他形式：
gdf %>% gather(key="sampleNO", value="values","sample1",'sample2','sample3')
#等价
x2=gdf %>% gather(key="sampleNO", value="values",-"geneID")
head(x2)
#  geneID sampleNO values
#1  gene1  sample1      1
#2  gene2  sample1      4
#3  gene3  sample1      7
#4  gene4  sample1     10
#5  gene1  sample2     20
#6  gene2  sample2      5



========================================
tidyr—— 2.spread() 长变宽
----------------------------------------

spread()函数实现长表转宽表，语法如下：
spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE)

data：为需要转换的长形表
key：需要将变量值拓展为字段的变量
value：需要分散的值
fill：对于缺失值，可将fill的值赋值给被转型后的缺失值


head(x2)
spread(x2,key="sampleNO",value="values") #回到解放前矩阵状态
#  geneID sample1 sample2 sample3
#1  gene1       1      20     0.3
#2  gene2       4       5     6.0
#3  gene3       7       0     9.0
#4  gene4      10       2     0.5




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

