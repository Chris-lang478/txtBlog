使用dplyr进行数据框操作(实例)
R语言教程-神奇R包tidyr


Hadley Wickham编写了许多特别有用的R软件包，如ggplot2，dplyr, tidyr等

在数据预处理过程中，可以灵活运用data.table包、reshape包、reshape2包、plyr包、dplyr包和tidyr包。这些包都源于ggplot2包的作者Hardly，通过运用这些包的组合函数，可以迅速提高数据预处理的效率


学会tidyverse工具包, 数据分析整个流程一条龙包办了.
R for Data Science: https://r4ds.had.co.nz/





========================================
*** dplyr 常用语句 ***
----------------------------------------
1.
筛选差异表达基因，adj.p<0.05, abs(logFC)>1
rs1=DEG_voom %>% 
  filter(adj.P.Val < 0.05 & abs(logFC) > 1) %>%
  arrange(adj.P.Val, desc(abs(logFC)))
dim(rs1);
rs1;
#


2. 按照类别分组，然后过滤，然后每组选择前10个，按照加权值选择
top10 <- pbmc.markers %>% group_by(cluster)%>% filter(p_val_adj<0.05 & abs(avg_logFC)>log2(1.5) )  %>% top_n(n = 10, wt = avg_logFC)





========================================
1. dplyr 简介
----------------------------------------
1.概述

R包都有自己的说明书（cheatsheet），俗称小抄。在对包有了一定的了解后，小抄是一个很好的学习操作指南。
dplyr中文速查表： https://www.rstudio.com/wp-content/uploads/2015/03/data-wrangling-chinese.pdf


(1) 简介
dplyr是Hadley Wickham设计，创建和维护的数据处理包。
它提供了一些易于使用，功能强大的函数集，方便对数据进行管理和探索。
dplyr函数处理速度比基本R函数快。

https://dplyr.tidyverse.org/
https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html


(2) 中文教程与实例
https://www.listendata.com/2016/08/dplyr-tutorial.html
https://zhuanlan.zhihu.com/p/31233636
http://www.360doc.com/content/17/1204/10/50223086_709726679.shtml









2.实例使用ggplot2包中的diamonds数据集。
library(ggplot2)
df=data.frame(diamonds) #以下简称df数据集
dim(df)
#[1] 53940    10

head(diamonds)
# A tibble: 6 x 10
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63

head(df)
 carat       cut color clarity depth table price    x    y    z
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.23      Good     E     VS1  56.9    65   327 4.05 4.07 2.31
4  0.29   Premium     I     VS2  62.4    58   334 4.20 4.23 2.63




(2) 安装
#安装包
install.packages("dplyr")
#加载包
library(dplyr)




(3) 和SQL语言的对比

The names of dplyr functions are similar to SQL commands such as 
select() for selecting variables, 
group_by() - group data by grouping variable, 
join() - joining two data sets. Also includes inner_join() and left_join(). 
It also supports sub queries for which SQL was popular for.
它也支持SQL常用的子查询。



## dplyr常用函数：(SQL等价语句)

dplyr包是现在数据流编程的核心,同时支持主流的管道操作 %>%，主要的数据处理方法包括：
1)高级查询操作：
select()：选择所需列(SELECT)
filter()：选择所需行 (WHERE)
mutate()：添加新列 (COLUMN ALIAS)，在原数据集最后一列追加一些数据集
arrange()：改变行的顺序 (ORDER BY)
summarise()：每组聚合为一个小数量的汇总统计，通常结合gruop_by()使用
group_by()：分组函数(GROUP BY)

2)关联表查询
join(): Joining data frames (tables) (JOIN)
	inner_join(x, y)：内连接操作, 匹配 x + y
	left_join(x, y)：左连接操作，所有 x + 匹配 y
	right_join()：右连接操作
	semi_join(x, y): 所有 x 在 y 中匹配的部分
	anti_join(x, y): 所有 x 在 y 中不匹配的部分

3)集合操作
intersect(x, y): x 和 y 的交集（按行）
union(x, y): x 和 y 的并集（按行）
setdiff(x, y): x 和 y 的补集 （在x中不在y中）

%>%  管道符号





========================================
|-- sample_ 抽样: sample_n(x, n), sample_frac(x, ratio)
----------------------------------------
如果为了保证抽样的可重复性，可以设置随机数种子。
set.seed(2021)

#随机选择n行: sample_n(x, n)
sample_n(df,3)
  carat     cut color clarity depth table price    x    y    z
1  0.67 Premium     G     VS2  61.0    61  2050 5.66 5.61 3.44
2  0.51 Premium     E     SI2  61.8    58  1265 5.11 5.08 3.15
3  0.33   Ideal     G    VVS1  62.3    55   868 4.43 4.46 2.77

#随机选择前n%: sample_frac(x, 0.2)
sample_frac(df, 0.0001)
  carat       cut color clarity depth table price    x    y    z
1  0.50     Ideal     H     VS2  61.2    56  1332 5.18 5.14 3.16
2  1.41   Premium     D    VVS2  60.8    57 17216 7.28 7.23 4.41
3  1.01      Good     H     VS1  63.8    59  5416 6.30 6.34 4.03
4  1.64 Very Good     J     SI2  63.0    58  7579 7.42 7.51 4.71
5  0.40   Premium     E     VS1  60.3    58  1053 4.80 4.82 2.90



========================================
|-- distinct删除重复行
----------------------------------------

#基于所有变量删除重复行
x1=distinct(df) #该数据及没有重复行，所以返回的x1与df行数相同

#基于单个变量删除重复行
#.keep_all函数用于保留输出数据框中的所有其他变量。
x2 <- distinct(df, cut, .keep_all= TRUE)
x2
  carat       cut color clarity depth table price    x    y    z
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.23      Good     E     VS1  56.9    65   327 4.05 4.07 2.31
4  0.24 Very Good     J    VVS2  62.8    57   336 3.94 3.96 2.48
5  0.22      Fair     E     VS2  65.1    61   337 3.87 3.78 2.49

distinct(df, cut) #默认是只输出cut列
        cut
1     Ideal
2   Premium
3      Good
4 Very Good
5      Fair



#按照2列去重
distinct(df, cut, color, .keep_all= TRUE) 





========================================
|-- select选择列（或变量）、变量选择函数、重命名列名
----------------------------------------
select()用列名作参数来选择子数据集。

用于重命名时，select()只保留参数中给定的列，rename()保留所有的列，只对给定的列重新命名。原数据集行名称会被过滤掉。



1. 可以选择变量的函数 
dplyr包中提供了些特殊功能的函数与select函数结合使用， 用于筛选变量，包括

starts_with(), 前缀字符
ends_with(),   后缀字符
contains(),    包含某字符
matches(),     正则表达式
num_range(),   Matches a numerical range like x01, x02, x03. //todo
	num_range(prefix, range, width = NULL, vars = NULL)
one_of(),      字符向量中的变量
everything()   所有变量

last_col(): Select last variable, possibly with an offset.
where(): Applies a function to all variables and selects those for which the function returns TRUE.


配合减号则表示去掉这些变量。
: 范围 for selecting a range of consecutive variables.
! 反向选取 for taking the complement of a set of variables.
& and | 交集和并集 for selecting the intersection or the union of two sets of variables.
c() 组合选择 for combining selections.






2. 实例 

(1) 符号: 是范围
#选择carat列，x到z列（范围用:表示，从某列到某列）。
> select(df,carat, x:z)[1:3,] #仅显示前三行
  carat    x    y    z
1  0.23 3.95 3.98 2.43
2  0.21 3.89 3.84 2.31
3  0.23 4.05 4.07 2.31


(2) 减号删掉该列，!是反向选取
> select(df,carat, color, !x:z)[1:2,] #!是反向选取
  carat color     cut clarity depth table price
1  0.23     E   Ideal     SI2  61.5    55   326
2  0.21     E Premium     SI1  59.8    61   326


#删除变量，就是前面加减号
> select(df,-x,-y)[1:3,]
  carat     cut color clarity depth table price    z
1  0.23   Ideal     E     SI2  61.5    55   326 2.43
2  0.21 Premium     E     SI1  59.8    61   326 2.31
3  0.23    Good     E     VS1  56.9    65   327 2.31
> select(df,-c(x,y))[1:3,] #或者列表形式
  carat     cut color clarity depth table price    z
1  0.23   Ideal     E     SI2  61.5    55   326 2.43
2  0.21 Premium     E     SI1  59.8    61   326 2.31
3  0.23    Good     E     VS1  56.9    65   327 2.31



(3) 按照模式选择列名： 开头、结尾、包含、正则
#选择以c开头的变量用starts_with函数
> select(df, starts_with("c"))[1:3,]
  carat     cut color clarity
1  0.23   Ideal     E     SI2
2  0.21 Premium     E     SI1
3  0.23    Good     E     VS1
#去掉以c开头的变量
> select(df, -starts_with("c"))[1:3,] 
  depth table price    x    y    z
1  61.5    55   326 3.95 3.98 2.43
2  59.8    61   326 3.89 3.84 2.31
3  56.9    65   327 4.05 4.07 2.31

#选择名字中包含e的变量
select(df, contains("e"))[1:3,]
  depth table price
1  61.5    55   326
2  59.8    61   326
3  56.9    65   327



正则表达式
# 选择c开头，后面至少2个字母的列名
> select(df, matches("^c.{2,}") )[1:2,]
  carat     cut color clarity
1  0.23   Ideal     E     SI2
2  0.21 Premium     E     SI1
# c开头，后面至少3个字符的列名
> select(df, matches("^c.{3,}") )[1:2,]
  carat color clarity
1  0.23     E     SI2
2  0.21     E     SI1


字母加数字范围
# 选择所有wk开头的列
select(billboard[1:3,], starts_with("wk"))
# 选择所有wk开头的、后面是5到12的列: wk5,wk6,...wk12
select(billboard[1:3,], num_range("wk", 5:12))



# 使用逻辑运算符: c开头，且包含a的变量/列 
> select(df, starts_with("c") & contains("a"))[1:2,]
  carat clarity
1  0.23     SI2
2  0.21     SI1



(4) 对列名排序

#重新排列变量顺序：把price放到最前面，其他跟随其后
select(df, price, everything())[1:3,]
  price carat     cut color clarity depth table    x    y    z
1   326  0.23   Ideal     E     SI2  61.5    55 3.95 3.98 2.43
2   326  0.21 Premium     E     SI1  59.8    61 3.89 3.84 2.31
3   327  0.23    Good     E     VS1  56.9    65 4.05 4.07 2.31




(5) 重命名列名 
select(df, PRICE=price, X2=x)[1:3,]
输出：
  PRICE   X2
1   326 3.95
2   326 3.89
3   327 4.05
但是由于select（）将所有没有明确提到的变量都删除了，所以不是很有用。因而，我们可以使用rename（）来进行变量重命名：

变量重命名rename函数，将Index变量重命名为Index2: mydata9 <- rename(mydata, Index2=Index)

rename(df, Price2=price)[1:3,]
  carat     cut color clarity depth table Price2    x    y    z
1  0.23   Ideal     E     SI2  61.5    55    326 3.95 3.98 2.43
2  0.21 Premium     E     SI1  59.8    61    326 3.89 3.84 2.31
3  0.23    Good     E     VS1  56.9    65    327 4.05 4.07 2.31




========================================
|-- filter选择行
----------------------------------------

#只选择cut为Good的行
filter(df, cut=="Good")[1:3,]
  carat  cut color clarity depth table price    x    y    z
1  0.23 Good     E     VS1  56.9    65   327 4.05 4.07 2.31
2  0.31 Good     J     SI2  63.3    58   335 4.34 4.35 2.75
3  0.30 Good     J     SI1  64.0    55   339 4.25 4.28 2.73
filter(df, cut %in% c("Good","Ideal") )[1:3,] #或者使用数组条件。
  carat   cut color clarity depth table price    x    y    z
1  0.23 Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.23  Good     E     VS1  56.9    65   327 4.05 4.07 2.31
3  0.31  Good     J     SI2  63.3    58   335 4.34 4.35 2.75

#选择中的and: 表示AND时要使用&或者直接使用逗号。
filter(df, color %in% c("E","J"), price >326) [1:2,]
filter(df, color %in% c("E","J") & price >326) [1:2,]
  carat  cut color clarity depth table price    x    y    z
1  0.23 Good     E     VS1  56.9    65   327 4.05 4.07 2.31
2  0.31 Good     J     SI2  63.3    58   335 4.34 4.35 2.75



#选择中的or
filter(df, color %in% c("E","J") | price >326) [1:5,]
  carat     cut color clarity depth table price    x    y    z
1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31
4  0.29 Premium     I     VS2  62.4    58   334 4.20 4.23 2.63
5  0.31    Good     J     SI2  63.3    58   335 4.34 4.35 2.75

#选择中的!("非")
> filter(df, !color %in% c("E","J")) [1:3,]
  carat       cut color clarity depth table price    x    y    z
1  0.29   Premium     I     VS2  62.4    58   334 4.20 4.23 2.63
2  0.24 Very Good     I    VVS1  62.3    57   336 3.95 3.98 2.47
3  0.26 Very Good     H     SI1  61.9    55   337 4.07 4.11 2.53



#包含条件：grepl()用于搜索模式匹配。
#查找clarity列中包含“SI”的行
filter(df, grepl("SI", clarity))[1:6,]
  carat       cut color clarity depth table price    x    y    z
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
3  0.31      Good     J     SI2  63.3    58   335 4.34 4.35 2.75
4  0.26 Very Good     H     SI1  61.9    55   337 4.07 4.11 2.53
5  0.30      Good     J     SI1  64.0    55   339 4.25 4.28 2.73
6  0.22   Premium     F     SI1  60.4    61   342 3.88 3.84 2.33

# 反向选择，clarity中不含SI的行
filter(df, !grepl("SI", clarity))[1:6,]





========================================
|-- arrange排序
----------------------------------------
arrange()按给定的列名依次对行进行排序，类似于base::order()函数。
默认是按照升序排序，对列名加 desc() 可实现倒序排序。
原数据集行名称会被过滤掉。


arrange(df, x,y,z)[1:3,]
  carat       cut color clarity depth table price x y z
1  1.00 Very Good     H     VS2  63.3    53  5139 0 0 0
2  1.14      Fair     G     VS1  57.5    67  6381 0 0 0
3  1.56     Ideal     G     VS2  62.2    54 12800 0 0 0

#如果降序排列，则使用desc(colnameX)
arrange(df, desc(x),y,z)[1:3,]
  carat     cut color clarity depth table price     x     y    z
1  5.01    Fair     J      I1  65.5    59 18018 10.74 10.54 6.98
2  4.50    Fair     J      I1  65.8    58 18531 10.23 10.16 6.72
3  4.01 Premium     I      I1  61.0    61 15223 10.14 10.10 6.17




========================================
|-- mutate创建新变量、rowwise()函数、计算变量的排名
----------------------------------------
mutate()和transmute()函数对已有列进行数据运算并添加为新列，类似于base::transform() 函数, 不同的是可以在同一语句中对刚增添加的列进行操作。mutate()返回的结果集会保留原有变量，transmute()只返回扩展的新变量。原数据集行名称会被过滤掉。


1. 创建新变量

(1) 使用x/y命名为长宽比ratio
mutate(df, ratio=x/y)[1:2,]

#创建总金额列，等于克拉乘以单价
mutate(df, total=carat*price)[1:3,]
  carat     cut color clarity depth table price    x    y    z total
1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43 74.98
2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31 68.46
3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31 75.21


(2) 所有变量乘以1000，命名为后缀_new
mutate_all(df, funs("new" = .* 1000))[1:3,]  //todo 这个结构很怪异


(3) mutate() 与基础函数 transform() 相似，但是允许你引用刚刚创建的列。

> df %>% select( x) %>% mutate( mean=mean(x), sd=sd(x), CV=sd/mean, noise=CV^2) %>% head(., 2)
     x     mean       sd        CV      noise
1 3.95 5.731157 1.121761 0.1957302 0.03831032
2 3.89 5.731157 1.121761 0.1957302 0.03831032

这个结果异常：每列的计算值都一样！
查资料发现是对所有的列求的统计量。



(4) 使用 rowwise 函数，按行计算
https://dplyr.tidyverse.org/articles/rowwise.html

i) 异常结果：按列计算所有的值的平均数
df %>% 
  mutate(total= mean( c(x,y,z) ) ) %>% head 
输出: 
  carat       cut color clarity depth table price    x    y    z    total
1  0.23     Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43 5.001472
2  0.21   Premium     E     SI1  59.8    61   326 3.89 3.84 2.31 5.001472

计算方式
> sum(df$x+df$y+df$z)/3/nrow(df)
[1] 5.001472



ii) 加上 rowwise 后，以每一行为单位计算
df %>% rowwise %>%
  mutate(total= mean( c(x,y,z) ) ) %>% head
输出: 
  carat cut       color clarity depth table price     x     y     z total
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl>
1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43  3.45
2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31  3.35

> sum(3.95,  3.98,  2.43)/3
[1] 3.453333





(5) 如果你仅仅只想保留新的变量，使用transmute()

自己写公式就正常
> transmute(df, total=(x+y+z)/3, volume=x*y*z)[1:2,]
     total   volume
1 3.453333 38.20203
2 3.346667 34.50586

为什么变成函数就不对了呢？
> transmute(df, total= mean( c(x,y,z) ), volume=x*y*z)[1:2,]
     total   volume
1 5.001472 38.20203
2 5.001472 34.50586








2.计算变量的排名

#变量的排序， min_rank()给最小的值编号1，最大的值编号最大。
> mutate_at(df, vars(x:z), funs(Rank=min_rank(.)))[1:3,]
  carat     cut color clarity depth table price    x    y    z x_Rank y_Rank z_Rank
1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43    232    236    193
2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31     56     25     33
3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31    665    633     33



#如果想把最大的值编号1，使用 min_rank(desc(.))
x2 = df %>% group_by(color) %>% 
	filter(min_rank(desc(price))==1) %>%
	select(color, price)
x2
# A tibble: 8 x 2
# Groups:   color [7]
  color price
  <ord> <int>
1 D     18693
2 J     18710
3 J     18710 #这有一个重复的，可以使用distinct()放到最后过滤掉。
4 E     18731
5 F     18791
6 H     18803
7 G     18818
8 I     18823


#最大值有两个的结果是，两个第一，没有第二，然后是第三。
df %>% group_by(color) %>% 
  filter(min_rank(desc(price))==2) %>%
  select(color, price)
# A tibble: 6 x 2
# Groups:   color [6]
  color price
  <ord> <int>
1 D     18674
2 E     18729
3 F     18784
4 H     18795
5 I     18797
6 G     18806



df %>% select(color, price) %>% distinct() %>%
  group_by(color) %>% 
  filter(min_rank(desc(price))==1)
# A tibble: 7 x 2
# Groups:   color [7]
color price
<ord> <int>
  1 D     18693
2 J     18710
3 E     18731
4 F     18791
5 H     18803
6 G     18818
7 I     18823



# 使用累加cumsum函数创建新变量
The cumsum function calculates cumulative sum of a variable. With mutate function, we insert a new variable called 'Total' which contains values of cumulative income of variable Index.
df %>% group_by(Index) %>% mutate(Total=cumsum(Y2015)) %>% select(Index, Y2015, Total)
这个例子没有模拟好，凑合看吧。
> df %>% group_by(color) %>% mutate(Total=cumsum(carat*price)) %>% select(color, carat,price, Total)





========================================
|-- summarise系列函数进行汇总/总结、rowwise()
----------------------------------------
1.
#总结选定的变量
> summarize(df, carat_mean=mean(carat), price_mean=mean(price))
  carat_mean price_mean
1  0.7979397     3932.8

#总结多个变量
#计算变量x和y的数量、平均值和中位数。summarise_at函数允许我们通过名称选择多个变量。
> summarise_at(df, vars(x,y), funs(n(), mean, median))
    x_n   y_n   x_mean   y_mean x_median y_median
1 53940 53940 5.731157 5.734526      5.7     5.71

#使用自定义函数汇总
#点(.)表示函数的第二个参数中指定的每个变量。
summarise_at(df, vars(x,y), funs(n(), missing=sum(is.na(.)), mean(., na.rm=T), median(.,na.rm=T)))
    x_n   y_n x_missing y_missing   x_mean   y_mean x_median y_median
1 53940 53940         0         0 5.731157 5.734526      5.7     5.71


自定义组合函数 noise=CV^2
df %>% group_by(cut) %>% summarise_at(
  vars(x,y),
  funs(n(), 
       missing=sum(is.na(.)), 
       mean(., na.rm=T), 
       sd(., na.rm=T),
       noise=(sd(.,na.rm=T)/mean(., na.rm=T))**2
  ))
输出
# A tibble: 5 x 11
  cut         x_n   y_n x_missing y_missing x_mean y_mean  x_sd  y_sd x_noise y_noise
* <ord>     <int> <int>     <int>     <int>  <dbl>  <dbl> <dbl> <dbl>   <dbl>   <dbl>
1 Fair       1610  1610         0         0   6.25   6.18 0.964 0.956  0.0238  0.0239
2 Good       4906  4906         0         0   5.84   5.85 1.06  1.05   0.0328  0.0323
3 Very Good 12082 12082         0         0   5.74   5.77 1.10  1.10   0.0368  0.0365
4 Premium   13791 13791         0         0   5.97   5.94 1.19  1.26   0.0396  0.0449
5 Ideal     21551 21551         0         0   5.51   5.52 1.06  1.07   0.0373  0.0379




#汇总所有的数字变量
# summarise_if函数允许您有条件地总结
summarise_if(df, is.numeric, funs(n(),mean,median))
或者
df_num <- df[sapply(df,is.numeric)]
summarise_all(df_num, funs(n(),mean,median))
计算CV
summarise_all(df_num, funs(n(),mean,sd, CV=mean(.)/sd(.)))




#汇总因子变量
#检查分类（因子）变量中的级别/类别数量和缺失观察数量。
summarize_all(df['color'], funs(nlevels(.), nmiss=sum(is.na(.))))
  nlevels nmiss
1       7     0











2. 使用 rowwise() 函数
(1) 直接汇总，只有一个结果
df %>%  
  summarise(m = mean(c(x, y, z))) %>% head
输出：仅1行
         m
1 5.001472


(2) 使用 rowwise() 函数后以行为单位汇总输出
df %>% 
  rowwise() %>% 
  summarise(m = mean(c(x, y, z)))

输出: 
      m
  <dbl>
1  3.45
2  3.35
3  3.48








========================================
|-- group_by()、do()与管道操作 %>% : 不用保存中间变量，让代码更优雅
----------------------------------------
#常规多步骤写法，会有很多括号，很麻烦
dt = sample_n(select(mydata, Index, State),10)
#or 使用管道
dt = mydata %>% select(Index, State) %>% sample_n(10)


group_by()和 rowwise() 都是没啥直接效果，但是会影响其他变量的行为。




#按照color统计carat和price
> df %>% group_by("color") %>% summarise_at(vars(carat, price), funs(n(), mean(., na.rm=T))) #group_by后的变量不要加引号
# A tibble: 1 x 5
  `"color"` carat_n price_n carat_mean price_mean
  <chr>       <int>   <int>      <dbl>      <dbl>
1 color       53940   53940      0.798      3933.
#正确语句
> df %>% group_by(color) %>% summarise_at(vars(carat, price), funs(n(), mean(., na.rm=T)))
# A tibble: 7 x 5
  color carat_n price_n carat_mean price_mean
  <ord>   <int>   <int>      <dbl>      <dbl>
1 D        6775    6775      0.658      3170.
2 E        9797    9797      0.658      3077.
3 F        9542    9542      0.737      3725.
4 G       11292   11292      0.771      3999.
5 H        8304    8304      0.912      4487.
6 I        5422    5422      1.03       5092.
7 J        2808    2808      1.16       5324.





### do() function :
Use : Compute within groups
语法： do(data_frame, expressions_to_apply_to_each_group)

# 从"D", "E", "F"类别的变量索引中抽取前两行
#不用do()则获取的是全局的前两个
df %>% filter(color %in% c("D", "E", "F")) %>% group_by(color) %>%  head(., 2)
# A tibble: 2 x 10
# Groups:   color [1]
  carat cut     color clarity depth table price     x     y     z
  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31

#正确写法
x2 = df %>% filter(color %in% c("D", "E", "F")) %>% group_by(color) %>%  do(head(., 2))
x2
# A tibble: 6 x 10
# Groups:   color [3]
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  0.23 Very Good D     VS2      60.5    61   357  3.96  3.97  2.4 
2  0.23 Very Good D     VS1      61.9    58   402  3.92  3.96  2.44
3  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
4  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
5  0.22 Premium   F     SI1      60.4    61   342  3.88  3.84  2.33
6  0.23 Very Good F     VS1      60.9    57   357  3.96  3.99  2.42


#如果需要排序后取出前n个，则可以使用top_n()函数
df %>% filter(color %in% c("D", "E", "F")) %>% group_by(color) %>%  top_n(2, price)
# A tibble: 6 x 10
# Groups:   color [3]
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  2.01 Ideal     D     SI2      62.1    56 18674  8.02  8.11  5.01
2  2.19 Ideal     D     SI2      61.8    57 18693  8.23  8.49  5.17
3  1.51 Ideal     E     VS1      61.5    57 18729  7.34  7.4   4.53
4  2.02 Very Good E     SI1      59.8    59 18731  8.11  8.2   4.88
5  2.05 Premium   F     SI2      60.2    59 18784  8.28  8.33  5   
6  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 

常用的实例 
gene.df=br.markers %>% group_by(cluster) %>% top_n(5, avg_logFC)
gene.df=br.markers %>% group_by(cluster) %>% top_n(100, avg_logFC) %>% filter(p_val_adj<0.05)







========================================
|-- slice() 通过行号选取数据。分组后则选择每组的第n行
----------------------------------------
slice() lets you index rows by their (integer) locations. It allows you to select, remove, and duplicate rows. It is accompanied by a number of helpers for common use cases:

	* slice_head() and slice_tail() select the first or last rows.
	* slice_sample() randomly selects rows.
	* slice_min() and slice_max() select rows with highest or lowest values of a variable.

If .data is a grouped_df, the operation will be performed on each group, so that (e.g.) slice_head(df, n = 5) will select the first five rows in each group.


1. 按行号选取
#选取第一行数据  
slice(mtcars, 1L)  
filter(mtcars, row_number() == 1L)  

#选取最后一行数据  
slice(mtcars, n())  
filter(mtcars, row_number() == n())  

#选取第25行到最后一行所有数据  
slice(mtcars, 25:n())
filter(mtcars, between(row_number(), 25, n()))






2. 和 group 结合，选择每个分组内的第n行

(1).通过分类变量选择第三最大值: 计算变量color每一类中的第三个最大值。
x3 <- df %>% 
  select(color, carat) %>% #选择2列
  filter(color %in% c("D", "E","F")) %>% #过滤出某些行
  group_by(color) %>% #按照color分组
  do(arrange(.,desc(carat))) %>%  #组内降序排序
  slice(3) #选择每个组内的第三行
x3
# A tibble: 3 x 2
# Groups:   color [3]
  color carat
  <ord> <dbl>
1 D      2.58
2 E      2.71
3 F      2.58
#可简化
x3 <- df %>% 
  select(color, carat) %>% #选择2列
  filter(color %in% c("D", "E","F")) %>% #过滤出某些行
  group_by(color) %>% #按照color分组
  arrange(desc(carat)) %>%  #组内降序排序
  slice(3) #选择每个组内的第三行
x3 #结果完全一样



像SQL一样，dplyr使用窗口函数来将数据分组。 它返回值的向量。 

我们可以使用min_rank（）函数来计算上例中的rank。

x4 <- df %>% select(color, carat) %>%
  filter(color %in% c("D", "E","F")) %>%
  group_by(color) %>%
  filter(min_rank(desc(carat)) == 3)
x4
# A tibble: 3 x 2
# Groups:   color [3]
  color carat
  <ord> <dbl>
1 F      2.58
2 D      2.58
3 E      2.71








3.总结、分组和排序

#通过color分组计算x、y、z的均值，然后按照x的均值对结果降序排序。

x5=df %>% group_by(color) %>%
	summarize(x_mean=mean(x, na.rm=T), y_mean=mean(y, na.rm=T), z_mean=mean(z,na.rm=T)) %>%
	arrange(desc(x_mean))
x5
# A tibble: 7 x 4
  color x_mean y_mean z_mean
  <ord>  <dbl>  <dbl>  <dbl>
1 J       6.52   6.52   4.03
2 I       6.22   6.22   3.85
3 H       5.98   5.98   3.70
4 G       5.68   5.68   3.51
5 F       5.61   5.62   3.46
6 D       5.42   5.42   3.34
7 E       5.41   5.42   3.34








========================================
|-- _at()和_if()变体，及其帮助文件 ?scoped
----------------------------------------
在dplyr中，变体后缀_at()在他们的第二个参数中支持select语义。你只需要用vars() 包裹这个选择

已经作废了，推荐使用 across()
Scoped verbs (_if, _at, _all) have been superseded by the use of across() in an existing verb. See vignette("colwise") for details.

supersede [ˌsuːpəˈsiːd; ˌsjuːpəˈsiːd] vt. 取代，代替；紧接着……而到来









========================================
|-- 综合实例
----------------------------------------
以上是常用部分，实际使用时还会遇到很多不常用的。临时查文档就好了。


1. 根据无先后顺序的2列去重

df %>% rowwise() %>%  # 下文解释
  mutate(class = paste0(sort(c(color, cut)), collapse = '|')) %>%  #新增列class
  group_by(class) %>%  #分组
  slice_sample() %>% #下文解释
  select(-class)

(1)
Like group_by(), rowwise() doesn’t really do anything itself; it just changes how the other verbs work.






========================================
2 tidyr简介
----------------------------------------
1. 宽型数据，非常适合人类查看和理解。但是在数据分析中，计算机喜欢读取长型的数据。

tidyr是Hadley Wickham创建用于数据整理的包。
它通常与dplyr包结合使用，可以看作是reshape2包的进化版本

The two most important properties of tidy data are:
Each column is a variable. 
Each row is an observation.




2. tidyr包中主要涉及：
1）缺失值的简单补齐
2）长形表变宽形表与宽形表变长形表
3）列分割与列合并



3. tidyr常用函数有四个，分别是：
gather()：宽数据转换为长数据，将多列聚集成一列
spread()：长数据转换为宽数据，将一列展开为多列
unite()：多列合并为一列
separate()：将一列分离为多列.


pivot_longer/pivot_wider
这两个函数也来自tidyr包，工具包的作者可能希望采用更规整的函数命名方式来代替gather和spread。
但个人认为它们的参数不如后者直观。



melt和cast函数来自reshape工具包（或它的升级版reshape2），该包和tidyr工具包出自同一作者，这两个函数也早于spread和 gather而出现。

spread和 gather函数作为后来者，本身就是melt和cast函数的重塑，使用起来更方便，但也省略了部分功能。


在这三对函数中，gather和spread函数目前还是首选，但未来可能会被pivot_longer和pivot_wider函数取代；在涉及分类汇总时，可以考虑使用cast函数。





4. 测试数据：基因表达矩阵
gdf=data.frame(
  geneID=c("gene1","gene2","gene3","gene4"),
  sample1=c(1,4,7,10),
  sample2=c(20,5,0,2),
  sample3=c(0.3,6,9,0.5)
  #row.names=1
)
gdf
#  geneID sample1 sample2 sample3
#1  gene1       1      20     0.3
#2  gene2       4       5     6.0
#3  gene3       7       0     9.0
#4  gene4      10       2     0.5



========================================
|-- gather() 宽变长
----------------------------------------
1. 函数的参数
> gather(data=data_width,key="key",value="value",...,
	na.rm=FALSE,convert=FALSE,factor_key=FALSE)

data_width：需要被转换的宽形表
key：创建一个新的列名，将原数据框中的所有列赋给一个新变量key
value：创建一个新的列名，将原数据框中的所有值赋给一个新变量value
...：可以指定哪些列聚到一列中
na.rm：是否删除缺失值
convert：逻辑值，在key列是否进行数据类型转换
factor_key:逻辑值，若是F，则key自动转换为字符串，反之则是因子（原始lever水平保持不变）


其中 key 指的是 type，value 只的是测量值 measure。




2. 实例

(1) 宽变长
library("tidyr")
gather(gdf, 'sample1','sample2','sample3', key='sample',value='exp')
gather(gdf, key='sample',value='exp',-"geneID")

其他形式：
gdf %>% gather(key="sampleNO", value="values","sample1",'sample2','sample3')
#等价
x2=gdf %>% gather(key="sampleNO", value="values",-"geneID")
head(x2)
#  geneID sampleNO values
#1  gene1  sample1      1
#2  gene2  sample1      4
#3  gene3  sample1      7
#4  gene4  sample1     10
#5  gene1  sample2     20
#6  gene2  sample2      5




(2) 默认将所有列存放到key中
df_wide_gather <- gather(data = df_wide, key = variable, value = value)
df_wide_gather

#指定需要被聚为一列的字段
df_wide_gather2 <- gather(data = df_wide, key = variable, value = value, gender, province)
df_wide_gather2



实例1:
> df_wide=diamonds[1:3, c("x","y","z")]
> df_wide
# A tibble: 3 x 3
      x     y     z
  <dbl> <dbl> <dbl>
1  3.95  3.98  2.43
2  3.89  3.84  2.31
3  4.05  4.07  2.31

> gather(data = df_wide, key = paras, value = inches)
# A tibble: 9 x 2
  paras inches
  <chr>  <dbl>
1 x       3.95
2 x       3.89
3 x       4.05
4 y       3.98
5 y       3.84
6 y       4.07
7 z       2.43
8 z       2.31
9 z       2.31


实例2: 有更多列时，减去多余的列
> df_wide=diamonds[1:3, c("cut", "color","x","y","z")]
> df_wide
# A tibble: 3 x 5
  cut     color     x     y     z
  <ord>   <ord> <dbl> <dbl> <dbl>
1 Ideal   E      3.95  3.98  2.43
2 Premium E      3.89  3.84  2.31
3 Good    E      4.05  4.07  2.31
> gather(data = df_wide, key = paras, value = inches, -c(cut, color))
# A tibble: 9 x 4
  cut     color paras inches
  <ord>   <ord> <chr>  <dbl>
1 Ideal   E     x       3.95
2 Premium E     x       3.89
3 Good    E     x       4.05
4 Ideal   E     y       3.98
5 Premium E     y       3.84
6 Good    E     y       4.07
7 Ideal   E     z       2.43
8 Premium E     z       2.31
9 Good    E     z       2.31


实例3：有更多列时，指定需要合并到一列的列
> gather(data = df_wide, key = variable, value = value, x, y, z)
# A tibble: 9 x 4
  cut     color variable value
  <ord>   <ord> <chr>    <dbl>
1 Ideal   E     x         3.95
2 Premium E     x         3.89
3 Good    E     x         4.05
4 Ideal   E     y         3.98
5 Premium E     y         3.84
6 Good    E     y         4.07
7 Ideal   E     z         2.43
8 Premium E     z         2.31
9 Good    E     z         2.31


实例4：没有指定的就照常显示
> gather(data = df_wide, key = variable, value = value, x, y)
# A tibble: 6 x 5
  cut     color     z variable value
  <ord>   <ord> <dbl> <chr>    <dbl>
1 Ideal   E      2.43 x         3.95
2 Premium E      2.31 x         3.89
3 Good    E      2.31 x         4.05
4 Ideal   E      2.43 y         3.98
5 Premium E      2.31 y         3.84
6 Good    E      2.31 y         4.07







========================================
|-- spread() 长变宽
----------------------------------------
1. spread() 函数实现长表转宽表，语法如下：
spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE)

data：为需要转换的长形表
key：需要将变量值拓展为字段的变量
value：需要分散的值
fill：对于缺失值，可将fill的值赋值给被转型后的缺失值


head(x2)
spread(x2,key="sampleNO",value="values") #回到解放前矩阵状态
#  geneID sample1 sample2 sample3
#1  gene1       1      20     0.3
#2  gene2       4       5     6.0
#3  gene3       7       0     9.0
#4  gene4      10       2     0.5



2. 被转型后的数据框中存在缺失值，如果想给缺失值传递一个指定值的话，就需要fill参数的作用。

> dim(x2)
[1] 12  3

默认填充缺失值是NA
> spread(x2[1:11,],key="sampleNO",value="values")
  geneID sample1 sample2 sample3
1  gene1       1      20     0.3
2  gene2       4       5     6.0
3  gene3       7       0     9.0
4  gene4      10       2      NA


填充缺失值为0.
> spread(x2[1:11,],key="sampleNO",value="values", fill=0)
  geneID sample1 sample2 sample3
1  gene1       1      20     0.3
2  gene2       4       5     6.0
3  gene3       7       0     9.0
4  gene4      10       2     0.0








========================================
|-- 列分割: separate() 将数据分为多个列
----------------------------------------
1.separate()函数可将一列拆分为多列，一般可用于日志数据或日期时间型数据的拆分，语法如下：

separate(data, col, into, sep = "[^[:alnum:]]+", remove = TRUE,
  convert = FALSE, extra = "warn", fill = "warn", ...)

data：为数据框
col：需要被拆分的列
into：新建的列名，为字符串向量
sep：被拆分列的分隔符
remove：是否删除被分割的列


> df <- data.frame(id = c(1,2), 
   datetime = c(as.POSIXlt('2015-12-31 13:23:44'), 
                as.POSIXlt('2016-01-28 21:14:12'))
 )
> df
  id            datetime
1  1 2015-12-31 13:23:44
2  2 2016-01-28 21:14:12



(1)下面使用separate()函数将日期时间值分割为年、月、日、时、分、秒

#将日期时间数据切割为日期和时间两列
separate1 <- df %>% 
	separate(., col = datetime, 
		into = c('date', 'time'), 
		sep = ' ', 
		remove = FALSE)
separate1
输出： 
  id            datetime       date     time
1  1 2015-12-31 13:23:44 2015-12-31 13:23:44
2  2 2016-01-28 21:14:12 2016-01-28 21:14:12




(2)将日期切割为年月日
separate2 <- separate1 %>% 
	separate(., col = date, 
		into = c('year', 'month', 'day'), 
		sep = '-', remove = FALSE)
separate2
输出：
  id            datetime       date year month day     time
1  1 2015-12-31 13:23:44 2015-12-31 2015    12  31 13:23:44
2  2 2016-01-28 21:14:12 2016-01-28 2016    01  28 21:14:12




(3)将时间切割为时分秒
separate3 <- separate2 %>% 
	separate(., col = time, 
		into = c('hour', 'minute', 'second'), 
		sep = ':', remove = FALSE)
separate3
输出：
  id            datetime       date year month day     time hour minute second
1  1 2015-12-31 13:23:44 2015-12-31 2015    12  31 13:23:44   13     23     44
2  2 2016-01-28 21:14:12 2016-01-28 2016    01  28 21:14:12   21     14     12








========================================
|-- separate_rows() 将数据分为多个行
----------------------------------------
separate_rows(data, ..., sep)

data 原始数据
... 待分数据所在的列(字段、变量)
sep 分割数据时使用的分割符


实例:
d1=tibble(
  TF=c("A1","B1","C1"),
  genes=c("A,B|Z", "X|Y", "B|C|D|E|F")
)
d1
输出
# A tibble: 3 x 2
  TF    genes    
  <chr> <chr>    
1 A1    A,B|Z    
2 B1    X|Y      
3 C1    B|C|D|E|F

将genes列展开
separate_rows(d1)
separate_rows(d1,genes)
separate_rows(d1, genes, sep="\\|")
输出：
# A tibble: 9 x 2
  TF    genes
  <chr> <chr>
1 A1    A,B  
2 A1    Z    
3 B1    X    
4 B1    Y    
5 C1    B    
6 C1    C    
7 C1    D    
8 C1    E    
9 C1    F 






========================================
|-- unite()函数 列合并
----------------------------------------
1. unite()函数与separate()函数相反，可将多列合并为一列，语法如下：

unite(data, col, ..., sep = "_", remove = TRUE)

data：为数据框
col：被组合的新列名称
...：指定哪些列需要被组合
sep：组合列之间的连接符，默认为下划线
remove：是否删除被组合的列



举例说明：
#删除原来的日期时间列、日期列和时间列
> separate4 <- separate3[, -c(2,3,7)]
> separate4
  id year month day hour minute second
1  1 2015    12  31   13     23     44
2  2 2016    01  28   21     14     12


#将年月日合并为新字段日期
> unite1 <- unite(data = separate4, 'date', sep = '-', year, month, day)
> unite1
  id       date hour minute second
1  1 2015-12-31   13     23     44
2  2 2016-01-28   21     14     12


#将时分秒合并为新字段时间
> unite2 <- unite1 %>% unite(., col = 'time', sep = ':', hour, minute, second)
> unite2
  id       date     time
1  1 2015-12-31 13:23:44
2  2 2016-01-28 21:14:12






========================================
|-- 处理缺失值
----------------------------------------
drop_na(data, ...)
fill(data, ..., direction=c("down", "up"))
replace_na(data, replace=list(), ...)

1. drop_na()
tidyr::drop_na(data, ...)  剔除掉数据中的缺失值

例子:
x <- tibble(x1=c("A", "B", "C", "D", "E"),
            x2=c(1, NA, NA, 3, NA))
x
输出：
# A tibble: 5 x 2
  x1       x2
  <chr> <dbl>
1 A         1
2 B        NA
3 C        NA
4 D         3
5 E        NA

> drop_na(x, x2) #去掉x2列是na的行
# A tibble: 2 x 2
  x1       x2
  <chr> <dbl>
1 A         1
2 D         3




2. fill()
tidyr::fill(data, ..., direction=c("down", "up")) 
fill(data, ..., .direction = c("down", "up", "downup", "updown"))
将数据中的缺失值进行填充(填充的值是缺失值附近的数值)

> fill(x, x2) #填充附近的值
# A tibble: 5 x 2
  x1       x2
  <chr> <dbl>
1 A         1
2 B         1
3 C         1
4 D         3
5 E         3

> fill(x, x2, .direction = "updown")
# A tibble: 5 x 2
  x1       x2
  <chr> <dbl>
1 A         1
2 B         3
3 C         3
4 D         3
5 E         3






3.replace_na() 把na填充为默认值
tidyr::replace_na(data, replace=list(), ...) 将数据中的缺失值替换为别的值

> replace_na(x, list(x2=2))
# A tibble: 5 x 2
  x1       x2
  <chr> <dbl>
1 A         1
2 B         2
3 C         2
4 D         3
5 E         2








========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

