ggplot2




http://sape.inf.usi.ch/quick-reference/ggplot2
https://blog.csdn.net/u014801157/article/category/2215813
http://agetouch.blog.163.com/blog/static/228535090201443183139251/


完整示例代码可以查看
https://github.com/DawnEve/bioToolKit/blob/master/R_scripts/ggplot2_dplyr/000-ggplot2-book1.R


========================================
ggplot2 概述与学习资源
----------------------------------------
1. 设计理念

ggplot2是用于绘图的R语言扩展包，其理念根植于《Grammar of Graphics》一书。它将绘图视为一种映射，即从数学空间映射到图形元素空间。例如将不同的数值映射到不同的色彩或透明度。该绘图包的特点在于并不去定义具体的图形（如直方图，散点图），而是定义各种底层组件（如线条、方块）来合成复杂的图形，这使它能以非常简洁的函数构建各类图形，而且默认条件下的绘图品质就能达到出版要求。

ggplot2 是一个增强的数据可视化R包，帮助我们轻松创建令人惊叹的多层图形。它的设计理念类似于PhotoShop,具体参数包含设计对象、艺术渲染、统计量、尺寸调整、坐标系统、分片显示、位置调整、动画效果等等。




2. ggplot2权威资料
ggplot2代码在github上
https://github.com/hadley
https://github.com/tidyverse/ggplot2

速查表： https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
官方教程： https://ggplot2.tidyverse.org/reference/index.html

经典入门书《ggplot2：数据分析与图形艺术》
pdf下载：http://ishare.iask.sina.com.cn/f/68933673.html

实战可以参考R Graphics Cookbook一书： http://www.cookbook-r.com/Graphs/
全本: https://github.com/harryprince/R-Tutor/raw/master/R%E4%B9%A6/R%20Graphics%20Cookbook%20.pdf

《R for Data Science》书：https://r4ds.had.co.nz/data-visualisation.html

图形库：https://www.r-graph-gallery.com/portfolio/ggplot2-package/






3. ggplot2 书中缺少的资源

(1). movies 数据集(P129) 
gplot2movies: Movies Data
A dataset about movies. This was previously contained in ggplot2, but has been moved its own package to reduce the download size of ggplot2.
https://cran.r-project.org/web/packages/ggplot2movies/index.html
原本包含在ggplot2中的数据集，为了减少ggplot2的体积，现在该数据集已去掉。
> install.packages("ggplot2movies")



############
refer博客等:
1.Hadley Wickham2016年写的一篇广告：http://blog.rstudio.com/2016/11/14/ggplot2-2-2-0/
2.【推荐】中文详细教程 https://www.cnblogs.com/nxld/p/6059603.html

3. 实例附代码 Top 50 ggplot2 Visualizations - The Master List (With Full R Code)
http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
4. 实例附代码 Beautiful plotting in R: A ggplot2 cheatsheet
http://zevross.com/blog/2014/08/04/beautiful-plotting-in-r-a-ggplot2-cheatsheet-3/

5. Be Awesome in ggplot2: A Practical Guide to be Highly Effective - R software and data visualization
http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization


7.如何用ggplot2画经济学人上的插图
http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html#orgheadline17





========================================
ggplot2作图详解1：入门函数qplot
----------------------------------------
安装
install.packages("ggplot2") #3.1.0

1. 我们常用的是qplot()和ggplot()函数作图。
qplot 即“快速作图”（quick plot），类似原生的plot(), 用于入门和日常作图。稍微更细微的作图，还是要依靠ggplot()函数。

用法
qplot(x, y, ..., data, facets = NULL, margins = FALSE, geom = "auto",
  xlim = c(NA, NA), ylim = c(NA, NA), log = "", main = NULL,
  xlab = NULL, ylab = NULL, asp = NA, stat = NULL,
  position = NULL)

参数列表：
- x和y就是为坐标提供数据，必须是data中的列名。
- facets 分面。就是把数据按照某个变量分类，每类画一个图。
- margins 是否显示边界
- geom:  图形的几何类型（geometry），这又是ggplot2的作图概念。ggplot2用几何类型表示图形类别，比如point表示散点图、line表示曲线图、bar表示柱形图等。
- stat: 统计类型（statistics），这个更加特殊。直接将数据统计和图形结合，这是ggplot2强大和受欢迎的原因之一。
- position: 图形或者数据的位置调整，这不算太特殊，但对于图形但外观很重要
- xlim, ylim, xlab, ylab, asp： 初步可以按照plot函数的相应参数来理解





2. data参数
(1)不指定图形类型，默认是散点图
library(ggplot2)
x <- 1:1000
y <- rnorm(1000)
plot(x, y, main="Scatter plot by plot()")
qplot(x,y, main="Scatter plot by qplot()")

(2) 使用数据框输入
# 检查数据结构
str(diamonds)
#抽取子集
set.seed(1000) # 设置随机种子，使随机取样具有可重复性
datax<- diamonds[sample(53940, 100), seq(1,7)] #随机取100行，取前7列
head(datax, 4)
# # A tibble: 4 x 7
#   carat cut   color clarity depth table price
#   <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int>
# 1  1.23 Ideal H     VS2      62.2    55  7130
# 2  0.3  Ideal E     SI1      61.7    58   499
# 3  0.9  Good  H     VS2      61.9    58  3989
# 4  0.31 Ideal G     VVS1     62.8    57   977



1)如果要做钻石克拉和价格关系的曲线图，用plot和qplot函数都差不多：
plot(x=datax$carat, y=datax$price, xlab="Carat", ylab="Price", main="plot function")
qplot(x=carat, y=price, data=datax, xlab="Carat", ylab="Price", main="qplot function")



2)但如果要按切工进行分类作图，plot函数的处理就复杂了，你首先得将数据进行分类提取，然后再一个个作图。虽然可以用循环完成，但作图后图标的添加还得非常小心，你得自己保证数据和图形外观之间的对应关系：
plot(x=datax$carat, y=datax$price, xlab="Carat", ylab="Price", main="plot function", type='n')
cut.levels <- levels(datax$cut)
cut.n <- length(cut.levels)
for(i in seq(1,cut.n)){
  subdatax <- datax[datax$cut==cut.levels[i], ]
  points(x=subdatax$carat, y=subdatax$price, col=i, pch=i)
}
legend("topleft", legend=cut.levels, col=seq(1,cut.n), pch=seq(1,cut.n), box.col="transparent", cex=0.8)


但用ggplot2作图你需要考虑数据分类和图形元素方面的问题就很少，你只要告诉它用做分类的数据就可以了：
qplot(x=carat, y=price, data=datax, color=cut, shape=cut, main="qplot function")

如果不喜欢它默认的图形背景，要改变也相当简单，ggplot2预置了几个模板，这些内容我们在后面再详细说：
theme_set(theme_bw())
qplot(x=carat, y=price, data=datax, color=cut, shape=cut, main="qplot function")


3)数据框可以存储不同的数据，而这些数据是有类型差别的。ggplot2作图对各类数据的要求也非常严格，用于分类的数据必需是因子类型，否则就会报错：
qplot(x=carat, y=price, data=datax, shape=depth)
## Error: A continuous variable can not be mapped to shape





3. geom参数，做不同的曲线图

(1)和plot函数一样，qplot也可以通过设置合适的参数产生曲线图，这个参数就是geom（几何类型）。图形的组合非常直接，组合表示几何类型的向量即可：
qplot(x=carat, y=price, data=datax, color=cut, geom="line", main="geom=\"line\"")
qplot(x=carat, y=price, data=datax, color=cut, geom=c("line", "point"), main="geom=c(\"line\", \"point\")")


(2) qplot做统计图
qplot是名副其实的qplot（quick plot）函数，通过改变几何类型geom参数的值你可以获得各种图形。geom参数可以设置的值和意义是：

point：散点图
line：曲线图
smooth：平滑曲线
jitter：另一种散点图
boxplot：箱线图
histogram：直方图
density：密度分布图
bar：柱状图

前两种我们看过了，bar类型下面另讲，jitter以后有机会再说，看看其他4种类型：

qplot(carat, price, data = diamonds, color=cut, geom = "smooth", main = "smooth") #曲线和上下可信区间
qplot(cut, price, data = diamonds, fill=cut, geom = "boxplot", main = "boxplot") #箱线图
qplot(price, data = diamonds, fill=cut, geom = "histogram", main = "histogram") #柱状图
qplot(price, data = diamonds, color=cut, geom = "density", main = "density") #概率密度图

虽然可以合并多个图，但是也要考虑合理性。比如把散点图和密度分布图融合，就直接报错：
qplot(price, data = diamonds, color=cut, geom = c("point", "density"))
## Error: geom_point requires the following missing aesthetics: y




(3) qplot做柱形图
ggplot2对柱形图的处理体现了这一思想：柱形图是一种特殊的直方图。所以ggplot2可以直接用原始数据做出柱形图。

按钻石切工对价格求平均值后做柱形图：
qplot(x=cut, y=price, data = diamonds, 
	fill=cut, geom = "histogram", 
	stat="summary", fun.y="mean")
# 报错 //todo

可以先计算出平均值再柱形图也没什么问题。引物bar图形的本质是统计图形，所以得设置stat参数为identity，即不做统计：
(mean.price <- with(diamonds, aggregate(price~cut, FUN=mean)))
##         cut price
## 1      Fair  4359
## 2      Good  3929
## 3 Very Good  3982
## 4   Premium  4584
## 5     Ideal  3458
qplot(x=cut, y=price, data=mean.price, fill=cut, geom="bar", stat="identity") #还是报错
ggplot(mean.price, aes( cut,price, fill=cut)) + geom_histogram(stat="identity")



ggplot2作图是基于图层的，从上面qplot函数的使用例子中显然看不出来，除此外还有很多深层次的概念、理论和函数。


refer:
https://blog.csdn.net/u014801157/article/details/24372499




========================================
ggplot2作图详解2：ggplot图形对象
----------------------------------------

1.
ggplot2不一样，它用图形对象存储做图的细节，通过输出图形对象获得图形。
library(ggplot2)
theme_set(theme_bw())
x <- 1:100
y <- rnorm(100)
p1 <- plot(x, y)
p2 <- qplot(x, y)


class(p2) #[1] "gg"     "ggplot"
typeof(p2) #[1] "list"
str(p2)
## List of 9
## $ data       :'data.frame':	0 obs. of  0 variables
## $ layers     :List of 1

plot函数的返回值p1的class属性为NULL（空），而qplot函数的返回值p2的calss属性有两个“gg” 和 “ggplot”，其本质是长度为9的列表对象。

print(p2) #画图

qplot函数的作用是产生一个ggplot对象，但获得ggplot对象的更一般方法是使用对象类型的同名函数ggplot。
# 非运行代码
ggplot(df, aes(x, y, <other aesthetics>))
ggplot(df)
ggplot()


ggplot函数用于初始化一个ggplot对象，即使不指定任何做图相关的内容，它的结构也是完整的：
length(p2)
## [1] 9
length(ggplot()) #[1] 9







2 ggplot图形对象组成
ggplot图形对象是由9个元素组成的列表，这点已经清楚。元素的名称为：
> names(p2)
# [1] "data"        "layers"      "scales"      "mapping"     "theme"      
# [6] "coordinates" "facet"       "plot_env"    "labels" 


> str(p4)
就能全部看到这个list的9个元素。

ggplot2是Wilkinson做图理论 Grammer of Graphics 的R语言实现。太高深了，不知道从哪开始，还是从ggplot图形列表对象的元素组成做一点简单了解吧。


(1)数据 data
似乎就是数据。但是如果试图查看上面p2对象的数据：
p2$data  # data frame with 0 columns and 0 rows

是空的。但如果使用qplot函数时指定了data，情况就不一样了：
p3 <- qplot(carat, price, data=diamonds, color=cut, shape=cut)
head(p3$data, 3)
nrow(p3$data) # [1] 53940


列表对象的data元素存储了整个diamnods数据框的数据。用ggplot函数可以单独指定data项：
p4 <- ggplot(diamonds)
head(p4$data, 3)
##   carat     cut color clarity depth table price    x    y    z
## 1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 2.43
## 2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 2.31
## 3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 2.31




(2) 映射 mapping
ggplot对象的data项存储了整个数据框的内容，而“映射”则确定如何使用这些数据。

在ggplot2中，图形的可视属性如形状、颜色、透明度等称为美学属性（或艺术属性），确定数据与美学属性之间对应关系的过程称为映射，通常使用aes函数完成（qplot函数中使用参数设置映射）

> str(p3$mapping)
## List of 4
## $ x     : language ~carat
##  ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
## $ y     : language ~price
##  ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
## $ colour: language ~cut
##  ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
## $ shape : language ~cut
##  ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
## - attr(*, "class")= chr "uneval"


> str(p4$mapping)
## Named list()
## - attr(*, "class")= chr "uneval"


> p4 <- p4 + aes(x=carat, y=price, color=color, shape=cut)
> str(p4$mapping)
输出和p3类似。

上述代码使用了加号，这是ggplot2为ggplot对象定义的运算方法，表示设置ggplot对象中对应的内容。






(3) 图层 layers
1)
在ggplot的列表结构里面看不到我们指定的图形类型参数。这些设置被分派到layers里面了：
> p3$layers
## [[1]]
## geom_point: na.rm = FALSE
## stat_identity: na.rm = FALSE
## position_identity 


一个图层包含了至少3个东西（数据和映射当然必需，另算）：geom、stat和position

几何类型 geom：是数据在图上的展示形式，即点、线、面等。在ggplot2里面有很多预定义的几何类型。

统计类型 stat：是对数据所应用的统计类型/方法。上面的p2和p3对象我们并没有指定统计类型，但是自动获得了identity，因为ggplot2为每一种几何类型指定了一种默认的统计类型，反之亦然。所以如果仅指定geom或stat中的一个，另外一个会自动获取。

位置 position：几何对象在图像上的位置调整，这也有默认设定。
不指定几何类型或统计类型的ggplot对象的图层是空列表，即没有图层，也不能输出图像：

> p4$layers
## list()

> print(p4)
## 出现一个带坐标的空白图

也就是说，指定了几何类型或统计类型，图层就会产生：
> (p4 + geom_point())$layers
## [[1]]
## geom_point: na.rm = FALSE
## stat_identity: na.rm = FALSE
## position_identity 


2)
为什么图层说“至少”包含3个内容呢？如果你把整个图层的内容转成列表结构显示以下就会发现更多：

> rs=(p4 + geom_point())$layers[[1]]
> str(rs)
## Classes 'LayerInstance', 'Layer', 'ggproto', 'gg' <ggproto object: Class LayerInstance, Layer, gg>
##     aes_params: list
##     compute_aesthetics: function
...


> as.list((p4 + geom_point())$layers[[1]])
## $mapping
## NULL
## 
## $geom_params
## $geom_params$na.rm
## [1] FALSE
## 
## 
## $layer_data
## function (self, plot_data) 
...


3)图层加法
从图层的结构可以看到它在ggplot对象中是一个多重列表，如果对ggplot对象做图层加法运算，是增加图层而不是替换图层：
(p4 + geom_point() + geom_line())$layers
## [[1]]
## geom_point: na.rm = FALSE
## stat_identity: na.rm = FALSE
## position_identity 
## 
## [[2]]
## geom_line: na.rm = FALSE
## stat_identity: na.rm = FALSE
## position_identity 



4) 图层顺序
ggplot2按“层”做图，所以图层的顺序对于图形的表现会有影响，如果几何对象有叠加，那么后面图层的对象会覆盖前面图层的对象。下面只是调换了两个图层的顺序，但由于数据点是相同的，所以图形的颜色完全不一样：

p4 + geom_point(color="red") + geom_point(color="blue")
p4 + geom_point(color="blue") + geom_point(color="red")






(4) 标尺 scales
这是ggplot2中比较复杂的一个概念，从ggplot对象中能获取的信息不多：

p4$scales
## <ggproto object: Class ScalesList, gg>
##     add: function
##     clone: function
##     find: function
##     get_scales: function
##     has_scale: function
##     input: function
##     n: function
##     non_position_scales: function
##     scales: list
##     super:  <ggproto object: Class ScalesList, gg>

注释：这个对象，相比原博客变化较大。

在ggplot2中，一个标尺就是一个函数，它使用一系列参数将我们的数据（如钻石价格、克拉）转成计算机能够识别的数据（如像素、颜色值），然后展示在图像上。使用标尺对数据进行处理的过程称为缩放（scaling）。坐标的产生和图形美学属性的处理都需要使用标尺对数据进行缩放。这个过程比较复杂，尤其是美学属性与数据的关联，因为和美学属性相关的数据不仅有连续型还有离散型，多组数据之间还要相互关照。但这些过程我们都可以不管，ggplot2也替我们做了。

标尺是函数，它的反函数用于产生坐标刻度标签和图表的图例等，这样我们才能把图形外观、位置等信息和数据对应起来。






(5) 坐标 coordinates
这都知道，用于确定采用的坐标系统和坐标轴的范围。

str(p4$coordinates)
## Classes 'CoordCartesian', 'Coord', 'ggproto', 'gg' <ggproto object: Class CoordCartesian, Coord, gg>
##     aspect: function
##     backtransform_range: function
##     clip: on
##     default: TRUE
##     distance: function
##     expand: TRUE
##     is_free: function
##     is_linear: function
##     labels: function
##     limits: list
##     modify_scales: function
##     range: function
##     render_axis_h: function
##     render_axis_v: function
##     render_bg: function
##     render_fg: function
##     setup_data: function
##     setup_layout: function
##     setup_panel_params: function
##     setup_params: function
##     transform: function
##     super:  <ggproto object: Class CoordCartesian, Coord, gg> 

注释：这个对象，相比原博客变化较大。






(6) 主题 theme
标题文字（字体、字号、颜色）、图形边框和底纹等跟数据无关的一些图形元素的设置都可以归到“主题”这一类。

ggplot2提供了4个成套主题：theme_gray(), theme_bw() , theme_minimal() 和 theme_classic()。其中theme_gray()为默认主题，灰背景；后两个是0.9.3版才增加的。

p5 <- p4 + geom_point(color="blue")
p5 + theme_gray() + ggtitle("theme_gray()") #灰色背景，带白色格子
p5 + theme_bw() + ggtitle("theme_bw()") #白色背景，带灰色格子
p5 + theme_minimal() + ggtitle("theme_minimal()") #白色背景，灰色格子
p5 + theme_classic() + ggtitle("theme_classic()") #全白背景，无格子(可能是最常用的！)







(7) 分面 facet：
一页多图，跟图层好像没有直接关系。以后再说。
p4$facet
##<ggproto object: Class FacetNull, Facet, gg>
##    compute_layout: function
##    draw_back: function
##    draw_front: function
##    draw_labels: function
##    draw_panels: function
##    finish_data: function
##    init_scales: function
##    map_data: function
##    params: list
##    setup_data: function
##    setup_params: function
##    shrink: TRUE
##    train_scales: function
##    vars: function
##    super:  <ggproto object: Class FacetNull, Facet, gg>







(8) 标签 labels：
str(p4$labels)
#List of 4
# $ x     : chr "carat"
# $ y     : chr "price"
# $ colour: chr "color"
# $ shape : chr "cut"





(9)> 作图环境
p4$plot_env
## <environment: R_GlobalEnv>
不知道干啥用的








3. ggplot2做图过程
如果英文水平可以，下载 Hadley Wickham 写的《ggplot2: Elegant Graphics for Data Analysis》一书来看看（到处都有）。理论性太强，太高深，不敢乱说。
https://ggplot2-book.org/






refer:
https://blog.csdn.net/u014801157/article/details/24372503



========================================
ggplot2作图详解3：映射（mapping） //todo
----------------------------------------
https://blog.csdn.net/u014801157/article/details/24372505







========================================
ggplot2作图详解4：分面（faceting） //todo
----------------------------------------
https://blog.csdn.net/u014801157/article/details/24372507



========================================
ggplot2作图详解5：图层语法和图形组合 //todo
----------------------------------------
https://blog.csdn.net/u014801157/article/details/24372517





========================================
ggplot2作图详解6：标尺（scale）设置 //todo
----------------------------------------
https://blog.csdn.net/u014801157/article/details/24372521







========================================
ggplot2作图详解7：主题（theme）设置 //todo
----------------------------------------
https://blog.csdn.net/u014801157/article/details/24372531





========================================
ggplot2默认主题怎么设置？
----------------------------------------
1.设置默认主题
#Cowplot made ggplot2 theme disappear / How to see current ggplot2 theme, and restore the default?
#https://stackoverflow.com/questions/41096293/cowplot-made-ggplot2-theme-disappear-how-to-see-current-ggplot2-theme-and-res
#library(cowplot)
theme_set(theme_grey())


2.如何选择其他主题
g=ggplot(...) #画图命令
g + theme_gray() #添加主题







========================================
ggplot2画errorbar
----------------------------------------
http://blog.sina.com.cn/s/blog_4a0824490102w7mr.html
1.如何在ggplot2中的line graph或者histogram中添加error bar：
参考资料：
http://ggplot2.tidyverse.org/reference/geom_linerange.html
http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/
http://www.sthda.com/english/wiki/ggplot2-error-bars-quick-start-guide-r-software-and-data-visualization

例1：单数据的errorbar。
# 数据格式
#N	len	sd
#1	-65843.8	81.4
#2	-61454.7	584.9
#3	-59690.7	754.4
#4	-58326.3	1212
#5	-57695.8	1523.1

data=read.table('clipboard', sep="\t",header=T)
library(ggplot2)

ggplot(data,aes(x=N,y=len))+
  geom_errorbar(aes(ymin=len-sd, ymax=len+sd),width=.1)+
  geom_line()+
  geom_point()
####

例2：多数据的errorbar
使用R的内部数据集
tg <- ToothGrowth
head(tg)
#>    len supp dose
#> 1  4.2   VC  0.5
#> 2 11.5   VC  0.5
#> 3  7.3   VC  0.5
#> 4  5.8   VC  0.5
#> 5  6.4   VC  0.5
#> 6 10.0   VC  0.5

library(ggplot2)

#先对数据进行汇总，多种方法：http://www.cookbook-r.com/Manipulating_data/Summarizing_data/
#使用其中定义的 summarySE() 函数。
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
    library(plyr)

    # New version of length which can handle NA's: if na.rm==T, don't count them
    length2 <- function (x, na.rm=FALSE) {
        if (na.rm) sum(!is.na(x))
        else       length(x)
    }

    # This does the summary. For each group's data frame, return a vector with
    # N, mean, and sd
    datac <- ddply(data, groupvars, .drop=.drop,
      .fun = function(xx, col) {
        c(N    = length2(xx[[col]], na.rm=na.rm),
          mean = mean   (xx[[col]], na.rm=na.rm),
          sd   = sd     (xx[[col]], na.rm=na.rm)
        )
      },
      measurevar
    )

    # Rename the "mean" column    
    datac <- rename(datac, c("mean" = measurevar))

    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

    # Confidence interval multiplier for standard error
    # Calculate t-statistic for confidence interval: 
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
    ciMult <- qt(conf.interval/2 + .5, datac$N-1)
    datac$ci <- datac$se * ciMult

    return(datac)
}

#汇总
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
tgc
#>   supp dose  N   len       sd        se       ci
#> 1   OJ  0.5 10 13.23 4.459709 1.4102837 3.190283
#> 2   OJ  1.0 10 22.70 3.910953 1.2367520 2.797727
#> 3   OJ  2.0 10 26.06 2.655058 0.8396031 1.899314
#> 4   VC  0.5 10  7.98 2.746634 0.8685620 1.964824
#> 5   VC  1.0 10 16.77 2.515309 0.7954104 1.799343
#> 6   VC  2.0 10 26.14 4.797731 1.5171757 3.432090

#画图
par(mfrow=c(2,2))
# Standard error of the mean
ggplot(tgc, aes(x=dose, y=len, colour=supp)) + 
    geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
    geom_line() +
    geom_point()
	
	
#errorbar重叠了，可以移位以便看得更清楚。
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.1) # move them .05 to the left and right
ggplot(tgc, aes(x=dose, y=len, colour=supp)) + 
    geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1, position=pd) +
    geom_line(position=pd) +
    geom_point(position=pd)


# Use 95% confidence interval instead of SEM 使用95%置信区间，而不是SEM
ggplot(tgc, aes(x=dose, y=len, colour=supp)) + 
    geom_errorbar(aes(ymin=len-ci, ymax=len+ci), width=.1, position=pd) +
    geom_line(position=pd) +
    geom_point(position=pd)


# Black error bars - notice the mapping of 'group=supp' -- without it, the error
# bars won't be dodged!
ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) + 
    geom_errorbar(aes(ymin=len-ci, ymax=len+ci), colour="black", width=.1, position=pd) +
    geom_line(position=pd) +
    geom_point(position=pd, size=3)




（2）如何把error bar画成阴影填充的曲线？
http://stackoverflow.com/questions/12033319/plot-mean-and-sd-of-dataset-per-x-value-using-ggplot2

a <- data.frame(x=rep(c(1,2,3,5,7,10,15,20), 5),
    y=rnorm(40, sd=2) + rep(c(4,3.5,3,2.5,2,1.5,1,0.5), 5))
ggplot(a, aes(x=x,y=y)) + geom_point() +geom_smooth()




========================================
柱状图(高度均值,带error bar)+散点图 done
----------------------------------------
效果图：http://tool.biomooc.com/R_scripts/index.html

library(ggplot2)
library(reshape2)

#示例数据：某基因在对照和肿瘤样本中的表达量。
d1=data.frame(
  control=c(10,20,30,40,30,60,20,40,20,20,10,20,30,40,30,40,20,40,20,20),
  tumor=c(50,70,40,60,80,90,40,50,70,80,50,70,40,60,80,90,40,50,70,80)
);

# 数据框重塑，数据合并为一列，添加分类列
d2=melt(d1,
	variable.name="type",#新变量的名字
	value.name="value" #值得名字
);
d2



######## 开始画图1 箱线图 + 散点图 done
ggplot(d2,aes(factor(type), value))+
  geom_boxplot()+
  geom_jitter()


######## 开始画图2 带误差bar的柱状图 + 散点图 done
#http://www.cookbook-r.com/Manipulating_data/Summarizing_data/
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
  library(plyr)
  
  # New version of length which can handle NA's: if na.rm==T, don't count them
  length2 <- function (x, na.rm=FALSE) {
    if (na.rm) sum(!is.na(x))
    else       length(x)
  }
  
  # This does the summary. For each group's data frame, return a vector with
  # N, mean, and sd
  datac <- ddply(data, groupvars, .drop=.drop,
	 .fun = function(xx, col) {
	   c(N    = length2(xx[[col]], na.rm=na.rm),
		 mean = mean   (xx[[col]], na.rm=na.rm),
		 sd   = sd     (xx[[col]], na.rm=na.rm)
	   )
	 },
	 measurevar
  )

  # Rename the "mean" column    
  datac <- rename(datac, c("mean" = measurevar))

  datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

  # Confidence interval multiplier for standard error
  # Calculate t-statistic for confidence interval: 
  # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
  ciMult <- qt(conf.interval/2 + .5, datac$N-1)
  datac$ci <- datac$se * ciMult

  return(datac)
}


# http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/
d3 <- summarySE(d2, measurevar="value", groupvars=c("type"))
d3

ggplot(d3, aes(x=type, y=value)) + 
  geom_bar(aes(fill=type),position=position_dodge(), stat="identity", width=0.5) +
  geom_errorbar(aes(ymin=value-ci, ymax=value+ci),
	width=.2, # Width of the error bars
	position=position_dodge(.9))+
  geom_jitter(data=d2,aes(type,value), width=0.15) +
  ylab( expression(paste( italic("Sox2")," Expression(normalization)") ) )
  #ylab("Sox2 Expression\n(normalization)") 



========================================
ggplot2坐标轴控制、图例控制
----------------------------------------
1.隐藏x轴上的标签文字。
scale_x_continuous(labels = NULL)


2.更多控制选项：坐标轴命名、图标题
ggplot(readsCounts_df, aes(cell_id, mean, fill=factor(type)))+
  geom_histogram(stat='identity', position="dodge")+ #identity用数量作为柱子高度。dodge表并列
  scale_fill_hue("Type", breaks=c("h","nh","all"))+ #图例标题，图例顺序，图例重命名用labels=c()
  labs(title="B116", x="Cell ID", y="Mean read counts")+ #图的标题，和坐标轴重命名
  scale_x_discrete(limits=tmp2$cell_id, labels = NULL) #对x坐标进行重排序

#设置x,y轴的连续变量范围
#使用xlim()和ylim设置x、y轴的最大最小值。
p <- ggplot(PlantGrowth, aes(x=group, y=weight)) + geom_boxplot()
p + ylim(0, max(PlantGrowth$weight)) #ylim()是对scale_y_continuous()的快速实现。
#其中breaks用来控制刻度。
p + scale_y_continuous(limits=c(0, 10), breaks=NULL)


#怎么写坐标轴文字上标
#https://cloud.tencent.com/developer/ask/173132
labs(x="Average normalized read count", y=expression(~CV^2) ) 
#Y坐标文字就是CV^2其中2是上标






3.图例
  # scale_color_hue("Type",breaks=c("h","nh","all"))+ #修改图例顺序
  theme(legend.position="none") + #隐藏图例


自定义点的颜色
ggplot(wjl2, aes(PC_1, PC_2, col=factor(type) ))+
  geom_point(alpha=0.8,size=0.8)+
  guides(color=guide_legend(title=NULL)) + #隐藏图例标题
  scale_color_manual(values=c( 'red',     'green',       'black','orange',    "#F8766D",   'grey'), #value是颜色，limits是分类因子的值
                     limits =c('in2Cluster0','in2Cluster1','mix','nonsyncHeLa','syncHeLa','unknown'))


图例文字
ggplot(df3.filterd,aes(reads/1e6, geneNums, color=group.x))+
  geom_point(alpha=0.5,size=3)+
  labs(x="Million Reads", y="nGene")+
  xlim(0,4)+ylim(2000,9000)+ #控制坐标轴的显示范围
  guides(color=guide_legend(title="Group")) #改变图例文字，为 title=NULL 则表示清空图例标题
  
  


4.标记p值
# 做t检验
p_h_nh=t.test(mean_h, mean_nh)$p.value;p_h_nh
p_h_all=t.test(mean_h, mean_all)$p.value;p_h_all
#保留2位有效数字
p_h_nh=formatC(p_h_nh, format = "e", digits = 2)
p_h_all=formatC(p_h_all, format = "e", digits = 2)

  #画线，在线上标记p值
g+geom_segment(aes(x=1, y=155, xend=2, yend=155))+ #横线
  annotate("text", x=1.5, y=160, label=p_h_nh, size=3) +#annotate函数也可以添加标签
  geom_segment(aes(x=1, y=165, xend=3, yend=165))+ #横线
  annotate("text", x=2, y=170, label=p_h_all, size=3)



5.坐标轴标签60度转向，同时一次显示两张图。
  #数据宽变长
  library(reshape2)
  #画图1 raw counts
  g1=ggplot(melt(exp_df_cell1,id.vars="geneSymbol", measure.vars=c("APA_1","APA_2")), aes(geneSymbol, value,fill=variable))+
    geom_histogram(stat="identity")+
    #geom_histogram(stat="identity", position="fill")+
    theme(  axis.text.y=element_text(angle=90, hjust=1,size=8),legend.position="top" )+
    labs(title=s1)+ylab("Read counts")+#xlab("Gene Symbols")+
    scale_x_discrete(limits=o_gs, name=NULL, labels=NULL) +
    theme(axis.title.x=element_blank(),plot.margin=unit(x=c(2,5,0,5),units="mm"))+
    scale_fill_discrete("Type")
  #画图2 percentage
  g2=ggplot(melt(exp_df_cell1,id.vars="geneSymbol", measure.vars=c("APA_1p","APA_2p")), aes(geneSymbol, value,fill=variable))+
    geom_histogram(stat="identity")+
    #geom_histogram(stat="identity", position="fill")+
    theme(axis.text.x=element_text(angle=60, hjust=1,size=8,color="grey50"), #坐标轴刻度旋转60度。
          axis.text.y=element_text(angle=90, hjust=1,size=8),
          plot.margin=unit(x=c(0,5,2,5),units="mm"), legend.position="none")+#guides(fill=FALSE)+
    ylab("Percentage")+#xlab("Gene Symbols")+
    scale_x_discrete(name="Gene Symbols", limits=o_gs)
  library(scater)
  multiplot(g1,g2)
  # #这就是需要的效果





========================================
散点图
----------------------------------------
1.控制散点的大小size、透明度alpha
ggplot(df, aes(gene.mean, gene.dispersion))+geom_point(size=0.1, alpha=0.2)





========================================
添加辅助线
----------------------------------------
1. 添加一条水平线
bp + geom_hline(aes(yintercept=12))


2. linetype 设置线型为 虚线
bp + geom_hline(aes(yintercept=12), colour="#990000", linetype="dashed")


refer:
https://blog.csdn.net/tanzuozhev/article/details/51112057



========================================
色彩： ggplot2中的颜色(color, fill): RGB, HSV or HCL colour spaces
----------------------------------------
提供色盲人士也可识别的配色方案
https://cran.r-project.org/web/packages/dichromat/

ggplot2颜色设置
https://blog.csdn.net/chang349276/article/details/77476848

#最感兴趣的调色板是 Set1 Dark2
# 对面积而言是 Set2 Pastel1 Pastel2 Accent
RColorBrewer::display.brewer.all() #列出所有的调色板。



1.色彩列表
http://sape.inf.usi.ch/quick-reference/ggplot2/colour
http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/

d=expand.grid(r=seq(0,1,0.1), g=seq(0,1,0.1), b=seq(0,1,0.1))
ggplot() +
	facet_wrap(~b) +
	scale_x_continuous(name="red", breaks=seq(0.05, 1.05, 0.2), labels=seq(0, 1, 0.2)) +
	scale_y_continuous(name="green", breaks=seq(0.05, 1.05, 0.2), labels=seq(0, 1, 0.2)) +
	scale_fill_identity() +
	geom_rect(data=d, mapping=aes(xmin=r, xmax=r+resolution(r), ymin=g, ymax=g+resolution(g), fill=rgb(r,g,b)), color="white", size=0.1)
#





2.连续的颜色：
https://ggplot2.tidyverse.org/reference/scale_gradient.html
# Generate some data
set.seed(133)
df <- data.frame(xval=rnorm(50), yval=rnorm(50))

# Make color depend on yval
ggplot(df, aes(x=xval, y=yval, colour=yval)) + geom_point()

# Use a different gradient
ggplot(df, aes(x=xval, y=yval, colour=yval)) + geom_point() + 
    scale_colour_gradientn(colours=rainbow(4))

#
scale_colour_gradient(..., low = "#132B43", high = "#56B1F7",
  space = "Lab", na.value = "grey50", guide = "colourbar",
  aesthetics = "colour")
#



3.离散的颜色
https://www.cnblogs.com/shaocf/p/9600340.html




========================================
********** 应用篇 **********
----------------------------------------


========================================
R语言ggplot2绘图教程——DAVID做基因富集分析（GO(BP, CC, MF)、KEGG）及可视化
----------------------------------------
1.概念
BP(Biological Process，生物学过程，比如参与了细胞免疫，凋亡，细胞增殖等等)，
CC（cellular component，所处细胞中的位置，比如蛋白在细胞膜、线粒体中还是在核内等），
MF（Molecular Function，分子功能，比如是个什么酶，还是个载体蛋白什么的）


目前市场上有很多做富集分析的软件。
GOstat，onto-tool，GOEAST，wego，GSEA，DAVID等。

富集分析概念佶屈聱牙，十分晦涩难懂。其实通俗的来讲就是看看我们要感兴趣的东西在我们要研究的集合中多不多。



2.获取数据集
(1)对比肿瘤和瘤旁，得到差异表达基因列表
或者获得高变基因列表
(2)使用DAVID服务器获取GO分析的信息:Term	Count	percentage	log(P)	type
https://david-d.ncifcrf.gov/tools.jsp


3.使用R的ggplot2可视化

#从DAVID上复制如下信息：
#Term	Count	percentage	log(P)	type
#cell cycle	18	28.6	6.443697499	BP
#cell cycle phase	14	22.2	6.443697499	BP
#condensed chromosome	7	11.1	2.920818754	CC
#chromosome	10	15.9	2.508638306	CC

#读取剪切板
tmp=read.table("clipboard", sep="\t",header = T)
head(tmp)
dim(tmp) #35 5

library("dplyr")
#tmp2=tmp[order( tmp$log.P., tmp$Term),]
#tmp2=tmp %>% group_by(type) %>% arrange(log.P.) 
#tmp2=tmp %>% group_by(type, (log.P.) ) 
tmp2=tmp

library("ggplot2")
p <- ggplot(data=tmp2, aes(x=Term, y=log.P., fill=type) ) +
  geom_bar(stat="identity", width=0.8) + 
  coord_flip() +  #反转x和y坐标轴
  #scale_fill_manual(values = CPCOLS) + #theme_bw() + 
  scale_x_discrete(limits=rev(tmp2$Term) ) + #限定x坐标的顺序
  xlab("") + ylab("-log(adj.P.value)")+
  theme(axis.text=element_text(face = "bold", color="gray50")) +
  labs(title = "Significant Enriched GO Terms")
p

#

##############################
#待优化颜色图例的版本
##############################
#复制的excel数据需要有type(BP,CC,MF,KEGG), term, logP列
go=read.table("clipboard",header=T,sep="\t")
dim(go) #11 9
go[1:3,1:4]

#
library('ggplot2')
plotGO=function(tmp2, txt=""){
  p <- ggplot(data=tmp2, aes(x=term, y=logP, fill=type) ) +
    geom_bar(stat="identity", width=0.8) + 
    coord_flip() +  #反转x和y坐标轴
    #scale_fill_manual(values = CPCOLS) + #theme_bw() + 
    scale_x_discrete(limits=rev(tmp2$term) ) + #限定x坐标的顺序
    xlab("") + ylab("-log(q Value)")+
    theme(axis.text=element_text(face = "bold", color="gray50")) +
    #labs(title = paste0("Significant Enriched GO and KEGG Terms ",txt))
    labs(title = paste0("Significant Terms ",txt))
  p
}

library("dplyr")
tmp=go
# if Metascape data:
#tmp$type=tmp$Category
#tmp$term=paste0("(",go$GO,")",go$Description)
#
tmp2=tmp[order(tmp$type, -tmp$logP),] #排序
#tmp2=tmp %>% group_by(type) %>% arrange(-logP) 
#tmp2=tmp %>% group_by(type, (logP) ) 
#tmp2=tmp

plotGO(tmp2,"(Right 5% Genes)")
##




========================================
R语言ggplot2绘图教程——差异表达基因火山图
----------------------------------------
#http://agetouch.blog.163.com/blog/static/22853509020161194123526/
#  Using ggplot2 for volcano plots 使用ggplot2画火山图
library(ggplot2)

#读取数据 #data download from GEO2R result
setwd("C:\\Users\\Administrator\\Desktop")
dif=read.table(file="Primary Tumor_Normal Colon.txt",header=T,row.names=1)
dif[1:3,1:4]

#添加显著与否标签
no_of_genes=nrow(dif);no_of_genes #4653
dif$threshold = as.factor(abs(dif$logFC) > 2 & dif$P.Value < 0.05/no_of_genes)

##如果是 limma 包的结果，会有 adj.P.Val，直接使用这个调整后的p value和0.05比较即可，不用再除以基因个数。


#画火山图
g = ggplot(data=dif, aes(x=logFC, y=-log10(P.Value), colour=threshold)) +
  geom_point(alpha=0.4, size=1.75) +
  #opts(legend.position = "none") + 
  theme(legend.title=element_blank()) +
  scale_colour_hue(labels=c("Not sig.","Sig."))+
  #xlim(c(-10, 10)) + ylim(c(0, 15)) +
  xlab("log2[fold change]") + ylab("-log10[p-value]") +
  labs(title="Volcano plot")
g

#只标注显著基因的基因名
# 选出一部分基因：FC大且p小的基因
dd_text = dif[(abs(dif$logFC) > 2) & (dif$P.Value < 0.05/no_of_genes),]
head(dd_text)

#添加文字-基因名
g + geom_text(data=dd_text, aes(x=logFC, y=-log10(P.Value), label=dd_text$Gene.symbol), colour="black")

#保存图片
ggsave("volcano.png")
ggsave("volcano8.png",g,width=8,height=8)



========================================
R语言ggplot2绘图教程——Pathway富集分析气泡图zz  
----------------------------------------
代码：
library(ggplot2)  
pathway = read.table("C://Users//Desktop//path.richFactor.head20.tsv",header=T,sep="\t")  
# 画图  
p = ggplot(pathway,aes(richFactor,Pathway))  
p=p + geom_point()  
# 改变点的大小  
p=p + geom_point(aes(size=R0vsR3))  
# 四维数据的展示  
pbubble = p + geom_point(aes(size=R0vsR3,color=-1*log10(Qvalue)))  
# 自定义渐变颜色  
pbubble =pbubble+ scale_colour_gradient(low="green",high="red")  
# 绘制pathway富集散点图  
pr = pbubble + scale_colour_gradient(low="green",high="red") +   
  labs(color=expression(-log[10](Qvalue)),size="Gene number",  
       x="Rich factor",y="Pathway name",title="Top20 of pathway enrichment")  
# 改变图片的样式（主题）  
pr=pr + theme_bw()  
pr 



备注，绘图数据的说明：
1)Pathway : 通路的名称        
2)R0vsR3 ：差异表达基因中，属于这个通路的基因的数量
3)All_Unigene：所有基因中属于这个通路的基因的数量  
4)Pvalue ：富集分析p值
5)Qvalue ：富集分析的Q值
6)richFactor ：在我们分析报告中，没有提供这一列，但很容易计算。是 第二列 除以 第三列得到；
7)Pathway ID  ：通路ID  
8)Genes ：通路中基因的ID
9)KOs：通路中基因的KO号


http://blog.csdn.net/sinat_38163598/article/details/72827851




========================================
TCGA数据做基因共表达散点图 with r And p value 
----------------------------------------
#从TCGA下载数据，csv文件两列，分别是两个基因的表达量。


fname="C:\\Users\\admin\\Downloads\\export.csv"
data1=read.csv(fname,header=T,sep=",")
head(data1)

#计算r和p
ts=cor.test(data1$CSF1, data1$CD33); ts
str(ts)
p=ts$p.value;p
r=ts$estimate[['cor']];r
r0=round(r,2);r0
p0=formatC(p, format = "e", digits = 2);p0

#画图
library(ggplot2)
library(cowplot)
g=ggplot(data1, aes( log2(CSF1), log2(CD33) ))+
  geom_point( color="#F87B72", alpha=0.75, size=1)+
  geom_smooth(method='lm', se=F,color="black",size=0.5)+ #se=F不要置信区间的阴影
  theme_cowplot()+ #除掉主题背景阴影
  geom_text(size=6,aes(x=12,y=2.5,label=paste0("r = ",r0,"\n p = ",p0)))+
  theme(legend.position="none")+
  labs(x="CSF1 expression(log)",y="CD33 expression(log)")
g #58ACFA
library(Cairo)
CairoPDF(file="wangbl0.5.pdf",width=7,height=7)
g
dev.off()
#
# g+scale_y_log10()+scale_x_log10() #简便写法

#为什么趋势线是歪的？
#重新构建数据也是歪的，看来不是smooth和对数的原因。
data2=data1
data2$CSF1=log2(data1$CSF1)
data2$CD33=log2(data1$CD33)
ggplot(data2, aes( CSF1, CD33, alpha=0.2 ))+geom_point()+geom_smooth(method="lm")
#
#



========================================
R语言绘制（一维数据的）概率密度图 with ggplot2
----------------------------------------
https://www.jianshu.com/p/999475adcb32

1.实例1
#造数据
head=rnorm(500,10,1)
tail=rnorm(500,20,4)
data0=data.frame(tail,head)
head(data0)
#融合数据
library(reshape2)
data1=melt(data0)

ggplot(data1, aes(x = value)) + geom_line(colour = "cadetblue3", stat = "density") +
  geom_rug(aes(colour = variable), sides = "b")
#







2.实例2 https://www.cnblogs.com/wwxbi/p/6142410.html
# 这里的h没有大小顺序
h <- rweibull(100000, shape=5, scale=1)

概率直方图
ggplot(NULL,aes(x=h))+
  geom_histogram(binwidth = 0.01,fill="white",colour="red")+
  ggtitle("Weibull distribution \n 直方图")
#


概率密度图
ggplot(NULL,aes(x=h))+
  geom_density(colour="green")+
  ggtitle("Weibull distribution \n 概率密度图")
概率密度图，方法2
ggplot(NULL,aes(x=h))+
  geom_line(stat="density",colour="green")+
  ggtitle("Weibull distribution \n 概率密度图")
#

(2)密度函数
ggplot(pp,aes(x=pp$FoldEnrichment,fill=new,alpha = 1/10))+geom_density()
from: https://blog.csdn.net/zhangkx91/article/details/79034321






3. 画matrix(行为feature，列为细胞)中每行总数的分布

keep2=apply(apa4>=3,1,sum)>=5;table(keep2) #至少5个cell内表达，每个细胞内至少3个read支持
#105093  45533
apa5=apa4[keep2,]
ggplot(NULL, aes(x=log10(unname(apply(apa5,1,sum)) ) ))+#geom_density()+
  geom_histogram(binwidth = 0.03,fill="white",colour="red")+
  xlim(1,6)+
  #geom_vline(aes(xintercept=1.2),linetype="dashed")+
  labs(x='log10(Reads per polyA site)', title='PAS supported by at 3 reads per cell in at least 5 cells(45533PAS)')
#


========================================
repel 对ggplot2 点进行标注
----------------------------------------
可以自动画线，连接注释文字和点。

# Seurat3 中使用到了

plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))



========================================
ggplot2 自定义点的颜色
----------------------------------------
head(tmp)
#             tSNE_1     tSNE_2 type
#c14ROW27  0.3270342 -15.399062    1
#c16ROW10  0.8202637 -13.007762    1
#c16ROW03 -2.8134028   4.019970    1

ggplot(tmp, aes(tSNE_1, tSNE_2, col=factor(type) ))+geom_point()+
  scale_color_manual(values=c("#F8766D","grey"))



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

