R03- R语言进阶 杂项汇总


http://adv-r.had.co.nz/






========================================
怎么能休眠2s再执行？
----------------------------------------
1. 系统休眠几秒，用Sys.sleep 语句。
for(i in 1:3){
  print(i)
  Sys.sleep(2)
}



========================================
list完全可以作为R中的hash结构来使用
----------------------------------------
Lists are the only key-value mapping type provided in base R: there are no dictionaries or associative arrays.
list是R语言中包容性最强的数据对象，几乎可以容乃所有的其他数据类型。
我们可以在一个列表中储存不同的类型数据，还可以储存不同的长度数据，每一个插槽中都是一个向量（vector）。
但是基于list的hash效率很低。

更高效的是使用 environment 来定义key是字符串的hash变量。其中hash包和hashmap包就是这么做的，但是...
##########
1. 尝试 R 中的hash结构：hash包和hashmap包都报错
install.packages("hashmap")
library("hashmap")
help(hashmap)
#
mydict = hashmap( keys=c(1,2,3),values=c(10,20,30) )
#Error in (function (env, objName)  : 
#  argument to 'findVar' is not an environment
mydict[["a"]]
# 也找不到解决办法。。。



#
##########
2. 探索尝试 list 能否保存长度不同的数据类型?可以。

#创建
#初始化一个list
mydict1=list(a=c(1,2,3),h=c(0))
class(mydict1)

#后文每一步都需要检查效果，后文每句后面都省略该命令
#1.直接查看，或者2.用str查看list的数据结构
mydict1 
str(mydict1)


#拼接一个字符串作为key，并赋值和引用
mydict1[[paste0('c',1)]]=data.frame(a=c(1,2,3), b=c(10,20,30))
mydict1[[paste0('c',1)]] #引用

#增加一个key并赋值，在末尾
mydict1[['c']]=100

#修改：重新对value赋值
mydict1[['a']]=c(12,34)

#修改：在向量value中插入新元素
mydict1[["h"]]=c(mydict1[["h"]], 15)

#修改：#对这个key的value进行自增
mydict1[['c']]=mydict1[['c']]+2

#获得键列表
names(mydict1) 

#检测是否有某个键，可以用于hash的自增
key="c2"
key="c1"
if(key %in% names(mydict1)){
  print(mydict1[[key]])
}else{
  print("Not in")
}

#删除某个key
mydict1[["a"]]=NULL #好吧，a的键值对都被删除了


#可以用数字直接查找，说明是有序的，不是真正的hash结构
mydict1[[2]] 


refer:
1.R's Lists and its Detestable Dearth of Data-Structures
https://www.refsmmat.com/posts/2016-09-12-r-lists.html

2.Environments
http://adv-r.had.co.nz/Environments.html




========================================
R中拼接成的字符串做变量名，并赋值
----------------------------------------

assign( paste0("cell",1),100)
cell1

#但是怎么引用呢？
eval( 'a=paste0("cell",1)' ) #失败
#



========================================
快速生成R语言报告（markdown+Rstudio）
----------------------------------------
优点：可重复研究。
缺点：在server上还是不能画图。


1.使用Rstudio设置：
https://blog.csdn.net/lixiaomie01/article/details/78012942
菜单 Tools-Global option-Sweave
Weave Rnw files using: knitr;
Typeset LaTeX into PDF using: pdfLaTex

2.安装包
source("https://bioc.ism.ac.jp/biocLite.R")
biocLite("rmarkdown")

3.新建文件 File-New File-R Markdown...
需要更新文件。

然后新建文件，需要学习markdown语法，比较简单：https://www.sohu.com/a/194382686_455817



4.写完文件，做格式转换
编辑器顶部，在 Knit 可选择不同的文件类型进行浏览：
Knit to HTML

注意：选中语句，ctrl+enter或者点击顶部的Run，即可运行这一句代码。



refer:
https://www.jianshu.com/p/bc8ff133fc37
https://blog.csdn.net/lixiaomie01/article/details/78012942






========================================
R也有Notebook了，不用再羡慕Python有jupyter了
----------------------------------------
熟悉python的朋友可能知道jupyter notebook。它是一个Web应用程序，允许你创建和共享代码，方程，可视化和说明性文本文档。现在，我们可以在RStudio中实现R Notebook的功能了。

我的配置步骤：
安装好 biocLite("rmarkdown") 就可以了，选择新建 R notebook，即可开始书写了。 
想插入代码，点顶部的Insert；
想运行代码，ctrl+Enter即可运行光标所在的行，或者选中的代码行。




网页说的配置步骤，我没试过：
1、 下载最新的RStudio
2、 下载最新版本的Rmarkdown包：
#devtools::install_github("rstudio/rmarkdown")

3、 设置选项：Tools -> Global Options -> Rmarkdown -> Enable R Notebook -> Apply
4、 像往常一样打开一个新的Rmarkdown文件
5、 设置YAML输出选项：将output: html_document 改为 output: html_notebook: default
注：上述的4,5步也可以直接创建一个新的R Markdown Notebook文件。如下图：

完成上述配置后我们就可以在RStudio中开始我们的R Notebook之旅了。




========================================
如何用shiny部署R语言交互式网页小程序？
----------------------------------------

官方案例：http://shiny.rstudio.com/gallery/



1.安装
install.packages("shiny")


2.写代码
(1)看到网上大多给你扯ui.R+server.R，很少会提到global.R，笔者在自己实践的时候遇到的了global.R的使用问题，网上教程只能自己参悟了。

ui.R：搭框架，控件；
server.R：每个控件背后的算法代码；
global.R:server.R中，万一有很长的代码与调用很多其他packages就可以用global写一个函数集合，然后统一在server.R调用。

(2)在一个文件夹内写 ui.R 和 server.R。
格式如下：

# ui.R
library(shiny)
shinyUI(fluidPage(
	#
))
 
# server.R
library(shiny)
shinyServer(function(input, output) {
	#
})


(3)实例-界面：
# ui.R
library(shiny)

shinyUI(fluidPage(
  # Application title
  headerPanel("Hello Shiny!"),
  
  # 侧面控件 Sidebar with a slider input for number of observations
  sidebarPanel(
    #sliderInput是一个滑动的窗口。
    sliderInput("obs", 
                "Number of observations:", 
                min = 0, 
                max = 1000, 
                value = 500)
  ),
  
  # 右边 主控件(默认右边) Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot")
  )

))


(4)实例-服务端：
# server.R
library(shiny)

shinyServer(function(input, output) {
  #数据来源都来自于ui.R，比如obs
  output$distPlot <- renderPlot({
    dist <- rnorm(input$obs)
    #server处理好的图才是返回给ui.R。譬如dist
    hist(dist)
  })
  
})



3.shiny的部署
runApp一下那个路径的文件夹就行了。

#
#####
#https://blog.csdn.net/sinat_26917383/article/details/53410370
library(shiny)
runApp("F://Temp/shiny")
#

refer
1. 中文教程：用R构建shiny应用程序：http://yanping.me/shiny-tutorial/#welcome
2. R powered web applications with Shiny (a tutorial and cheat sheet with 40 example apps) 
http://zevross.com/blog/2016/04/19/r-powered-web-applications-with-shiny-a-tutorial-and-cheat-sheet-with-40-example-apps/



========================================
画ROC曲线(ROCR包和pROC包)
----------------------------------------
AUC为ROC曲线下方的面积。一般AUC大于0.75就能够说明模型是比较合理的了。


1.
(1)library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
str(perf)

##AUC值,ROC曲线下面积为AUC，用来评价分类器的综合性能，该数值取0-1之间，越大越好。
#https://blog.csdn.net/Hellolijunshy/article/details/79991385
auc <- performance(pred,'auc');auc_value=auc@y.values[[1]]
auc_value=round(auc_value,2)
auc_value #0.84

plot(perf,colorize=TRUE,main=paste0('AUC=',auc_value))
abline(a=c(0,0),b=c(1,1),col="grey")


(2)#用ggplot2画图
plotdata=data.frame(
  x=unlist(perf@x.values),
  y=unlist(perf@y.values)
)
g=ggplot(plotdata, aes(x,y, color=x))+
  geom_path(size=1)+
  labs(x="False positive rate",y="True positive rate",title="ROC Curve")+
  scale_color_gradient(name="False positive rate", low="blue", high="red")+
  theme(plot.title=element_text(face="bold",size=10))
g
#



2.
library(pROC)
roc_curve=roc(pre_test$Y~probability)
str(roc_curve)
plot(1-roc_curve$specificities, roc_curve$sensitivities,type="o",
     xlab="1-specificities",ylab="sensitivities",main="ROC Curve")
abline(a=0,b=1,col="gray")
auc2=roc_curve$auc
text(0.5,0.4,paste("AUC: ", round(auc2, digits=2)), col="blue")
#


========================================
如何获得R包的全部函数名字？
----------------------------------------

1. library(help = datasets) # Get the list of functions in ts package

2. ls("package:datasets")
will list all the objects in the package

3. List Objects and their Structure

>library(ggplot2)
#Need help? Try Stackoverflow: https://stackoverflow.com/tags/ggplot2.
> lsf.str("package:ggplot2") #List Objects and their Structure



========================================
R语言画生存期km plot
----------------------------------------
1.生存率：
    RFS: Relapse Free Survival; 无复发生存期
    OS: Overall Survival; 总生存期
    DMFS: Distant Metastasis Free Survival; 无远处转移生存期
    PPS: Post Progression Survival 进展后生存期

2.芯片数据该怎么做标准化：系统原理：两次标准化
第一次使用affy包MAS5算法标准化；第二次[文献14]把平均值调整为1000，消除批次效应。

1).After an initial quality control, redundant samples (n = 384) were excluded [12]. The raw CEL files were MAS5 normalized in the R statistical environment (www.r-project.org) using the affy Bioconductor library [13]. MAS5 can be applied to individual chips, making future extensions of the database uncomplicated.
2).At this stage, we performed a second scaling normalization to set the average expression on each chip to 1,000 to avoid batch effects [14].

13). Gautier L, Cope L, Bolstad BM et al (2004) affy—analysis of Affymetrix GeneChip data at the probe level. Bioinformatics 20:307–315
14). Sims AH, Smethurst GJ, Hey Y et al (2008) The removal of multiplicative, systematic bias allows integration of breast cancer gene expression datasets—improving meta-analysis and prediction of prognosis. BMC Med Genomics 1:42

探针序列：http://kmplot.com/analysis/index.php?p=download


3.使用网站画mRNA、miRNA画十年生存期的KM plot
http://kmplot.com/analysis/





4.R语言画km plot:
共三列数据有效：
# tx是分组
# status是是否删失（0：右删失，1：死亡）
# time表示存活时间

## 生存期曲线的画法
#原始数据 
# case	inst	tx	grade	cond	site	t.stage	n.stage	entry.dt	status	time
# 1	a1	1	1	1	1	1	1	1	1	1
# 2	a1	1	1	1	1	1	1	1	1	100
# 3	a1	1	1	1	1	1	1	1	1	12
# 4	a1	1	1	1	1	1	1	1	1	12
# 5	a1	1	1	1	1	1	1	1	1	13
# 6	a1	1	1	1	1	1	1	1	1	13
# 7	a1	1	1	1	1	1	1	1	1	13
# 8	a1	1	1	1	1	1	1	1	1	20
# 9	a1	1	1	1	1	1	1	1	1	30
# 10	a1	2	1	1	1	1	1	1	1	31
# 11	a1	2	1	1	1	1	1	1	1	32
# 12	a1	2	1	1	1	1	1	1	1	33
# 13	a1	2	1	1	1	1	1	1	1	34
# 14	a1	2	1	1	1	1	1	1	1	35
# 15	a1	2	1	1	1	1	1	1	1	35
# 16	a1	2	1	1	1	1	1	1	1	35
# 17	a1	2	1	1	1	1	1	1	1	40
# 18	a1	2	1	1	1	1	1	1	1	40
# 19	a1	2	1	1	1	1	1	1	1	60
# 20	a1	2	1	1	1	1	1	1	1	80
# 其中
# caese表示编号
# tx是分组
# status是是否删失（0：右删失，1：死亡）
# time表示存活时间

# 载入包
library('survival')

# 读取数据
setwd('D:/R_code')
my=read.csv('death.csv',header=T);my

# 按照tx分组对time和statuss拟合生存曲线，
sd=survfit(Surv(time,as.numeric(status))~tx,data=my,se.fit=FALSE, conf.int=.95)

# 画出生存曲线
plot(sd,lty=1,col=c("red","purple"),
      xlab="time(year)",ylab="Overall Survival",main="survival", #生存曲线
    ) 
#加上图例
legend(60, 1, c("Group1", "Group2"), col = c("red","purple"),
       text.col = c("red","purple"), lty = c(1, 1), pch = c(1, 2),
       merge = TRUE, bg ="#efeeef" );
#rgb(0.99,0.99,0.99) grey


# 这个没懂
with(lung, Surv(time, status))
Surv(heart$start, heart$stop, heart$event)

作图结果如下：





4.2.怎么计算P值（log rank p-value）呢？[解决]
[1]http://bcb.dfci.harvard.edu/~aedin/courses/Bioconductor/survival.pdf
[2]https://cran.r-project.org/web/packages/HSAUR/vignettes/Ch_survival_analysis.pdf   Survival Analysis:
在pdf中搜索log-rank 等关键词。
[3]http://stats.stackexchange.com/questions/114304/log-rank-test-in-r


#p值怎么算？

# http://bbs.pinggu.org/thread-2178930-1-1.html


#请使用survdiff函数做log rank检验或建立Cox模型(coxph)来比较两条生存曲线,

#KM曲线只是一种可视化手段，不是正经的统计推断分析工具。

# 应该用 suvdiff 函数做 log-rank test

#
# 读取数据
setwd('D:/R_code/')
my=read.csv('suvive.csv',header=T);my

#############################
#计算p值：
#http://stats.stackexchange.com/questions/114304/log-rank-test-in-r
# install.packages("survival")
library("survival")
sdf=survdiff(Surv(time, as.numeric(status))~tx, data=my)
sdf
pvalue=1-pchisq(sdf$chisq, df=1)
#pvalue=round(pvalue,2)
# There is also an option for ‘rho’. Rho = 0 (default)
# gives the log-rank test, rho=1 gives the Wilcoxon test.

#install.packages("coin")
#library("coin")
#st=logrank_test(Surv(time, as.numeric(status)) ~ tx, data=my, distribution = "exact")
#st
#########################


# 按照tx分组对time和statuss拟合生存曲线，
km=survfit(Surv(time,as.numeric(status))~tx,data=my,se.fit=FALSE, conf.int=.95)
km

# 画出生存曲线
plot(km,lty=1,col=c("red","purple"), 
     xlab="OS MONTHS",ylab="Percent Survival",main="survival", #生存曲线
) 
#加上图例
legend(130, 1,  legend=c(paste("WT(n=",km$n[1],")"), paste("R132H(n=",km$n[2],")")), col = c("red","purple"),
       text.col = c("red","purple"), lty = c(1, 1), title = paste("logrank p = ",pvalue) )
#       merge = FALSE, bg ="#ffffff"





4.3.怎么标出来截尾数据？

http://www.biostatistic.net/thread-87214-1-1.html
mark.time=T  生存分析显示截尾数据点.

## S3 method for class 'survfit'
plot(x, conf.int=, mark.time=TRUE, 
mark=3, col=1, lty=1, lwd=1, cex=1, log=FALSE, xscale=1, yscale=1,  
firstx=0, firsty=1, xmax, ymin=0, fun, 
xlab="", ylab="", xaxs="S", ...)






4.4.从TCGA下载数据，怎么匹配样品名和生存时间？[半解决]
http://www.cbioportal.org/
（1）用excel的vookup函数[勉强可用，但是还是不自动化]：
VLOOKUP函数是Excel中的一个纵向查找函数，它与LOOKUP函数和HLOOKUP函数属于一类函数，在工作中都有广泛应用。VLOOKUP是按列查找，最终返回该列所需查询列序所对应的值；与之对应的HLOOKUP是按行查找的。
VLOOKUP(lookup_value,table_array,col_index_num,range_lookup)
当前页面样品name，寻找的表格范围，返回的列编号，不精确查找吗？
大概是这样： =VLOOKUP(A2,Sheet2!A:F,5,FALSE)

（2）使用R语言的sql模块【推荐】
...




4.5.怎么从marker选择最合适的cutoff值？
看文献是使用x-tile软件选择最优的cutoff值。
软件：http://medicine.yale.edu/lab/rimm/research/software.aspx
教程：http://wenku.baidu.com/link?url=GmVqIKZ41r1av7wzYDxZYquKk8Am6MuLyq5AD0NGicIa9t5bUvgokQqpgTGCHpIS-Oh-Vd24j1-wJpjY1b25UKXrpPLmZ2W9tlzUrJPqqV7

也有人说用ROC曲线的。





4.6 问题

How to calculate the HR and 95%CI using the log-rank test in R?
怎么用R的log-rank检验分析HR和95%置信区间

The R survival package is very useful to do survival analysis. And I know the survdiff function can be used to compare the difference of survival time in two or more groups. And the p-value number can also be calculated as below. However, how can I calculate the HR and 95% CI using the log-rank test.
R的生存期包对生存分析很有用。我知道survdiff函数可以被用于比较2组或多组生存时间差异。p值可以如下方法计算。然而，我不知道怎么使用log-rank检验计算HR和95%置信区间(CI)。

And I also know I can use the coxph() function to calculate the HR and 95% CI using the Cox regression. However, as the assumption of both the Cox model and log-rank test are that the hazard ratio stay constant over time, so I think I can also calculate the HR and 95% CI using the log-rank test.
我知道怎么使用Cox回归的coxph()函数计算HR和95%CI。然而，Cox模型和log-rank检验的假设都是风险比随着时间稳定，所以我认为我可以使用log-rank检验计算 HR and 95% CI。

According to the book Survival Analysis: A Practical Approach, I got two formulas on Page 62 and 66 to do this (as shown below). So I wrote the R code as below, is there anybody know whether I'm right?
按照《生存分析：实用方法》一书，我在P62和P66看到2个做这个的函数（如下）。所以，我写了如下R代码，有人知道我这么写对吗？

library(survival)
data.survdiff <- survdiff(Surv(time, status) ~ group)
p.val = 1 - pchisq(data.survdiff$chisq, length(data.survdiff$n) - 1)
HR = (data.survdiff$obs[2]/data.survdiff$exp[2])/(data.survdiff$obs[1]/data.survdiff$exp[1])
up95 = exp(log(HR) + qnorm(0.975)*sqrt(1/data.survdiff$exp[2]+1/data.survdiff$exp[1]))
low95 = exp(log(HR) - qnorm(0.975)*sqrt(1/data.survdiff$exp[2]+1/data.survdiff$exp[1]))


输出：
> data.survdiff
Call:
survdiff(formula = Surv(data[, "os_whw"], data[, "status_whw"] == 
    1) ~ data[, "pcascore"] >= median(data[, "pcascore"]))

                                                       N Observed Expected (O-E)^2/E (O-E)^2/V
data[, "pcascore"] >= median(data[, "pcascore"])=FALSE 4        3     4.33     0.411     0.974
data[, "pcascore"] >= median(data[, "pcascore"])=TRUE  5        5     3.67     0.486     0.974

 Chisq= 1  on 1 degrees of freedom, p= 0.324 
> p.val
[1] 0.3235935
> HR
[1] 1.970484
> up95
[1] 7.917248
> low95
[1] 0.4904239





4.6.1 回答1
#############
如果你的问题是两组生存是否有差异，不管其他特性，你应该使用KM估计并获得P值。这是用log-rank检验获得的。仅仅考虑组间生存期差异。如果你（1）分组时随机的（2）仅仅想知道组间生存时间差异（3）想看生存曲线，则这个方法很合适。

然而，如果分组不是随机的而是基本特性差异很大（比如年龄、性别差异），简单的生存分析用处就不大了（比如可能生存差异是年龄因素造成的）；这就是需要引入Cox回归。你使用Cox回归比较生存同时调整混杂因素。如果Cox回归没有包含“分组”之外的预测因素，得到的p值和KM 估计中的log rank检验结果是一样的。但是Cox回归能让你获得每个预测因素的HR和CI，以及p值。

使用Sruvival包中的coxph函数，或者rms包中的cph函数。

通常不用为此纠结。使用Rms包中的函数就很好，还有一本很棒的与包同名的书(Springer; FE Harrell)。包中有可视化和表格化的函数。

可能你有些理论我不理解，但是这时有一个专家会指导我们。其他场景中，你会感觉这个途径很好。

The package: http://cran.r-project.org/web/packages/rms/rms.pdf

The book: http://www.springer.com/mathematics/probability/book/978-0-387-95232-1

(Btw: you can obtain Cox adjusted survival curves; 
google it or check out RMS package documentation).





4.6.2 回答2

你的实现看样子是对的，你认为log-rank可以用于计算HR和95%CI，但我有点问题：
1.你重新计算p值有特殊的理由吗？（因为survdiff()函数已经提供了，重算就像是额外工作）
2.你函数中的HR和95%，和使用coxph()函数计算出来的一致吗？使用coxph()函数验证你的实现。

注意：coxph()函数已经计算过，你为什么用log-rank检验又算了一次HR和95%CI？

I agree with your idea that log-rank test is used to compare the survival of two groups.






refer
1.[推荐]R的生存期包
https://cran.r-project.org/web/packages/survival/survival.pdf
2. http://stats.stackexchange.com/questions/124489/how-to-calculate-the-hr-and-95ci-using-the-log-rank-test-in-r

3.Use Software R to do Survival Analysis and Simulation. A tutorial
http://www.ms.uky.edu/~mai/Rsurv.pdf

10.英文图书 https://www.amazon.com/dp/0470870400/?tag=stackoverfl08-20

R语言的with和by http://statmethods.net/stats/withby.html

生存分析完整论述：https://cran.r-project.org/web/views/Survival.html  太复杂了



http://wenku.baidu.com/link?url=Ld9FAX6pFUfLet5YtTToTtyzhQ2GA2mD9IkmhBqHjjDEb3e3S2BAI8C3hxZ3UxhGKUhWD4aT_uh8rWIJmEvY0fFJtdmU1VWwQzlF9LolNU7
如何用graphpad制作生存曲线？ http://www.dxy.cn/bbs/topic/25619320
http://blog.csdn.net/shmilyringpull/article/details/17529637




========================================
GO(BP, CC, MF)分析——DAVID做基因富集分析和ggplot2可视化
----------------------------------------
1.概念
BP(Biological Process，生物学过程，比如参与了细胞免疫，凋亡，细胞增殖等等)，
CC（cellular component，所处细胞中的位置，比如蛋白在细胞膜、线粒体中还是在核内等），
MF（Molecular Function，分子功能，比如是个什么酶，还是个载体蛋白什么的）


目前市场上有很多做富集分析的软件。
GOstat，onto-tool，GOEAST，wego，GSEA，DAVID等。

富集分析概念佶屈聱牙，十分晦涩难懂。其实通俗的来讲就是看看我们要感兴趣的东西在我们要研究的集合中多不多。



2.获取数据集
(1)对比肿瘤和瘤旁，得到差异表达基因列表
或者获得高变基因列表
(2)使用DAVID服务器获取GO分析的信息:Term	Count	percentage	log(P)	type
https://david-d.ncifcrf.gov/tools.jsp


3.使用R的ggplot2可视化

#从DAVID上复制如下信息：
#Term	Count	percentage	log(P)	type
#cell cycle	18	28.6	6.443697499	BP
#cell cycle phase	14	22.2	6.443697499	BP
#condensed chromosome	7	11.1	2.920818754	CC
#chromosome	10	15.9	2.508638306	CC

#读取剪切板
tmp=read.table("clipboard", sep="\t",header = T)
head(tmp)
dim(tmp) #35 5

library("dplyr")
#tmp2=tmp[order( tmp$log.P., tmp$Term),]
#tmp2=tmp %>% group_by(type) %>% arrange(log.P.) 
#tmp2=tmp %>% group_by(type, (log.P.) ) 
tmp2=tmp

library("ggplot2")
p <- ggplot(data=tmp2, aes(x=Term, y=log.P., fill=type) ) +
  geom_bar(stat="identity", width=0.8) + 
  coord_flip() +  #反转x和y坐标轴
  #scale_fill_manual(values = CPCOLS) + #theme_bw() + 
  scale_x_discrete(limits=rev(tmp2$Term) ) + #限定x坐标的顺序
  xlab("") + ylab("-log(adj.P.value)")+
  theme(axis.text=element_text(face = "bold", color="gray50")) +
  labs(title = "Significant Enriched GO Terms")
p

#

##############################
#待优化颜色图例的版本
##############################
#复制的excel数据需要有type(BP,CC,MF,KEGG), term, logP列
go=read.table("clipboard",header=T,sep="\t")
dim(go) #11 9
go[1:3,1:4]

#
library('ggplot2')
plotGO=function(tmp2, txt=""){
  p <- ggplot(data=tmp2, aes(x=term, y=logP, fill=type) ) +
    geom_bar(stat="identity", width=0.8) + 
    coord_flip() +  #反转x和y坐标轴
    #scale_fill_manual(values = CPCOLS) + #theme_bw() + 
    scale_x_discrete(limits=rev(tmp2$term) ) + #限定x坐标的顺序
    xlab("") + ylab("-log(q Value)")+
    theme(axis.text=element_text(face = "bold", color="gray50")) +
    #labs(title = paste0("Significant Enriched GO and KEGG Terms ",txt))
    labs(title = paste0("Significant Terms ",txt))
  p
}

library("dplyr")
tmp=go
# if Metascape data:
#tmp$type=tmp$Category
#tmp$term=paste0("(",go$GO,")",go$Description)
#
tmp2=tmp[order(tmp$type, -tmp$logP),] #排序
#tmp2=tmp %>% group_by(type) %>% arrange(-logP) 
#tmp2=tmp %>% group_by(type, (logP) ) 
#tmp2=tmp

plotGO(tmp2,"(Right 5% Genes)")
##




========================================
R语言ggplot2绘图教程——差异表达基因火山图
----------------------------------------
#http://agetouch.blog.163.com/blog/static/22853509020161194123526/
#  Using ggplot2 for volcano plots 使用ggplot2画火山图
library(ggplot2)

#读取数据 #data download from GEO2R result
setwd("C:\\Users\\Administrator\\Desktop")
dif=read.table(file="Primary Tumor_Normal Colon.txt",header=T,row.names=1)
dif[1:3,1:4]

#添加显著与否标签
no_of_genes=nrow(dif);no_of_genes #4653
dif$threshold = as.factor(abs(dif$logFC) > 2 & dif$P.Value < 0.05/no_of_genes)

#画火山图
g = ggplot(data=dif, aes(x=logFC, y=-log10(P.Value), colour=threshold)) +
  geom_point(alpha=0.4, size=1.75) +
  #opts(legend.position = "none") + 
  theme(legend.title=element_blank()) +
  scale_colour_hue(labels=c("Not sig.","Sig."))+
  #xlim(c(-10, 10)) + ylim(c(0, 15)) +
  xlab("log2[fold change]") + ylab("-log10[p-value]") +
  labs(title="Volcano plot")
g

#只标注显著基因的基因名
# 选出一部分基因：FC大且p小的基因
dd_text = dif[(abs(dif$logFC) > 2) & (dif$P.Value < 0.05/no_of_genes),]
head(dd_text)

#添加文字-基因名
g + geom_text(data=dd_text, aes(x=logFC, y=-log10(P.Value), label=dd_text$Gene.symbol), colour="black")

#保存图片
ggsave("volcano.png")
ggsave("volcano8.png",g,width=8,height=8)

========================================
R语言ggplot2绘图教程——Pathway富集分析气泡图zz  
----------------------------------------
代码：
library(ggplot2)  
pathway = read.table("C://Users//Desktop//path.richFactor.head20.tsv",header=T,sep="\t")  
# 画图  
p = ggplot(pathway,aes(richFactor,Pathway))  
p=p + geom_point()  
# 改变点的大小  
p=p + geom_point(aes(size=R0vsR3))  
# 四维数据的展示  
pbubble = p + geom_point(aes(size=R0vsR3,color=-1*log10(Qvalue)))  
# 自定义渐变颜色  
pbubble =pbubble+ scale_colour_gradient(low="green",high="red")  
# 绘制pathway富集散点图  
pr = pbubble + scale_colour_gradient(low="green",high="red") +   
  labs(color=expression(-log[10](Qvalue)),size="Gene number",  
       x="Rich factor",y="Pathway name",title="Top20 of pathway enrichment")  
# 改变图片的样式（主题）  
pr=pr + theme_bw()  
pr 



备注，绘图数据的说明：
1)Pathway : 通路的名称        
2)R0vsR3 ：差异表达基因中，属于这个通路的基因的数量
3)All_Unigene：所有基因中属于这个通路的基因的数量  
4)Pvalue ：富集分析p值
5)Qvalue ：富集分析的Q值
6)richFactor ：在我们分析报告中，没有提供这一列，但很容易计算。是 第二列 除以 第三列得到；
7)Pathway ID  ：通路ID  
8)Genes ：通路中基因的ID
9)KOs：通路中基因的KO号


http://blog.csdn.net/sinat_38163598/article/details/72827851



========================================
R语言画barplot堆叠条形图
----------------------------------------
用于表现一个样本中有多少种亚型及其比例。
比如种群中的亚群比例，组织中的突变比例等信息。

数据实例：
province	cl1	cl2	cl3	cl4
10	0.927	0.012	0.023	0.038
10	0.894	0.057	0.009	0.04
15	0.03	0.277	0.262	0.431
15	0.032	0.768	0.042	0.159
16	0.021	0.731	0.058	0.19
16	0.017	0.914	0.042	0.027
17	0.011	0.945	0.011	0.033
17	0.013	0.96	0.014	0.013
18	0.207	0.148	0.223	0.422
18	0.677	0.084	0.119	0.12
19	0.064	0.124	0.223	0.589
19	0.539	0.194	0.027	0.24
20	0.021	0.041	0.058	0.879
20	0.027	0.046	0.106	0.821
21	0.018	0.102	0.051	0.829
21	0.026	0.122	0.167	0.685
22	0.015	0.012	0.956	0.017
22	0.063	0.018	0.905	0.014
23	0.015	0.018	0.93	0.038
23	0.018	0.025	0.938	0.018
23	0.023	0.046	0.864	0.067


代码：

#从剪切板读取数据
tbl2=read.table('clipboard',header=T)
#画条状图
barplot(t(as.matrix(tbl2))[-1,],col=rainbow(4), 
  #names.arg=(paste(substr(FirstName,1,1),".",LastName)),   #设定横坐标名称
  names.arg=tbl2$province,
  space=0, #条形间距
  xlab="Individual #", ylab="Ancestry",border=NA)
#axis(las=3,labels=tbl2$province)

#refer
#http://blog.163.com/imnoqiao@126/blog/static/35265851201611633153720/
#http://blog.sina.com.cn/s/blog_670445240102uwo3.html
#axis(1, lab=(t(as.matrix(tbl2))[1,]), cex.axis = 1.2)


问题：怎么在barplot图的上下标上文字注释？顶部标上分类，底部标上来源地。

这一步是structure软件的可视化部分。
more: http://agetouch.blog.163.com/blog/static/228535090201761982522397/


========================================
TCGA数据做基因共表达散点图 with r And p value 
----------------------------------------
#从TCGA下载数据，csv文件两列，分别是两个基因的表达量。


fname="C:\\Users\\admin\\Downloads\\export.csv"
data1=read.csv(fname,header=T,sep=",")
head(data1)

#计算r和p
ts=cor.test(data1$CSF1, data1$CD33); ts
str(ts)
p=ts$p.value;p
r=ts$estimate[['cor']];r
r0=round(r,2);r0
p0=formatC(p, format = "e", digits = 2);p0

#画图
library(ggplot2)
library(cowplot)
g=ggplot(data1, aes( log2(CSF1), log2(CD33) ))+
  geom_point( color="#F87B72", alpha=0.75, size=1)+
  geom_smooth(method='lm', se=F,color="black",size=0.5)+ #se=F不要置信区间的阴影
  theme_cowplot()+ #除掉主题背景阴影
  geom_text(size=6,aes(x=12,y=2.5,label=paste0("r = ",r0,"\n p = ",p0)))+
  theme(legend.position="none")+
  labs(x="CSF1 expression(log)",y="CD33 expression(log)")
g #58ACFA
library(Cairo)
CairoPDF(file="wangbl0.5.pdf",width=7,height=7)
g
dev.off()
#
# g+scale_y_log10()+scale_x_log10() #简便写法

#为什么趋势线是歪的？
#重新构建数据也是歪的，看来不是smooth和对数的原因。
data2=data1
data2$CSF1=log2(data1$CSF1)
data2$CD33=log2(data1$CD33)
ggplot(data2, aes( CSF1, CD33, alpha=0.2 ))+geom_point()+geom_smooth(method="lm")
#
#



========================================
常用R脚本
----------------------------------------


GC含量统计：http://www.biotrainee.com/forum.php?mod=viewthread&tid=625&page=2#pid1904



========================================
R语言k折交叉验证 k fold C.V.
----------------------------------------
# 原理分析 https://blog.csdn.net/Tanya_girl/article/details/50221797

library(caret)
#caret包中有createFolds函数，如
training=iris
set.seed(7)
folds<-createFolds(y=training$Species,k=10)
#这里参数y是训练数据集label,k是几折交叉验证
#我们可以看看这里输出是什么
folds
#可以看出来folds有10个元素

#可见folds里每个元素是原来label长度的十分之一，存的是label的id随机的十分之一
#可以写个for循环进行交叉验证
for(i in 1:10){
  train_cv<-training[-folds[[i]],]
  test_cv<-training[folds[[i]],]
  
  print(i)
  print(train_cv)
  print(test_cv)
}


# 完整代码这里：https://blog.csdn.net/tiaaaaa/article/details/58116346


========================================
使用Cairo画图——R语言的高质量图形渲染库Cairo
----------------------------------------

常用语句

library(Cairo)
CairoPDF(file="xx.pdf",width=10,height=10)
plot(c(1,2,3,8))
dev.off()




https://www.cnblogs.com/payton/p/5391680.html
#R语言不仅在统计分析，数据挖掘领域，计算能力强大。在数据可视化上，也不逊于昂贵的商业。当然，背后离不开各种开源软件包的支持，Cairo就是这样一个用于矢量图形处理的类库。
# Cairo可以创建高质量的矢量图形(PDF, PostScript, SVG) 和 位图(PNG, JPEG, TIFF)，同时支持在后台程序中高质量渲染！
# 本文将介绍，Cairo在R语言中的使用。
#特别是原生画图命令失效的时候。
#莫名其妙不能使用X11生成图片, 只好使用图形渲染库Cairo。


1.安装
Cairo基本库安装
~ sudo apt-get install libcairo2-dev
~ sudo apt-get install libxt-dev
~ R 
> install.packages("Cairo")

2.Cairo使用
Cairo使用起来非常简单，和基础包grDevices中的函数对应。

CairoPNG: 对应grDevices:png()
CairoJPEG: 对应grDevices:jpeg()
CairoTIFF: 对应grDevices:tiff()
CairoSVG: 对应grDevices:svg()
CairoPDF: 对应grDevices:pdf()
我常用的图形输出，就是png和svg。

检查Cairo的兼容性：
~ R
> library(Cairo)
> Cairo.capabilities()
   png   jpeg   tiff    pdf    svg     ps    x11    win raster
  TRUE   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE  FALSE   TRUE
下面比较一下 CairoPNG() 和 png() 输出效果。

1). 散点图


x<-rnorm(6000)
y<-rnorm(6000)

# PDF格式
CairoPDF(file="Cairo4.pdf",width=10,height=10) #开始画图
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo") #画图语句
dev.off() #结束画图




# PNG图
png(file="plot4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot")
dev.off()

CairoPNG(file="Cairo4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo")
dev.off()

# SVG图
svg(file="plot-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot-svg")
dev.off()

CairoSVG(file="Cairo-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo-svg")
dev.off()



========================================
CentOS6.8 安装 Rstudio server
----------------------------------------

https://www.rstudio.com/products/rstudio/download-server/

$ wget https://download2.rstudio.org/rstudio-server-rhel-1.1.463-x86_64.rpm
$ sudo yum install rstudio-server-rhel-1.1.463-x86_64.rpm

Next Steps
1.See the Getting Started document for information on configuring and managing the server.
http://www.rstudio.com/ide/docs/server/getting_started

2.Read the RStudio Server Professional Admin Guide for more detailed instructions.
http://docs.rstudio.com/ide/server-pro/



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------

