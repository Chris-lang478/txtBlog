R杂货铺-奇淫巧技


# 设置镜像，加速下载包。
options(repos="http://mirrors.usts.edu.cn/CRAN/")

# 查看当前镜像
getOption('repos')



直接指定包的版本和地址
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")




========================================
R 的常用设置代码
----------------------------------------
options(stringsAsFactors = FALSE)


setwd("/data/wangjl/scScripts/")
getwd()



dir.create("backup/b2/") #CellTalk/

outputRoot=paste0( getwd(), "/backup/b2/") 
outputRoot









========================================
安装或更新 R base 
----------------------------------------




========================================
|-- 查看当前的R环境、R包及其版本号，出错提问时必备
----------------------------------------
sessionInfo()



========================================
|-- 抑制 warning
----------------------------------------
1. options(warn=-1)

warn如果是负数，则所有warning message都被忽略
warn = 0 (0为默认值)，则所有warning messages会被储存起来直到上级函数(此例中则是repeat()函数)运行结束
warn = 1，则一旦产生warning message，这条信息会被立即显示出来
warn = 2 或更大的数值， 则warning message会被立即显示并转换成error message。此例中，如果warn = 2，整个自定义函数都会被中断，提示warning message的内容，但是会以error message的形式弹出。



2.Rstudio中，也可以
warnings('off')



ref:
https://blog.csdn.net/stat_elliott/article/details/37878247





========================================
|-- Rstudio server 如何切换R版本 / CentOS6 (编译)安装R和Rstudio
----------------------------------------
http://xuzhougeng.top/archives/Using-different-R-version-in-RStudion-linux-macOS

1. install on CentOS 6

## 之前的旧版本R
$ which R
/usr/local/bin/R

$ whereis R
R: /usr/bin/R /usr/lib64/R /usr/local/bin/R /usr/include/R /usr/share/R /usr/share/man/man1/R.1.gz

$ /usr/bin/R --version
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"

$ /usr/local/bin/R --version
R version 3.5.3 (2019-03-11) -- "Great Truth"





(1)Rstudio-server更改R版本 
https://www.cnblogs.com/BlueBlueSea/p/13348003.html

1). rsession-which-r:  https://docs.rstudio.com/ide/server-pro/r-sessions.html
$ rsession-which-r=/usr/local/bin/R
2) 多版本R的安装  https://docs.rstudio.com/resources/install-r/，照着这个安装不会有什么问题。
3) 重启 https://www.jianshu.com/p/20cbecc83408，一定要有sudo
$ sudo rstudio-server restart             #重启RStudio-server
然后刷新8787链接，查看R的版本
4) 更改R版本
http://xuzhougeng.top/archives/Using-different-R-version-in-RStudion-linux-macOS

在安装完成之后，之后切换R语言，只需要用不同版本的R覆盖/usr/local/bin下面的R即可。
ln -sf /opt/sysoft/R-3.5.3/bin/R /usr/local/bin
ln -sf /opt/sysoft/R-3.6.1/bin/R /usr/local/bin

ln -sf /opt/sysoft/R-4.0.3/bin/R /usr/local/bin
ln -sf /opt/sysoft/R-4.0.3/lib64 /usr/local/lib64





(2) 新安装R 
## 彻底删除默认位置的旧版本R
$ ls -lth /usr/local/bin/R*
-rwxr-xr-x. 1 root root  25K Dec 29 21:26 /usr/local/bin/Rscript
-rwxr-xr-x. 1 root root 8.9K Dec 29 21:26 /usr/local/bin/R

$ sudo mv /usr/local/lib64/R/library /usr/local/lib64/R/library.old

$ cd /usr/local/lib64/
$ sudo mv R R.old


## 开始安装新版本的R
$ sudo mkdir -p /data4/soft
$ sudo chown wangjl /data4/soft

$ wget https://mirrors.sjtug.sjtu.edu.cn/cran/src/base/R-4/R-4.0.3.tar.gz
$ tar zxvf R-4.0.3.tar.gz
$ cd R-4.0.3
## ./configure 
$ ./configure --prefix=/data4/soft/R-4.0.3 --enable-R-shlib ##必须有后面这个选项(/data4/soft/R-4.0.3/lib64/R/lib/libR.so)，否则无法使用Rstudio。
$ make 
$ sudo make install
$ make clean #删除无用中间文件


$ /data4/soft/R-4.0.3/bin/R --version
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"

## 加链接
$ sudo ln -sf /data4/soft/R-4.0.3/bin/R /usr/local/bin
$ sudo ln -sf /data4/soft/R-4.0.3/bin/Rscript /usr/local/bin
$ sudo ln -sf /data4/soft/R-4.0.3/lib64/R /usr/local/lib64/R
$ R --version ## 已经是最新版 R version 4.0.3

/usr/local/bin/R 指向哪个版本，都可以。



$ export RSTUDIO_WHICH_R=/usr/local/bin/R  //todo



第一次安装包的时候报错，要给2个文件夹添加写的权限：
> install.package('ggplot2')

$ sudo chmod a+w /data4/soft/R-4.0.3/lib64/R/doc/manual/
$ sudo chmod a+w /data4/soft/R-4.0.3/lib64/R/doc/html/




(3) 安装 rstudio 
## 删除旧的
$ yum list | grep -i rstudio
## rstudio-server.x86_64                      1.3.1093-1             installed
$ sudo rpm -e --nodeps rstudio-server.x86_64 
## 新安装前把旧的 配置目录 删掉
$ sudo mv /etc/rstudio /etc/rstudio-backup


## 安装
$ cd ~/software/
## https://rstudio.com/products/rstudio/download-server/redhat-centos/
$ wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-1.3.1093-x86_64.rpm
$ sudo yum install rstudio-server-rhel-1.3.1093-x86_64.rpm

https://support.rstudio.com/hc/en-us/articles/200552306-Getting-Started
https://docs.rstudio.com/ide/server-pro/

## 启动
$ sudo service rstudio-server status

$ sudo vim /etc/rstudio/rserver.conf
www-port=8788

$ sudo service rstudio-server restart


$ sudo service rstudio-server stop 
$ sudo service rstudio-server status 
$ sudo service rstudio-server restart 
$ ps -aux | grep -i rsession| sudo xargs kill -9 {}
$ ps -aux | grep -i rserver| sudo xargs kill -9 {}



$ sudo vim /etc/rstudio/rserver.conf
www-port=8788
## 添加一行。只能有一行有效，其余版本都注释掉。
rsession-which-r=/data4/soft/R-4.0.3/bin/R
#rsession-which-r=/data4/curR/bin/R
#rsession-which-r=/usr/local/bin/R
#rsession-which-r=~/biotools/anaconda2/bin/R
#rsession-which-r=/usr/bin/R

#确认配置文件书写的有效
## sudo rstudio-server verify-installation

$ sudo service rstudio-server restart



## 进程查pid，pid查端口号
$ ps -aux | grep rstudio
$ sudo netstat -anp | grep 66302




(4) 打开一个8787端口:
$ sudo iptables -L
Chain IN_public_allow (1 references)
target     prot opt source               destination         
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh ctstate NEW
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:distinct ctstate NEW
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:8788 ctstate NEW
ACCEPT     udp  --  anywhere             anywhere             udp dpt:8788 ctstate NEW

//开放8787端口访问
iptables -I IN_public_allow -p tcp --dport 8787 -j ACCEPT
iptables -I INPUT -p tcp --dport 8787 -j ACCEPT





(5) 这个报错: Error occurred during transmission
就是 R和 R的lib不配套，旧的包和新的R冲突。
要完全清除掉R及其lib，再重新安装一套。




(6) 清理rstudio的缓存
$ sudo service rstudio-server stop

~/.config/rstudio/ 	            All user settings (Global Options)
~/.local/share/rstudio/ 	    All open files and tabs
~/.rstudio/ 	                All active and suspended sessions

类似这样注释掉
$ mv ~/.local/share/rstudio ~/.local/share/rstudio.old

$ sudo service rstudio-server restart




## 又删除了，重新来

## 系统升级，看看效果
$ sudo yum update 







(7) 问题：libcurl >= 7.28.0
$ ./configure 
## 报错： configure: error: libcurl >= 7.28.0 library and headers are required with support for https
## 安装该包
$ sudo yum search libcurl
## libcurl-devel.x86_64 : Files needed for building applications with libcurl
$ sudo yum install libcurl-devel.x86_64
Updated:
  libcurl-devel.x86_64 0:7.29.0-59.el7_9.1 
Dependency Updated:
  curl.x86_64 0:7.29.0-59.el7_9.1   libcurl.x86_64 0:7.29.0-59.el7_9.1   libssh2.x86_64 0:1.8.0-4.el7
##


## 再试，还是报错
$ ./configure 
checking if libcurl is version 7 and >= 7.28.0... 
configure: error: libcurl >= 7.28.0 library and headers are required with support for https

## 现在使用的 curl是conda安装的:
$ curl --version ##curl 7.55.1 (x86_64-conda_cos6-linux-gnu) libcurl/7.55.1 OpenSSL/1.0.2l zlib/1.2.11 libssh2/1.8.0 Release-Date: 2017-08-14
$ which curl ##~/software/anoconda3/bin/curl

## 修改路径
$ whereis curl  ##curl: /usr/bin/curl /usr/local/bin/curl /usr/include/curl /data4/wangjl/software/anoconda3/bin/curl /usr/share/man/man1/curl.1.gz
$ /usr/bin/curl --version ## 这个版本太低 curl 7.29.0 (x86_64-redhat-linux-gnu) libcurl/7.61.0 OpenSSL/1.0.2k zlib/1.2.7
$ /usr/local/bin/curl --version ##curl 7.61.0 (x86_64-pc-linux-gnu) libcurl/7.61.0 OpenSSL/1.0.2k zlib/1.2.7  Release-Date: 2018-07-11
$ vim ~/.bashrc ## 修改路径顺序 export PATH=/usr/local/bin/:$PATH
$ curl --version
curl 7.61.0 (x86_64-pc-linux-gnu) libcurl/7.61.0 OpenSSL/1.0.2k zlib/1.2.7
Release-Date: 2018-07-11


## 3试新警告
$ ./configure  #不能生成pdf
## configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally

## 修复该报错。退出到software目录安装
wget http://mirrors.ctan.org/fonts/inconsolata.zip
unzip inconsolata.zip 
cp -Rfp inconsolata/* /usr/share/texmf/
mktexlsr


## 4试通过
$ ./configure
## Installation directory:      /usr/local
## configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally
还是这个警告，怎么办?
不管了，接着进行吧。








(8) Xming显示问题：对ggplot2显示出错。
> ggplot(cars, aes(speed, dist))+geom_point()
Error in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)) :
  X11 font -adobe-helvetica-%s-%s-*-*-%d-*-*-*-*-*-*-*, face 1 at size 9 could not be loaded
#
> names(X11Fonts())
[1] "serif"        "sans"         "mono"         "Times"        "Helvetica"   
[6] "CyrTimes"     "CyrHelvetica" "Arial"        "Mincho"






























========================================
|-- centOS6 中Rstudio 无法直接画图 //todo 未解决
----------------------------------------

1. 测试

(1) 
x<-rnorm(6000)
y<-rnorm(6000)
 
# PNG图
png(file="plot.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot")




(2)
setwd('/home/wangjl/')

library(ggplot2)
p=ggplot(mtcars, aes(mpg, cyl)) + geom_point()
p
pdf('1.pdf', width=4, height=4)
print(p)
dev.off()

直接画图报错:
Error in RStudioGD() : 
  Shadow graphics device error: r error 4 (R code execution error)
In addition: Warning message:
In grDevices:::png("/tmp/RtmpLyG5X5/cc09a1286efc4ae5902cd8c0ba0d4636.png",  :
  unable to open connection to X11 display ''
#

输出到pdf正常。




(3) 
> capabilities()
   jpeg         png        tiff       tcltk         X11        aqua 
   FALSE       FALSE       FALSE        TRUE       FALSE       FALSE 
http/ftp     sockets      libxml        fifo      cledit       iconv 
    TRUE        TRUE        TRUE        TRUE        TRUE        TRUE 
     NLS     profmem       cairo         ICU long.double     libcurl 
    TRUE       FALSE       FALSE        TRUE        TRUE        TRUE
#

> Sys.getenv("DISPLAY")
#[1] ":0"

> Sys.setenv("DISPLAY"=":0.0")
> Sys.setenv("DISPLAY"=":0")






2. 尝试解决

ref: https://zhuanlan.zhihu.com/p/60714584
RStudioGD()是tools包的一个函数，是RStudio的一个绘图设备，服务器端出现该故障的一个原因是由于Linux系统里cairo与我们安装的R所依赖的cairo版本不一致导致的。

根据本人经验，Centos里的镜像里的R（目前是R 3.5.3）目前还是根据cairo 1.14来编译绘图设备的，如果升级到cairo1.15就会出现这个RStudioGD Shadow graphics device error: r error 4，结果服务器上的Rstudio不能画图了

$ sudo yum list | grep cairo | grep 1.14
$ sudo yum list | grep cairo | grep 1.15


(1)
$ yum install libpng libpng-devel

报错:
Protected multilib versions: 2:libpng-1.5.13-8.el7.x86_64 != 2:libpng-1.5.13-7.el7_2.i686

$ sudo yum list installed | grep libpng
libpng.x86_64                              2:1.5.13-7.el7_2       @base         
libpng-devel.x86_64                        2:1.5.13-7.el7_2       @base        
 
libpng.i686                                2:1.5.13-8.el7         base          
libpng.x86_64                              2:1.5.13-8.el7         base          
libpng-devel.i686                          2:1.5.13-8.el7         base          
libpng-devel.x86_64                        2:1.5.13-8.el7         base          
libpng-static.i686                         2:1.5.13-8.el7         base          
libpng-static.x86_64                       2:1.5.13-8.el7         base   
       
libpng12.i686                              1.2.50-10.el7          base          
libpng12.x86_64                            1.2.50-10.el7          @base         
libpng12-devel.i686                        1.2.50-10.el7          base          
libpng12-devel.x86_64                      1.2.50-10.el7          base 



sudo apt install libpango1.0-dev




(2) 缺少字体？
## xvfb xauth xfonts-base  x11-utils
$ sudo yum search xorg-x11-fonts | grep noarch
$ sudo yum install xorg-x11-fonts-*.noarch

$ sudo yum install xorg-x11-server-Xvfb.x86_64
$ sudo yum install xorg-x11-xauth.x86_64
$ sudo yum install xorg-x11-utils.x86_64


# 已经有了 yum  install cairo* libXt*
$  yum install libXt-devel.x86_64
## yum install libXt-devel.i686


$ xvfb-run Rscript ~/temp/01.R
pdf 
  2 
#


> png('1.png')
Error in .External2(C_X11, paste0("png::", filename), g$width, g$height,  : 
  unable to start device PNG
In addition: Warning message:
In png("1.png") : unable to open connection to X11 display ''




(3) 又一次尝试
https://zhuanlan.zhihu.com/p/149845136

先安装包和字体
#install relevant lib/header files
sudo yum install libjpeg-devel libtiff-devel cairo-devel libpng-devel libicu-devel libXt-devel libX11-devel readline-devel zlib-devel bzip2-devel xz-devel pcre-devel openssl-devel curl-devel

#install fonts
sudo yum install xorg-x11-fonts-100dpi.noarch xorg-x11-fonts-75dpi.noarch xorg-x11-fonts-ISO8859-1-100dpi.noarch xorg-x11-fonts-ISO8859-1-75dpi.noarch xorg-x11-fonts-ISO8859-14-100dpi.noarch xorg-x11-fonts-ISO8859-14-75dpi.noarch xorg-x11-fonts-ISO8859-15-75dpi.noarch xorg-x11-fonts-ISO8859-2-100dpi.noarch xorg-x11-fonts-ISO8859-2-75dpi.noarch xorg-x11-fonts-ISO8859-9-100dpi.noarch xorg-x11-fonts-ISO8859-9-75dpi.noarch xorg-x11-fonts-Type1.noarch xorg-x11-fonts-cyrillic.noarch xorg-x11-fonts-ethiopic.noarch xorg-x11-fonts-misc.noarch 



## 重新编译
$ ./configure --prefix=/data4/soft/R-4.0.3 --enable-R-shlib --with-x=no --with-cairo=yes
##必须有后面这个选项(/data4/soft/R-4.0.3/lib64/R/lib/libR.so)，否则无法使用Rstudio。

## Capabilities skipped:        cairo

$ make  ## 十分耗时
$ sudo make install





$ ls -ls /opt/R/3.5.0/lib/R/modules/
total 1264
476 -rwxr-xr-x 1 777 777 484888 Jul  8 20:35 R_X11.so

$ ldd /opt/R/3.5.0/lib/R/modules/R_X11.so
        linux-vdso.so.1 =>  (0x00007fff5d3b6000)
        libtiff.so.5 => /usr/lib/x86_64-linux-gnu/libtiff.so.5 (0x00007f9af387e000)
#


删除系统的R，然后就可以重新编译了。
The solution was to uninstall the system version of R and purge all it's dependencies (R-core, R-java, etc). We then installed source versions of R in the /opt/R folder. This solved the problem and now we have multiple R versions available.


$ sudo yum install libpng libpng-devel libtiff libtiff-devel libjpeg-turbo libjpeg-turbo-devel




$ whereis R
R: /usr/bin/R /usr/lib64/R /usr/local/bin/R /usr/include/R /usr/share/R /usr/share/man/man1/R.1.gz

$ /usr/bin/R 
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> capabilities()
       jpeg         png        tiff       tcltk         X11        aqua 
       TRUE        TRUE        TRUE        TRUE       FALSE       FALSE 
#



$ /usr/local/bin/R
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
> capabilities()
       jpeg         png        tiff       tcltk         X11        aqua 
      FALSE       FALSE       FALSE        TRUE       FALSE       FALSE
#


$ sudo yum list | grep R
R.x86_64                                   3.6.0-1.el7            @epel         
R-core.x86_64                              3.6.0-1.el7            @epel         
R-core-devel.x86_64                        3.6.0-1.el7            @epel         
R-devel.x86_64                             3.6.0-1.el7            @epel         
R-java.x86_64                              3.6.0-1.el7            @epel         
R-java-devel.x86_64                        3.6.0-1.el7            @epel


R-core.x86_64                              3.6.0-1.el7            epel          
R-core-devel.x86_64                        3.6.0-1.el7            epel          
R-devel.x86_64                             3.6.0-1.el7            epel          
R-highlight.x86_64                         0.5.0-1.el7            epel


$ sudo yum remove R R-core R-core-devel R-devel R-java R-java-devel

$ make clean


## 重新编译
$ ./configure --prefix=/data4/soft/R-4.0.3 --enable-R-shlib --with-x=/usr/lib64 --with-cairo=/usr/lib64 --with-libpng=/usr/lib64 --with-jpeglib=/usr/lib64 --with-libtiff=/usr/lib64
##必须有后面这个选项(/data4/soft/R-4.0.3/lib64/R/lib/libR.so)，否则无法使用Rstudio。

$ ls /usr/lib64 | grep cairo
libcairo.so
libcairo.so.2

$ locate libjpeg.so
/usr/lib64/libjpeg.so
/usr/lib64/libjpeg.so.62
/usr/lib64/libjpeg.so.62.1.0


## Capabilities skipped:        cairo


环境变量
LIBS        libraries to pass to the linker, e.g. -l<library>
LT_SYS_LIBRARY_PATH              User-defined run-time library search path.

$ ./configure --prefix=/data4/soft/R-4.0.3 --enable-R-shlib --with-libpng --with-jpeglib --with-libtiff --with-x
编译之后，支持了png那些



$ find /home/ -name R -type f 1>wjl 2>/dev/null
$ cat ~/wjl
/home/guosiyuan/miniconda3/bin/R
/home/guosiyuan/miniconda3/lib/R/bin/exec/R
/home/guosiyuan/miniconda3/lib/R/bin/R
/home/guosiyuan/miniconda3/envs/R3.5/bin/R
/home/guosiyuan/miniconda3/envs/R3.5/lib/R/bin/exec/R
/home/guosiyuan/miniconda3/envs/R3.5/lib/R/bin/R
/home/zhoub/local/R/lib64/R/bin/R
/home/zhoub/local/R/lib64/R/bin/exec/R
/home/zhoub/local/R/bin/R







$ make  ## 十分耗时 16:16 - 
$ sudo make install
还是不能用




$ sudo yum install freetype freetype-devel

In doTryCatch(return(expr), name, parentenv, handler) :
  unable to load shared object '/usr/lib64/R/modules//R_X11.so':
  /lib64/libharfbuzz.so.0: undefined symbol: FT_Reference_Face
#

报错信息 config.log

$ sudo yum R R-core R-core-devel R-devel R-java R-java-devel
Running transaction
  Installing : R-core-3.6.0-1.el7.x86_64                                                                                   1/6 
/sbin/ldconfig: libraries libstdc++.so.6 and libstdc++.so.6.0.19 in directory /lib have same soname but different type.
  Installing : R-core-devel-3.6.0-1.el7.x86_64                                                                             2/6 
Error unpacking rpm package R-core-devel-3.6.0-1.el7.x86_64
error: unpacking of archive failed on file /usr/lib64/R/include: cpio: rename
  Installing : R-java-devel-3.6.0-1.el7.x86_64                                                                             3/6 
error: R-core-devel-3.6.0-1.el7.x86_64: install failed
...
Failed:
  R-core-devel.x86_64 0:3.6.0-1.el7









#############
$ yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

on RHEL 7 it is recommended to also enable the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositories:
$ subscription-manager repos --enable "rhel-*-optional-rpms" --enable "rhel-*-extras-rpms"  --enable "rhel-ha-for-rhel-*-server-rpms"


ref: https://blog.csdn.net/qq_40334837/article/details/80019615
总结：-l是告诉链接器要链接的动态库的名字，而-L是告诉链接器库的路径        
-L /opt/libdecode/lib
-L /usr/lib64


sudo cp /usr/local/lib/libpng16.so.16 /usr/lib



#############
unable to load shared object '/data4/soft/R-4.0.3/lib64/R/modules//R_X11.so':
  /lib64/libharfbuzz.so.0: undefined symbol: FT_Reference_Face
#

(1)
$ ./configure --prefix=/data4/soft/R-4.0.3 --enable-R-shlib 
## --with-libpng --with-jpeglib --with-libtiff --with-x


## 做了也没用
# 查找库的位置
$ locate libcairo 
/usr/lib64/libcairo.so
/usr/lib64/libcairo.so.2

修改 config.log 
## Check if the location of libcairo.so is in your LD_LIBRARY_PATH.
LD_LIBRARY_PATH="/usr/local/lib64/" 


(2)
$ make 
$ sudo make install 






#############
https://community.rstudio.com/t/not-able-to-trigger-the-graphics-using-rstudio/33298

After the configure step in the instructions, you should be able to see which capabilities are enabled so you can adjust system dependencies as might be needed.


$ rpm -qa | grep -I png
texlive-dvipng-bin-svn26509.0-45.20130427_r30134.el7.x86_64
texlive-dvipng-svn26689.1.14-43.el7.noarch
libpng-1.5.13-8.el7.x86_64
libpng-devel-1.5.13-8.el7.x86_64
libpng12-1.2.50-10.el7.x86_64

$ rpm -qa | grep -I cairo
cairo-1.15.12-4.el7.x86_64
cairo-devel-1.15.12-4.el7.x86_64

$ rpm -qa | grep -I X11
libX11-devel-1.6.7-3.el7_9.x86_64
libX11-1.6.7-3.el7_9.x86_64
libX11-1.6.7-3.el7_9.i686
libX11-common-1.6.7-3.el7_9.noarch

$ rpm -qa | grep -I pango
pango-1.42.4-4.el7_7.x86_64
pango-devel-1.42.4-4.el7_7.x86_64




#############
#############
#############







###############
> plot(cars)
unable to load shared object '/data4/soft/R-4.0.3/lib64/R/modules//R_X11.so':
  /lib64/libharfbuzz.so.0: undefined symbol: FT_Reference_FaceError in (function (filename = "Rplot%03d.png", width = 480, height = 480,  : 
  X11 module cannot be loaded
#

> capabilities()


> plot(cars)
## Error in RStudioGD() : 
##  Shadow graphics device error: r error 4 (R code execution error)

> plot(cars)
Error in RStudioGD() : 
  Shadow graphics device error: r error 4 (R code execution error)
In addition: Warning message:
In grSoftVersion() :
  unable to load shared object '/data4/soft/R-4.0.3/lib64/R/modules//R_X11.so':
  /lib64/libharfbuzz.so.0: undefined symbol: FT_Reference_Face
#

## Package harfbuzz-1.7.5-2.el7.x86_64 already installed and latest version
## Package harfbuzz-devel-1.7.5-2.el7.x86_64 already installed and latest version




## 编辑配置文件
$ vim ~/.Rprofile
options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))
options(bitmapType='cairo')
# library(colorout)
Sys.getenv(c("DISPLAY"))




########
同样问题，没解决

> plot(cars)
Error in RStudioGD() : 
  Shadow graphics device error: r error 4 (R code execution error)
In addition: Warning message:
In grDevices:::png("/tmp/Rtmpugt1Dx/f3785ca553194f7db553869d743cb903.png",  :
  unable to open connection to X11 display ''
> capabilities(); #png FALSE

1. https://community.rstudio.com/t/not-able-to-trigger-the-graphics-using-rstudio/33298
2. Note that your best friend is config.log and the output of configure - that tells *exactly* what you're missing. 
https://r.789695.n4.nabble.com/How-to-get-R-to-compile-with-PNG-support-td3457938.html

3. https://stackoverflow.com/questions/24999983/r-unable-to-start-device-png-capabilities-has-true-for-png
xvfb-run ?

4. https://stackoverflow.com/questions/26853271/cant-install-r-with-png-support

5. https://bbs.archlinux.org/viewtopic.php?id=135689
Error in function (display = "", width, height, pointsize, gamma, bg,  : 
  X11 module cannot be loaded

6. https://blog.csdn.net/qq_37329349/article/details/87887121
我就重新安装了freetype 库
yum install freetype freetype-devel
安装好了也没用。


7. https://blog.csdn.net/wa2003/article/details/46310811/

8. https://community.rstudio.com/t/compiling-r-from-source-in-opt-r/14666/5
Could you attach config.log please?

As Josh recommended, the full config.log would be helpful. Usually it has notes in there about the capabilities that were added, what libraries were found, etc.

In particular, it would be helpful to know what your system dependencies look like, too. Not sure how effective this will be as non-root, but maybe useful?

$ yum list installed | grep 'jpeg'
libjpeg-turbo.x86_64                       1.2.90-8.el7                @base    
libjpeg-turbo-devel.x86_64                 1.2.90-8.el7                @base    
openjpeg-libs.x86_64                       1.5.1-18.el7                @base    
openjpeg2.x86_64                           2.3.1-3.el7_7               @base 

$ grep jpeg config.log
$ grep cairo config.log

| #error cairo version >= 1.2 required
|     cairo_t  *CC = NULL; // silence picky c

$ sudo yum list | grep cairo
cairo.x86_64                               1.15.12-4.el7          @base         
cairo-devel.x86_64                         1.15.12-4.el7          @base         
baresip-cairo.x86_64                       1.0.0-1.el7            epel          
cairo.i686                                 1.15.12-4.el7          base          
cairo-devel.i686                           1.15.12-4.el7          base 



## https://community.rstudio.com/t/compiling-r-from-source-in-opt-r/14666/15
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/data4/soft/R-4.0.3/lib64/R/lib::/lib:/usr/local/lib64:/usr/local/jdk1.8.0_131/jre/lib/amd64/server"

You could even try system("ldd /path/to/R_X11.so") from inside the R install too, to make sure startup is not causing problems.

$ locate R_X11.so
/data4/curR/lib64/R/modules/R_X11.so
> system("ldd /data4/curR/lib64/R/modules/R_X11.so")

The solution was to uninstall the system version of R and purge all it's dependencies (R-core, R-java, etc). We then installed source versions of R in the /opt/R folder. This solved the problem and now we have multiple R versions available.


either yum install pango-devel OR edit your /etc/rprofile.site file and insert this option:
 options(bitmapType='cairo')


9. https://community.rstudio.com/t/compiling-r-from-source-in-opt-r/14666/7




################
# 从微软下载  https://mran.microsoft.com/download
$ wget https://mran.blob.core.windows.net/install/mro/4.0.2/Rhel/microsoft-r-open-4.0.2.tar.gz
$ tar zxvf microsoft-r-open-4.0.2.tar.gz
$ cd microsoft-r-open/








========================================
|-- ubuntu 安装/更新R
----------------------------------------
1.ubuntu需要先安装依赖两个包，Have you installed curl and xml on linux. Run 
$ sudo apt-get install libcurl4-openssl-dev
and 
$ sudo apt-get install libxml2-dev

 Please install:
     libssl-dev    (package on e.g. Debian and Ubuntu)
     openssl-devel (package on e.g. Fedora, CentOS and RHEL)
     openssl       (Homebrew package on OS X)
   and try again.
$ sudo apt-get install libssl-dev

还有一个依赖包：
$ sudo apt-get install libhdf5-dev

然后才能正常安装R包Seurat。
$ sudo R
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
> source("http://bioconductor.org/biocLite.R")
> biocLite("Seurat")
...
> biocLite("scater")




2.Linux下载和安装R环境。[推荐往下看(2)]
(1)
从镜像 https://mirrors.tuna.tsinghua.edu.cn/CRAN/ 下载最新的R包：
$ wget -b https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu/trusty/r-base-core_3.3.1-1trusty0_amd64.deb

在/etc/apt/sources.list中添加：
To obtain the latest R packages, add an entry like

这个不好使：
deb https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu trusty/

R语言官方：
deb https://cloud.r-project.org/bin/linux/ubuntu trusty/
日本的：
deb https://cran.ism.ac.jp/bin/linux/ubuntu trusty/



然后，更新系统：
$ sudo apt-get update

如果提示public key不对，请先更新gpg
（什么是pgp:http://www.ruanyifeng.com/blog/2013/07/gpg.html）：
http://blog.csdn.net/lichangzai/article/details/39376117
cd ~
gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E084DAB9
gpg -a --export E084DAB9 | sudo apt-key add -
apt-get upgrade
apt-get install r-base


安装R：
$ sudo apt-get install r-base r-base-dev





(2)更好的安装建议：
http://bioinformatics.knowledgeblog.org/2011/06/20/analysing-microarray-data-in-bioconductor/
Install R and BioConductor dependencies, and then start R:

$ sudo apt-get install r-base-core libxml2-dev libcurl4-openssl-dev curl
$ R

Now at the R prompt:

> # download the BioC installation routines
> source("http://bioconductor.org/biocLite.R")
> # install the core packages
> biocLite()
> # install the GEO libraries
> biocLite("GEOquery")




========================================
|-- ubuntu如何更新到R的最新版？
----------------------------------------
https://cran.r-project.org/bin/linux/ubuntu/README
1. 查当前版本
> sessionInfo()
## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.1 LTS



2.
(1) 写入新源
$ sudo vim /etc/apt/sources.list

# 18.04 我的
deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/
# 16.04
deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/
# 14.04
deb https://cloud.r-project.org/bin/linux/ubuntu trusty-cran35/

我用的国内的源
https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu bionic-cran35/

(2)删除旧版本
sudo apt-get --purge remove r-base
sudo apt-get --purge remove r-base-core
sudo apt-get --purge remove r-base-dev
# sudo apt-get remove -y 'r-cran-*'
# apt-get remove 会删除软件包而保留软件的配置文件
# apt-get purge 会同时清除软件包和软件的配置文件



(3) 更新
$ sudo apt-get update
$ sudo apt-get install r-base
## sudo apt-get install r-base r-base-core  r-base-dev

报错 The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 51716619E084DAB9
..  is not signed.
那就加上这个公钥
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 2A8E3034D018A4CE


$ sudo apt-get upgrade #不敢升级，不得不升级了再升级吧。


当然，还需要安装一系列R包。
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install(c('shiny','stringr','DT','ggplot2'),ask = F,update = F)
BiocManager::install(c('knitr','rmarkdown','rmarkdown','cowplot','dplyr'),ask = F,update = F)
BiocManager::install('RMySQL',ask = F,update = F) 
BiocManager::install(c('RColorBrewer'),ask = F,update = F)


## Simple install following libs on your linux.
curl: sudo apt-get install curl 
libssl-dev: sudo apt-get install libssl-dev 
libcurl: sudo apt-get install libcurl4-openssl-dev 
xml2: sudo apt-get install libxml2-dev

#'limma','Glimma','DESeq2','edgeR',
BiocManager::install(c('DESeq',  'pasilla','Mus.musculus','RNAseq123'),ask = F,update = F)
BiocManager::install(c('Seurat'),ask = F,update = F)


再查版本号:
> sessionInfo()
## R version 3.6.1 (2019-07-05)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.1 LTS


BiocManager::install(c('biomaRt'),ask = F,update = F)


BiocManager::install(c('openssl'),ask = F,update = F)
installation of package ‘openssl’ had non-zero exit status

报错
Warning messages:
1: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘openssl’ had non-zero exit status
2: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘httr’ had non-zero exit status
3: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘biomaRt’ had non-zero exit status
4: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘GenomicFeatures’ had non-zero exit status
5: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘OrganismDbi’ had non-zero exit status
6: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘TxDb.Mmusculus.UCSC.mm10.knownGene’ had non-zero exit status
7: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘Mus.musculus’ had non-zero exit status
8: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘RNAseq123’ had non-zero exit status

ERROR: dependency ‘biomaRt’ is not available for package ‘GenomicFeatures’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/GenomicFeatures’
ERROR: dependency ‘GenomicFeatures’ is not available for package ‘OrganismDbi’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/OrganismDbi’
ERROR: dependency ‘GenomicFeatures’ is not available for package ‘TxDb.Mmusculus.UCSC.mm10.knownGene’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/TxDb.Mmusculus.UCSC.mm10.knownGene’
ERROR: dependencies ‘OrganismDbi’, ‘GenomicFeatures’, ‘TxDb.Mmusculus.UCSC.mm10.knownGene’ are not available for package ‘Mus.musculus’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/Mus.musculus’
ERROR: dependency ‘Mus.musculus’ is not available for package ‘RNAseq123’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/RNAseq123’


> source("https://bioc.ism.ac.jp/biocLite.R")
Error: With R version 3.5 or greater, install Bioconductor packages using BiocManager; see https://bioc.ism.ac.jp/install

$ sudo apt update && sudo apt install libssl-dev #早就装过了

$ sudo apt-get install r-cran-openssl
## The following packages have unmet dependencies:
##  r-cran-openssl : Depends: r-api-3.4
## E: Unable to correct problems, you have held broken packages.
# 装不上

>install.packages('askpass') #竟然好了
>install.packages('openssl')





========================================
Ubuntu 1804 安装 R 4.1.1 及 Rstudio 1.4.1717
----------------------------------------
1. 老版本
$ R --version
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

$ which R
/usr/bin/R

$ whereis R
R: /usr/bin/R /usr/lib/R /etc/R /usr/local/lib/R /usr/share/R /usr/share/man/man1/R.1.gz



2. 升级命令 (不知道怎么做，不好使)
$ apt-cache rdepends r-base-core #查依赖 r-base-core的包

You can install R 4.1.1 using
$ sudo apt update
$ sudo apt install -t buster-cran40 r-base

(2) 更新源

#备份
$ cp /etc/apt/sources.list /etc/apt/sources.list.backup


在/etc/apt/sources.list文件前面添加如下条目
##清华源
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse

最后执行如下命令更新源
##更新
sudo apt-get update
sudo apt-get upgrade





3. 从头编译和安装
(1) 新建要安装R的目录
$ sudo mkdir -p /data/public
$ sudo chown wangjl /data/public

(2) 下载
$ wget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-4/R-4.1.1.tar.gz
$ tar zxvf R-4.1.1.tar.gz
$ cd R-4.1.1

(3) 配置
$ ./configure --prefix=/data/public/R-4.1.1 --enable-R-shlib ##必须有后面这个选项(/data/public/R-4.1.1/lib64/R/lib/libR.so)，否则无法使用Rstudio。
## 有一个警告：configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally

1)消灭该警告
https://www.ctan.org/pkg/inconsolata?lang=en

$ wget http://mirrors.ctan.org/fonts/inconsolata.zip
$ unzip inconsolata.zip 
$ sudo cp -Rfp inconsolata/* /usr/share/texmf/
$ sudo mktexlsr


$ less /home/wangjl/soft/inconsolata/README
#文档的方法，又做了一次，警告还在。
#Method A (recommended): type
$ sudo mkdir -p /usr/local/texlive/texmf-local/web2c
$ sudo cp -Rfp * /usr/local/texlive/texmf-local
$ sudo echo Map zi4.map >> /usr/local/texlive/texmf-local/web2c/updmap.cfg #权限不允许
$ sudo mktexlsr
$ sudo -H updmap-sys


$ sudo apt-get install texinfo
$ sudo apt-get install texlive
$ sudo apt-get install texlive-fonts-extra


再次配置
$ cd R-4.1.1/
$ ./configure --prefix=/data/public/R-4.1.1 --enable-R-shlib --with-cairo=yes
这里prefix后面的路径可以自己指定，就是安装R的目录。

警告还在：configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally
算了，继续吧。



(4)编译安装
$ make  #耗时10min

报错：
processing 'reshape.Rnw'
Error: compiling TeX file 'reshape.tex' failed with message:
Running 'texi2dvi' on 'reshape.tex' failed.
Messages:
/usr/bin/texi2dvi: TeX neither supports -recorder nor outputs \openout lines in its log file ## --- === >>> 这一句是错误的根源
Execution halted
Makefile:103: recipe for target 'vignettes' failed
make[1]: *** [vignettes] Error 1
make[1]: Leaving directory '/data/wangjl/soft/R-4.1.1/src/library'
Makefile:80: recipe for target 'vignettes' failed
make: *** [vignettes] Error 2


$ sudo make install-pdf

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D6BC243565B2087BC3F897C9277A7293F59E4889
echo "deb http://miktex.org/download/ubuntu bionic universe" | sudo tee /etc/apt/sources.list.d/miktex.list
sudo apt-get update
sudo apt-get install miktex
## miktexsetup finish
sudo miktexsetup --shared=yes finish



$ locate Rd.sty
/usr/share/R/share/texmf/tex/latex/Rd.sty
把
\DeclareOption{inconsolata}{\setboolean{Rd@use@inconsolata}{true}}
改为
\DeclareOption{inconsolata}{\setboolean{Rd@use@inconsolata}{false}}

还是不行。


(5)跳过安装包呢？好像那几个基础包还是要安装的。
$ cd R-4.1.1/
$ ./configure --prefix=/data/public/R-4.1.1 --enable-R-shlib --with-cairo=yes --without-recommended-packages

$ make
$ make check ## 跳过
$ sudo make install
$ make clean #删除无用中间文件


$ /data/public/R-4.1.1/bin/R --version
R version 4.1.1 (2021-08-10) -- "Kick Things"

$ /data/public/R-4.1.1/bin/Rscript --version
R scripting front-end version 4.1.1 (2021-08-10)


## 加链接
$ sudo ln -sf /data/public/R-4.1.1/bin/R /usr/local/bin
$ sudo ln -sf /data/public/R-4.1.1/bin/Rscript /usr/local/bin
$ sudo ln -sf /data/public/R-4.1.1/lib/R /usr/local/lib/R
$ R --version ## 已经是最新版 R version 4.1.1

/usr/local/bin/R 指向哪个版本，都可以。







4. 下载 Rstudio

https://www.rstudio.com/products/rstudio/download-server/
(1) 
$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.4.1717-amd64.deb
$ sudo gdebi rstudio-server-1.4.1717-amd64.deb

$ sudo service rstudio-server status

http://<IP>:8787/





5. 查询一下包路径，怎么安装最节省硬盘？

> .libPaths()
[1] "/home/wangjl/R/x86_64-pc-linux-gnu-library/4.1"
[2] "/data/public/R-4.1.1/lib/R/library" 


$ ls /data/public/R-4.1.1/lib/R/library | grep ggplot
空。


$ sudo R
> install.packages("ggplot2", lib="/data/public/R-4.1.1/lib/R/library/") #3.3.5
选择20 广东源。

$ ls /data/public/R-4.1.1/lib/R/library | grep ggplot
ggplot2


更换源:
> install.packages("ggplot2", "repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"), lib='/your/path/')
# repos  是指定安装镜像，上文提到的都是也可以使用国外的repos='http://cran.rstudio.com/'



(2) BiocManager 怎么指定安装目录？

> install.packages("BiocManager", lib="/data/public/R-4.1.1/lib/R/library/") #1.30.16
> BiocManager::install("Seurat")  #4.0.4


手动挪一下位置，看看会不会报错。
$ ls /home/wangjl/R/x86_64-pc-linux-gnu-library/4.1 | grep -i seurat 
Seurat
SeuratObject

$ sudo mv /home/wangjl/R/x86_64-pc-linux-gnu-library/4.1/* /data/public/R-4.1.1/lib/R/library/







ref:
https://www.linuxidc.com/Linux/2015-04/115790.htm
https://github.com/Jiefei-Wang/Painless-R-compilation-and-installation-on-Ubuntu




========================================
CentOS6.8 和Ubuntu安装 Rstudio server
----------------------------------------

https://www.rstudio.com/products/rstudio/download-server/

$ wget https://download2.rstudio.org/rstudio-server-rhel-1.1.463-x86_64.rpm
$ sudo yum install rstudio-server-rhel-1.1.463-x86_64.rpm

Next Steps
1.See the Getting Started document for information on configuring and managing the server.
http://www.rstudio.com/ide/docs/server/getting_started

2.Read the RStudio Server Professional Admin Guide for more detailed instructions.
http://docs.rstudio.com/ide/server-pro/



二、Ubuntu1804 安装Rstudio
1.Installing R
$ sudo apt-get install r-base
及很多包。参考R和R包的安装。

2.下载RStudio Server
https://www.rstudio.com/products/rstudio/download-server/

$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.1335-amd64.deb
$ sudo gdebi rstudio-server-1.2.1335-amd64.deb

就可以使用浏览器访问了 http://<server-ip>:8787



3.
Getting Started document: http://www.rstudio.com/ide/docs/server/getting_started
RStudio Server Professional Admin Guide: http://docs.rstudio.com/ide/server-pro/





========================================
|-- Rstudio server 开启新 session
----------------------------------------
为了完全清除数据和加载的包，重新开启一个新的R session是一个不错的选择。

菜单 Session -> Quit Session, 弹窗选择不保存当前 Session，R就结束了当前会话。
出现一个大按钮 “start new session”，点击，就开启了一个新的会话。







========================================
|-- Rstudio 怎么设置自动登出时间？
----------------------------------------
https://github.com/rstudio/rstudio/issues/7875


1. Regarding the session timeout, you can adjust this with one of the following settings in the 
/etc/rstudio/rserver.conf

auth-stay-signed-in-days=7
auth-timeout-minutes=20  #优先级更高，设置为0，就不会

You can read more about this in the administrative guide at https://docs.rstudio.com/ide/server-pro/authenticating-users.html#authorization-timeout
这是Rstudio的官方文档。









========================================
快速生成R语言报告（markdown+Rstudio）
----------------------------------------
优点：可重复研究。
缺点：在server上还是不能画图。


1.使用Rstudio设置：
https://blog.csdn.net/lixiaomie01/article/details/78012942
菜单 Tools-Global option-Sweave
Weave Rnw files using: knitr;
Typeset LaTeX into PDF using: pdfLaTex

2.安装包
source("https://bioc.ism.ac.jp/biocLite.R")
biocLite("rmarkdown")

3.新建文件 File-New File-R Markdown...
需要更新文件。

然后新建文件，需要学习markdown语法，比较简单：https://www.sohu.com/a/194382686_455817

rmarkdown语法 https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf




4.写完文件，做格式转换
编辑器顶部，在 Knit 可选择不同的文件类型进行浏览：
Knit to HTML

注意：选中语句，ctrl+enter或者点击顶部的Run，即可运行这一句代码。



refer:
R Markdown: The Definitive Guide  https://bookdown.org/yihui/rmarkdown/
https://www.jianshu.com/p/bc8ff133fc37
https://blog.csdn.net/lixiaomie01/article/details/78012942






========================================
|-- R也有Notebook了，不用再羡慕Python有jupyter了
----------------------------------------
1. 安装

熟悉python的朋友可能知道jupyter notebook。它是一个Web应用程序，允许你创建和共享代码，方程，可视化和说明性文本文档。现在，我们可以在RStudio中实现R Notebook的功能了。

我的配置步骤：
安装好 biocLite("rmarkdown") 就可以了，选择新建 R notebook，即可开始书写了。 
想插入代码，点顶部的Insert；
想运行代码，ctrl+Enter即可运行光标所在的行，或者选中的代码行。




网页说的配置步骤，我没试过：
1、 下载最新的RStudio
2、 下载最新版本的Rmarkdown包：
#devtools::install_github("rstudio/rmarkdown")

3、 设置选项：Tools -> Global Options -> Rmarkdown -> Enable R Notebook -> Apply
4、 像往常一样打开一个新的Rmarkdown文件
5、 设置YAML输出选项：将output: html_document 改为 output: html_notebook: default
注：上述的4,5步也可以直接创建一个新的R Markdown Notebook文件。如下图：

完成上述配置后我们就可以在RStudio中开始我们的R Notebook之旅了。






2. 使用别人的Rmd代码
Rmd 可以内置代码，可以边写边运行，也可以写好后直接使用 knit功能生成html代码及图片。

优点：knit 模式运行与当前环境变量是隔离的。

(1)使用别人写好的 Rmd代码：
	https://github.com/satijalab/seurat/tree/master/vignettes
	https://github.com/satijalab/seurat/blob/master/vignettes/pbmc3k_tutorial.Rmd
	

(2) Rstudio中 File- New file- R notebook 
复制文本进去 https://raw.githubusercontent.com/satijalab/seurat/master/vignettes/pbmc3k_tutorial.Rmd
保存为 00.Rmd，
然后点击左上角的 Knit，不久报错，这个过程中，环境变量一直为空。


(3) 如果是调试，则变量会污染当前环境。
快捷键: 
	执行下一个片段是 ctrl+alt+N





3. 书写规则
其他部分和标准 markdown 差不多，但是插入代码部分有更多细节。

(1) 一般书写，大多数代码就是这样的。

```{r}
a=20
print(a)
```


(2) 保存为图片

```{r mito, fig.height=7, fig.width=13}
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
```

文件名为 mito-1.png ,后面是宽高设置。


(3) 其他书写方式










========================================
|-- 在jupyter中执行R代码、及问题与解决：控制图片宽高
----------------------------------------
直接在terminal中运行安装代码，不会出现IRkernel等的报错～
step1:打开terminal，
step2:输入R，进入R shell，
step3:输入以下命令

1. 安装包
(1) 失败
## install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
## devtools::install_github('IRkernel/IRkernel') 
#报错 Failed to connect to api.github.com port 443: Connection refused

# IRkernel::installspec(user = FALSE) # 或者是在系统下安装



(2)找到官网 https://github.com/IRkernel/IRkernel
说可以直接安装This package is available on CRAN:

install.packages('IRkernel')

IRkernel::installspec()  # to register the kernel in the current R installation

等待执行完毕，打开jupyter就可以新建R的notebook了。



2. 使用 
注: 我之前一直开着jupyter的，完成上述功能后，我只是刷新了一下网页，就可以用了，并没有重启jupyter。好神奇。

在jupyter中，新建，可选择的Python和R。

也可以在jupyterlab中使用该功能。







3. trouble shooting

(1)在jupyter中使用Cairo时，2条及以上输出时，输出文件会是个空文件(0 B)，在使用前先调用dev.off();
ref: https://github.com/IRkernel/IRkernel/issues/658

dev.off() #要先执行这个，否则空文件

library(Cairo)
CairoPDF('test.pdf', width=5, height=4)
hist(mtcars$mpg, main="1")
hist(mtcars$mpg, main="2")
dev.off()


(2) for中的print不会实时显示，执行结束才一起显示
ref: https://stackoverflow.com/questions/37689694/real-time-printing-to-console-with-r-in-jupyter
https://github.com/IRkernel/IRkernel/issues/659

for(i in 1:10){
    message(i) # like paste0(), can show instantly
    print(i)
    Sys.sleep(0.5)
}



(3) 在 jupyter 中控制图的宽高。Resizing plots in the R kernel for Jupyter notebooks
ref: https://stackoverflow.com/questions/42729049/how-to-change-the-size-of-r-plots-in-jupyter
options(repr.plot.width = 1, repr.plot.height = 0.75, repr.plot.res = 100)
https://blog.revolutionanalytics.com/2015/09/resizing-plots-in-the-r-kernel-for-jupyter-notebooks.html

options(repr.plot.width = 9, repr.plot.height = 4)

gene.df=pbmc.markers %>% group_by(cluster) %>% top_n(n = 3, wt = avg_logFC)
DotPlot(pbmc, features = unique(gene.df$gene) ) +
    theme(axis.text.x=element_text(angle=60, hjust=1,size=8) ) #文字旋转60度
#



#### 示例: 这个设置和pdf()中的宽高设置一样。
options(repr.plot.width=10, repr.plot.height=8) #大的
plot(1:20)

options(repr.plot.width=4, repr.plot.height=4) #小的
plot(1:20)



ref:
https://blog.csdn.net/ICERON/article/details/82743930
https://bbs.pinggu.org/forum.php?mod=viewthread&tid=5927080&ordertype=1







========================================
hit <return> to see next plot 怎么回事？
----------------------------------------
一般是执行完示例程序后遗留问题。
# 关掉算了
par(ask=F)




========================================
如何在shell脚本中调用R脚本并传递参数？各种运行R及R脚本的方法 -- (打造pipeline必备技能)
----------------------------------------

1.shell中调用R脚本: Rscript path/to/myscript.R arg1 arg2 arg3

(1)R脚本
$ cat myRscript.R 
library('ggplot2')
library('Cairo')

print("this is a line")

CairoPDF(file="test.pdf",width=5,height=5)
ggplot(diamonds, aes(carat, price))+geom_point()
dev.off()


(2)shell调用

方法1: Rscript 直接在屏幕上显示结果（推荐使用该方法，直观）
$ Rscript myRscript.R 
## 可以看到生成的pdf文件，和打印出来的文字，及其他信息。


方法2: R CMD BATCH 结果输出到文件（结果就像截屏，相当于代码逐行执行。不推荐） 详细实例看(5)
$ R CMD BATCH myscript.R  #标准输出重定向到 .Rout 文件。
## Check the output
$ cat myscript.Rout


如果碰到报错了，请看2
如何传入参数，请看3




(3) 如果写好头文件，添加可执行权限，则可以直接在shell中传参并执行
$ cat test.R 
#!/usr/bin/env Rscript

args = commandArgs(trailingOnly = TRUE)
n=as.numeric( args[1L] )
print( paste("n=", n+1 ) );
message(sprintf("Hello %s", args[2L]))


关于第一行，建议用这种写法，方便在不同电脑上一致。而绝对路径则换个电脑就需要修改代码。
但是绝对地址能指定是哪一个版本的的R，否则默认就是使用路径中的第一个R。
The first line is the shebang line. It’s best practice to use /usr/bin/env Rscript instead of hard-coding the path to your R installation. Otherwise you risk your script breaking on other computers.

增加执行权限，然后传入2个参数并执行： 
$ chmod +x test.R
$ ./test.R 10 fromShell
[1] "n= 11"
Hello fromShell

小结: print() 显示有编号[1]，而 message 则更像原生shell 输出。




(4) 在一行shell中同时执行多个R脚本

$ Rscript -e 'date()' -e 'format(Sys.time(), "%a %b %d %X %Y")'
[1] "Wed Jul 21 11:20:05 2021"
[1] "Wed Jul 21 11:20:05 AM 2021"

$ Rscript -e 'Sys.time()'
[1] "2021-07-21 11:23:14 CST"

$ Rscript -e "head(iris,2)"
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa



还可以单行执行R -e 但是会有很多无用的R启动输出(不推荐)
$ R -e 'install.packages(c("package1", "package2"))'
R -e 'install.packages(c("package1", "package2"), lib="/usr/local/lib/R/site-library")'  #指定安装地址









(5) R CMD BATCH foo.R  重定向标准输出到文件 .Rout，比如 foo.Rout
$ cat foo.R
set.seed(2021)
print(rnorm(10))

$ R CMD BATCH foo.R  #默认生成的是 .Rout 文件
$ cat foo.Rout #查看，共27行
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
...
> set.seed(2021)
> print(rnorm(10))
 [1] -0.12245998  0.55245663  0.34864950  0.35963224  0.89805369 -1.92256952
 [7]  0.26174436  0.91556637  0.01377194  1.72996316
> 
> proc.time()
   user  system elapsed 
  0.492   0.487   0.153


Note: you'll want to try out the --vanilla and other options to remove all the startup cruft.
cruft [krʌft] 令人讨厌的东西，不整齐的部分

$ R CMD BATCH --vanilla foo.R
查看结果，没啥变化。








2.报错： 碰到gglot2包总是找不到，怎么办？

(1)查询R包调用路径
> .libPaths()
[1] "/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5"
[2] "/usr/lib64/R/library"                              
[3] "/usr/share/R/library"


(2)临时设置R包调用路径（退出R，设置就失效了。下次还要重新设置）
> library(ggplot2) #没有找到
Error in library(ggplot2) : there is no package called ‘ggplot2’
> 
> .libPaths()
[1] "/usr/lib64/R/library" "/usr/share/R/library"
> .libPaths("/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5") #添加R包新路径
> 
> library(ggplot2) 
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang

(3)添加文件 ~/.Rprofile 
.libPaths("/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5")

则再次使用终端打开R时，就会自动加载好该包地址。






3. 怎么使用命令行传入参数？

脚本 my2.R
$ cat my2.R 
#获取命令行参数
myArgs<-commandArgs(TRUE)

#myArgs是所有参数的特征向量
print(myArgs) 
print(class(myArgs))


shell 调用
$ Rscript my2.R 12 2 35
[1] "12" "2"  "35"
[1] "character"

注意取出来的参数是所有参数连在一起的character
需要变成数字的话，需要R代码实现。




4. 如何在shell脚本中调用R脚本，并传递参数
$ cat my3.R
myArgs<-commandArgs(TRUE)

#myArgs是所有参数的特征向量
print(myArgs)
print(class(myArgs))

n1=as.numeric(myArgs[1])
n2=as.numeric(myArgs[2])
print(n1+n2)

$ cat test.sh
#!/bin/bash
source /etc/profile
echo "start: `date`"
/usr/bin/Rscript my3.R $1 $2 #不用绝对路径也可以
echo "end:`date`"


输出
$ Rscript my3.R 12 2 35
[1] "12" "2"  "35"
[1] "character"
[1] 14

$ bash test.sh 12 2 35
start: Thu Jul 18 04:01:08 EDT 2019
[1] "12" "2" 
[1] "character"
[1] 14
end:Thu Jul 18 04:01:08 EDT 2019



(2) 如果不加True，则会从第六个才是参数
$ vim test.R
Args <- commandArgs()
cat("Args[1]=",Args[1],"\n")
print(Args)

$ Rscript test.R 1 2 3
Args[1]= /usr/lib64/R/bin/exec/R 
[1] "/usr/lib64/R/bin/exec/R" "--slave"                
[3] "--no-restore"            "--file=test.R"          
[5] "--args"                  "1"                      
[7] "2"                       "3"




5.在shell脚本中调用R脚本，并在shell中接收返回值，判断是否成功执行 //todo









refer:
1.传参 https://www.cnblogs.com/awishfullyway/p/6632662.html
2.R包路径 https://bbs.pinggu.org/forum.php?mod=viewthread&tid=4585044&page=1
3.如何用R写命令行工具 https://blog.sellorm.com/2017/12/18/learn-to-write-command-line-utilities-in-r/ //todo



========================================
|-- 如何在R中调用shell脚本?
----------------------------------------
1. system() invokes the OS command specified by command.
Usage
system(command, intern = FALSE,
       ignore.stdout = FALSE, ignore.stderr = FALSE,
       wait = TRUE, input = NULL, show.output.on.console = TRUE,
       minimized = FALSE, invisible = TRUE)
#

(2). 实例
R脚本
$ vim test.R
Args <- commandArgs(T)

shell_cmd<-paste0("grep -n CHR ",Args[1])
grep_out<-system(shell_cmd, intern = TRUE) #调用shell的grep命令
# cat(grep_out)
print(grep_out)

文档内容
$ cat aa.txt 
this
is CHR
a
CHR2 book

调用结果
$ Rscript test.R aa.txt
# 2:is CHR 4:CHR2 book  ## R中使用cat的输出
[1] "2:is CHR"     "4:CHR2 book "






2. 更多实例
https://github.com/ElkonLab/scAPA/blob/master/scAPA/R/First_threesteps.R

(1) 封装到R函数 
#'  The function reads the output file generated by Homer findPeaks. It
#'  Renders it into a bed file, sort it, and then merge peaks that are
#'  less than 100 (nt) apart using bedtools merge.
#' @return Writes a bed file 'merge.peakfile.bed' with the merged peaks.
merge_peaks <- function(bedtools.path, path, peaks.file){
	# home_dir <- getwd()
	# on.exit(setwd(home_dir))
	# setwd(path)
	
	#R中执行 awk 
	readHomerfile.command <- paste0('awk \'BEGIN{OFS = "\t"}{if(NR>34) ',
								  'print $2, $3, $4, "',
								',.",".",$5}\' ', peaks.file,
								' > ./notsorted_notmerged_peak.bed')
	system(command = readHomerfile.command, wait = T)  
	
	# R中调用 bedtools sort 
	# Sort the bed using bedtools Sort (required for bedtools merge)
	bedtools.sort.command <- paste0(bedtools.path, "bedtools sort -i ./notsorted",
									 "_notmerged_peak.bed > ./notmerged_peak.bed")
	system(command = bedtools.sort.command, wait = T)
	system(command = "rm ./notsorted_notmerged_peak.bed", wait = T) # 删掉临时文件 rm
	
	
	# Merge using bedtools merge
	bedtools.merge.command <- paste0(bedtools.path,
									 "mergeBed -d 100 -s -c 6 -o distinct -i ",
									 "./notmerged_peak.bed > ./merge.peakfile")
	system(command = bedtools.merge.command, wait = T)
	
	#Turning the output into a bed file
	render.tobed.command <- paste0('awk \'BEGIN{OFS = "\t"}{print $1, $2, $3, ',
								   '".",".",$4}\' ./merge.peakfile > .',
								   '/merge.peakfile.bed')
	system(command = render.tobed.command, wait = T)
	system(command = "rm ./merge.peakfile", wait = T)
	system(command = "rm ./notmerged_peak.bed", wait = T)
}




========================================
|-- R 调用 R脚本 (实例)：并发执行
----------------------------------------
3. R 调用 R脚本(这个不能控制并发核心数)
假设有一个耗时任务，我们使用多线程加快进度。

step1:
- 100个细胞，分成批次，多线程执行
- 分别对cid加1
- 保存为文件
step2:
- 合并各批次结果


$ seq 1 100 >cid.txt
|-cid.txt


一共包括2个R脚本，第一个调用第二个。
|-master.R 
|-worker.R 


$ cat master.R 
# separate the task
batch=30;
total=100;


last=0;
for(i in 1:total){
  if(i %% batch == 0){
    # cat(last+1, i, "\n");
    system(command = paste0("Rscript worker.R ",last+1, " ", i) , wait = F)
    last=i;
  }
}

if(last+1 < total){
    # cat(last+1, total, "\n");
    system(command = paste0("Rscript worker.R ",last+1, " ", total) , wait = F)
}





$ cat worker.R
# get parameters
myArgs<-commandArgs(TRUE)

id1=as.numeric(myArgs[1])
id2=as.numeric(myArgs[2])
cat("start working, from-to: ", id1, id2, "\n");

# get cell id by the input para
cids= readLines("cid.txt");
cids=cids[id1:id2]

# a time-consuming job
work=function(id){
  Sys.sleep(0.01 + runif(1)*0.02);
  return( as.numeric(id)+1);
}

# do the analysis
df=NULL;
for(i in 1:length(cids)){
 # cat(i, cids[i], "\n");
 id=cids[i];
 df=rbind(df,  data.frame(
    id=id,
    result=work(id)
  ));
}
#print(df);
write.table(df,  paste0("tmp/result_",id1, "_", id2, ".txt"), col.names=F, quote = F )



运行：
$ mkdir tmp/
$ Rscript master.R 

手动合并
$ cat tmp/result* tmp/total.txt

检查结果 
$ ls -lth tmp/







2. 使用snakemake可以控制并发脚本数，在R中调用 snakemake 脚本，并读取最终结果文件。
snakemake 脚本在: https://github.com/DawnEve/snakemakeWorkflow/tree/master/R_script/demo1

如何不打扰用户的情况下调用 python 并发脚本？

$ seq 1 100 > cid.txt
$ R
snakePath="/home/wangjl/soft/snakemakeWorkflow/R_script/demo1/"
threads=4;
system(command = paste0("snakemake -s ",snakePath,"main.sf -p -j ", threads) , wait = T);
# here will be many output text like you run snakemake in shell, wait until task ends.

a=readLines("worker/stat.txt")
print(a) #[1] "5150"







ref:
https://www.cnblogs.com/emanlee/p/6930884.html





========================================
|-- Rscript --vanilla 是什么模式？ //todo
----------------------------------------
1. 见过的实例

(1) shell 直接调用的情况
$ Rscript --vanilla drawPCA.R normed.csv output.pdf

(2) 在py中调用R脚本，并传参
import subprocess
subprocess.call("/usr/local/bin/Rscript --vanilla script.r input.txt output.pdf", shell=True)

貌似无法获取结果。除非写到文件中，在用py读进来？


(3) R 中调用R脚本
> system("Rscript --vanilla test.R")


(4) 自己用的话
#! /usr/bin/Rscript --vanilla

考虑多个R版本，则使用 
#! /usr/bin/env Rscript
这会在当前环境(PATH)中正确的地方查找。
这种情况下无法加 --vanilla 参数。

#! /usr/bin/env Rscript --vanilla
     the error message simply is
/usr/bin/env: Rscript --vanilla: No such file or directory


(5) 参数的控制
https://www.r-bloggers.com/2015/09/passing-arguments-to-an-r-script-from-command-lines/

$ cat sillyScript.R
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)

# test if there is at least one argument: if not, return an error
if (length(args)==0) {
  stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
  # default output file
  args[2] = "out.txt"
}

## program...
df = read.table(args[1], header=TRUE)
num_vars = which(sapply(df, class)=="numeric")
df_out = df[ ,num_vars]
write.table(df_out, file=args[2], row.names=FALSE)


运行脚本
$ Rscript -e "write.table(iris, 'iris.txt')" #提供数据

$ Rscript --vanilla sillyScript.R iris.txt out2.txt
或
$ Rscript --vanilla sillyScript.R iris.txt

$ Rscript --vanilla sillyScript.R #报错
Error: At least one argument must be supplied (input file).n
Execution halted








2. 这个 Rscript --vanilla 啥意思？

(1) 线索1 https://stackoverflow.com/questions/12540138/how-can-i-make-my-r-session-vanilla

How can I ensure a consistent R environment among different users on the same server?
- 不受特定用户设置的影响，
- doesn't read R history, profile, or environment files
- doesn't reload data or objects from previous sessions

help("vanilla")
?new.env

(2) ??vanilla
Run an R child process, with no configuration
运行一个没有配置项的R子进程。

Description
It tries to mimic a fresh R installation. In particular:
 - No library path setting.
 - No CRAN(-like) repository is set.
 - The system and user profiles are not run.

该模式下
library(callr)
r(.libPaths()) #不起作用
r(function() .libPaths()) 可以。












========================================
R语言-代码规范（Google's R Style Guide）
----------------------------------------
R是一个高级编程语言主要用于统计计算和图形。R编程风格指南的目标是使我们的R代码更容易阅读、分享和验证。
以下R代码规则是在谷歌的整个R合作用户社区下进行设计的。

在2016年，Google发布了R语言编程规范指导，一共有15条，分别有：覆盖文件名规范，变量名规范，每行代码长度，缩进，花括号使用，赋值表达，if else，分号的不使用，函数定义，函数注释等等。


R语言的代码规范总结起来有以下内容：
1.对象命名要赋予意义
2.使用空行来分割逻辑
3.必要时使用注释和花括号
4.不用的代码和引用删除，代码整洁，精炼而富有含义。
5.不要用中文拼音做变量名，提高代码水平层次
6.代码程序可用，清晰优雅，高效
7.多写代码，多思考， 常常回顾代码。




1. 符号和命名(Notation and Naming)

(1)文件名(File names)
File names should end in .R and, of course, be meaningful.
GOOD: predict_ad_revenue.R
BAD: foo.R


(2)标识符（Identifiers）
不要使用下划线(_)或连字符(-)标识符。
标识符应按照以下命名约定。
变量名的首选形式都是小写字母和单词分开用点(variable.name),但也接受variableName;函数名最初的大写字母和没有点(FunctionName);

##? 为什么不提倡下划线呢？

1)variable.name is preferred, variableName is accepted
GOOD: avg.clicks
OK: avgClicks
BAD: avg_Clicks

2)FunctionName
GOOD: CalculateAvgClicks
BAD: calculate_avg_clicks , calculateAvgClicks
Make function names verbs.
Exception: When creating a classed object, the function name









2.语法（Syntax）
(1)每行最大长度（Line Length）
The maximum line length is 80 characters.

(2)缩进（Indentation）
当缩进代码, 使用两个空间。绝不使用制表符或混合制表符和空格。例外:括号内发生换行时,使其与括号内的第一个字符对齐。

(3)间距（Spacing）
所有的二元操作都需要空格，（=，+ ，- ，<-）前后都需要空格。
例外:当符号 = 是函数调用时的传递参数周围不用空格隔开。
不要在符号“，”前空格隔开，但需要在“，”后添加空格
GOOD:
	tab.prior <- table(df[df$days.from.opt < 0, "campaign.id"]) 
	total <- sum(x[, 1]) 
	total <- sum(x[1, ])

BAD:
	tab.prior <- table(df[df$days.from.opt<0, "campaign.id"])  # Needs spaces around '<' 
	tab.prior <- table(df[df$days.from.opt < 0,"campaign.id"])  # Needs a space after the comma
	tab.prior<- table(df[df$days.from.opt < 0, "campaign.id"])  # Needs a space before <-
	tab.prior<-table(df[df$days.from.opt < 0, "campaign.id"])  # Needs spaces around <-
	total <- sum(x[,1])  # Needs a space after the comma 
	total <- sum(x[ ,1])  # Needs a space after the comma, not before

在左括号之前添加一个空格，除了函数的调用
GOOD:
	if (debug)

BAD:
	if(debug)

Extra spacing (i.e., more than one space in a row) is okay if it improves alignment of equals signs or arrows (<-).
为了对齐，可以使用多个空格。
plot(x    = x.coord,     
     y    = data.mat[, MakeColName(metric, ptiles[1], "roiOpt")],     
     xlab = "dates", 
     ylab = metric,
     main = (paste(metric, " for 3 samples ", sep = "")))
#


(4)花括号（Curly Braces）
一个左括号不应该自己一行; 而一个右括号应该总是一行。
当一个代码块是一个单独声明时你可以不适用花括号。但是，你必须考虑其他相同的情况，以保持一致。
	if (is.null(ylim)) {  ylim <- c(0, 0.06) }
#xor (but not both)
	if (is.null(ylim))  ylim <- c(0, 0.06)

Always begin the body of a block on a new line.

BAD:
	if (is.null(ylim)) ylim <- c(0, 0.06) 
	if (is.null(ylim)) {ylim <- c(0, 0.06)}

花括号与else
一个else语句应该总是被花括号包围在同一行。
Good:
	if (condition) {  
	  one or more lines 
	} else {  
	  one or more lines 
	}

Bad:
	if (condition) {  
	  one or more lines 
	} 
	else {  
	  one or more lines 
	}

(5)赋值（Assignment）
Use <-, not =, for assignment.
GOOD:
	x <- 5

BAD:
	x = 5
##? 我倾向于使用=，理由是：和其他语言兼容，容易识别；且打字快，省时间！


(6)注释前放一个空格，即书写#号后，空一个写注释，注释养成英文注释的习惯。
修改前
#Get data information 
newdata <- read.csv(PArameter4)

修改后
# Get data information 
newdata <- read.csv(PArameter4)

(7)分号，尽量不要使用。
不要以分号结束一行, 也不要利用分号在同一行放多于一个命令.
 (分号是毫无必要的, 并且为了与其他Google编码风格指南保持一致, 此处也需要略去.)









3. Organization
(1)总体布局和排序（General Layout and Ordering）
如果每个人都使用相同的一般顺序, 我们能够更快和更容易阅读和理解彼此的脚本。一般开头需包含：
	版权声明注释
	作者评论
	文件描述的评论,包括程序的目的,输入和输出
	source() 和 library() 声明
	函数定义
	已执行的语句
单元测试应该在一个单独的文件名为originalfilename_test.R。

(2)代码注释（Commenting Guidelines）
简短的注释可以放置在代码之后，用 空格 + # + 空格隔开 ,较长的注释可以单独一行。

# Create histogram of frequency of campaigns by pct budget spent. 
hist(df$pct.spent,    
     breaks = "scott",  # method for choosing number of buckets     
     xlab   = "Fraction of budget spent",     
     ylab   = "Frequency (count of campaignids)")

(3)函数定义和调用（Function Definitions and Calls）
函数定义应该首先列出参数没有默认值, 紧随其后的是那些有默认值的。
在函数定义和函数调用时,允许多个参数一行，但是换行只允许在参数之间进行。
GOOD：
PredictCTR <- function(query, property, num.days,                                              
                       show.plot = TRUE)

BAD:
PredictCTR <- function(query, property, num.days, show.plot =     
                       TRUE)
#
理想情况下,单元测试应该作为样本函数调用(共享库例程)。









4.Functions
(1)错误应该使用 stop() 进行提醒
(2)使用 attach 造成错误的可能数不胜数. 避免使用它.rm(list=ls())用于清除所有的变量。

(3)部分英文名称不能作为对象名，函数命名应以动词或者动词性短语为主，例如
if=1
错误: 意外的’=’ in “if=”

(4)函数和变量的命名则需要尤其小心，在 R 环境对于大小写是极其敏感的。
变量名应该都使用小写字母，而函数名则可以在首字母使用大写，另一点需要注意的是变量和函数命名时应尽量避免与 R 环境中本身存在的一些函数或者变量重名，不然系统也会混乱弄不清的。
不同单词间可以用 . 或者 _ 来连接，看个人习惯，但貌似谷歌的 R语言代码规范上要求使用 . 来连接。
而命名函数则尽量不要使用下划线或者点连接符，在单词选择上也较好能体现函数的动作，以动词来命名函数。

函数命名不要使用点，因为点号是为定义泛型函数的。

(5)少用循环而多用 R 自带的向量化运算。
R 的循环效率极低，能不用则不用。关于 apply 函数族的用法运算精髓应多加进行整理。


(6)函数说明(Function Documentation)
函数在定义行下方都应当紧接一个注释区。这些注释应该包含一句关于函数的描述，一段关于该函数的参数列表的的描述(包括数据类型), 和一个返回值的描述。这些注释需具有足够的描述性的,调用者可以通过阅读注释即可懂得如何调用该函数。

这些注释应当由如下内容组成: 
此函数的一句话描述; 
此函数的参数列表, 用 Args: 表示, 对每个参数的描述 (包括数据类型); 
以及对于返回值的描述, 以 Returns: 表示. 
这些注释应当描述得足够充分, 这样调用者无须阅读函数中的任何代码即可使用此函数. 


示例函数 Example

CalculateSampleCovariance <- function(x, y, verbose = TRUE) {  
  # Computes the sample covariance between two vectors.  
  #  
  # Args:  
  #   x: One of two vectors whose sample covariance is to be calculated.  
  #   y: The other vector. x and y must have the same length, greater than one,  
  #      with no missing values.  
  #   verbose: If TRUE, prints sample covariance; if not, not. Default is TRUE.  
  # 
  # Returns:  
  #   The sample covariance between x and y.  

  n <- length(x)  
  # Error handling  
  if (n <= 1 || n != length(y)) {   
    stop("Arguments x and y have different lengths: ",
         length(x), " and ", length(y), ".")     
  }
  if (TRUE %in% is.na(x) || TRUE %in% is.na(y)) {  
    stop(" Arguments x and y must not have missing values.") 
  }
  covariance <- var(x, y)  
  if (verbose)    
    cat("Covariance = ", round(covariance, 4), ".\n", sep = "")  
  return(covariance) 
}









5.最后的话
Use common sense and BE CONSISTENT.

If you are editing code, take a few minutes to look at the code around you and determine its style. If others use spaces around their if clauses, you should, too. If their comments have little boxes of stars around them, make your comments have little boxes of stars around them, too.

The point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you are saying, rather than on how you are saying it. We present global style rules here so people know the vocabulary. But local style is also important. If code you add to a file looks drastically different from the existing code around it, the discontinuity will throw readers out of their rhythm when they go to read it. Try to avoid this.

OK, enough writing about writing code; the code itself is much more interesting. Have fun!




https://blog.csdn.net/qq_27755195/article/details/51587172






========================================
使用docker运行R
----------------------------------------
1. 只运行R，当前黑窗口显示

$ docker run --rm -it rstudio/r-base:4.0-focal




========================================
|-- 使用docker运行 Rstudio: R 4.0.4, Seurat 4.0.0, monocle3 v0.2.3.0
----------------------------------------
1. 运行 Rstudio，需要有可用的端口。

最佳实践: 1.(2) 1);

(1) 可以打开web界面
# https://hub.docker.com/r/rocker/rstudio


选择不同版本的R (Use different versions of R)
docker run -d -p 8787:8787 -e PASSWORD=yourpasswordhere rocker/rstudio:devel
docker run -d -p 8787:8787 -e PASSWORD=yourpasswordhere rocker/rstudio:3.2.0


1) 做端口映射，-p 外部端口 5000 : 指向docker内部接口8787。
$ docker run -d -p 5000:8787 -e PASSWORD=yourpasswordhere rocker/rstudio
使用web窗口登录: http://ipV4:5000
user: rstudio
pass: 自己设置的

## R version 4.0.4 (2021-02-15) -- "Lost Library Book"


2) 为用户名 rstudio 添加sudo权限。Give the user root permissions (add to sudoers)
$ docker run -d -p 8787:8787 -e ROOT=TRUE -e PASSWORD=yourpasswordhere rocker/rstudio

3) 做文件映射，-v 外部当前文件夹: docker内部文件夹。
Link a local volume (in this example, the current working directory, $(pwd)) to the rstudio container:
$ docker run -d -p 8787:8787 -v $(pwd):/home/rstudio -e PASSWORD=yourpasswordhere rocker/rstudio

为了防止影响过大，外部主机是不是应该设置一个专门的文件夹？
$ chmod 777 /home/wangjl/data/dockerRstudio
$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio/data -e PASSWORD=yourpasswordhere rocker/rstudio


# 进入docker内部，很多命令不能用。
$ docker ps
$ docker exec -it 06e bash



4) 跳过密码输入 Bypassing the authentication step
注意：不要在阿里云等公网使用，只在安全的局域网内使用，否则容易出安全问题。
Simply set the environmental variable DISABLE_AUTH=true, e.g.

$ docker run --rm \
  -p 127.0.0.1:5000:8787 \
  -e DISABLE_AUTH=true \
  rocker/rstudio

登录地址:  http://localhost:5000
不用输入用户名和密码，直接登录 rstudio用户了。


5) 使用root登录一个运行中的实例 Access a root shell for a running rstudio container instance

# 使用 docker ps 查看，第一列就是运行中的 docker id。
$ docker exec -ti <CONTAINER_ID> bash

# 然后就可以使用安装/维护系统了，比如 apt-get、添加删除用户等。










(2) 安装包路径的映射
感觉包保存到容器内部吧，这样推送的包就可以直接使用某个已经安装的包了。

但是重开容器，就要重新安装，也很麻烦。
如果做了包路径映射，新的容器能找到这个包吗？

1) 新建带包映射的容器 【最佳句子】
$ mkdir -p /home/wangjl/data/dockerRstudio/R_lib_4.0
$ chmod 777 /home/wangjl/data/dockerRstudio/R_lib_4.0 #存放R包

$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio \
	-v /home/wangjl/data/dockerRstudio/R_lib_4.0:/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0 \
	-e ROOT=TRUE \
	-e PASSWORD=yourpasswordhere rocker/rstudio
#

2) 修改包的查找路径
对docker的操作：在Rstudio的terminal中执行。
R的默认目录下新建（如果没有的话）.Rprofile 文件，在里面加上一行:
.libPaths("/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0")

然后重启R：Rstudio 菜单 Session - quit session.

> .libPaths() # 包的查找路径，应该是优先安装到第一个中。
[1] "/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0"
[2] "/usr/local/lib/R/site-library"                  
[3] "/usr/local/lib/R/library"


3) 安装包，并测试
library(ggplot2) #no package ...
install.packages("ggplot2") #11:40 - 11:43
library(ggplot2)

head(mtcars)
ggplot(mtcars, aes(mpg, wt, color=factor(cyl) ))+geom_point()+
  theme_bw()

4) 检查文件 
物理机：$ ls /home/wangjl/data/dockerRstudio/R_lib_4.0/  
docker内: $ ls /home/rstudio/R/x86_64-pc-linux-gnu-library/4.0
输出:
assertthat  desc      farver    labeling   pkgconfig    R6            scales       waldo
brio        diffobj   ggplot2   lifecycle  pkgload      RColorBrewer  testthat     withr
callr       digest    glue      magrittr   praise       rematch2      tibble
cli         ellipsis  gtable    munsell    prettyunits  rlang         utf8
colorspace  evaluate  isoband   pillar     processx     rprojroot     vctrs
crayon      fansi     jsonlite  pkgbuild   ps           rstudioapi    viridisLite

5) 关掉这个容器，重新开一个
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
3d8f00fc78a9        rocker/rstudio      "/init"                  About an hour ago   Up About an hour    0.0.0.0:5000->8787/tcp   vigorous_elgamal

$ docker stop 3d8f
$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio \
	-v /home/wangjl/data/dockerRstudio/R_lib_4.0:/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0 \
	-e ROOT=TRUE \
	-e PASSWORD=yourpasswordhere rocker/rstudio
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
41fdd9af3312        rocker/rstudio      "/init"                  6 seconds ago       Up 5 seconds        0.0.0.0:5000->8787/tcp   nifty_boot


# 登录web后，可以直接导入 ggplot2, 也就是新开的能找到原始的安装包。
> library(ggplot2)














2. 安装更多的包到该镜像上

(1) 在docker中安装 Seurat包 v4.0.0
$ cp /data/wangjl/scScripts/backup/a2/pbmc10k-Tsubset_final.rds .


> install.packages("BiocManager")
> BiocManager::install("monocle")
Error: .onLoad failed in loadNamespace() for 'XML', details:
Installation path not writeable, unable to update packages: boot, cluster, MASS, mgcv



> BiocManager::install("Seurat")
> library(Seurat)
Error: package or namespace load failed for ‘Seurat’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0/igraph/libs/igraph.so':
  libxml2.so.2: cannot open shared object file: No such file or directory

$ sudo apt install libxml2
$ sudo apt install libglpk-dev #比较大
## 可以载入 Seurat 了。
$ sudo apt install libxt-dev #解决一个warning


在Rstudio中可用:
# BiocManager::install("Seurat")
library(Seurat)
scRNA=readRDS("pbmc10k-Tsubset_final.rds")
DimPlot(scRNA)
DimPlot(scRNA, label=T)
#
FeaturePlot(scRNA, features = c("CD3D","CD4","CD8A", 'CCR7', 'ITGB1',"GZMB") )



2)
## 提交新镜像
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
78d8611d7559        rocker/rstudio      "/init"                  29 minutes ago      Up 29 minutes       0.0.0.0:5000->8787/tcp   infallible_matsumoto

$ docker commit -m 'Seurat is ok, if with pkg dir on github' 78d8611d7559 dawneve/rstudio:Seurat
sha256:0ccae6079dadb8cad8b05efb11a07f9f7fe6b3fd5634c87f7c2008025bfb9f81

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
dawneve/rstudio     Seurat              0ccae6079dad        15 seconds ago      2.09GB
rocker/rstudio      latest              9e22c8cd092b        9 days ago          1.95GB

比基础版又多了1G(apt安装的3个包)，还不包括物理机上的R包文件夹。
~/data/dockerRstudio$ sudo du -sh
1.6G    .

$ docker stop 78d
78d


### 重启R session, 不保存内存的东西。又提交了一个commit。
$ docker commit -m 'Seurat is ok, if with pkg dir on github' e2957a0e8b19 dawneve/rstudio:Seurat_
sha256:e4131393d1ed635d345d44cd1c459939dece46843b84b652bce0ecd66d90fc1c
看docker images 是一样大，说明只有硬盘里的有作用，内存中的不会保存到镜像中。
再删掉这个镜像: docker rmi e4131393d1ed



3) 推送到 docker hub:

$ sudo apt install gnupg2 pass 先安装包，否则登录失败。
## https://stackoverflow.com/questions/50151833/cannot-login-to-docker-account/50569553

$ docker logout
$ docker login -u dawneve 
## yourPassWord #登陆

$ docker image push dawneve/rstudio:Seurat #推送2.09G的镜像

## 貌似不到5min就传好了 https://hub.docker.com/u/dawneve
https://hub.docker.com/r/dawneve/rstudio/tags?page=1&ordering=last_updated




4) 添加注释
https://hub.docker.com/repository/docker/dawneve/rstudio

打包物理机上的R包文件到github附件上: https://github.com/DawnEve/scRNAseqCode/releases/tag/scDocker-Seurat
$ tar -cvzf pkgs_forDocker_seurat.tar.gz /home/wangjl/data/dockerRstudio

## 教训：这样用绝对路径打包的，解压后也是绝对路径。下次还是用相对路径打包吧。
$ tar -cvzf pkgs_forDocker_seurat.tar.gz dockerRstudio
tar: Exiting with failure status due to previous errors












(2) 在docker中安装 monocle3 包 #v0.2.3.0 (beta)
别人写好的包含有monocle3的容器 https://quay.io/repository/biocontainers/r-monocle3?tab=info


$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio \
	-v /home/wangjl/data/dockerRstudio/R_lib_4.0:/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0 \
	-e ROOT=TRUE \
	-e PASSWORD=yourpasswordhere dawneve/rstudio:Seurat
#



1) 版本选择与安装
http://cole-trapnell-lab.github.io/monocle-release/docs/#installing-monocle

Monocle 2 and Monocle 3 alpha are deprecated
Please use our new package, Monocle 3!
https://cole-trapnell-lab.github.io/monocle3/


https://cole-trapnell-lab.github.io/monocle3/docs/introduction/
paper: monocle3 https://www.nature.com/articles/s41586-019-0969-x


# 安装 
https://cole-trapnell-lab.github.io/monocle3/docs/installation/

if (!requireNamespace("BiocManager", quietly = TRUE))
	install.packages("BiocManager")

BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
                       'limma', 'S4Vectors', 'SingleCellExperiment',
                       'SummarizedExperiment', 'batchelor', 'Matrix.utils'))

install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')


## 报错: libudunits2.so.0: cannot open shared object file
> Track_genes <- graph_test(cds, neighbor_graph="principal_graph", cores=10)

$ sudo apt install libudunits2-dev #6M ?
$ sudo apt install libproj-dev  #38M
$ sudo apt install libgdal-dev  #423M


# 使用验证
https://github.com/cole-trapnell-lab/monocle3

https://cole-trapnell-lab.github.io/monocle3/
https://cole-trapnell-lab.github.io/monocle3/docs/starting/

> library(monocle3) #v0.2.3.0

# Provide the path to the Cell Ranger output.
> cds <- load_cellranger_data("~/Downloads/10x_data")

感觉不好用。。。



2) 提交新镜像
$ docker ps
CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                    NAMES
e2957a0e8b19        dawneve/rstudio:Seurat   "/init"                  19 hours ago        Up 19 hours         0.0.0.0:5000->8787/tcp   friendly_borg

$ docker commit -m 'monocle3 is ok, if with pkg dir on github' e2957a0e8b19 dawneve/rstudio:monocle3

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
dawneve/rstudio     monocle3            8893c1f83058        4 minutes ago       2.58GB
dawneve/rstudio     Seurat              0ccae6079dad        19 hours ago        2.09GB
rocker/rstudio      latest              9e22c8cd092b        10 days ago         1.95GB

比着上一个版本又增加了0.5GB。还不包括R包。
~/data/dockerRstudio$ sudo du -sh
5.6G    .
这也太大了吧。。。
重启R session之后变小了: 1.1G    .



3) 推送到 docker hub:
## sudo apt install gnupg2 pass #先安装包，否则登录失败。

$ docker login -u dawneve 
## yourPassWord #登陆

$ docker image push dawneve/rstudio:monocle3 #推送2.58G的镜像
仔细看，发现只需要推送一层，其他层都已经在了，所以快。


https://hub.docker.com/r/dawneve/rstudio/tags?page=1&ordering=last_updated


4) 添加注释
https://hub.docker.com/repository/docker/dawneve/rstudio

打包物理机上的R包文件到github附件上: https://github.com/DawnEve/scRNAseqCode/releases/tag/scDocker-monocle3

$ tar -cvzf pkgs_forDocker_Seurat_monocle3.tar.gz dockerRstudio
-rw-rw-r--  1 wangjl wangjl 384M Mar  2 10:45 pkgs_forDocker_Seurat_monocle3.tar.gz


只打包某个时间点之后的文件呢？
$ tar czvf pkgs_forDocker_monocle3_incre.tar.gz --newer-mtime  "2021-03-01 17:00:00" dockerRstudio
-rw-rw-r-- 1 wangjl wangjl 156M Mar  2 11:04 pkgs_forDocker_monocle3_incre.tar.gz
这个增量包小了很多。













# 不能用
$ docker run -t -p 5000:8004 opencpu/rstudio  















========================================
|-- 直接能用的 Seurat 容器
----------------------------------------
1. 位置
https://satijalab.org/seurat/articles/install.html
https://hub.docker.com/r/satijalab/seurat

$ docker pull satijalab/seurat:4.0.0


2. 启动 
$ docker run -d -p 5000:8787 satijalab/seurat:4.0.0 bash 

只能在黑窗口下使用，不知道怎么用Rstudio。
















========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

