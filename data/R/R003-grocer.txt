R杂货铺-奇淫巧技



========================================
使用Cairo画图——R语言的高质量图形渲染库Cairo
----------------------------------------

常用语句

library(Cairo)
CairoPDF(file="xx.pdf",width=10,height=10)
plot(c(1,2,3,8))
dev.off()




https://www.cnblogs.com/payton/p/5391680.html
#R语言不仅在统计分析，数据挖掘领域，计算能力强大。在数据可视化上，也不逊于昂贵的商业。当然，背后离不开各种开源软件包的支持，Cairo就是这样一个用于矢量图形处理的类库。
# Cairo可以创建高质量的矢量图形(PDF, PostScript, SVG) 和 位图(PNG, JPEG, TIFF)，同时支持在后台程序中高质量渲染！
# 本文将介绍，Cairo在R语言中的使用。
#特别是原生画图命令失效的时候。
#莫名其妙不能使用X11生成图片, 只好使用图形渲染库Cairo。


1.安装
Cairo基本库安装
~ sudo apt-get install libcairo2-dev
~ sudo apt-get install libxt-dev
~ R 
> install.packages("Cairo")

2.Cairo使用
Cairo使用起来非常简单，和基础包grDevices中的函数对应。

CairoPNG: 对应grDevices:png()
CairoJPEG: 对应grDevices:jpeg()
CairoTIFF: 对应grDevices:tiff()
CairoSVG: 对应grDevices:svg()
CairoPDF: 对应grDevices:pdf()
我常用的图形输出，就是png和svg。

检查Cairo的兼容性：
~ R
> library(Cairo)
> Cairo.capabilities()
   png   jpeg   tiff    pdf    svg     ps    x11    win raster
  TRUE   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE  FALSE   TRUE
下面比较一下 CairoPNG() 和 png() 输出效果。

1). 散点图


x<-rnorm(6000)
y<-rnorm(6000)

# PDF格式
CairoPDF(file="Cairo4.pdf",width=10,height=10) #开始画图
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo") #画图语句
dev.off() #结束画图




# PNG图
png(file="plot4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot")
dev.off()

CairoPNG(file="Cairo4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo")
dev.off()

# SVG图
svg(file="plot-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot-svg")
dev.off()

CairoSVG(file="Cairo-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo-svg")
dev.off()



========================================
CentOS6.8 和Ubuntu安装 Rstudio server
----------------------------------------

https://www.rstudio.com/products/rstudio/download-server/

$ wget https://download2.rstudio.org/rstudio-server-rhel-1.1.463-x86_64.rpm
$ sudo yum install rstudio-server-rhel-1.1.463-x86_64.rpm

Next Steps
1.See the Getting Started document for information on configuring and managing the server.
http://www.rstudio.com/ide/docs/server/getting_started

2.Read the RStudio Server Professional Admin Guide for more detailed instructions.
http://docs.rstudio.com/ide/server-pro/



二、Ubuntu1804 安装Rstudio
1.Installing R
$ sudo apt-get install r-base
及很多包。参考R和R包的安装。

2.下载RStudio Server
https://www.rstudio.com/products/rstudio/download-server/

$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.1335-amd64.deb
$ sudo gdebi rstudio-server-1.2.1335-amd64.deb

就可以使用浏览器访问了 http://<server-ip>:8787



3.
Getting Started document: http://www.rstudio.com/ide/docs/server/getting_started
RStudio Server Professional Admin Guide: http://docs.rstudio.com/ide/server-pro/






========================================
怎么能休眠2s再执行？
----------------------------------------
1. 系统休眠几秒，用Sys.sleep 语句。
for(i in 1:3){
  print(i)
  Sys.sleep(2)
}



========================================
快速生成R语言报告（markdown+Rstudio）
----------------------------------------
优点：可重复研究。
缺点：在server上还是不能画图。


1.使用Rstudio设置：
https://blog.csdn.net/lixiaomie01/article/details/78012942
菜单 Tools-Global option-Sweave
Weave Rnw files using: knitr;
Typeset LaTeX into PDF using: pdfLaTex

2.安装包
source("https://bioc.ism.ac.jp/biocLite.R")
biocLite("rmarkdown")

3.新建文件 File-New File-R Markdown...
需要更新文件。

然后新建文件，需要学习markdown语法，比较简单：https://www.sohu.com/a/194382686_455817



4.写完文件，做格式转换
编辑器顶部，在 Knit 可选择不同的文件类型进行浏览：
Knit to HTML

注意：选中语句，ctrl+enter或者点击顶部的Run，即可运行这一句代码。



refer:
https://www.jianshu.com/p/bc8ff133fc37
https://blog.csdn.net/lixiaomie01/article/details/78012942






========================================
R也有Notebook了，不用再羡慕Python有jupyter了
----------------------------------------
熟悉python的朋友可能知道jupyter notebook。它是一个Web应用程序，允许你创建和共享代码，方程，可视化和说明性文本文档。现在，我们可以在RStudio中实现R Notebook的功能了。

我的配置步骤：
安装好 biocLite("rmarkdown") 就可以了，选择新建 R notebook，即可开始书写了。 
想插入代码，点顶部的Insert；
想运行代码，ctrl+Enter即可运行光标所在的行，或者选中的代码行。




网页说的配置步骤，我没试过：
1、 下载最新的RStudio
2、 下载最新版本的Rmarkdown包：
#devtools::install_github("rstudio/rmarkdown")

3、 设置选项：Tools -> Global Options -> Rmarkdown -> Enable R Notebook -> Apply
4、 像往常一样打开一个新的Rmarkdown文件
5、 设置YAML输出选项：将output: html_document 改为 output: html_notebook: default
注：上述的4,5步也可以直接创建一个新的R Markdown Notebook文件。如下图：

完成上述配置后我们就可以在RStudio中开始我们的R Notebook之旅了。





========================================
如何用shiny部署R语言交互式网页小程序？
----------------------------------------

官方案例：http://shiny.rstudio.com/gallery/



1.安装
install.packages("shiny")


2.写代码
(1)看到网上大多给你扯ui.R+server.R，很少会提到global.R，笔者在自己实践的时候遇到的了global.R的使用问题，网上教程只能自己参悟了。

ui.R：搭框架，控件；
server.R：每个控件背后的算法代码；
global.R:server.R中，万一有很长的代码与调用很多其他packages就可以用global写一个函数集合，然后统一在server.R调用。

(2)在一个文件夹内写 ui.R 和 server.R。
格式如下：

# ui.R
library(shiny)
shinyUI(fluidPage(
	#
))
 
# server.R
library(shiny)
shinyServer(function(input, output) {
	#
})


(3)实例-界面：
# ui.R
library(shiny)

shinyUI(fluidPage(
  # Application title
  headerPanel("Hello Shiny!"),
  
  # 侧面控件 Sidebar with a slider input for number of observations
  sidebarPanel(
    #sliderInput是一个滑动的窗口。
    sliderInput("obs", 
                "Number of observations:", 
                min = 0, 
                max = 1000, 
                value = 500)
  ),
  
  # 右边 主控件(默认右边) Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot")
  )

))


(4)实例-服务端：
# server.R
library(shiny)

shinyServer(function(input, output) {
  #数据来源都来自于ui.R，比如obs
  output$distPlot <- renderPlot({
    dist <- rnorm(input$obs)
    #server处理好的图才是返回给ui.R。譬如dist
    hist(dist)
  })
  
})



3.shiny的部署
runApp一下那个路径的文件夹就行了。

#
#####
#https://blog.csdn.net/sinat_26917383/article/details/53410370
library(shiny)
runApp("F://Temp/shiny")
#

refer
1. 中文教程：用R构建shiny应用程序：http://yanping.me/shiny-tutorial/#welcome
2. R powered web applications with Shiny (a tutorial and cheat sheet with 40 example apps) 
http://zevross.com/blog/2016/04/19/r-powered-web-applications-with-shiny-a-tutorial-and-cheat-sheet-with-40-example-apps/





========================================
用R语言对JPG/JPEG图片进行白背景透明处理
----------------------------------------

library(jpeg)
library(png)

setwd("C:\\Users\\admin\\Desktop\\blog_pics\\201904\\")

FILTER <- matrix(c("JPG file", "*.jpg", "JPEG file", "*.jpeg"), ncol = 2, byrow = T)
img <- choose.files(caption = "Select JPG files", filters = FILTER, index = 1, multi=T)
for(i in 1:length(img)){
  x <- readJPEG(img[i])
  dimx <- dim(x) #三维，前两维是x和y，第三维是rgb通道名。
  #分出来rgb三个通道
  n <- dimx[1]*dimx[2]
  r <- x[1:n]
  g <- x[(n+1):(2*n)]
  b <- x[(2*n+1):(3*n)]
  #
  ps <- 5; ps <- dimx[1]*(ps-1) + ps # 背景取值，ps为左上到右下角的像素，5。按情况修改
  tv <- 0.1 # tv为容差范围，0-1取值，越小越精确
  sel <- abs(r-r[ps])<tv & abs(g-g[ps])<tv & abs(b-b[ps])<tv
  alpha <- rep(1, n)
  alpha[sel] <- 0
  x <- array(c(x, alpha), dim=c(dimx[1:2], 4))
  writePNG(x, gsub("(.+\\.)(jpg|jpeg)$","\\1png", img[i], ignore.case = TRUE))
}


https://blog.csdn.net/u014801157/article/details/24372421




========================================
hit <return> to see next plot 怎么回事？
----------------------------------------
一般是执行完示例程序后遗留问题。
# 关掉算了
par(ask=F)


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

