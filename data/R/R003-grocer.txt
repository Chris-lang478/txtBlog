R杂货铺-奇淫巧技



========================================
查看当前的R环境、R包及其版本号，出错提问时必备
----------------------------------------
sessionInfo()



========================================
抑制 warning
----------------------------------------
1. options(warn=-1)

warn如果是负数，则所有warning message都被忽略
warn = 0 (0为默认值)，则所有warning messages会被储存起来直到上级函数(此例中则是repeat()函数)运行结束
warn = 1，则一旦产生warning message，这条信息会被立即显示出来
warn = 2 或更大的数值， 则warning message会被立即显示并转换成error message。此例中，如果warn = 2，整个自定义函数都会被中断，提示warning message的内容，但是会以error message的形式弹出。



2.Rstudio中，也可以
warnings('off')



ref:
https://blog.csdn.net/stat_elliott/article/details/37878247




========================================
ubuntu如何更新到R的最新版？
----------------------------------------
https://cran.r-project.org/bin/linux/ubuntu/README
1. 查当前版本
> sessionInfo()
## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.1 LTS



2.
(1) 写入新源
$ sudo vim /etc/apt/sources.list

# 18.04 我的
deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/
# 16.04
deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/
# 14.04
deb https://cloud.r-project.org/bin/linux/ubuntu trusty-cran35/

我用的国内的源
https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu bionic-cran35/

(2)删除旧版本
sudo apt-get --purge remove r-base
sudo apt-get --purge remove r-base-core
sudo apt-get --purge remove r-base-dev
# sudo apt-get remove -y 'r-cran-*'
# apt-get remove 会删除软件包而保留软件的配置文件
# apt-get purge 会同时清除软件包和软件的配置文件



(3) 更新
$ sudo apt-get update
$ sudo apt-get install r-base
## sudo apt-get install r-base r-base-core  r-base-dev

报错 The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 51716619E084DAB9
..  is not signed.
那就加上这个公钥
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 2A8E3034D018A4CE


$ sudo apt-get upgrade #不敢升级，不得不升级了再升级吧。


当然，还需要安装一系列R包。
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install(c('shiny','stringr','DT','ggplot2'),ask = F,update = F)
BiocManager::install(c('knitr','rmarkdown','rmarkdown','cowplot','dplyr'),ask = F,update = F)
BiocManager::install('RMySQL',ask = F,update = F) 
BiocManager::install(c('RColorBrewer'),ask = F,update = F)


## Simple install following libs on your linux.
curl: sudo apt-get install curl 
libssl-dev: sudo apt-get install libssl-dev 
libcurl: sudo apt-get install libcurl4-openssl-dev 
xml2: sudo apt-get install libxml2-dev

#'limma','Glimma','DESeq2','edgeR',
BiocManager::install(c('DESeq',  'pasilla','Mus.musculus','RNAseq123'),ask = F,update = F)
BiocManager::install(c('Seurat'),ask = F,update = F)


再查版本号:
> sessionInfo()
## R version 3.6.1 (2019-07-05)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.1 LTS


BiocManager::install(c('biomaRt'),ask = F,update = F)


BiocManager::install(c('openssl'),ask = F,update = F)
installation of package ‘openssl’ had non-zero exit status

报错
Warning messages:
1: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘openssl’ had non-zero exit status
2: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘httr’ had non-zero exit status
3: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘biomaRt’ had non-zero exit status
4: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘GenomicFeatures’ had non-zero exit status
5: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘OrganismDbi’ had non-zero exit status
6: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘TxDb.Mmusculus.UCSC.mm10.knownGene’ had non-zero exit status
7: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘Mus.musculus’ had non-zero exit status
8: In install.packages(pkgs = doing, lib = lib, repos = repos, ...) :
  installation of package ‘RNAseq123’ had non-zero exit status

ERROR: dependency ‘biomaRt’ is not available for package ‘GenomicFeatures’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/GenomicFeatures’
ERROR: dependency ‘GenomicFeatures’ is not available for package ‘OrganismDbi’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/OrganismDbi’
ERROR: dependency ‘GenomicFeatures’ is not available for package ‘TxDb.Mmusculus.UCSC.mm10.knownGene’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/TxDb.Mmusculus.UCSC.mm10.knownGene’
ERROR: dependencies ‘OrganismDbi’, ‘GenomicFeatures’, ‘TxDb.Mmusculus.UCSC.mm10.knownGene’ are not available for package ‘Mus.musculus’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/Mus.musculus’
ERROR: dependency ‘Mus.musculus’ is not available for package ‘RNAseq123’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/3.6/RNAseq123’


> source("https://bioc.ism.ac.jp/biocLite.R")
Error: With R version 3.5 or greater, install Bioconductor packages using BiocManager; see https://bioc.ism.ac.jp/install

$ sudo apt update && sudo apt install libssl-dev #早就装过了

$ sudo apt-get install r-cran-openssl
## The following packages have unmet dependencies:
##  r-cran-openssl : Depends: r-api-3.4
## E: Unable to correct problems, you have held broken packages.
# 装不上

>install.packages('askpass') #竟然好了
>install.packages('openssl')




========================================
使用Cairo画图——R语言的高质量图形渲染库Cairo
----------------------------------------
常用语句

library(Cairo)
CairoPDF(file="xx.pdf",width=10,height=10)
plot(c(1,2,3,8))
dev.off()


注意！如果是函数内用到ggplot2作图，则要定义ggplot2返回值，再用print()输出，否则会出现空pdf文件！
library(ggplot2)
fn2=function(){
	CairoPDF(file="xx2.pdf",width=10,height=10)
	g=ggplot(diamonds[1:1000,], aes(carat, price,color=color))+geom_point();
	print(g) #直接ggplot()作图，有可能不能输出到pdf中
	dev.off()
}
fn2();




https://www.cnblogs.com/payton/p/5391680.html
#R语言不仅在统计分析，数据挖掘领域，计算能力强大。在数据可视化上，也不逊于昂贵的商业。当然，背后离不开各种开源软件包的支持，Cairo就是这样一个用于矢量图形处理的类库。
# Cairo可以创建高质量的矢量图形(PDF, PostScript, SVG) 和 位图(PNG, JPEG, TIFF)，同时支持在后台程序中高质量渲染！
# 本文将介绍，Cairo在R语言中的使用。
#特别是原生画图命令失效的时候。
#莫名其妙不能使用X11生成图片, 只好使用图形渲染库Cairo。


1.安装
Cairo基本库安装
~ sudo apt-get install libcairo2-dev
~ sudo apt-get install libxt-dev
~ R 
> install.packages("Cairo")

2.Cairo使用
Cairo使用起来非常简单，和基础包grDevices中的函数对应。

CairoPNG: 对应grDevices:png()
CairoJPEG: 对应grDevices:jpeg()
CairoTIFF: 对应grDevices:tiff()
CairoSVG: 对应grDevices:svg()
CairoPDF: 对应grDevices:pdf()
我常用的图形输出，就是png和svg。

检查Cairo的兼容性：
~ R
> library(Cairo)
> Cairo.capabilities()
   png   jpeg   tiff    pdf    svg     ps    x11    win raster
  TRUE   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE  FALSE   TRUE
下面比较一下 CairoPNG() 和 png() 输出效果。

1). 散点图


x<-rnorm(6000)
y<-rnorm(6000)

# PDF格式
CairoPDF(file="Cairo4.pdf",width=10,height=10) #开始画图
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo") #画图语句
dev.off() #结束画图




# PNG图
png(file="plot4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot")
dev.off()

CairoPNG(file="Cairo4.png",width=640,height=480)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo")
dev.off()

# SVG图
svg(file="plot-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "plot-svg")
dev.off()

CairoSVG(file="Cairo-svg4.svg",width=6,height=6)
plot(x,y,col="#ff000018",pch=19,cex=2,main = "Cairo-svg")
dev.off()




========================================
|-- R语言输出的pdf，怎么在 illustrator 中不乱码？
----------------------------------------

1. 如果是ggplot2，则可以使用ggsave的'useDingbats'=F参数：
https://stackoverflow.com/questions/9992275/ggplot2-pdf-import-in-adobe-illustrator-missing-font-adobepistd

(1)Although changing the fonts used by AI works well, an alternative is to restrict ggplot2 from using Dingbats in the first place by adding the argument 'useDingbats' to your ggsave command eg:

(2)useDingbats=FALSE also works if AI displays your geom_point dots as squares.

ggsave(plot=p,height=6,width=6,dpi=200, filename="~/example.pdf", useDingbats=FALSE)





2. 使用自带的pdf输出，带上useDingbats=F参数：
pdf("test.pdf", useDingbats=FALSE,width=10, height=10)
heatmap( as.matrix(mtcars) )
dev.off()





3. CairoPDF 的输出，用AI打开还是乱码，目前还是无解。

https://stackoverflow.com/questions/20502772/r-cairo-pdf-fonts-unreadable-in-adobe-illustrator





4.使用 embedFonts {grDevices} 函数： Embed Fonts in PostScript and PDF
//todo
embedFonts(file, format, outfile = file,
           fontpaths = character(), options = character())




========================================
CentOS6.8 和Ubuntu安装 Rstudio server
----------------------------------------

https://www.rstudio.com/products/rstudio/download-server/

$ wget https://download2.rstudio.org/rstudio-server-rhel-1.1.463-x86_64.rpm
$ sudo yum install rstudio-server-rhel-1.1.463-x86_64.rpm

Next Steps
1.See the Getting Started document for information on configuring and managing the server.
http://www.rstudio.com/ide/docs/server/getting_started

2.Read the RStudio Server Professional Admin Guide for more detailed instructions.
http://docs.rstudio.com/ide/server-pro/



二、Ubuntu1804 安装Rstudio
1.Installing R
$ sudo apt-get install r-base
及很多包。参考R和R包的安装。

2.下载RStudio Server
https://www.rstudio.com/products/rstudio/download-server/

$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.1335-amd64.deb
$ sudo gdebi rstudio-server-1.2.1335-amd64.deb

就可以使用浏览器访问了 http://<server-ip>:8787



3.
Getting Started document: http://www.rstudio.com/ide/docs/server/getting_started
RStudio Server Professional Admin Guide: http://docs.rstudio.com/ide/server-pro/






========================================
怎么能休眠2s再执行？
----------------------------------------
1. 系统休眠几秒，用Sys.sleep 语句。
for(i in 1:3){
  print(i)
  Sys.sleep(2)
}



========================================
快速生成R语言报告（markdown+Rstudio）
----------------------------------------
优点：可重复研究。
缺点：在server上还是不能画图。


1.使用Rstudio设置：
https://blog.csdn.net/lixiaomie01/article/details/78012942
菜单 Tools-Global option-Sweave
Weave Rnw files using: knitr;
Typeset LaTeX into PDF using: pdfLaTex

2.安装包
source("https://bioc.ism.ac.jp/biocLite.R")
biocLite("rmarkdown")

3.新建文件 File-New File-R Markdown...
需要更新文件。

然后新建文件，需要学习markdown语法，比较简单：https://www.sohu.com/a/194382686_455817

rmarkdown语法 https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf




4.写完文件，做格式转换
编辑器顶部，在 Knit 可选择不同的文件类型进行浏览：
Knit to HTML

注意：选中语句，ctrl+enter或者点击顶部的Run，即可运行这一句代码。



refer:
R Markdown: The Definitive Guide  https://bookdown.org/yihui/rmarkdown/
https://www.jianshu.com/p/bc8ff133fc37
https://blog.csdn.net/lixiaomie01/article/details/78012942






========================================
|-- R也有Notebook了，不用再羡慕Python有jupyter了
----------------------------------------
熟悉python的朋友可能知道jupyter notebook。它是一个Web应用程序，允许你创建和共享代码，方程，可视化和说明性文本文档。现在，我们可以在RStudio中实现R Notebook的功能了。

我的配置步骤：
安装好 biocLite("rmarkdown") 就可以了，选择新建 R notebook，即可开始书写了。 
想插入代码，点顶部的Insert；
想运行代码，ctrl+Enter即可运行光标所在的行，或者选中的代码行。




网页说的配置步骤，我没试过：
1、 下载最新的RStudio
2、 下载最新版本的Rmarkdown包：
#devtools::install_github("rstudio/rmarkdown")

3、 设置选项：Tools -> Global Options -> Rmarkdown -> Enable R Notebook -> Apply
4、 像往常一样打开一个新的Rmarkdown文件
5、 设置YAML输出选项：将output: html_document 改为 output: html_notebook: default
注：上述的4,5步也可以直接创建一个新的R Markdown Notebook文件。如下图：

完成上述配置后我们就可以在RStudio中开始我们的R Notebook之旅了。






========================================
|-- 在jupyter中执行R代码、及问题与解决
----------------------------------------
直接在terminal中运行安装代码，不会出现IRkernel等的报错～
step1:打开terminal，
step2:输入R，进入R shell，
step3:输入以下命令

1. 安装包
(1) 失败
## install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
## devtools::install_github('IRkernel/IRkernel') 
#报错 Failed to connect to api.github.com port 443: Connection refused

# IRkernel::installspec(user = FALSE) # 或者是在系统下安装



(2)找到官网 https://github.com/IRkernel/IRkernel
说可以直接安装This package is available on CRAN:

install.packages('IRkernel')

IRkernel::installspec()  # to register the kernel in the current R installation

等待执行完毕，打开jupyter就可以新建R的notebook了。



2. 使用 
注: 我之前一直开着jupyter的，完成上述功能后，我只是刷新了一下网页，就可以用了，并没有重启jupyter。好神奇。

在jupyter中，新建，可选择的Python和R。

也可以在jupyterlab中使用该功能。







3. trouble shooting

(1)在jupyter中使用Cairo时，2条及以上输出时，输出文件会是个空文件(0 B)，在使用前先调用dev.off();
ref: https://github.com/IRkernel/IRkernel/issues/658

dev.off() #要先执行这个，否则空文件

library(Cairo)
CairoPDF('test.pdf', width=5, height=4)
hist(mtcars$mpg, main="1")
hist(mtcars$mpg, main="2")
dev.off()


(2) for中的print不会实时显示，执行结束才一起显示
ref: https://stackoverflow.com/questions/37689694/real-time-printing-to-console-with-r-in-jupyter
https://github.com/IRkernel/IRkernel/issues/659

for(i in 1:10){
    message(i) # like paste0(), can show instantly
    print(i)
    Sys.sleep(0.5)
}





ref:
https://blog.csdn.net/ICERON/article/details/82743930






========================================
如何用shiny部署R语言交互式网页小程序？
----------------------------------------

官方案例：http://shiny.rstudio.com/gallery/



1.安装
install.packages("shiny")


2.写代码
(1)看到网上大多给你扯ui.R+server.R，很少会提到global.R，笔者在自己实践的时候遇到的了global.R的使用问题，网上教程只能自己参悟了。

ui.R：搭框架，控件；
server.R：每个控件背后的算法代码；
global.R:server.R中，万一有很长的代码与调用很多其他packages就可以用global写一个函数集合，然后统一在server.R调用。

(2)在一个文件夹内写 ui.R 和 server.R。
格式如下：

# ui.R
library(shiny)
shinyUI(fluidPage(
	#
))
 
# server.R
library(shiny)
shinyServer(function(input, output) {
	#
})


(3)实例-界面：
# ui.R
library(shiny)

shinyUI(fluidPage(
  # Application title
  headerPanel("Hello Shiny!"),
  
  # 侧面控件 Sidebar with a slider input for number of observations
  sidebarPanel(
    #sliderInput是一个滑动的窗口。
    sliderInput("obs", 
                "Number of observations:", 
                min = 0, 
                max = 1000, 
                value = 500)
  ),
  
  # 右边 主控件(默认右边) Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot")
  )

))


(4)实例-服务端：
# server.R
library(shiny)

shinyServer(function(input, output) {
  #数据来源都来自于ui.R，比如obs
  output$distPlot <- renderPlot({
    dist <- rnorm(input$obs)
    #server处理好的图才是返回给ui.R。譬如dist
    hist(dist)
  })
  
})



3.shiny的部署
runApp一下那个路径的文件夹就行了。

#
#####
#https://blog.csdn.net/sinat_26917383/article/details/53410370
library(shiny)
runApp("F://Temp/shiny")
#

refer
1. 中文教程：用R构建shiny应用程序：http://yanping.me/shiny-tutorial/#welcome
2. R powered web applications with Shiny (a tutorial and cheat sheet with 40 example apps) 
http://zevross.com/blog/2016/04/19/r-powered-web-applications-with-shiny-a-tutorial-and-cheat-sheet-with-40-example-apps/





========================================
用R语言对JPG/JPEG图片进行白背景透明处理
----------------------------------------

library(jpeg)
library(png)

setwd("C:\\Users\\admin\\Desktop\\blog_pics\\201904\\")

FILTER <- matrix(c("JPG file", "*.jpg", "JPEG file", "*.jpeg"), ncol = 2, byrow = T)
img <- choose.files(caption = "Select JPG files", filters = FILTER, index = 1, multi=T)
for(i in 1:length(img)){
  x <- readJPEG(img[i])
  dimx <- dim(x) #三维，前两维是x和y，第三维是rgb通道名。
  #分出来rgb三个通道
  n <- dimx[1]*dimx[2]
  r <- x[1:n]
  g <- x[(n+1):(2*n)]
  b <- x[(2*n+1):(3*n)]
  #
  ps <- 5; ps <- dimx[1]*(ps-1) + ps # 背景取值，ps为左上到右下角的像素，5。按情况修改
  tv <- 0.1 # tv为容差范围，0-1取值，越小越精确
  sel <- abs(r-r[ps])<tv & abs(g-g[ps])<tv & abs(b-b[ps])<tv
  alpha <- rep(1, n)
  alpha[sel] <- 0
  x <- array(c(x, alpha), dim=c(dimx[1:2], 4))
  writePNG(x, gsub("(.+\\.)(jpg|jpeg)$","\\1png", img[i], ignore.case = TRUE))
}


https://blog.csdn.net/u014801157/article/details/24372421




========================================
hit <return> to see next plot 怎么回事？
----------------------------------------
一般是执行完示例程序后遗留问题。
# 关掉算了
par(ask=F)




========================================
如何在shell脚本中调用R脚本并传递参数 -- (打造pipeline必备技能)
----------------------------------------

1.shell中调用R脚本: Rscript path/to/myscript.R arg1 arg2 arg3

(1)R脚本
$ cat myRscript.R 
library('ggplot2')
library('Cairo')

print("this is a line")

CairoPDF(file="test.pdf",width=5,height=5)
ggplot(diamonds, aes(carat, price))+geom_point()
dev.off()


(2)shell调用

方法1: 直接在屏幕上显示结果（推荐使用该方法，直观）
$ Rscript myRscript.R 
## 可以看到生成的pdf文件，和打印出来的文字，及其他信息。


方法2: 结果输出到文件（结果就像截屏，相当于代码逐行执行。不推荐）
$ R CMD BATCH myscript.R
## Check the output
$ cat myscript.Rout


如果碰到报错了，请看2
如何传入参数，请看3





2.报错： 碰到gglot2包总是找不到，怎么办？

(1)查询R包调用路径
> .libPaths()
[1] "/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5"
[2] "/usr/lib64/R/library"                              
[3] "/usr/share/R/library"


(2)临时设置R包调用路径（退出R，设置就失效了。下次还要重新设置）
> library(ggplot2) #没有找到
Error in library(ggplot2) : there is no package called ‘ggplot2’
> 
> .libPaths()
[1] "/usr/lib64/R/library" "/usr/share/R/library"
> .libPaths("/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5") #添加R包新路径
> 
> library(ggplot2) 
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang

(3)添加文件 ~/.Rprofile 
.libPaths("/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5")

则再次使用终端打开R时，就会自动加载好该包地址。






3. 怎么使用命令行传入参数？

脚本 my2.R
$ cat my2.R 
#获取命令行参数
myArgs<-commandArgs(TRUE)

#myArgs是所有参数的特征向量
print(myArgs) 
print(class(myArgs))


shell 调用
$ Rscript my2.R 12 2 35
[1] "12" "2"  "35"
[1] "character"

注意取出来的参数是所有参数连在一起的character
需要变成数字的话，需要R代码实现。




4. 如何在shell脚本中调用R脚本，并传递参数
$ cat my3.R
myArgs<-commandArgs(TRUE)

#myArgs是所有参数的特征向量
print(myArgs)
print(class(myArgs))

n1=as.numeric(myArgs[1])
n2=as.numeric(myArgs[2])
print(n1+n2)

$ cat test.sh
#!/bin/bash
source /etc/profile
echo "start: `date`"
/usr/bin/Rscript my3.R $1 $2 #不用绝对路径也可以
echo "end:`date`"


输出
$ Rscript my3.R 12 2 35
[1] "12" "2"  "35"
[1] "character"
[1] 14

$ bash test.sh 12 2 35
start: Thu Jul 18 04:01:08 EDT 2019
[1] "12" "2" 
[1] "character"
[1] 14
end:Thu Jul 18 04:01:08 EDT 2019



(2) 如果不加True，则会从第六个才是参数
$ vim test.R
Args <- commandArgs()
cat("Args[1]=",Args[1],"\n")
print(Args)

$ Rscript test.R 1 2 3
Args[1]= /usr/lib64/R/bin/exec/R 
[1] "/usr/lib64/R/bin/exec/R" "--slave"                
[3] "--no-restore"            "--file=test.R"          
[5] "--args"                  "1"                      
[7] "2"                       "3"




4.在shell脚本中调用R脚本，并在shell中接收返回值，判断是否成功执行









refer:
1.传参 https://www.cnblogs.com/awishfullyway/p/6632662.html
2.R包路径 https://bbs.pinggu.org/forum.php?mod=viewthread&tid=4585044&page=1




========================================
|-- 如何在R中调用shell脚本?
----------------------------------------
1. system() invokes the OS command specified by command.
Usage
system(command, intern = FALSE,
       ignore.stdout = FALSE, ignore.stderr = FALSE,
       wait = TRUE, input = NULL, show.output.on.console = TRUE,
       minimized = FALSE, invisible = TRUE)
#

2. 实例
R脚本
$ vim test.R
Args <- commandArgs(T)

shell_cmd<-paste0("grep -n CHR ",Args[1])
grep_out<-system(shell_cmd, intern = TRUE) #调用shell的grep命令
# cat(grep_out)
print(grep_out)

文档内容
$ cat aa.txt 
this
is CHR
a
CHR2 book

调用结果
$ Rscript test.R aa.txt
# 2:is CHR 4:CHR2 book  ## R中使用cat的输出
[1] "2:is CHR"     "4:CHR2 book "







ref:
https://www.cnblogs.com/emanlee/p/6930884.html




========================================
R语言-代码规范（Google's R Style Guide）
----------------------------------------
R是一个高级编程语言主要用于统计计算和图形。R编程风格指南的目标是使我们的R代码更容易阅读、分享和验证。
以下R代码规则是在谷歌的整个R合作用户社区下进行设计的。

在2016年，Google发布了R语言编程规范指导，一共有15条，分别有：覆盖文件名规范，变量名规范，每行代码长度，缩进，花括号使用，赋值表达，if else，分号的不使用，函数定义，函数注释等等。


R语言的代码规范总结起来有以下内容：
1.对象命名要赋予意义
2.使用空行来分割逻辑
3.必要时使用注释和花括号
4.不用的代码和引用删除，代码整洁，精炼而富有含义。
5.不要用中文拼音做变量名，提高代码水平层次
6.代码程序可用，清晰优雅，高效
7.多写代码，多思考， 常常回顾代码。




1. 符号和命名(Notation and Naming)

(1)文件名(File names)
File names should end in .R and, of course, be meaningful.
GOOD: predict_ad_revenue.R
BAD: foo.R


(2)标识符（Identifiers）
不要使用下划线(_)或连字符(-)标识符。
标识符应按照以下命名约定。
变量名的首选形式都是小写字母和单词分开用点(variable.name),但也接受variableName;函数名最初的大写字母和没有点(FunctionName);

##? 为什么不提倡下划线呢？

1)variable.name is preferred, variableName is accepted
GOOD: avg.clicks
OK: avgClicks
BAD: avg_Clicks

2)FunctionName
GOOD: CalculateAvgClicks
BAD: calculate_avg_clicks , calculateAvgClicks
Make function names verbs.
Exception: When creating a classed object, the function name









2.语法（Syntax）
(1)每行最大长度（Line Length）
The maximum line length is 80 characters.

(2)缩进（Indentation）
当缩进代码, 使用两个空间。绝不使用制表符或混合制表符和空格。例外:括号内发生换行时,使其与括号内的第一个字符对齐。

(3)间距（Spacing）
所有的二元操作都需要空格，（=，+ ，- ，<-）前后都需要空格。
例外:当符号 = 是函数调用时的传递参数周围不用空格隔开。
不要在符号“，”前空格隔开，但需要在“，”后添加空格
GOOD:
	tab.prior <- table(df[df$days.from.opt < 0, "campaign.id"]) 
	total <- sum(x[, 1]) 
	total <- sum(x[1, ])

BAD:
	tab.prior <- table(df[df$days.from.opt<0, "campaign.id"])  # Needs spaces around '<' 
	tab.prior <- table(df[df$days.from.opt < 0,"campaign.id"])  # Needs a space after the comma
	tab.prior<- table(df[df$days.from.opt < 0, "campaign.id"])  # Needs a space before <-
	tab.prior<-table(df[df$days.from.opt < 0, "campaign.id"])  # Needs spaces around <-
	total <- sum(x[,1])  # Needs a space after the comma 
	total <- sum(x[ ,1])  # Needs a space after the comma, not before

在左括号之前添加一个空格，除了函数的调用
GOOD:
	if (debug)

BAD:
	if(debug)

Extra spacing (i.e., more than one space in a row) is okay if it improves alignment of equals signs or arrows (<-).
为了对齐，可以使用多个空格。
plot(x    = x.coord,     
     y    = data.mat[, MakeColName(metric, ptiles[1], "roiOpt")],     
     xlab = "dates", 
     ylab = metric,
     main = (paste(metric, " for 3 samples ", sep = "")))
#


(4)花括号（Curly Braces）
一个左括号不应该自己一行; 而一个右括号应该总是一行。
当一个代码块是一个单独声明时你可以不适用花括号。但是，你必须考虑其他相同的情况，以保持一致。
	if (is.null(ylim)) {  ylim <- c(0, 0.06) }
#xor (but not both)
	if (is.null(ylim))  ylim <- c(0, 0.06)

Always begin the body of a block on a new line.

BAD:
	if (is.null(ylim)) ylim <- c(0, 0.06) 
	if (is.null(ylim)) {ylim <- c(0, 0.06)}

花括号与else
一个else语句应该总是被花括号包围在同一行。
Good:
	if (condition) {  
	  one or more lines 
	} else {  
	  one or more lines 
	}

Bad:
	if (condition) {  
	  one or more lines 
	} 
	else {  
	  one or more lines 
	}

(5)赋值（Assignment）
Use <-, not =, for assignment.
GOOD:
	x <- 5

BAD:
	x = 5
##? 我倾向于使用=，理由是：和其他语言兼容，容易识别；且打字快，省时间！


(6)注释前放一个空格，即书写#号后，空一个写注释，注释养成英文注释的习惯。
修改前
#Get data information 
newdata <- read.csv(PArameter4)

修改后
# Get data information 
newdata <- read.csv(PArameter4)

(7)分号，尽量不要使用。
不要以分号结束一行, 也不要利用分号在同一行放多于一个命令.
 (分号是毫无必要的, 并且为了与其他Google编码风格指南保持一致, 此处也需要略去.)









3. Organization
(1)总体布局和排序（General Layout and Ordering）
如果每个人都使用相同的一般顺序, 我们能够更快和更容易阅读和理解彼此的脚本。一般开头需包含：
	版权声明注释
	作者评论
	文件描述的评论,包括程序的目的,输入和输出
	source() 和 library() 声明
	函数定义
	已执行的语句
单元测试应该在一个单独的文件名为originalfilename_test.R。

(2)代码注释（Commenting Guidelines）
简短的注释可以放置在代码之后，用 空格 + # + 空格隔开 ,较长的注释可以单独一行。

# Create histogram of frequency of campaigns by pct budget spent. 
hist(df$pct.spent,    
     breaks = "scott",  # method for choosing number of buckets     
     xlab   = "Fraction of budget spent",     
     ylab   = "Frequency (count of campaignids)")

(3)函数定义和调用（Function Definitions and Calls）
函数定义应该首先列出参数没有默认值, 紧随其后的是那些有默认值的。
在函数定义和函数调用时,允许多个参数一行，但是换行只允许在参数之间进行。
GOOD：
PredictCTR <- function(query, property, num.days,                                              
                       show.plot = TRUE)

BAD:
PredictCTR <- function(query, property, num.days, show.plot =     
                       TRUE)
#
理想情况下,单元测试应该作为样本函数调用(共享库例程)。









4.Functions
(1)错误应该使用 stop() 进行提醒
(2)使用 attach 造成错误的可能数不胜数. 避免使用它.rm(list=ls())用于清除所有的变量。

(3)部分英文名称不能作为对象名，函数命名应以动词或者动词性短语为主，例如
if=1
错误: 意外的’=’ in “if=”

(4)函数和变量的命名则需要尤其小心，在 R 环境对于大小写是极其敏感的。
变量名应该都使用小写字母，而函数名则可以在首字母使用大写，另一点需要注意的是变量和函数命名时应尽量避免与 R 环境中本身存在的一些函数或者变量重名，不然系统也会混乱弄不清的。
不同单词间可以用 . 或者 _ 来连接，看个人习惯，但貌似谷歌的 R语言代码规范上要求使用 . 来连接。
而命名函数则尽量不要使用下划线或者点连接符，在单词选择上也较好能体现函数的动作，以动词来命名函数。

函数命名不要使用点，因为点号是为定义泛型函数的。

(5)少用循环而多用 R 自带的向量化运算。
R 的循环效率极低，能不用则不用。关于 apply 函数族的用法运算精髓应多加进行整理。


(6)函数说明(Function Documentation)
函数在定义行下方都应当紧接一个注释区。这些注释应该包含一句关于函数的描述，一段关于该函数的参数列表的的描述(包括数据类型), 和一个返回值的描述。这些注释需具有足够的描述性的,调用者可以通过阅读注释即可懂得如何调用该函数。

这些注释应当由如下内容组成: 
此函数的一句话描述; 
此函数的参数列表, 用 Args: 表示, 对每个参数的描述 (包括数据类型); 
以及对于返回值的描述, 以 Returns: 表示. 
这些注释应当描述得足够充分, 这样调用者无须阅读函数中的任何代码即可使用此函数. 


示例函数 Example

CalculateSampleCovariance <- function(x, y, verbose = TRUE) {  
  # Computes the sample covariance between two vectors.  
  #  
  # Args:  
  #   x: One of two vectors whose sample covariance is to be calculated.  
  #   y: The other vector. x and y must have the same length, greater than one,  
  #      with no missing values.  
  #   verbose: If TRUE, prints sample covariance; if not, not. Default is TRUE.  
  # 
  # Returns:  
  #   The sample covariance between x and y.  

  n <- length(x)  
  # Error handling  
  if (n <= 1 || n != length(y)) {   
    stop("Arguments x and y have different lengths: ",
         length(x), " and ", length(y), ".")     
  }
  if (TRUE %in% is.na(x) || TRUE %in% is.na(y)) {  
    stop(" Arguments x and y must not have missing values.") 
  }
  covariance <- var(x, y)  
  if (verbose)    
    cat("Covariance = ", round(covariance, 4), ".\n", sep = "")  
  return(covariance) 
}









5.最后的话
Use common sense and BE CONSISTENT.

If you are editing code, take a few minutes to look at the code around you and determine its style. If others use spaces around their if clauses, you should, too. If their comments have little boxes of stars around them, make your comments have little boxes of stars around them, too.

The point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you are saying, rather than on how you are saying it. We present global style rules here so people know the vocabulary. But local style is also important. If code you add to a file looks drastically different from the existing code around it, the discontinuity will throw readers out of their rhythm when they go to read it. Try to avoid this.

OK, enough writing about writing code; the code itself is much more interesting. Have fun!




https://blog.csdn.net/qq_27755195/article/details/51587172



========================================
R语言-调试代码 //todo
----------------------------------------
和其他语言一样你自然可以通过print一些参数之类的方法进行debug,但是R或RStudio提供的一些代码调试工具还是能为你提供一些有用的尝试。
这些工具包括：traceback、browser、debug、debugonce、trace和recover函数。

一般debug包括两个步骤，首先是定位代码错误发生的位置，然后是找出代码发生错误的原因并解决



1. 其中第一步可以借助traceback函数来完成
traceback
traceback函数可以帮助你精确定位错误。很多R函数之间都会存在互相调用的情况，如何确定出错的函数往往是个难题。

first<-function()second()
second<-function()third()
third<-function()fourth()
fourth<-function()fifth()
fifth<-function()bug()

上述函数都在调用下一个函数（除了最后一个函数）
由于bug函数不存在，运行first()将会报错
Error in bug() : could not find function "bug"







ref:
https://blog.csdn.net/xiaohukun/article/details/76659515



========================================
|-- 调试函数 stop('sth')
----------------------------------------
相当于断言

fn2=function(x=2){
  print('line1')
  if(x<0){
    stop( paste('Stoped here: x should be greater than 0; but x=',x) )
  }
  print('line2')
}
fn2(10)
fn2(-1)



========================================
 |-- 函数的调试debug 和性能分析 system.time()
----------------------------------------

一、函数的调试 debug
1.手动添加 print(xx)， 随时查看变量，判断出错位置。
缺点：比较繁琐，特别是程序较长的时候。

2.使用R的调试工具。
(1) debug(f)函数可以把函数f()设置成调试状态，意味着每次调用f()都会进入这一状态。
取消这一状态需调用 undebug(f)。
在2.10版本之后，可以使用 debugonce()代替，仅检查漏洞一次。


(2)程序调试工具还能跟踪运行步骤，进而加深对程序处理过程的理解

#递归的原理：将x类型的原始问题降级为一个或划分为若干个更小的同类型问题，然后对每个较小问题调用f()函数自身，直到达到终止条件，再将各个小问题的结果向上返回并整理来解决问题。

#递归算法排序
qs=function(x){
  if(length(x)<=1) return(x)
  pivot=x[1]
  therest=x[-1]
  sv1=therest[therest<pivot]
  sv2=therest[therest>=pivot]
  sv1=qs(sv1)
  sv2=qs(sv2)
  return(c(sv1,pivot,sv2))
}
a=c(8,7,20,9,45,3)
qs(a)
# [1]  3  7  8  9 20 45

#使用调试工具，跟踪代码
#trace code
debugonce(qs)
qs(a)
然后回车查看下一步，或者输入变量回车，查看当前变量的值。




二、性能优化
https://www.zhihu.com/question/23589055
1.跟踪运行的时间
add=function(a,b){
	return(a+b)
}

方法1：
time1=Sys.time();
add(1,2);
time2=Sys.time();
print(paste("消耗时间",time2-time1));


方法2：【推荐】
system.time(add(1,2))
用户user 系统system 流逝elapsed 
0.10 0.00 0.09 


三个数字分别表示 
user:消耗在应用程序（非操作系统部分）执行的时间；
system: 低层操作系统执行（如磁盘读写等）部分的时间；
elapsed:是经过的总时间（可以认为是前两者的总和）。
一般优化时主要关注user时间。





2.避免使用for循环，优先使用向量化操作

x=runif(1e6)
y=runif(1e6)

#向量化
system.time(z<-x+y) #这里不能使用=，否则会被认为是传入的参数而报错
# 用户 系统 流逝 
# 0.01 0.00 0.02 

#for循环
z=vector(length=1e6)
system.time(for(i in 1:length(x)) z[i]=x[i]+y[i])
# 用户 系统 流逝 
# 0.13 0.00 0.12 #为什么elapse比user还小呢？不清楚


可见，向量化0.01s运行速度远远高于for循环的0.13s。

当然，速度的提升是以更多内存消耗为代价的。时间和空间的权衡经常无法避免。



========================================
R 代码 经典片段
----------------------------------------
暂时无法归类的，都先放到这。







========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

