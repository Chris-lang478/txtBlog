R语言基础




========================================
资源
----------------------------------------
1.
《R语言快速入门系列教程》  
http://agetouch.blog.163.com/blog/static/22853509020161026101219690/

R官方文档： https://cran.r-project.org/manuals.html




2. R语言镜像站

https://cran.rstudio.com/bin/windows/contrib/3.4/Cairo_1.5-9.zip
https://mirrors.tuna.tsinghua.edu.cn/bioconductor/packages/3.4/BiocViews.html#___Software
http://mirrors.ustc.edu.cn/bioc/3.4/BiocViews.html#___Software




========================================
常用R脚本
----------------------------------------


GC含量统计：http://www.biotrainee.com/forum.php?mod=viewthread&tid=625&page=2#pid1904

# R语言运行时间监控
https://www.zhihu.com/question/23589055

add=function(a,b){
	return(a+b);
}

方法1：
time1=Sys.time();
add(1,2);
time2=Sys.time();
print(paste("消耗时间",time2-time1));


方法2：
system.time(add(1,2))


========================================
运算符
----------------------------------------
求助符：
	?
	help()
系统符号：
	> 命令或运算提示符
	+ 续行符
基本算数运算：
	加 +，	 减-，	乘*，	除/，	乘方^(或者**)，	求余数(取模)%%
	x%/%y 整数除法
	57%%7 #1
	57%/%7 #8
赋值：
	= 或 <-
	->
	<<-
逻辑运算符
	&&    与（优先计算第一个元素）
	||    或（优先计算第一个元素）

	&    与
	|    或
	!    非

	==    恒等
	>    大于
	>=   大于等于
	<    小于
	<=    小于等于
三元表达式：类似js中的 a>b?a:b;
	ifelse(a>b, a, b)
	

========================================
数据结构与变量类型（矩阵matrix、向量vector、列表list、数据框data.frame、类class）
----------------------------------------
基本数据类型：数值（numeric）、字符（character）、逻辑值（logical）、复数型（complex）。
还有其他类型，如函数型、表达式、数据库连接等，但是一般不表示数据；
	由基本数据类型构成对象，对象包括向量、列表、矩阵、数组、数据框、时间序列等；
	- 向量是基础;

1.数据类型、结构、细节的查看 
str()
mode()
class()
attributes()
typeof()

head() 预览前几行
tail() 预览后几行

2.数据类型的判断与转换
x="1"
is.character("1") #TRUE
is.numeric("1") #FALSE
is.logical(x)
is.complex(x) 

#转换类型
is.numeric(as.numeric("1")) #[1] TRUE


refer:
http://agetouch.blog.163.com/blog/static/228535090201452664648639/
http://agetouch.blog.163.com/blog/static/22853509020146422428798/

========================================
控制结构（顺序、循环、条件）
----------------------------------------
#if, else, ifelse, switch:分支
#for, while, repeat, break, next:循环
#apply, lapply, sapply, tapply, sweep: 替代循环的函数
#
#function: 函数定义   source 调用文件
#call 函数调用
#.C   .Fortran 调用C或者Fortran子程序的动态链接库。Recall：递归调用；
#browser, debug, trace, traceback:程序调试：
#option:指定系统参数
#missing: 判断虚参是否对应实参
#nargs:参数个数   stop:终止函数执行
#eval(expr) 表达式计算
#system.time: 表达式计算计时
#menu: 选择菜单（字符列表菜单）
#

##分支语句
x=1;
if(x == 1) 
    print(x)
else print("not 1");

##分支语句2
s=1;
if(s == 1) {
  print(s)
}else if(s==2){
  print(2)
}else{
  print("last else");
}


##分支语句3switch
switch(statment, list) #首先判断条件的不同而执行不同的分支语句。
#首先执行statment，其返回值范围为1到list的长度。
#switch语句执行list中包含的语句，并将结果返回。
#例子：
case=TRUE;#TRUE==1
switch(case,
        {print("A")},
        {print("B")},
       {print("C")});
#将打印A

1>0#TRUE
1>2#FALSE
print(TRUE==1) #TRUE
print(FALSE==0)#TRUE
#经检验，TRUE就是数字1，FALSE就是数字0；


#######################
#for循环语句(类似js)
#
for(name in expr1){
  expr2;
}
#name:循环变量；
#expr1:一个向量表达式，如1:10;
#expr2:一组表达式；

x=0;
for(i in 1:5){
  x=x+1;
  print(x);
  if(x==3) break;#终止语句
}


#for循环，演示cat函数的用法；
for(n in c(1,2,3,4,5)){
  x=rnorm(n);
  #print(x)
  cat(n,":",x,"\n");#输出函数
  #cat();
  #cat(n, ":",x,":", sum(x^2), "\n");
}
#循环中，next 结束本次循环，继续下一次循环；break 跳出循环；


#######################
#while循环语句(类似js)
while(condition){
  expr
}

x=0;
while(x<=5){
  x=x+1
  print(x)  
}



#######################
#repeat语句
repeat{
  expr
}

x=0;
repeat{
  if(x<=5){
    x=x+1;
    print(x);
  }else
    break;
}









========================================
字符串
----------------------------------------
(1)获取字符串长度：nchar()能够获取字符串的长度，它也支持字符串向量操作。注意它和length()的结果是有区别的。
nchar(50); #2 字符串长度
length(50);#1 向量元素个数

(2)字符串粘合：paste()负责将若干个字符串相连结，返回成单独的字符串。其优点在于，就算有的处理对象不是字符型也能自动转为字符型。
> u=paste("hello world","R environment");u
[1] "hello world R environment"

> x=c("apple","google","microsoft","alibaba");x
[1] "apple"     "google"    "microsoft" "alibaba"  
> y=1:4
> y
[1] 1 2 3 4
> paste(x,y,sep='-')
[1] "apple-1"     "google-2"    "microsoft-3" "alibaba-4"  
> paste(x,y,sep='-',collapse='|')
[1] "apple-1|google-2|microsoft-3|alibaba-4"

> paste(x,y,sep=':',collapse=',') #输出json数据格式
[1] "apple:1,google:2,microsoft:3,alibaba:4" 


(3)字符串分割：strsplit()负责将字符串按照某种分割形式将其进行划分，它正是paste()的逆操作。
v=strsplit("this is a book."," ");v
[[1]]
[1] "this"  "is"    "a"     "book."

建议使用方式：
v=strsplit("this is a book."," ")[[1]];v
[1] "this"  "is"    "a"     "book."


> strsplit("This is Rstudio",'')[[1]];#分割成单字母
 [1] "T" "h" "i" "s" " " "i" "s" " " "R" "s" "t" "u" "d" "i" "o"

 
(4)字符串截取：substr()能对给定的字符串对象取出子集，其参数是子集所处的起始和终止位置。
Usage
	substr(x, start, stop)
	substring(text, first, last = 1000000L)
	substr(x, start, stop) <- value
	substring(text, first, last = 1000000L) <- value

> substr("abcdefg",0,4)
[1] "abcd"
> substr("abcdefg",1,4) #R语言中编号从1开始，与主流语言（C、java、php、Python）从0开始的惯例不同
[1] "abcd"
> substr("abcdefg",2,4)
[1] "bcd"

> substring("abcdefg",2)
[1] "bcdefg"

refer:http://agetouch.blog.163.com/blog/static/22853509020146925220656/

(5)字符串替代：gsub(),sub().
gsub()负责搜索字符串的特定表达式，并用新的内容加以替代。sub()函数是类似的，但只替代第一个发现结果。
注：g是global全局的意思。


> x="this is a cat, I love cats."
> y=gsub("cat","dog",x)
> x
[1] "this is a cat, I love cats."
> y
[1] "this is a dog, I love dogs."
可见，原字符串并没有修改！只是返回新字符串。

> z=sub("cat","dog",x)
> x
[1] "this is a cat, I love cats."
> z
[1] "this is a dog, I love cats."#仅替换了第一个


(6)字符串匹配：grep()负责搜索给定字符串对象中特定表达式 ，并返回其位置索引。
grepl()函数与之类似，但其后面的"l"则意味着返回的将是逻辑值。
Usage
	grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
		 fixed = FALSE, useBytes = FALSE, invert = FALSE)

	grepl(pattern, x, ignore.case = FALSE, perl = FALSE,
		  fixed = FALSE, useBytes = FALSE)

	sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,
		fixed = FALSE, useBytes = FALSE)

	gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,
		 fixed = FALSE, useBytes = FALSE)

	regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,
			fixed = FALSE, useBytes = FALSE)

	gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,
			 fixed = FALSE, useBytes = FALSE)

	regexec(pattern, text, ignore.case = FALSE, perl = FALSE,
			fixed = FALSE, useBytes = FALSE)

#扫描文本
grep("the", scan("aa.txt", what="") );

#regexpr(pattern,x)#在字符串x中检索pattern，返回与pattern
#匹配的第一个子字符串的起始字符位置

regexpr("us","you_user_name_usa")
#返回首个与pattern匹配的字符串的其实位置

gregexpr("us","you_user_name_usa")
#返回所有与pattern匹配的字符串的其实位置


(7)大小写转化
text="This is China."
toupper(text)
tolower(text)
text #不影响原文

casefold(text,upper=FALSE) #转成小写
casefold(text,upper=TRUE) #转成大写
text #不影响原文

> DNA <- "AtGCtttACC" 
> tolower(DNA) 
[1] "atgctttacc" 
> toupper(DNA) 
[1] "ATGCTTTACC" 
> chartr("Tt", "Uu", DNA) 
[1] "AuGCuuuACC" 
> chartr("Tt", "UU", DNA) 
[1] "AUGCUUUACC" 


========================================
正则表达式Regular Expression
----------------------------------------
正则表达式具有神奇的功能，让你不得不用，并且每次用的时候都需要从新学习一遍。

量词：  *表示{0,},		 +表示{1,},	?表示{0,1}.

正则表达式语法规则
\ 转义字符
. 除了换行以外的任意字符
^ 放在句首，表示一行字符串的起始
$ 放在句尾，表示一行字符串的结束
* 零个或者多个之前的字符
+ 一个或者多个之前的字符
? 零个或者一个之前的字符
方括号[],代表可以匹配其中任何一个字符。而^在[]中代表“非”, -代表“之间”

– [qjk]:q,j,k中任意一个字符
– [^qjk]:非q,j,k的任意其它字符
– [a-z]:a至z中任意一个小写字符
– [^a-z]: 非任意一个a至z小写字符的其它字符(可以是大写字符)
– [a-zA-Z]:任意一个英文字母
– [a-z]+: 一个或者多个小写英文字母
| 或者
小括号()与花括号{}配合“|”使用

特别注意：保留字符都需要转义字符 \ 来转义表示

例如：
常用的特殊转义字符含义
  \n:换行符
  \t:tab
  \w:任意字母(包括下划线)或者数字 即 [a-zA-Z0-9_]
  \W:\w的反义 即[^a-zA-Z0-9_]
  \d:任意一个数字 即[0-9]
  \D:\d的反义 即[^0-9]
  \s:任意一个空格,比如space, tab, newline 等
  \S:\s的反义,任意一个非空格
  
     正则表达式的常用函数
  grepl:返回一个逻辑值
  grep:返回匹配的id，
  agrep:返回匹配的id，
  
  正则替换:sub和gsub， 两者的区别是前者仅替换一次，后者全局替换。

	regexpr:返回一个数字,1表示匹配,-1表示不匹配,以及两个属性,匹配 的长度和是否使用useBytes

	regexec:返回一个list,字符串中第一个匹配及其长度以及是否使用useBytes

	gregexpr:返回一个list, 每一个匹配及其长度以及是否使用useBytes

http://www.tuicool.com/articles/2IfEj2j



========================================
函数与变量作用域
----------------------------------------

函数=函数名+参数
exp(1)
参数还可以接收向量：
exp( c(1,2,3,4) )



一、函数定义与调用

定义：
funcName=function(para[,para]){
	#many statements;
	return(something);
}

参数可以0到多个。
支持默认参数。

返回值可选，使用return则必须使用()，否则默认使用最后一个数字返回。

调用： 
funcName();#不带参数
funcName(1,2);#带参数


#函数本身也是是对象，可以查看其形参部分和函数体
formals(test)#查看形参列表
body(test)#查看函数体


#函数也可以不加{}
f1=function(x)x*2+3;
print( f1(2) )

#甚至这么写
f2=function(x)x
body(f2)=quote(x^3);#重新改写函数；
print( f2(3) )

#输入函数名，
page(nls) #查询函数代码；
edit(nls) #编辑函数代码；
#由于一些基本函数是C编写的，不能用上述方法查看和修改。



(1)函数声明与调用
func=function(){
	print("hello!")
}
func();

multi2=function(x,y){
	return(x*y);
}
multi2(5,6)#30


(2)允许函数嵌套。
add3=function(a,b,c){
	add2=function(x,y){
		return(x+y);
	}
	return(add2(add2(a,b),c))
}
add3(1,2,3) #6

(3)支持默认参数。
func1=function(x=10){
	print(x)
}

func1() #10
func1(25) #25

(4)默认返回最后一行表达式的值。
func2=function(){
	a=1
	b=2
	c=3
	c+a
}
func2() #4


(5)函数递归
累加
cumulate=function(n){
	if(n==1) return(1);
	return(n+cumulate(n-1))
}
cumulate(100);
[1] 5050

累乘(https://www.zhihu.com/question/43378587)
funr <- function(x) {
  return(ifelse(x>1, x*funr(x-1), x))
}
funr(5)
[1] 120


(10)#首字母大写的函数
camelize=function(word){
  a1=toupper(substring(word,1,1));
  a2=substring(word,2);
  paste(a1,a2,sep="");
}
camelize('that')



二、变量的作用域
1.内函数可以取出外函数的变量
a=c(1,2);
fun0=function(){
  print(a);
}
fun0() #1 2
R语言采用的是Lexical Scoping(词法作用域)。词法作用域，又称静态作用域，即变量定义后的作用域是不变的。

函数里碰到一个变量时，如果在函数里有定义或者调用的时候给了定义，就用这个定义（这个和dynamic scoping一样）；
否则就到定义函数的环境里（不是被调用的环境）找，有定义的话就用那个定义（这个和dynamic scoping 不一样）；
实在找不到了才会给出error。

实例1：
x=1
fa=function(){
  x=2
  fi=function(){
    print(x)
  }
  x=3
  fi()
}

x=100
fa() 
#3

实例2：
f=function(x){
	g=function(y){
		y+z;
	}
	z=4;
	x+g(x)
}
z=10;
f(3)

我的结果是：
f(3)=3+g(3)=3+(3+z)=3+(3+4)=10


实例3：如果去掉函数内部的z赋值呢？
f=function(x){
	g=function(y){
		y+z;
	}
	x+g(x)
}
z=10;
f(3)
我的结果：
f(3)=3+g(3)=3+(3+z)=3+(3+10)=16 



2.但是内函数不能修改外函数的变量
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
	a=c(b,200)
    print(a) #[1]   1   2   3   4 100 200
	#内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1  2  3  4 10
  #并没有改变
}

fun()
print(a) #[1] 1 2 #毫不影响

#a就属于全局变量；b就是局部变量；

顶层的a并没有改变，即使看起来在fun()中被修改了。只有fun()中局部变量a发生了改变。
实际上，局部变量a与相应的全局变量a共享一个内存地址，直到局部变量的数值发生了变化。
这种情况下，会分配给局部变量a新的内存地址。


3.再次尝试
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    #对上一个层次环境中的变量进行写操作 超级赋值符号<<-
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a) #[1] 1 2 #依旧毫不影响

4.想改变最外层的a怎么办？
在fun函数内使用一次<<-符号。
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    #对上一个层次环境中的变量进行写操作 超级赋值符号<<-
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
  a<<-a #再次穿透一层作用域
}

fun()
print(a) #[1]    2   3   4 100 200 #也受到了影响


5.如果就是想在inner中修改最顶层作用域变量呢？
可以使用assign()向顶层赋值
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    
    #向顶层赋值函数assign()
    assign("a", a, pos=.GlobalEnv);#向顶层赋值
    
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a) # 1   2   3   4 100 200




6.这个作用域在R中怎么看？environment()
a=c(1,2);
print(environment()) #<environment: R_GlobalEnv>
fun=function(){
  print(environment()) #<environment: 0x000000001a8de318>
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    print(environment()) #<environment: 0x000000001a8dd1b0>
    b=c(b,100)
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    
    #向顶层赋值函数assign()
    assign("a", a, pos=.GlobalEnv);#向顶层赋值
    
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a)



7.本地有变量，想引用外部作用域中的变量怎么办？
a=c(1,2);
print(environment()) #<environment: R_GlobalEnv>
fun=function(){
  a=c(3,4);
  b=c(10,20);
  print(environment()) #<environment: 0x000000001aa14938>

  inner=function(){
    a=c(5,6);
    print(environment()) #<environment: 0x000000001aa13798>
    print(a) #[1] 5 6
    
    print(ls()) #输出当前局部变量名。 [1] "a"
    print(ls(envir=parent.frame(n=1)))#输出向上一个框架的局部变量名。[1] "a"     "b"     "inner"
	#ls.str()可以获得更多信息。
    #调整n则向上渗透。
    print(ls(envir=parent.frame(n=2)))#又向外渗透一层"a"   "fun"
  }
  inner()
}

fun()

只能看到，还是没取到，怎么取出外部变量值呢？
##############################
f1=function(){
  print(is.environment(.GlobalEnv));#[1] TRUE
  print(environment()) #<environment: 0x000000001b93be70>
}

outer=function(){
  f2=function(){
    print(is.environment(environment())); #[1] TRUE
    print(environment()) #<environment: 0x000000001b92cc18>
  }
  inner=function(){
    f1()
    print(environment(f2)) #<environment: 0x000000001b93d0f0> 这个打印的是f2的环境
    f2()
  }
  
  inner();
}

outer()
能打印出来变量、函数所处的环境hash，则应该也能取出来。很有启发性。

受到“R环境和变量作用域的问题  http://blog.csdn.net/thoixy/article/details/40503765”启发：
##############################
//下面终于取出来环境变量了
a=c(1)
f1=function(){
  print(a) #1
  #print(is.environment(.GlobalEnv));
  #print(environment())
}

outer=function(){
  a=c(200)
  f2=function(){
    print(a) #200
    #print(is.environment(environment()));
    #print(environment())
  }
  inner=function(){
    print(a) #2
    a=c(3)
    f1()
    ee=(environment(f2)) #获取f2的环境
    print(a) #3
    print(ee$a) #200  #从f2的环境中获取变量a
    
    e1=environment(f1);
    print(e1) #<environment: R_GlobalEnv>
    print( e1$a  ); #1
    f2()
  }
  
  inner();
}

outer()

注意，通过环境变量取出来的值是所在环境的变量，而不是环境内的变量。
所以遇到函数（要当成普通变量），要找并列的上下文，而不是找函数内部。

R如何理解变量和环境的Lexical Scoping Rule  http://blog.csdn.net/stat_elliott/article/details/45166481



8.小结
►关于全局变量
    R语言中全局变量的使用比想象中的要多。R语言自身内部大量使用了全局变量，物理上其C语言代码还是R例程，对于这点你也许会感到惊讶。例如，超赋值运算符<<-用于许多R语言函数中(尽管通常只对上一级环境层次中的变量进行写操作)。线程化(Threaded)代码和GPU代码倾向于大量使用全局变量，这为并行对象提供了主要的通信途径。两者均用于编写高性能程序。
 
►关于“闭包”
    R语言中“闭包”包含了函数的参数、函数体以及调用时的环境。有一种编程方法是用闭包包括环境，这种编程方法使用的特性也叫做“闭包”。
    闭包包含了一个可创建局部变量的函数，并创建另一个函数可以访问该变量。



	
	

三、自定义二元运算符：
#以为%开始和结束，函数的参数和返回值都是某种数据类型

"%myname%"=function(a,b)return(a^b)
2%myname%10   #1024



refer:
https://www.douban.com/note/279077707/
http://agetouch.blog.163.com/blog/static/22853509020146422625878/


========================================
高阶函数: apply家族函数
----------------------------------------
高阶函数就是操作函数的函数。可能参数是函数，也可能返回函数。具有一定的抽象性。

#apply, lapply, sapply, tapply, sweep: 替代循环的函数

1.apply函数
作用：Apply Functions Over Array Margins对阵列行或者列使用函数
用法：apply(X, MARGIN, FUN, ...)

(1)按行求和:apply第二个参数为1
a=array(c(1,2,3,4,5,6),c(2,3))
a
#[,1] [,2] [,3]
#[1,]    1    3    5
#[2,]    2    4    6

#一行代码搞定
apply(a,1,sum) #[1]  9 12

#fn内用循环实现的话
rs=apply(a,1,function(data){ #1是按行传入。
  sum=0
  for (i in data) {
    sum =sum+i
  }
  print(sum)
  return(sum)
})

print(rs) #[1]  9 12 结果是个数组



(2)按列求和:apply第二个参数为2
a=array(c(1,2,3,4,5,6),c(2,3))
a
#[,1] [,2] [,3]
#[1,]    1    3    5
#[2,]    2    4    6

#一行代码搞定
apply(a,2,sum) #[1]  3  7 11

#fn内用循环实现的话
rs=apply(a,2,function(data){ #2是按列传入。
  sum=0
  for (i in data) {
    sum =sum+i
  }
  print(sum)
  return(sum)
})

print(rs) #[1]  3  7 11 结果是个数组
str(rs)  #num [1:3] 3 7 11






2.lapply函数
作用：Apply a Function over a List or Vector 对列表或者向量使用函数
用法：lapply(X, FUN, ...) X表示一个向量或者表达式对象，其余对象将被通过as.list强制转换为list

b=list(x=1:10,y=exp(-3:3),z=c(TRUE,FALSE));b
#$x
#[1]  1  2  3  4  5  6  7  8  9 10

#$y
#[1]  0.04978707  0.13533528  0.36787944  1.00000000  2.71828183  7.38905610 20.08553692

#$z
#[1]  TRUE FALSE

rs=lapply(b,mean)

print(rs)
str(rs)
#List of 3
# $ x: num 5.5
# $ y: num 4.54
# $ z: num 0.5






3.sapply函数
描述：Apply a Function over a List or Vector 对列表或者向量使用函数
用法：sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)

这是一个用户友好版本，是lapply函数的包装版。该函数返回值为向量、矩阵，如果simplify="array"，且合适的情况下，将会通过simplify2array()函数转换为阵列。sapply(x, f, simplify=FALSE, USE.NAMES=FALSE)返回的值与lapply(x,f)是一致的。

USE.NAMES逻辑值，如果为TRUE，且x没有被命名，则对x进行命名。

a=array(c(1,2,3,4,5,6),c(2,3))
a

b=list(x=1:10,y=exp(-3:3),z=c(TRUE,FALSE));b

rs=sapply(b,function(data){
  print(data)
})

print(rs)
str(rs)



4.sweep主要用于array的一些分类计算，而apply更多的是矩阵计算，data.frame也行。array是高于2维的数据


http://blog.csdn.net/yitianguxingjian/article/details/51820758







========================================
R语言OOP初步
----------------------------------------
R的面向对象编程是基于泛型函数(generic function)的，而不是基于类层次结构。

http://agetouch.blog.163.com/blog/static/228535090201651975827664/





========================================
文件I/O
----------------------------------------
http://agetouch.blog.163.com/blog/static/2285350902014642220245/

1.一次全部读入内存：
fileName="D:/coding/Java/CCDS.20160908.txt";
#a=read.table(choose.files(),sep = '\t',stringsAsFactors = F,header = T)# 选择你下的CCDs文件
a=read.table(fileName,sep = '\t',stringsAsFactors = F,header = T)# 选择你下的CCDs文件



2.R语言逐行读取并处理大文件最好逐行读取。  

用R语言作分析时，有时候需要逐行处理非常大文件，各种教材中推荐的read.table 和scan都是一次性读入内存，如果文件有好几个Gb大小，一般电脑肯定吃不消。其实R中可以逐行读取的行数，这里示例一个函数，作为备忘：

con <- file("e:/data.txt", "r")
line=readLines(con,n=1)
while( length(line) != 0 ) {
     print(line)
     line=readLines(con,n=1)
}
close(con)

如果需要将一行的文字劈成多段，再进行处理，可以用strsplit函数，除此之外，还有一些常用的字符串处理函数，记录如下：
substr(),nchar(), grep(), regexpr(), sub(), gsub()


这样在异常时可能不能及时关闭资源，有博文建议如下方式写：
http://stackoverflow.com/questions/6304073/warning-closing-unused-connection-n

getCommentary <- function(filepath) {
    con <- file(filepath) 
    on.exit(close(con)) #这样，不管函数因为什么原因结束，都会关闭该资源链接。
    Commentary <-readLines(con)
    Commentary
}

getCommentary("foo.txt")

========================================
第二部分：统计学 （前4章）
----------------------------------------
统计之都： http://cos.name/tag/%E5%8A%A8%E7%94%BB/

========================================
2.1 随机抽样
----------------------------------------
1.为了可重复，设置随机数种子为一个具体值
set.seed(1)


2.





========================================
第三部分：画图
----------------------------------------
1.画布分割

#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))

# par(mfrow=c(2,2),mar=c(1,1,2,1), mgp=c(2,.7,0), tck=-.01)#下、左、上、右的边距

par(mfrow=c(3,2)) #分割画布为3行2列
# http://blog.csdn.net/reallocing1/article/details/41726577

for(i in c(mean0,quantile2,quantile3,quantile4)){
  plot(x,y)
}


2. legend位置
R里面legend图例位置调整函数inset
http://blog.sciencenet.cn/blog-267448-1021711.html

barplot中图例位置设置：args.legend = list(x="topleft"),



3.画图
library(Cairo)
CairoPNG(file=fname,width=1000)
plot(c(1,4,9,16))
dev.off()









========================================
第四部分：包
----------------------------------------

1.选择使用哪个镜像：
setRepositories()


2.如何利用R语言画出三维动画图
http://blog.csdn.net/chen790646223/article/details/45483275



========================================
数据可视化
----------------------------------------
1.如何将枯燥的大数据呈现为可视化的图和动画？
https://www.zhihu.com/question/23416938

录屏软件 oCam 

数据可视化软件 Tableau http://www.tableau.com/zh-cn

数据可视化： d3库 https://github.com/d3/d3/wiki/Gallery

2.R语言绘制日本老龄化：
http://wwwbuild.net/SustainableCity/187713.html



========================================
R语言标准化（归一化）之scale（）函数、sweep（）函数
----------------------------------------
http://blog.csdn.net/yitianguxingjian/article/details/51820758

一、
#数据集
x<-cbind(c(1,2,3,4),c(5,5,10,20),c(3,6,9,12))

#自己写标准化
x_min_temp<-apply(x,2,min) 
x_min<-matrix(rep(x_min_temp,4),byrow=TRUE,ncol=3)#需要输入行数和列数
abs(x-x_min)#当前值减去均值
x_extreme_temp<-apply(x,2,max)-apply(x,2,min)
x_extreme<-matrix(rep(x_extreme_temp,4),byrow=TRUE,ncol=3)#需要输入行数和列数
abs(x-x_min)/x_extreme

#sweep函数
center <- sweep(x, 2, apply(x, 2, min),'-') #在列的方向上减去最小值，不加‘-’也行
R <- apply(x, 2, max) - apply(x,2,min)   #算出极差，即列上的最大值-最小值
x_star<- sweep(center, 2, R, "/")        #把减去均值后的矩阵在列的方向上除以极差向量

#sweep函数更简洁、易懂，且不需要输入行数和列数，二者性能也差不多

#sweep再举一个例子哈
m<-matrix(c(1:9),byrow=TRUE,nrow=3)
#第一行都加1，第二行都加4，第三行都加7
sweep(m, 1, c(1,4,7), "+")  


#scale函数，这个比较简单，不多说
scale(x, center = TRUE, scale = TRUE)


二、归一化和标准化的区别？
（1）归一化（Normalization）
1.把数据变为（0，1）之间的小数。主要是为了方便数据处理，因为将数据映射到0～1范围之内，可以使处理过程更加便捷、快速。
2.把有量纲表达式变换为无量纲表达式，成为纯量。经过归一化处理的数据，处于同一数量级，可以消除指标之间的量纲和量纲单位的影响，提高不同数据指标之间的可比性。
主要算法：
1.线性转换，即min-max归一化（常用方法）
y=(x-min)/(max-min)
2. 对数函数转换
y=log10(x)
3.反余切函数转换
y=atan(x)*2/PI

（2）标准化（Standardization）
数据的标准化是将数据按比例缩放，使之落入一个小的特定区间。
主要方法：
1.z-score标准化，即零-均值标准化（常用方法）
y=(x-μ)/σ
是一种统计的处理，基于正态分布的假设，将数据变换为均值为0、标准差为1的标准正态分布。但即使数据不服从正态分布，也可以用此法。特别适用于数据的最大值和最小值未知，或存在孤立点。
2.小数定标标准化
y=x/10^j （j确保max(|y|)<1）
通过移动x的小数位置进行标准化
3.对数Logistic模式
y=1/(1+e^(-x))







========================================
R通过ODBC连接数据库
----------------------------------------
以下的实验环境是在windows7-64操作系统下进行
1、下载（mySQL-connector-odbc-5.3.7-win64.msi）
     下载地址：http://dev.mysql.com/downloads/connector/odbc (8.2 MB) 
2、安装Mysql的RODBC：mysql-connector-odbc-5.3.2-win64.msi
3、配置datasource

(1)找到C:\Windows\System32\odbcad32.exe
(2)左侧点击 添加 ，选择MySQL ODBC ANSI Driver，点击完成；
(3)填写表格，名字、描述随便写，建议用英文，填写mysql用户名和密码，选择数据库，点击OK。
(4)回到ODBC数据源管理器，选择mySqlODBC，点击确定。

4.R软件访问mysql数据库
(1)安装及加载RODBC
install.packages("RODBC")
library(RODBC)

(2) 与mysql建立连接
channel=odbcConnect("mysqlodbc", uid="root", pwd="")

（3）查询该数据库下都有哪些数据库表

> sqlTables(channel)
  TABLE_CAT TABLE_SCHEM   TABLE_NAME TABLE_TYPE REMARKS
1      test                       aa      TABLE        
2      test              first_table      TABLE        
3      test             second_table      TABLE        
4      test                 students      TABLE 
5      test                 orders      TABLE   

（4）查询某个表中的数据返回给数据框
> orders=sqlFetch(channel,"orders")
> orders
 order_id order_name order_unit order_quantity order_price order_note order_time
1 1  2500ml95%酒精  桶  17 12  NA 1464

（5）条件查询
orders2=sqlQuery(channel,"select order_name,order_price from orders order by order_id desc");

（6）将数据框中的数据保存到数据库表中
USArrests #这是R的默认内置数据，是一个数据框

数据框的首列没有列名，所以在保存之前需要指定列名
sqlSave(channel, USArrests, rownames = "state", addPK = TRUE)

cmd打开数据库查看test库，多了usarrests表，里面正是数据框中的内容。可见数据框能正确的保存到mysql数据库中去了

添加一条数据
rs3=sqlQuery(channel,"insert into usarrests(state,murder,assault,urbanpop,rape)values('noplace',0,0,0,0)");
发现数据已经在了。

（7）在R软件将刚才添加到mysql数据库中的表删除掉
sqlDrop(channel,"usarrests")

（8）关闭连接资源
odbcClose(channel)

（9）通过RODBC进行数据存取的主要函数
函数名字	函数描述
odbcConnect(dsn,uid="",pwd="")  #建立并打开连接
sqlFetch(channel,sqtable) #从数据库读取数据表，并返回一个数据框对象
sqlQuery(channel,query) #想数据库提交一个sql查询，并返回结果（'data.frame'格式）
sqlSave(channel,mydf,tablename=sqtable,append=FALSE) #将一个数据框写入或更新(append=True)到数据库
sqlDrop(channel,sqtable) #从数据库删除一个表
sqlClear(channel,sqltable) #删除表中内容
sqlTable(channel) #返回数据库中表的信息
sqlColumns(chanel,sqltable) #返回数据库表sqltable列的信息
close(channel) #关闭连接

操作步骤：
建立DSN
打开连接
数据操作
关闭连接 


实例1
#加载包
library(RODBC)

#创建连接
channel<-odbcConnect("BITEST",uid="dw",psw="dw")

#执行查询
org1<-sqlFetch(channel,'DIM.DIM_ORGANIZATION') #这是oracle数据库
org2<-sqlQuery(channel,"select * from DIM.DIM_ORGANIZATION")

#关闭连接
odbcClose(channel)

#使用数据
head(org1)
head(org2)



实例2 通过RODBC将数据写入oracle

library(RODBC)
channel<-odbcConnect("BITEST",uid="dw",psw="dw")
#创建数据，待写入对象
mydata<-sqlQuery(channel,'select * from DIM.DIM_ORGANIZATION')

#写入数据库，并读取结果
sqlSave(channel,mydata,"NEW_TABLE_NAME", append=FALSE)
mydata2=sqlQuery(channel,'select * from NEW_TABLE_NAME')

#更新数据库，并读取结果
sqlSave(channel,mydata,"NEW_TABLE_NAME", append=TRUE)
mydata3=sqlQuery(channel,'select * from NEW_TABLE_NAME')

#删除刚刚建立的数据表NEW_TABLE_NAME
sqlDrop(channel,"NEW_TABLE_NAME")
odbcClose(channel)

#查看执行结果
head(mydata,n=30)
head(mydata2,n=30)
head(mydata3,n=30)


refer:
http://wenku.baidu.com/link?url=PtNUOCT66CzajvN_uM_4FaCloQffW8HzaE1PMlOg3UqyXwpZNbT3DC1URy-tsLqQRIeW_DJhxBsS06QsY99OjKSq_BV7--vj1zWhtga7k1_

http://blog.csdn.net/hongweigg/article/details/49779943

http://www.dataguru.cn/thread-289411-1-1.html






========================================
R语言的S4类 ~ todo
----------------------------------------




========================================
可重复性研究
----------------------------------------
1.用shiny+Rmarkdown写Assignment报告，在文档中使用shiny，既装逼又实用。
2.做数据分析研究时用shiny+dashboard+dygraph开发一个可交互的数据分析应用。方便进行探索性的数据分析，可以选择变量，可以拖动时间轴，可以放大缩小时间范围或者数值y的范围，观察数据更方便。
（https://www.zhihu.com/question/35224925）



========================================
历史
----------------------------------------
《数据分析简史》 https://www.douban.com/note/496070836/

