R语言基础

程序设计的思想就是：复用==减少重复。
措施就是提取变化，封装不变。
实施方案就是：函数化 function，面向对象化 OOP


Rstudio环境配置：
1. Rstudio可以做到R版本的切换选择。
点击Tools->Global options,然后在R generals里选择R versions，就可以切换R版本。

2.




========================================
R语言资源
----------------------------------------
1.《R语言快速入门系列教程》  
http://agetouch.blog.163.com/blog/static/22853509020161026101219690/

R官方文档： https://cran.r-project.org/manuals.html

R Tutorial：http://www.r-tutor.com/r-introduction/data-frame



2.哈佛大学数据课程 http://tutorials.iq.harvard.edu
https://dss.iq.harvard.edu/blog/resources-learning-r

There are several excellent tutorials not listed on r-project.org. Some of these are listed below.
http://www.statmethods.net/
"Quick-R" aims to get you up and running in R quickly.

http://personality-project.org/r/r.guide.html
Notes on "Using R for psychological research".

http://r4ds.had.co.nz/
"R for Data Science" by R luminary Hadley Wickham. Includes a ggplot tutorial.

http://adv-r.had.co.nz/
Advanced R programming by Hadley Wickham.

http://rmarkdown.rstudio.com/lesson-1.html
A comprehensive RMarkdown tutorial.



2. R语言镜像站

https://cran.rstudio.com/bin/windows/contrib/3.4/Cairo_1.5-9.zip
https://mirrors.tuna.tsinghua.edu.cn/bioconductor/packages/3.4/BiocViews.html#___Software
http://mirrors.ustc.edu.cn/bioc/3.4/BiocViews.html#___Software




========================================
运算符
----------------------------------------
1.
求助符：
	?mtcars #查看该数据集mtcats的帮助文档
	help()
	??ggplot2 #如果前两者不行
	find("fun") #得到名为“fun”函数所在的程序包，只在载入的包中找;
	args("fun") #得到名为“fun”函数的自变量列表.
	使用Rstudio时，光标停在函数上，按F1键
系统符号：
	> 命令或运算提示符
	+ 续行符
基本算数运算：
	加 +，	 减-，	乘*，	除/，	乘方^(或者**)，	求余数(取模)%%， x%/%y 整数除法
	57%%7 #1
	57%/%7 #8
赋值：
	= 或 <-
	->
	<<-
	assign(paste0("a",1),100) #a1=100
逻辑运算符
	&&    与（优先计算第一个元素）
	||    或（优先计算第一个元素）

	&    与
	|    或
	!    非

	==   是否相等
	>    大于
	>=   大于等于
	<    小于
	<=    小于等于
三元表达式：类似js中的 a>b?a:b;
	ifelse(a>b, a, b)
	


2.运算符“逻辑与”和“逻辑或”存在两种形式：
“&”和“|”作用在对象中的每一个元素上并且返回和比较次数相等长度的逻辑值；
“&&”和“||”只作用在对象的第一个元素上.

a1=c(1,2,3)
a2=c(0,-2,6)
a1 && a2 #[1] FALSE
a1 & a2 #[1] FALSE  TRUE  TRUE







========================================
数据结构与变量类型（矩阵matrix、向量vector、列表list、数据框data.frame、类class）
----------------------------------------
基本数据类型(4种)：数值（numeric）、字符（character）、逻辑值（logical）、复数型（complex）。
还有其他类型，如函数型、表达式、数据库连接等，但是一般不表示数据；
	由基本数据类型构成对象，对象包括向量、列表、矩阵、数组、数据框、时间序列等；
	- 向量是基础;

1.数据类型、结构、细节的查看 
str()
length() #只有一维的，获得长度
dim() #多维度的，获得维度

mode()
class()
attributes()
typeof()
names(mtcars) #返回mtcars中11个变量名

head(mtcars) 预览前几行
tail() 预览后几行

无论什么类型的数据，缺失数据总是用NA(Not Available的意思)来表示; 
R可以正确地表示无穷的数值，如用Inf和-Inf表示正负无穷大；
或者用NaN(Not a Number 的意思)表示不是数字的值.





2.数据类型的判断与转换
x="1"
is.character("1") #TRUE
is.numeric("1") #FALSE
is.logical(x)
is.complex(x) 

#转换类型
is.numeric(as.numeric("1")) #[1] TRUE

向量是否相等
all.equal(c(1,2),c(1,2)) #[1] TRUE
identical(c(1,2),c(1,2)) #[1] TRUE #精确相等




3.查看对象、删除对象
ls() #显示内存中的对象名字
ls(pat="m") #pattern(缩写为pat)实现只显示带有某个指定字符的对象名字
ls(pat="^m") #显示以m开头的对象名
ls(pattern = "^acc") #显示以acc开头的对象
ls.str( ) #显示内存中所有对象的详细信息

rm(x) #删除内存中的对象x
rm(x,y) #删除内存中的对象x和y
rm(list=ls()) #删除内存中的所有对象
rm(list=ls(pat="^m")) #删除对象中以字母m开头的对象





4.向量的建立
(1)常规示例
1) seq( )或“:” # 若向量(序列)具有较为简单的规律
	1:3 #1 2 3
	1:3+2 #3 4 5
	1:(3+2) # 1 2 3 4 5
	seq(1,10,by=2) #1 3 5 7 9 
	seq(1,2,length=5) #[1] 1.00 1.25 1.50 1.75 2.00 # 等价于seq(1,2,length.out=5)
	
	sequence(2:4) #[1] 1 2 1 2 3 1 2 3 4
	
2) rep( ) # 若向量(序列)具有较为复杂的规律
	rep(1:3,2) #1 2 3 1 2 3 #等价于 rep(1:3, times=2)
	rep(1:3,rep(1:3)) # 1 2 2 3 3 3
	rep(1:3, times = 2, each = 2) #1 1 2 2 3 3 1 1 2 2 3 3
	
3) c( ) # 若向量(序列)没有什么规律
	z <- x<-c(42,7)
	z # 42  7
	x # 42  7

4) scan( ) # 通过键盘逐个输入



(2)因子型向量的建立
一个因子或因子向量不仅包括分类变量本身, 还包括变量不同的可能水平(即使它们在数据中不出现). 因子利用函数factor( )创建.
factor(x, levels = sort(unique(x), na.last = TRUE),labels = levels, exclude = NA, ordered = is.ordered(x))

levels用来指定因子的水平（缺省值是向量x中不同的值）；labels用来指定水平的名字；exclude表示从向量x中剔除的水平值；ordered是一个逻辑型选项，用来指定银子的水平是否是有次序。这里x可以是数值型或字符型，这样对应的因子也就称为数值型因子或字符型因子。因此，因子的建立可以通过字符型向量或数值型向量来建立，且可以转化。

#1.将字符型向量转换成因子
a=c("green", "blue", "green","yellow")
a1=factor(a)
a1

#2.将数值型向量转换成因子
b=c(1,2,3,1)
b1=factor(b)
b1

#3.将字符型因子转换为数值型因子
a2=a1;a2
levels(a2)=c(1,2,3,4)
a2

ff=factor(c("A","B","C"), labels=c(1,2,3));ff

#4.将数值型因子转换为字符型因子
b2=b1;b2
levels(b2)=c("low","middle","high");b2

ff=factor(1:3, labels=c("A","B","C"));ff

#注: 函数levels( )用来提取一个因子中可能的水平值
ff <- factor(c(2, 4), levels=2:5); ff
levels(ff)

#5.函数gl()能产生规则的因子序列. gl(k,n)，其中k是水平数, n是每个水平重复的次数. 
# 此函数有两个选项：length指定产生数据的个数, label指定每个水平因子的名字.
gl(3,5)
gl(3,5,length=30)
gl(2,6,label=c("Male","Female"))
#[1] Male   Male   Male   Male   Male   Male   Female Female Female Female Female Female
#Levels: Male Female




(3)向量的截取，构建逻辑值截取。
x=10:50
x>45
x[x>45]
x[x %in% 1:15] #求交集 [1] 10 11 12 13 14 15

#按照某一列筛选
x=data.frame(
  a=c(1,2,3,4),
  b=c('a','b','c','d')
)

x[which(x$a>2),] #逻辑判断
#  a b
#3 3 c
#4 4 d

x$a %in% c(2,4,100) #在某个范围，返回逻辑值
x[x$a %in% c(2,4,100),] #
#  a b
#2 2 b
#4 4 d




(4)矩阵常用的函数
转置 t()
提取对角线元素 diag()
矩阵按行合并 rbind()，按列合并 cbind()

a2=matrix(1:6,2,3);a2
a2*a2 #矩阵的逐元乘积
a2 %*% t(a2) #矩阵的代数乘积


m<-matrix(1:12, nrow=3); m
apply(m, MARGIN=1, FUN=mean) # 求各行的均值
apply(m, MARGIN=2, FUN=mean) # 求各列的均值
scale(m, center=T, scale=T) #标准化

# 所谓中心化就是将数据减去均值后得到的，比如有一组数据(1,2,3,4,5,6,7)，它的均值是4，中心化后的数据为(-3，-2，-1，0，1，2，3)
# 而标准化则是在中心化后的数据基础上再除以数据的标准差
# 在R语言中可以通过scale函数直接进行数据的中心化和标准化：Scale(x,center,scale)
# 参数解释：x—即需要标准化的数据
#   center—表示是否进行中心化
#   scale—表示是否进行标准化
c1=c(1,2,3,4,5,6,7)
t( scale(c1,scale=F) ) #仅中心化 -3 -2 -1 0 1 2 3
c1.sd=sd(c1) #标准差
scale(c1,scale=F)/c1.sd == scale(c1)


#sweep(X, MARGIN, STATS, FUN) #表示从矩阵X中按MATGIN计算STATS，并从X中除去(sweep out).
#减去中位数:
m
#     [,1] [,2] [,3] [,4]
#[1,]    1    4    7   10
#[2,]    2    5    8   11
#[3,]    3    6    9   12

row.med <- apply(m, MARGIN=1, FUN=median); row.med
sweep(m, MARGIN=1, STATS=row.med, FUN='-') #
sweep(m, MARGIN=1, STATS=1:3, FUN='+') #按行分别加上1 2 3
#     [,1] [,2] [,3] [,4]
#[1,]    2    5    8   11
#[2,]    4    7   10   13
#[3,]    6    9   12   15



(5)数据框操作
head(Puromycin)
str(Puromycin)
dim(Puromycin)

#变量之间的关系可以通过成对数据散点图考查
pairs(Puromycin, panel = panel.smooth)

#使用xtabs( )函数由交叉分类因子产生一个列联表:
xtabs(~state + conc, data = Puromycin)
xtabs(~state, data = Puromycin)

#取子集
subset(Puromycin, state == "treated" & rate > 160)
subset(Puromycin, conc > mean(conc))


#添加新列的三种方法。iconc=1/conc
a=head(Puromycin);a
#方法1
a$iconc=1/a$conc;a
#方法2：使用with
a$iconc=with(a,1/conc);a
#方法3：用transform( )函数, 且可一次性定义多个变量
a=transform(a, iconc=1/conc, sqrtconc=sqrt(conc));a






========================================
 |-- 集合运算：交集intersect、并集union、找不同setdiff、判断相同setequal
----------------------------------------
子交并集 https://blog.csdn.net/woodcorpse/article/details/80494605

(1) 交集intersect
两个向量的交集，集合可以是数字、字符串等

# 两个数值向量取交集
intersect(x=1:4, y = 2:6)
# [1] 2 3 4

# 两个字符向量取交集
intersect(x=letters[1:4], y = letters[2:6])
# [1] "b" "c" "d"

# 混合向量
intersect(x=c("a", "b", "c", 4), y = c("a", 2, 3, 4))
[1] "a" "4"




(2) 并集union
求两个向量的并集，集合可以是任何数值类型

# 两个数值向量取并集
union(x=1:4, y = 2:6)
# [1] 1 2 3 4 5 6

# 两个字符向量取并集
union(x=letters[1:4], y = letters[2:6])
# [1] "a" "b" "c" "d" "e" "f"

# 混合向量
union(x=c("a", "b", "c", 4), y = c("a", 2, 3, 4))
[1] "a" "b" "c" "4" "2" "3"




(3) 找不同setdiff
求向量x与向量y中不同的元素(只取x中不同的元素) ，相当于是差集x-y

x = 1:4
y = 2:6
# 找x中不同于y的元素
setdiff(x, y)
# [1] 1
# 找y中不同于x的元素
setdiff(y, x)
# [1] 5 6



(4) 判断相同setequal
x = 1:4
y = 2:6
# 判断x与y是否相同，结果为假
setequal(x, y)
# [1] FALSE
# 找y与x是否相同，结果为假
setequal(y, x)
# [1] FALSE

# 只有完全相同的才返回TRUE
y = 1:4
setequal(x, y)
# [1] TRUE

setequal(c(1,2,3),c("1","2","3")) #[1] TRUE







refer:
http://agetouch.blog.163.com/blog/static/228535090201452664648639/
http://agetouch.blog.163.com/blog/static/22853509020146422428798/







========================================
控制结构（顺序、循环、条件）
----------------------------------------
#if, else, ifelse, switch:分支
#for, while, repeat, break, next:循环
#apply, lapply, sapply, tapply, sweep: 替代循环的函数
#
#function: 函数定义   source 调用文件
#call 函数调用
#.C   .Fortran 调用C或者Fortran子程序的动态链接库。Recall：递归调用；
#browser, debug, trace, traceback:程序调试：
#option:指定系统参数
#missing: 判断虚参是否对应实参
#nargs:参数个数   stop:终止函数执行
#eval(expr) 表达式计算
#system.time: 表达式计算计时
#menu: 选择菜单（字符列表菜单）
#

##分支语句
x=1;
if(x == 1) 
    print(x)
else print("not 1");

##分支语句2
s=1;
if(s == 1) {
  print(s)
}else if(s==2){
  print(2)
}else{
  print("last else");
}


##分支语句3switch
switch(statment, list) #首先判断条件的不同而执行不同的分支语句。
#首先执行statment，其返回值范围为1到list的长度。
#switch语句执行list中包含的语句，并将结果返回。
#例子：
case=TRUE;#TRUE==1
switch(case,
        {print("A")},
        {print("B")},
       {print("C")});
#将打印A

1>0#TRUE
1>2#FALSE
print(TRUE==1) #TRUE
print(FALSE==0)#TRUE
#经检验，TRUE就是数字1，FALSE就是数字0；


#######################
#for循环语句(类似js)
#
for(name in expr1){
  expr2;
}
#name:循环变量；
#expr1:一个向量表达式，如1:10;
#expr2:一组表达式；

x=0;
for(i in 1:5){
  x=x+1;
  print(x);
  if(x==3) break;#终止语句
}


#for循环，演示cat函数的用法；
for(n in c(1,2,3,4,5)){
  x=rnorm(n);
  #print(x)
  cat(n,":",x,"\n");#输出函数
  #cat();
  #cat(n, ":",x,":", sum(x^2), "\n");
}
#循环中，next 结束本次循环，继续下一次循环；break 跳出循环；


#######################
#while循环语句(类似js)
while(condition){
  expr
}

x=0;
while(x<=5){
  x=x+1
  print(x)  
}



#######################
#repeat语句
repeat{
  expr
}

x=0;
repeat{
  if(x<=5){
    x=x+1;
    print(x);
  }else
    break;
}









========================================
字符串
----------------------------------------
(1)获取字符串长度：nchar()能够获取字符串的长度，它也支持字符串向量操作。注意它和length()的结果是有区别的。
nchar(50); #2 字符串长度
length(50);#1 向量元素个数

(2)字符串粘合：paste()负责将若干个字符串相连结，返回成单独的字符串。其优点在于，就算有的处理对象不是字符型也能自动转为字符型。
> u=paste("hello world","R environment");u
[1] "hello world R environment"

> x=c("apple","google","microsoft","alibaba");x
[1] "apple"     "google"    "microsoft" "alibaba"  
> y=1:4
> y
[1] 1 2 3 4
> paste(x,y,sep='-')
[1] "apple-1"     "google-2"    "microsoft-3" "alibaba-4"  
> paste(x,y,sep='-',collapse='|')
[1] "apple-1|google-2|microsoft-3|alibaba-4"

> paste(x,y,sep=':',collapse=',') #输出json数据格式
[1] "apple:1,google:2,microsoft:3,alibaba:4" 


(3)字符串分割：strsplit()负责将字符串按照某种分割形式将其进行划分，它正是paste()的逆操作。
v=strsplit("this is a book."," ");v
[[1]]
[1] "this"  "is"    "a"     "book."

建议使用方式：
v=strsplit("this is a book."," ")[[1]];v
[1] "this"  "is"    "a"     "book."


> strsplit("This is Rstudio",'')[[1]];#分割成单字母
 [1] "T" "h" "i" "s" " " "i" "s" " " "R" "s" "t" "u" "d" "i" "o"

 
(4)字符串截取：substr()能对给定的字符串对象取出子集，其参数是子集所处的起始和终止位置。
Usage
	substr(x, start, stop)
	substring(text, first, last = 1000000L)
	substr(x, start, stop) <- value
	substring(text, first, last = 1000000L) <- value

> substr("abcdefg",0,4)
[1] "abcd"
> substr("abcdefg",1,4) #R语言中编号从1开始，与主流语言（C、java、php、Python）从0开始的惯例不同
[1] "abcd"
> substr("abcdefg",2,4)
[1] "bcd"

> substring("abcdefg",2)
[1] "bcdefg"

refer:http://agetouch.blog.163.com/blog/static/22853509020146925220656/

(5)字符串替代：gsub(),sub().
gsub()负责搜索字符串的特定表达式，并用新的内容加以替代。sub()函数是类似的，但只替代第一个发现结果。
注：g是global全局的意思。


> x="this is a cat, I love cats."
> y=gsub("cat","dog",x)
> x
[1] "this is a cat, I love cats."
> y
[1] "this is a dog, I love dogs."
可见，原字符串并没有修改！只是返回新字符串。

> z=sub("cat","dog",x)
> x
[1] "this is a cat, I love cats."
> z
[1] "this is a dog, I love cats."#仅替换了第一个


(6)字符串匹配：grep()负责搜索给定字符串对象中特定表达式 ，并返回其位置索引。
grepl()函数与之类似，但其后面的"l"则意味着返回的将是逻辑值。
Usage
	grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
		 fixed = FALSE, useBytes = FALSE, invert = FALSE)

	grepl(pattern, x, ignore.case = FALSE, perl = FALSE,
		  fixed = FALSE, useBytes = FALSE)

	sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,
		fixed = FALSE, useBytes = FALSE)

	gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,
		 fixed = FALSE, useBytes = FALSE)

	regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,
			fixed = FALSE, useBytes = FALSE)

	gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,
			 fixed = FALSE, useBytes = FALSE)

	regexec(pattern, text, ignore.case = FALSE, perl = FALSE,
			fixed = FALSE, useBytes = FALSE)

#扫描文本
grep("the", scan("aa.txt", what="") );

#regexpr(pattern,x)#在字符串x中检索pattern，返回与pattern
#匹配的第一个子字符串的起始字符位置

regexpr("us","you_user_name_usa")
#返回首个与pattern匹配的字符串的其实位置

gregexpr("us","you_user_name_usa")
#返回所有与pattern匹配的字符串的其实位置


(7)大小写转化
text="This is China."
toupper(text)
tolower(text)
text #不影响原文

casefold(text,upper=FALSE) #转成小写
casefold(text,upper=TRUE) #转成大写
text #不影响原文

> DNA <- "AtGCtttACC" 
> tolower(DNA) 
[1] "atgctttacc" 
> toupper(DNA) 
[1] "ATGCTTTACC" 
> chartr("Tt", "Uu", DNA) 
[1] "AuGCuuuACC" 
> chartr("Tt", "UU", DNA) 
[1] "AUGCUUUACC" 


========================================
 |-- 正则表达式 Regular Expression
----------------------------------------
正则表达式具有神奇的功能，让你不得不用，并且每次用的时候都需要从新学习一遍。

量词：  *表示{0,},		 +表示{1,},	?表示{0,1}.

正则表达式语法规则
\ 转义字符
. 除了换行以外的任意字符
^ 放在句首，表示一行字符串的起始
$ 放在句尾，表示一行字符串的结束
* 零个或者多个之前的字符
+ 一个或者多个之前的字符
? 零个或者一个之前的字符
方括号[],代表可以匹配其中任何一个字符。而^在[]中代表“非”, -代表“之间”

– [qjk]:q,j,k中任意一个字符
– [^qjk]:非q,j,k的任意其它字符
– [a-z]:a至z中任意一个小写字符
– [^a-z]: 非任意一个a至z小写字符的其它字符(可以是大写字符)
– [a-zA-Z]:任意一个英文字母
– [a-z]+: 一个或者多个小写英文字母
| 或者
小括号()与花括号{}配合“|”使用

特别注意：保留字符都需要转义字符 \ 来转义表示

例如：
常用的特殊转义字符含义
  \n:换行符
  \t:tab
  \w:任意字母(包括下划线)或者数字 即 [a-zA-Z0-9_]
  \W:\w的反义 即[^a-zA-Z0-9_]
  \d:任意一个数字 即[0-9]
  \D:\d的反义 即[^0-9]
  \s:任意一个空格,比如space, tab, newline 等
  \S:\s的反义,任意一个非空格
  
     正则表达式的常用函数
  grepl:返回一个逻辑值
  grep:返回匹配的id，
  agrep:返回匹配的id，
  
  正则替换:sub和gsub， 两者的区别是前者仅替换一次，后者全局替换。

	regexpr:返回一个数字,1表示匹配,-1表示不匹配,以及两个属性,匹配 的长度和是否使用useBytes

	regexec:返回一个list,字符串中第一个匹配及其长度以及是否使用useBytes

	gregexpr:返回一个list, 每一个匹配及其长度以及是否使用useBytes

http://www.tuicool.com/articles/2IfEj2j



========================================
函数与变量作用域
----------------------------------------

函数=函数名+参数
exp(1)
参数还可以接收向量：
exp( c(1,2,3,4) )



一、函数定义与调用

定义：
funcName=function(para[,para]){
	#many statements;
	return(something);
}

参数可以0到多个。
支持默认参数。

返回值可选，使用return则必须使用()，否则默认使用最后一个数字返回。

调用： 
funcName();#不带参数
funcName(1,2);#带参数


#函数本身也是是对象，可以查看其形参部分和函数体
formals(test)#查看形参列表
body(test)#查看函数体


#函数也可以不加{}
f1=function(x)x*2+3;
print( f1(2) )

#甚至这么写
f2=function(x)x
body(f2)=quote(x^3);#重新改写函数；
print( f2(3) )

#输入函数名，
page(nls) #查询函数代码；
edit(nls) #编辑函数代码；
#由于一些基本函数是C编写的，不能用上述方法查看和修改。



(1)函数声明与调用
func=function(){
	print("hello!")
}
func();

multi2=function(x,y){
	return(x*y);
}
multi2(5,6)#30


(2)允许函数嵌套。
add3=function(a,b,c){
	add2=function(x,y){
		return(x+y);
	}
	return(add2(add2(a,b),c))
}
add3(1,2,3) #6

(3)支持默认参数。
func1=function(x=10){
	print(x)
}

func1() #10
func1(25) #25

(4)默认返回最后一行表达式的值。
func2=function(){
	a=1
	b=2
	c=3
	c+a
}
func2() #4


(5)函数递归
累加
cumulate=function(n){
	if(n==1) return(1);
	return(n+cumulate(n-1))
}
cumulate(100);
[1] 5050

累乘(https://www.zhihu.com/question/43378587)
funr <- function(x) {
  return(ifelse(x>1, x*funr(x-1), x))
}
funr(5)
[1] 120


(10)#首字母大写的函数
camelize=function(word){
  a1=toupper(substring(word,1,1));
  a2=substring(word,2);
  paste(a1,a2,sep="");
}
camelize('that')



二、变量的作用域
1.内函数可以取出外函数的变量
a=c(1,2);
fun0=function(){
  print(a);
}
fun0() #1 2
R语言采用的是Lexical Scoping(词法作用域)。词法作用域，又称静态作用域，即变量定义后的作用域是不变的。

函数里碰到一个变量时，如果在函数里有定义或者调用的时候给了定义，就用这个定义（这个和dynamic scoping一样）；
否则就到定义函数的环境里（不是被调用的环境）找，有定义的话就用那个定义（这个和dynamic scoping 不一样）；
实在找不到了才会给出error。

实例1：
x=1
fa=function(){
  x=2
  fi=function(){
    print(x)
  }
  x=3
  fi()
}

x=100
fa() 
#3

实例2：
f=function(x){
	g=function(y){
		y+z;
	}
	z=4;
	x+g(x)
}
z=10;
f(3)

我的结果是：
f(3)=3+g(3)=3+(3+z)=3+(3+4)=10


实例3：如果去掉函数内部的z赋值呢？
f=function(x){
	g=function(y){
		y+z;
	}
	x+g(x)
}
z=10;
f(3)
我的结果：
f(3)=3+g(3)=3+(3+z)=3+(3+10)=16 



2.但是内函数不能修改外函数的变量
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
	a=c(b,200)
    print(a) #[1]   1   2   3   4 100 200
	#内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1  2  3  4 10
  #并没有改变
}

fun()
print(a) #[1] 1 2 #毫不影响

#a就属于全局变量；b就是局部变量；

顶层的a并没有改变，即使看起来在fun()中被修改了。只有fun()中局部变量a发生了改变。
实际上，局部变量a与相应的全局变量a共享一个内存地址，直到局部变量的数值发生了变化。
这种情况下，会分配给局部变量a新的内存地址。


3.再次尝试
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    #对上一个层次环境中的变量进行写操作 超级赋值符号<<-
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a) #[1] 1 2 #依旧毫不影响

4.想改变最外层的a怎么办？
在fun函数内使用一次<<-符号。
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    #对上一个层次环境中的变量进行写操作 超级赋值符号<<-
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
  a<<-a #再次穿透一层作用域
}

fun()
print(a) #[1]    2   3   4 100 200 #也受到了影响


5.如果就是想在inner中修改最顶层作用域变量呢？
可以使用assign()向顶层赋值
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    
    #向顶层赋值函数assign()
    assign("a", a, pos=.GlobalEnv);#向顶层赋值
    
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a) # 1   2   3   4 100 200




6.这个作用域在R中怎么看？environment()
a=c(1,2);
print(environment()) #<environment: R_GlobalEnv>
fun=function(){
  print(environment()) #<environment: 0x000000001a8de318>
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    print(environment()) #<environment: 0x000000001a8dd1b0>
    b=c(b,100)
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    
    #向顶层赋值函数assign()
    assign("a", a, pos=.GlobalEnv);#向顶层赋值
    
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a)



7.本地有变量，想引用外部作用域中的变量怎么办？
a=c(1,2);
print(environment()) #<environment: R_GlobalEnv>
fun=function(){
  a=c(3,4);
  b=c(10,20);
  print(environment()) #<environment: 0x000000001aa14938>

  inner=function(){
    a=c(5,6);
    print(environment()) #<environment: 0x000000001aa13798>
    print(a) #[1] 5 6
    
    print(ls()) #输出当前局部变量名。 [1] "a"
    print(ls(envir=parent.frame(n=1)))#输出向上一个框架的局部变量名。[1] "a"     "b"     "inner"
	#ls.str()可以获得更多信息。
    #调整n则向上渗透。
    print(ls(envir=parent.frame(n=2)))#又向外渗透一层"a"   "fun"
  }
  inner()
}

fun()

只能看到，还是没取到，怎么取出外部变量值呢？
##############################
f1=function(){
  print(is.environment(.GlobalEnv));#[1] TRUE
  print(environment()) #<environment: 0x000000001b93be70>
}

outer=function(){
  f2=function(){
    print(is.environment(environment())); #[1] TRUE
    print(environment()) #<environment: 0x000000001b92cc18>
  }
  inner=function(){
    f1()
    print(environment(f2)) #<environment: 0x000000001b93d0f0> 这个打印的是f2的环境
    f2()
  }
  
  inner();
}

outer()
能打印出来变量、函数所处的环境hash，则应该也能取出来。很有启发性。

受到“R环境和变量作用域的问题  http://blog.csdn.net/thoixy/article/details/40503765”启发：
##############################
//下面终于取出来环境变量了
a=c(1)
f1=function(){
  print(a) #1
  #print(is.environment(.GlobalEnv));
  #print(environment())
}

outer=function(){
  a=c(200)
  f2=function(){
    print(a) #200
    #print(is.environment(environment()));
    #print(environment())
  }
  inner=function(){
    print(a) #2
    a=c(3)
    f1()
    ee=(environment(f2)) #获取f2的环境
    print(a) #3
    print(ee$a) #200  #从f2的环境中获取变量a
    
    e1=environment(f1);
    print(e1) #<environment: R_GlobalEnv>
    print( e1$a  ); #1
    f2()
  }
  
  inner();
}

outer()

注意，通过环境变量取出来的值是所在环境的变量，而不是环境内的变量。
所以遇到函数（要当成普通变量），要找并列的上下文，而不是找函数内部。

R如何理解变量和环境的Lexical Scoping Rule  http://blog.csdn.net/stat_elliott/article/details/45166481



8.小结
►关于全局变量
    R语言中全局变量的使用比想象中的要多。R语言自身内部大量使用了全局变量，物理上其C语言代码还是R例程，对于这点你也许会感到惊讶。例如，超赋值运算符<<-用于许多R语言函数中(尽管通常只对上一级环境层次中的变量进行写操作)。线程化(Threaded)代码和GPU代码倾向于大量使用全局变量，这为并行对象提供了主要的通信途径。两者均用于编写高性能程序。
 
►关于“闭包”
    R语言中“闭包”包含了函数的参数、函数体以及调用时的环境。有一种编程方法是用闭包包括环境，这种编程方法使用的特性也叫做“闭包”。
    闭包包含了一个可创建局部变量的函数，并创建另一个函数可以访问该变量。



	
	

三、自定义二元运算符：
#以为%开始和结束，函数的参数和返回值都是某种数据类型

"%myname%"=function(a,b)return(a^b)
2%myname%10   #1024





refer:
https://www.douban.com/note/279077707/
http://agetouch.blog.163.com/blog/static/22853509020146422625878/



========================================
 |-- 函数的调试debug 和性能分析 system.time()
----------------------------------------

一、函数的调试 debug
1.手动添加 print(xx)， 随时查看变量，判断出错位置。
缺点：比较繁琐，特别是程序较长的时候。

2.使用R的调试工具。
(1) debug(f)函数可以把函数f()设置成调试状态，意味着每次调用f()都会进入这一状态。
取消这一状态需调用 undebug(f)。
在2.10版本之后，可以使用 debugonce()代替，仅检查漏洞一次。


(2)程序调试工具还能跟踪运行步骤，进而加深对程序处理过程的理解

#递归的原理：将x类型的原始问题降级为一个或划分为若干个更小的同类型问题，然后对每个较小问题调用f()函数自身，直到达到终止条件，再将各个小问题的结果向上返回并整理来解决问题。

#递归算法排序
qs=function(x){
  if(length(x)<=1) return(x)
  pivot=x[1]
  therest=x[-1]
  sv1=therest[therest<pivot]
  sv2=therest[therest>=pivot]
  sv1=qs(sv1)
  sv2=qs(sv2)
  return(c(sv1,pivot,sv2))
}
a=c(8,7,20,9,45,3)
qs(a)
# [1]  3  7  8  9 20 45

#使用调试工具，跟踪代码
#trace code
debugonce(qs)
qs(a)
然后回车查看下一步，或者输入变量回车，查看当前变量的值。




二、性能优化
https://www.zhihu.com/question/23589055
1.跟踪运行的时间
add=function(a,b){
	return(a+b)
}

方法1：
time1=Sys.time();
add(1,2);
time2=Sys.time();
print(paste("消耗时间",time2-time1));


方法2：【推荐】
system.time(add(1,2))
用户user 系统system 流逝elapsed 
0.10 0.00 0.09 


三个数字分别表示 
user:消耗在应用程序（非操作系统部分）执行的时间；
system: 低层操作系统执行（如磁盘读写等）部分的时间；
elapsed:是经过的总时间（可以认为是前两者的总和）。
一般优化时主要关注user时间。





2.避免使用for循环，优先使用向量化操作

x=runif(1e6)
y=runif(1e6)

#向量化
system.time(z<-x+y) #这里不能使用=，否则会被认为是传入的参数而报错
# 用户 系统 流逝 
# 0.01 0.00 0.02 

#for循环
z=vector(length=1e6)
system.time(for(i in 1:length(x)) z[i]=x[i]+y[i])
# 用户 系统 流逝 
# 0.13 0.00 0.12 #为什么elapse比user还小呢？不清楚


可见，向量化0.01s运行速度远远高于for循环的0.13s。

当然，速度的提升是以更多内存消耗为代价的。时间和空间的权衡经常无法避免。






========================================
 |-- 高阶函数: apply家族函数
----------------------------------------
高阶函数就是操作函数的函数。可能参数是函数，也可能返回函数。具有一定的抽象性。

#apply, lapply, sapply, tapply, sweep: 替代循环的函数

1.apply函数
作用：Apply Functions Over Array Margins对阵列行或者列使用函数
用法：apply(X, MARGIN, FUN, ...)

(1)按行求和:apply第二个参数为1
a=array(c(1,2,3,4,5,6),c(2,3))
a
#[,1] [,2] [,3]
#[1,]    1    3    5
#[2,]    2    4    6

#一行代码搞定
apply(a,1,sum) #[1]  9 12

#fn内用循环实现的话
rs=apply(a,1,function(data){ #1是按行传入。
  sum=0
  for (i in data) {
    sum =sum+i
  }
  print(sum)
  return(sum)
})

print(rs) #[1]  9 12 结果是个数组



(2)按列求和:apply第二个参数为2
a=array(c(1,2,3,4,5,6),c(2,3))
a
#[,1] [,2] [,3]
#[1,]    1    3    5
#[2,]    2    4    6

#一行代码搞定
apply(a,2,sum) #[1]  3  7 11

#fn内用循环实现的话
rs=apply(a,2,function(data){ #2是按列传入。
  sum=0
  for (i in data) {
    sum =sum+i
  }
  print(sum)
  return(sum)
})

print(rs) #[1]  3  7 11 结果是个数组
str(rs)  #num [1:3] 3 7 11






2.lapply函数
作用：Apply a Function over a List or Vector 对列表或者向量使用函数
用法：lapply(X, FUN, ...) X表示一个向量或者表达式对象，其余对象将被通过as.list强制转换为list

b=list(x=1:10,y=exp(-3:3),z=c(TRUE,FALSE));b
#$x
#[1]  1  2  3  4  5  6  7  8  9 10

#$y
#[1]  0.04978707  0.13533528  0.36787944  1.00000000  2.71828183  7.38905610 20.08553692

#$z
#[1]  TRUE FALSE

rs=lapply(b,mean)

print(rs)
str(rs)
#List of 3
# $ x: num 5.5
# $ y: num 4.54
# $ z: num 0.5






3.sapply函数
描述：Apply a Function over a List or Vector 对列表或者向量使用函数
用法：sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)

这是一个用户友好版本，是lapply函数的包装版。该函数返回值为向量、矩阵，如果simplify="array"，且合适的情况下，将会通过simplify2array()函数转换为阵列。sapply(x, f, simplify=FALSE, USE.NAMES=FALSE)返回的值与lapply(x,f)是一致的。

USE.NAMES逻辑值，如果为TRUE，且x没有被命名，则对x进行命名。

a=array(c(1,2,3,4,5,6),c(2,3))
a

b=list(x=1:10,y=exp(-3:3),z=c(TRUE,FALSE));b

rs=sapply(b,function(data){
  print(data)
})

print(rs)
str(rs)



4.sweep主要用于array的一些分类计算，而apply更多的是矩阵计算，data.frame也行。array是高于2维的数据


http://blog.csdn.net/yitianguxingjian/article/details/51820758










========================================
 |-- 数据拟合函数
----------------------------------------

1.非线性拟合 nls()函数
x=1:12;x
y1=c(7098.00, 7498,7848,8254,8761,8801.12,8951.32,9325.03,9680.90,10200,11000,12360.74)
plot(y1~x, col="red")

fit1=nls(y1~a*b^x, start=list(a=1,b=2))
lines(seq(1,12,by=0.1), predict(fit1, data.frame(x=seq(1,12,by=0.1))), col="#0096ff", lty="dotted" )
#end








========================================
R语言面向对象(OOP)初步: S3, S4 类
----------------------------------------
R的面向对象编程是基于泛型函数(generic function)的，而不是基于类层次结构。

假设之前读者已经对封装、继承、多态等OOP比较熟悉，只是对R语言的OOP不熟悉。
如果不知道OOP基础，请自定百度并学习Java的OOP介绍部分。

R语言简介1-4：函数与面向对象初步
http://agetouch.blog.163.com/blog/static/22853509020146422625878/
R语言简介1-6：面向对象OOP
http://agetouch.blog.163.com/blog/static/228535090201651975827664/


更多内容，请看本博客的R OOP专题。


========================================
文件I/O
----------------------------------------
http://agetouch.blog.163.com/blog/static/2285350902014642220245/

1.一次全部读入内存：

(1)读入数据框：
fileName="D:/coding/Java/CCDS.20160908.txt";
#a=read.table(choose.files(),sep = '\t',stringsAsFactors = F,header = T)# 选择你下的CCDs文件
a=read.table(fileName,sep = '\t',stringsAsFactors = F,header = T)# 选择你下的CCDs文件


(2)读入一列基因名字:
geneList2=readLines("geneList2.txt")






2.R语言逐行读取并处理大文件最好逐行读取。  

用R语言作分析时，有时候需要逐行处理非常大文件，各种教材中推荐的read.table 和scan都是一次性读入内存，如果文件有好几个Gb大小，一般电脑肯定吃不消。其实R中可以逐行读取的行数，这里示例一个函数，作为备忘：

con <- file("e:/data.txt", "r")
line=readLines(con,n=1)
while( length(line) != 0 ) {
     print(line)
     line=readLines(con,n=1)
}
close(con)

如果需要将一行的文字劈成多段，再进行处理，可以用strsplit函数，除此之外，还有一些常用的字符串处理函数，记录如下：
substr(),nchar(), grep(), regexpr(), sub(), gsub()


这样在异常时可能不能及时关闭资源，有博文建议如下方式写：
http://stackoverflow.com/questions/6304073/warning-closing-unused-connection-n

getCommentary <- function(filepath) {
    con <- file(filepath) 
    on.exit(close(con)) #这样，不管函数因为什么原因结束，都会关闭该资源链接。
    Commentary <-readLines(con)
    Commentary
}

getCommentary("foo.txt")






3.数据对象从内存-硬盘之间读写
str(ttr.varSD)
## List of 4 ...

内存写入硬盘：
save(ttr.varSD, file='ttr.varSD.RDS')

硬盘读入到内存：
aa=readRDS('ttr.varSD.RDS')


(2) 把id写入文件，一个id一行，不要行列标题
write.table(rownames(tmp),file="xx.Right.cellID",
            quote=F,row.names = F,col.names = F)




4.读取外部函数源码文件：source("xx.R")










========================================
********** 第二部分：统计学 （前4章） **********
----------------------------------------
统计之都： http://cos.name/tag/%E5%8A%A8%E7%94%BB/




========================================
归一化和标准化
----------------------------------------
https://blog.csdn.net/yitianguxingjian/article/details/51820758


归一化（Normalization）
1.把数据变为（0，1）之间的小数。主要是为了方便数据处理，因为将数据映射到0～1范围之内，可以使处理过程更加便捷、快速。 
2.把有量纲表达式变换为无量纲表达式，成为纯量。经过归一化处理的数据，处于同一数量级，可以消除指标之间的量纲和量纲单位的影响，提高不同数据指标之间的可比性。 

主要算法： 
1.线性转换，即min-max归一化（常用方法） y=(x-min)/(max-min) 
2. 对数函数转换 y=log10(x) 
3.反余切函数转换 y=atan(x)*2/PI 




标准化（Standardization） 
数据的标准化是将数据按比例缩放，使之落入一个小的特定区间。 

主要方法： 
1.z-score标准化，即零-均值标准化（常用方法） y=(x-μ)/σ 是一种统计的处理，基于正态分布的假设，将数据变换为均值为0、标准差为1的标准正态分布。但即使数据不服从正态分布，也可以用此法。特别适用于数据的最大值和最小值未知，或存在孤立点。 
2.小数定标标准化 y=x/10^j （j确保max(|y|)&lt;1） 通过移动x的小数位置进行标准化 
3.对数Logistic模式 y=1/(1+e^(-x))










========================================
2.1 随机抽样
----------------------------------------
1.为了可重复，设置随机数种子为一个具体值
set.seed(1)


2.


========================================
2.2 常见的统计函数
----------------------------------------
1.统计函数   作用
max(x) 返回向量x中最大的元素
min(x) 返回向量x中最小的元素
which.max(x) 返回向量x中最大元素的下标
which.min(x) 返回向量x中最小元素的下标
mean(x) 计算样本(向量)x的均值
median(x) 计算样本(向量)x的中位数
mad(x) 计算中位绝对离差
var(x) 计算样本(向量)x的方差
sd(x) 计算向量x的标准差
...More(汤银才 P41)


(1)Median Absolute Deviation
#绝对中位差实际求法是用原数据减去中位数后得到的新数据的绝对值的中位数。
#但绝对中位差常用来估计标准差，估计标准差=1.4826*绝对中位差。

#R语言中返回的是估计的标准差。
#例如：原数据{2，3，4，5，6}中位数4，新数据{2，1，0，1，2}，即{0，1，1，2，2}。
#所以中位数是1。也就是绝对中位差是1.

#而R返回的是1*1.4826=1.4826

#mad(c(2,3,4,5,6))[1] 1.4826
#R语言里的绝对中位差还要乘上一个比例因子：constant=1.4826
#也可以不乘
mad(c(2,3,4,5,6), constant=1) #1
mad(c(2,3,4,5,6,100), constant=1) #[1] 1.5
#也就是相对于标准差，mad对少量异常值不太敏感
#https://www.zhihu.com/question/56537218/answer/163638714












========================================
********** 第三部分：画图 ********** 
----------------------------------------
R绘图主要包括三部分：基础绘图命令、Lattice图形系统、ggplot包。


1.画布分割

#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))

# par(mfrow=c(2,2),mar=c(1,1,2,1), mgp=c(2,.7,0), tck=-.01)#下、左、上、右的边距

par(mfrow=c(3,2)) #分割画布为3行2列
# http://blog.csdn.net/reallocing1/article/details/41726577

for(i in c(mean0,quantile2,quantile3,quantile4)){
  plot(x,y)
}




2. legend位置
R里面legend图例位置调整函数inset
http://blog.sciencenet.cn/blog-267448-1021711.html

barplot中图例位置设置：args.legend = list(x="topleft"),




3.画图
library(Cairo)
CairoPNG(file=fname,width=1000)
plot(c(1,4,9,16))
dev.off()


4.调整坐标轴与刻度之间的距离：mgp=c(2.5,1,0)
http://blog.sina.com.cn/s/blog_4c7fada80102x3gd.html

mgp:坐标轴各部件的位置。第一个元素为坐标轴位置到坐标轴标签的距离，以文本行高为单位。第二个元素为坐标轴位置到坐标刻度标签的距离。第三个元素为坐标轴位置到实际画的坐标轴的距离，通常是0。



========================================
 |-- 基础辅助画图命令 title-axis-abline-legend-text 
----------------------------------------
标题title
坐标轴axis
参考线abline
图例legend
文本标注text（绘图区域内部添加文字），mtext（图形四个边界添加文字）




1.散点图实例：自定义坐标轴及刻度，背景虚线，散点图，拟合的实线和虚线
来源：Fig 2C(Philip Brennecke, 2013: A ccounting for technical noise in single-cell RNARNARNA-seq experiments)

数据：#x=meansHeLa,y=cv2HeLa
> head(meansHeLa)
5_8S_rRNA       7SK      A1BG  A1BG-AS1       A2M   A2M-AS1 
2.8057377 0.3591766 0.6739348 0.3230381 1.1488078 0.3647032 
> head(cv2HeLa)
5_8S_rRNA       7SK      A1BG  A1BG-AS1       A2M   A2M-AS1 
19.335707  8.082797  6.597475  6.299504 28.000000 28.000000


画图命令
#2.4.1 Plot of the fit
CairoPDF(file="03-plotOfTheFit.pdf",width=5,height=5)
# Prepare the plot (scales, grid, labels, etc.)
plot( NULL, xaxt="n", yaxt="n",
      log="xy", xlim = c( 1e-1, 3e5 ), ylim = c( .005, 80 ),
      xlab = "average normalized read count", ylab = "squared coefficient of variation (CV^2)" )
axis( 1, 10^(-1:5), c( "0.1", "1", "10", "100", "1000",
                       expression(10^4), expression(10^5) ) )
axis( 2, 10^(-2:2), c( "0.01", "0.1", "1", "10","100" ), las=2 )
abline( h=10^(-2:2), v=10^(-1:6), col="#D0D0D0", lwd=2 )
title(main="nonSHela")
# Add the data points
points( meansHeLa, cv2HeLa, pch=20, cex=.2, col=colHeLa )
# Plot the fitted curve
xg <- 10^seq( -2, 6, length.out=1000 )
lines( xg, (xi+a1)/xg + a0, col="#FF000080", lwd=3 )
# Plot quantile lines around the fit
df <- ncol(countsERCC) - 1
lines( xg, ( (xi+a1)/xg + a0 ) * qchisq( .975, df ) / df,
       col="#FF000080", lwd=2, lty="dashed" )
lines( xg, ( (xi+a1)/xg + a0 ) * qchisq( .025, df ) / df,
       col="#FF000080", lwd=2, lty="dashed" )
dev.off()




========================================
 |-- 基础画图命令 图例legend
----------------------------------------
R语言绘制图例的各种问题
http://www.360doc.com/content/17/0831/20/46931810_683661129.shtml

吐槽吐到累，不如多掌握几个图例（Legend）的软肋，更好地利用R语言绘图。
legend(x, y = NULL, legend, fill = NULL,col =, bty = "o",xjust = 0, yjust = 1, x.intersp = 1, y.intersp =1, adj = c(0, 0.5), text.width = NULL,xpd=TRUE)


1. Legend 定位
(1). 如果图例绘在制图区外，必须提前保留绘制legend的空间。如par（mai=c（2,0.5,0.5,0.5）），图例绘制在下方，所以留2，其余3个方向为0.5。

(2). 图例绘在制图区外，必须设置参数xpd=TRUE，否则命令正确也不会出图，因为默认xpd=F。

(3). 图例位置由x，y决定。legend 默认坐标为左上角的坐标（因为设定xjust=0，yjust=1），因此可以通过xjust，yjust来调节。xjust=1，yjust=0，即为右下角坐标。



2.Legend布局
(1).  如果图例数量太多，则设置多列（ncol=），如ncol=4，分为4列。
(2). 如果图例不加边框，则设置bty=“n”，“o”为加边框。
(3). 图标和文字的位置，可以通过x.intersp, y.intersp, adj,text.width等来调控。
x（y）.intersp指图标和文字之间的绝对距离adj指图标和文字的相对距离text.
width指图标和文字整体的宽度。


命令1
设置绘图参数mai=c（下，左，上，右）的边界空间。

命令2
绘制柱状图。

命令3
选取绘图区域左下角和右上角的坐标。

命令4
正常绘图，设置xpd=T。xinch()、yinch()，分别表示沿x轴，y轴移动的距离，按绝对距离计算，或按坐标轴的数量级计算。fill=T，即显示图标（默认为矩形填充色）。fill=F的话可以设置pch，选择图标类型。

命令5
设置adj=0.6，adj越接近于0，图标与文字的相对距离越远。
此参数作用于文字，图标不动。


命令6
设置x.intersp=0.6，越接近于0，图标与文字的绝对距离越近。以一侧为标准，图标文字均移动。

命令7
设置text.width=1.4，表示图标和文字整体的宽度。当文字太长时可以调节此参数。

命令8
text.width与x.intersp结合使用，效果最好。

命令9
设置ncol=2，分为两列。





========================================
 |-- R语言画barplot堆叠条形图
----------------------------------------
用于表现一个样本中有多少种亚型及其比例。
比如种群中的亚群比例，组织中的突变比例等信息。

数据实例：
province	cl1	cl2	cl3	cl4
10	0.927	0.012	0.023	0.038
10	0.894	0.057	0.009	0.04
15	0.03	0.277	0.262	0.431
15	0.032	0.768	0.042	0.159
16	0.021	0.731	0.058	0.19
16	0.017	0.914	0.042	0.027
17	0.011	0.945	0.011	0.033
17	0.013	0.96	0.014	0.013
18	0.207	0.148	0.223	0.422
18	0.677	0.084	0.119	0.12
19	0.064	0.124	0.223	0.589
19	0.539	0.194	0.027	0.24
20	0.021	0.041	0.058	0.879
20	0.027	0.046	0.106	0.821
21	0.018	0.102	0.051	0.829
21	0.026	0.122	0.167	0.685
22	0.015	0.012	0.956	0.017
22	0.063	0.018	0.905	0.014
23	0.015	0.018	0.93	0.038
23	0.018	0.025	0.938	0.018
23	0.023	0.046	0.864	0.067


代码：

#从剪切板读取数据
tbl2=read.table('clipboard',header=T)
#画条状图
barplot(t(as.matrix(tbl2))[-1,],col=rainbow(4), 
  #names.arg=(paste(substr(FirstName,1,1),".",LastName)),   #设定横坐标名称
  names.arg=tbl2$province,
  space=0, #条形间距
  xlab="Individual #", ylab="Ancestry",border=NA)
#axis(las=3,labels=tbl2$province)

#refer
#http://blog.163.com/imnoqiao@126/blog/static/35265851201611633153720/
#http://blog.sina.com.cn/s/blog_670445240102uwo3.html
#axis(1, lab=(t(as.matrix(tbl2))[1,]), cex.axis = 1.2)


问题：怎么在barplot图的上下标上文字注释？顶部标上分类，底部标上来源地。

这一步是structure软件的可视化部分。
more: http://agetouch.blog.163.com/blog/static/228535090201761982522397/





========================================
********** 第四部分：包 ********** 
----------------------------------------

1.选择使用哪个镜像：
setRepositories()


2.如何利用R语言画出三维动画图
http://blog.csdn.net/chen790646223/article/details/45483275



========================================
数据可视化
----------------------------------------
1.如何将枯燥的大数据呈现为可视化的图和动画？
https://www.zhihu.com/question/23416938

录屏软件 oCam 

数据可视化软件 Tableau http://www.tableau.com/zh-cn

数据可视化： d3库 https://github.com/d3/d3/wiki/Gallery



2.R语言绘制日本老龄化：
http://wwwbuild.net/SustainableCity/187713.html







========================================
3d散点图
----------------------------------------
1. 3D散点图，无法拖动 scatterplot3d

library(scatterplot3d)
set.seed(2015)
x <- runif(100)
y <- runif(100)
z <- runif(100)
grp <- as.factor(sample(1:3, 100, replace = T))#介个是设置的三种颜色标签啦，一个数字对应一个颜色
dat <- data.frame(x, y, z, grp)#生成数据框
head(dat)
plot3d <- with(dat, scatterplot3d(x, y, z, color = as.numeric(grp), pch = 16))

legend(plot3d$xyz.convert(0.5,0.7,0.5),pch=16,yjust=0,legend=levels(dat$grp), col = seq_along(levels(dat$grp)))




2. rgl:这个可以实现用鼠标对图像进行旋转，从不同的视角看图像。
#install.packages("rgl")
library(rgl)
attach(mtcars)
plot3d(wt,disp,mpg,col="red",size=5)
detach(mtcars)

attach(dat)
plot3d(x,y,z)
detach(dat)
缺点是不好看，不好控制。



3.





========================================
如何获得R包的全部函数名字？
----------------------------------------

1. library(help = datasets) # Get the list of functions in ts package

2. ls("package:datasets")
will list all the objects in the package

3. List Objects and their Structure

>library(ggplot2)
#Need help? Try Stackoverflow: https://stackoverflow.com/tags/ggplot2.
> lsf.str("package:ggplot2") #List Objects and their Structure





========================================
R语言标准化（归一化）之scale（）函数、sweep（）函数
----------------------------------------
http://blog.csdn.net/yitianguxingjian/article/details/51820758

一、
#数据集
x<-cbind(c(1,2,3,4),c(5,5,10,20),c(3,6,9,12))

#自己写标准化
x_min_temp<-apply(x,2,min) 
x_min<-matrix(rep(x_min_temp,4),byrow=TRUE,ncol=3)#需要输入行数和列数
abs(x-x_min)#当前值减去均值
x_extreme_temp<-apply(x,2,max)-apply(x,2,min)
x_extreme<-matrix(rep(x_extreme_temp,4),byrow=TRUE,ncol=3)#需要输入行数和列数
abs(x-x_min)/x_extreme

#sweep函数
center <- sweep(x, 2, apply(x, 2, min),'-') #在列的方向上减去最小值，不加‘-’也行
R <- apply(x, 2, max) - apply(x,2,min)   #算出极差，即列上的最大值-最小值
x_star<- sweep(center, 2, R, "/")        #把减去均值后的矩阵在列的方向上除以极差向量

#sweep函数更简洁、易懂，且不需要输入行数和列数，二者性能也差不多

#sweep再举一个例子哈
m<-matrix(c(1:9),byrow=TRUE,nrow=3)
#第一行都加1，第二行都加4，第三行都加7
sweep(m, 1, c(1,4,7), "+")  


#scale函数，这个比较简单，不多说
scale(x, center = TRUE, scale = TRUE)


二、归一化和标准化的区别？
（1）归一化（Normalization）
1.把数据变为（0，1）之间的小数。主要是为了方便数据处理，因为将数据映射到0～1范围之内，可以使处理过程更加便捷、快速。
2.把有量纲表达式变换为无量纲表达式，成为纯量。经过归一化处理的数据，处于同一数量级，可以消除指标之间的量纲和量纲单位的影响，提高不同数据指标之间的可比性。
主要算法：
1.线性转换，即min-max归一化（常用方法）
y=(x-min)/(max-min)
2. 对数函数转换
y=log10(x)
3.反余切函数转换
y=atan(x)*2/PI

（2）标准化（Standardization）
数据的标准化是将数据按比例缩放，使之落入一个小的特定区间。
主要方法：
1.z-score标准化，即零-均值标准化（常用方法）
y=(x-μ)/σ
是一种统计的处理，基于正态分布的假设，将数据变换为均值为0、标准差为1的标准正态分布。但即使数据不服从正态分布，也可以用此法。特别适用于数据的最大值和最小值未知，或存在孤立点。
2.小数定标标准化
y=x/10^j （j确保max(|y|)<1）
通过移动x的小数位置进行标准化
3.对数Logistic模式
y=1/(1+e^(-x))







========================================
R通过ODBC连接数据库
----------------------------------------
以下的实验环境是在windows7-64操作系统下进行
1、下载（mySQL-connector-odbc-5.3.7-win64.msi）
     下载地址：http://dev.mysql.com/downloads/connector/odbc (8.2 MB) 
2、安装Mysql的RODBC：mysql-connector-odbc-5.3.2-win64.msi
3、配置datasource

(1)找到C:\Windows\System32\odbcad32.exe
(2)左侧点击 添加 ，选择MySQL ODBC ANSI Driver，点击完成；
(3)填写表格，名字、描述随便写，建议用英文，填写mysql用户名和密码，选择数据库，点击OK。
(4)回到ODBC数据源管理器，选择mySqlODBC，点击确定。

4.R软件访问mysql数据库
(1)安装及加载RODBC
install.packages("RODBC")
library(RODBC)

(2) 与mysql建立连接
channel=odbcConnect("mysqlodbc", uid="root", pwd="")

（3）查询该数据库下都有哪些数据库表

> sqlTables(channel)
  TABLE_CAT TABLE_SCHEM   TABLE_NAME TABLE_TYPE REMARKS
1      test                       aa      TABLE        
2      test              first_table      TABLE        
3      test             second_table      TABLE        
4      test                 students      TABLE 
5      test                 orders      TABLE   

（4）查询某个表中的数据返回给数据框
> orders=sqlFetch(channel,"orders")
> orders
 order_id order_name order_unit order_quantity order_price order_note order_time
1 1  2500ml95%酒精  桶  17 12  NA 1464

（5）条件查询
orders2=sqlQuery(channel,"select order_name,order_price from orders order by order_id desc");

（6）将数据框中的数据保存到数据库表中
USArrests #这是R的默认内置数据，是一个数据框

数据框的首列没有列名，所以在保存之前需要指定列名
sqlSave(channel, USArrests, rownames = "state", addPK = TRUE)

cmd打开数据库查看test库，多了usarrests表，里面正是数据框中的内容。可见数据框能正确的保存到mysql数据库中去了

添加一条数据
rs3=sqlQuery(channel,"insert into usarrests(state,murder,assault,urbanpop,rape)values('noplace',0,0,0,0)");
发现数据已经在了。

（7）在R软件将刚才添加到mysql数据库中的表删除掉
sqlDrop(channel,"usarrests")

（8）关闭连接资源
odbcClose(channel)

（9）通过RODBC进行数据存取的主要函数
函数名字	函数描述
odbcConnect(dsn,uid="",pwd="")  #建立并打开连接
sqlFetch(channel,sqtable) #从数据库读取数据表，并返回一个数据框对象
sqlQuery(channel,query) #想数据库提交一个sql查询，并返回结果（'data.frame'格式）
sqlSave(channel,mydf,tablename=sqtable,append=FALSE) #将一个数据框写入或更新(append=True)到数据库
sqlDrop(channel,sqtable) #从数据库删除一个表
sqlClear(channel,sqltable) #删除表中内容
sqlTable(channel) #返回数据库中表的信息
sqlColumns(chanel,sqltable) #返回数据库表sqltable列的信息
close(channel) #关闭连接

操作步骤：
建立DSN
打开连接
数据操作
关闭连接 


实例1
#加载包
library(RODBC)

#创建连接
channel<-odbcConnect("BITEST",uid="dw",psw="dw")

#执行查询
org1<-sqlFetch(channel,'DIM.DIM_ORGANIZATION') #这是oracle数据库
org2<-sqlQuery(channel,"select * from DIM.DIM_ORGANIZATION")

#关闭连接
odbcClose(channel)

#使用数据
head(org1)
head(org2)



实例2 通过RODBC将数据写入oracle

library(RODBC)
channel<-odbcConnect("BITEST",uid="dw",psw="dw")
#创建数据，待写入对象
mydata<-sqlQuery(channel,'select * from DIM.DIM_ORGANIZATION')

#写入数据库，并读取结果
sqlSave(channel,mydata,"NEW_TABLE_NAME", append=FALSE)
mydata2=sqlQuery(channel,'select * from NEW_TABLE_NAME')

#更新数据库，并读取结果
sqlSave(channel,mydata,"NEW_TABLE_NAME", append=TRUE)
mydata3=sqlQuery(channel,'select * from NEW_TABLE_NAME')

#删除刚刚建立的数据表NEW_TABLE_NAME
sqlDrop(channel,"NEW_TABLE_NAME")
odbcClose(channel)

#查看执行结果
head(mydata,n=30)
head(mydata2,n=30)
head(mydata3,n=30)


refer:
http://wenku.baidu.com/link?url=PtNUOCT66CzajvN_uM_4FaCloQffW8HzaE1PMlOg3UqyXwpZNbT3DC1URy-tsLqQRIeW_DJhxBsS06QsY99OjKSq_BV7--vj1zWhtga7k1_

http://blog.csdn.net/hongweigg/article/details/49779943

http://www.dataguru.cn/thread-289411-1-1.html






========================================
可重复性研究
----------------------------------------
1.用shiny+Rmarkdown写Assignment报告，在文档中使用shiny，既装逼又实用。
2.做数据分析研究时用shiny+dashboard+dygraph开发一个可交互的数据分析应用。方便进行探索性的数据分析，可以选择变量，可以拖动时间轴，可以放大缩小时间范围或者数值y的范围，观察数据更方便。
（https://www.zhihu.com/question/35224925）



========================================
历史
----------------------------------------
《数据分析简史》 https://www.douban.com/note/496070836/

