R00-IDE: R and Rstudio


web 临时运行 R 代码: http://www.dooccn.com/r/





========================================
常用操作及快捷方式
----------------------------------------

如何web预览服务器上的图(jpg, pdf 等文件): 
	使用 Rstudio:  http://x.biomooc.com:8888/file_show?path= 后面跟着绝对地址
	运行静态服务器:
		python3: 
			$ python -m http.server --bind 192.168.2.120 8890
			$ python -m http.server 8900 # 使用默认IP地址
		node:
			$ npm install -g http-server #安装一次
			$ http-server -p 12345 

========================================
Rstudio 基本操作
----------------------------------------


========================================
|-- 如何将R和RStudio中界面的语言转变成英文
----------------------------------------
找到R程序的etc文件夹中Rconsole，以管理员身份打开记事本，用记事本开Rconsole。 
找到“ language =  ”一行，将其改为 "language = en" 。保存即可。

http://mito.air-nifty.com/mitoakiyoshiblog/2011/01/how-to-change-l.html
http://blog.sciencenet.cn/blog-526092-686410.html






========================================
Rstudio 高级操作
----------------------------------------



========================================
|-- jobs 标签页: Local jobs(本地作业)
----------------------------------------

A “local job” is an R script that runs in a separate, dedicated R session. You can run any R script in a separate session by pulling down the Source menu and choosing Source as Local Job.

就是把脚本，放到一个单独的环境中运行。
和 source("code.R") 效果差不多。
提供了几个运行的选项。

接下来做几个测试，每次都是准备一个干净的Rstudio session，一个脚本。




1. 空环境运行脚本
脚本 testJob.R:
Fun1 <- function(x) x^1

Sys.sleep(2) #休眠2秒是为了看到Jobs选项卡的进度条。
print(paste( "Output result: ", Fun1(3) ) )

(1) 使用source运行脚本
> source("testJob.R")
[1] "Output result:  3"

注意：同时全局环境新增一个 Fun1 函数。
说明source()运行的脚本会覆盖全局变量。



(2) 使用Jobs选项卡
单击Jobs选项卡，单击Start Local Job，弹出框选择该脚本，
不勾选 复制全局环境。
复制作业结果：不复制。
点击start
[1] "Output result:  3"

点击左上角的返回，可以看到3列，
脚本名字	运行时间点		持续时间	
testJob.R	Succeeded 9:56 AM	0.02






2. 尝试复制全局环境，及把结果复制到全局环境。

脚本 testJob.R:
Sys.sleep(1)
rs=Fun1(3)
print(paste( "Output result: ", rs ) )


(1) source() 运行
i)清空全局环境。
> source("testJob.R")
Error in Fun1(3) : could not find function "Fun1"


ii)# 把函数定义到全局环境
> Fun1 <- function(x) x^1
> source("testJob.R")
[1] "Output result:  3"





(2) 使用Jobs选项卡
i)清空全局环境
选择不复制全局环境
输出：
Error in Fun1(3) : could not find function "Fun1"
Calls: sourceWithProgress -> eval -> eval -> print -> paste
Execution halted


ii)# 把函数定义到全局环境
> Fun1 <- function(x) x^2
> ls()
[1] "Fun1"
再次执行工作，报错同上：找不到Fun1函数。


iii)# 勾选 复制全局环境，再次执行工作 
[1] "Output result:  9"


iii) 勾选 复制全局环境，复制结果选择 全局环境(To global environment)，start
[1] "Output result:  9"

> ls() #同时脚本变量rs被写入了全局。
[1] "Fun1" "rs" 


iv) 勾选 复制全局环境，复制结果选择 To results object in global environment，start
[1] "Output result:  9"

# 同时 脚本名_results 环境变量被写入了全局。
> ls()
[1] "Fun1"            "testJob_results"

怎么查看环境内的变量和值？
> ls(envir = testJob_results)
[1] "rs"
> testJob_results$rs
[1] 9







https://www.r-bloggers.com/2019/03/rstudio-1-2-preview-jobs/


========================================
|-- R studio 中快速定位长脚本、堆叠代码块
----------------------------------------
1. 对于长代码，推荐使用分隔符隔开。

R studio能识别的分割符是一个注释符号# + 标题 + ----

# block1 ----
# block2 ####
# block3 ====

这三种格式都能自动识别为标题，并在脚本左下角显示，单击能快速定位。


2. 单击行号前的下三角还可以折叠代码块。





========================================
|-- R project 有啥用? 怎么用？
----------------------------------------
1. 新建R项目
File - New Project - 共有3个选项。
New Directory 填写项目名和文件夹名字。选择 
其他2个是:
Existing Directory 现有目录
Version Control 版本控制工具


(2)创建projects之后会发生什么:

i)产生一个 project文件 .Rproj的同时，也产生了项目工作目录，这个文件包含了各种项目选项，并且能作为快捷方式进行快速启动，直接打开项目；

ii)创建了一个隐藏目录 .Rproj.user能够存放项目的临时文件，如果需要，这个目录会附带 .Rbuildignore, .gitignore等文件。

iii)加载项目到RStudio的同时，在工具栏的最右侧会显示项目的名称。



## 查看.Rproj文件
$ cd /data/wangjl/test/testR/learnR
$ cat learnR.Rproj
Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX




## 查查文件目录
$ ls -la
total 20
drwxr-xr-x 3 wangjl wangjl 4096 Jun 30 16:50 .
drwxr-xr-x 3 wangjl wangjl 4096 Jun 30 16:49 ..
-rw-r--r-- 1 wangjl wangjl 1517 Jun 30 16:38 dplyr.R #这个是我自己新建的
-rw-r--r-- 1 wangjl wangjl  205 Jun 30 16:49 learnR.Rproj
drwxr-xr-x 4 wangjl wangjl 4096 Jun 30 16:49 .Rproj.user


$ tree .Rproj.user
.Rproj.user
├── 5B798BF
│   ├── console06
│   │   ├── 2A13D9F8
│   │   ├── 2A13D9F8.env
│   │   └── INDEX001
│   ├── ctx
│   ├── presentation
│   ├── profiles-cache
│   └── sources
│       ├── prop
│       │   ├── 3688718B
│       │   ├── D4779A69
│       │   └── INDEX
│       └── s-8c39a962
│           ├── 44C80D77
│           ├── 44C80D77-contents
│           ├── 7E5F9BBE
│           ├── 7E5F9BBE-contents
│           ├── B1DF7942-contents
│           └── lock_file
└── shared
    └── notebooks
        ├── patch-chunk-names
        └── paths

10 directories, 14 files


# 这里可能是刚关闭的文件路径。
$ cat .Rproj.user/shared/notebooks/paths
/home/wangjl/data/test/testR/learnR/dplyr.R="D6C7E93F"




(3) 打开项目
有一下几种方式打开项目：

- 用打开命令，可以是项目从菜单或者项目工具栏来预览，选择想要启动的项目。
- 在最近打开的项目，可以是项目菜单或者工具栏。
- 双击项目文件在系统的项目文件


当在RStudio中打开项目，同时也产生如下动作:
- 新的对话产生
- .Rprofile 文件将在主目录（home）产生
- .RData将被加载.
- .Rhistory 文件也会被加载.
- 当前工作目录设置为项目目录
- 预先编辑好的文本资源将导入编辑器 //??
- 其他 RStudio设置将保持上次关闭之前一致


(4)退出项目
当你正在写一个项目，然后想退出或关闭项目，或者打开其他项目，会产生一下动作。

- .RData and/or .Rhistory 将被写入项目目录
- 打开的源文件将会保存
- RStudio设置会保存
- 会话终止.


(5)同时工作在不同项目之间
你可以同时工作在不同的项目之间，只需要简单的打开多个文件，两种方式:

- 在项目菜单打开新的项目
- 通过shell命令（双击项目文件）


(6)项目选项
针对每个项目，都可以设置不同的选项来自定义RStudio的行为，你可以通过项目菜单来编辑这些设置:
Tools - Project options

## 常规设置
注：常规能够覆盖全局设置，为了延续默认的全局选项，你可以默认选择这些设置不做变动。.

- 启动时，保存 .RData到工作区 — 一旦启动，同时加载初始工作目录的中的 .RData文件，如果你有.RData文件过大，需要考虑是否加载来提升启动速度。
- 保存工作区文件到 .RData — 询问是否保存.RData,或者总是保存, 或者从不保存，注： 若工作区根本就没有改变，不需要提示
- 总是保存 — 确定.Rhistory 文件 总是执行，与你上个选项中是否保存 .RData毫不相干


## 代码编辑
- R资源文件索引— 决定是否对项目目录中的R资源进行索引以便进行导航，一般的是可以的，尽管如此，如果你有太多的文件，那就不推荐进行索引.
- 插入空格切换，决定是否插入切换键，一个tab相当与几个空格
- 文本编辑 —特指默认的资源文件的文本编辑，注意，资源的文本默认不匹配代码，但是依然可以用命令来执行。Reopen with Encoding menu command.

## 版本控制
- 版本控制系统— 具体说版本控制器可以控制项目.
	注：RStudio自动通过.git or .svn文件后缀来扫描项目的版本控制，因此，无需进行常规设定，但是你需要根据需求小改一下:
	* 如果你.git 和 .svn目录都有，你想更倾向一个版本控制工具.
	* 如果你的一些项目没有版本控制器，你想在本地将这个项目添加到版本控制器的资源库中。
- 起源 — 只显示通过远程下载的项目。








2. 好处
(1) 工作目录直接是本文件夹。

记住：少用直到不用 setwd() 函数，因为切换电脑时，所有路径都可能要改，成本太高。

永远不要用setwd()这个函数，永远!
用R Project 就好了。

> getwd()
[1] "/data/wangjl/test/testR/learnR"



(2) 








ref:
https://www.jianshu.com/p/3fd1fcc8a16f
https://zhuanlan.zhihu.com/p/24425749



========================================
新的R IDE: RCode is a modern environment for R
----------------------------------------
https://www.pgm-solutions.com/
A modern IDE for R





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

