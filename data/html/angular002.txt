AngularJS(以下简称ng)

不理解angularJS的单元测试。。。

参考资料：
AngularJS学习笔记 http://www.kancloud.cn/kancloud/angularjs-learning-notes

https://code.angularjs.org/1.4.9/docs/api/ng

AngularJS最佳实践和风格指南
http://www.kancloud.cn/thinkphp/angularjs-style-guide/41892

W3School AngularJS 教程
http://www.kancloud.cn/wizardforcel/w3school-angularjs/91295

====================================
大纲
------------------------------------
http://www.ituring.com.cn/minibook/303
AngularJS入门教程目录
AngularJS快速开始
AngularJS入门教程：导言和准备
AngularJS入门教程00：引导程序
AngularJS入门教程01：静态模板
AngularJS入门教程02：AngularJS 模板
AngularJS入门教程03：迭代器过滤
AngularJS入门教程04：双向绑定
AngularJS入门教程05：XHR和依赖注入
AngularJS入门教程06：链接与图片模板
AngularJS入门教程07：路由与多视图
AngularJS入门教程08：更多模板
AngularJS入门教程09：过滤器
AngularJS入门教程10：事件处理器
AngularJS入门教程11：REST和定制服务
AngularJS入门教程：完结篇

====================================
AngularJS快速开始
------------------------------------
AngularJS通过作用域来保持数据模型与视图界面UI的双向同步。一旦模型状态发生改变，AngularJS会立即刷新反映在视图界面中，反之亦然。

此外，AngularJS还提供了一些非常有用的服务特性：

底层服务包括依赖注入，XHR、缓存、URL路由和浏览器抽象服务。
您还可以扩展和添加自己特定的应用服务。
这些服务可以让您非常方便的编写WEB应用。

一个实例：
<meta charset='utf-8'>
<html ng-app>
<head>
  <script src="../../js/angular-1.0.1.min.js"></script>
  <script src="controllers.js"></script>
</head>

<body ng-controller="PhoneListCtrl">
	
Search: <input ng-model="query">
Sort by:
<select ng-model="orderProp">
  <option value="name">Alphabetical</option>
  <option value="age">Newest</option>
</select>


<ul class="phones">
  <li ng-repeat="phone in phones | filter:query | orderBy:orderProp">
    {{phone.name}}
    <p>{{phone.snippet}}</p>
  </li>
</ul>

</body>
</html>

controller.js 
function PhoneListCtrl($scope) {
  $scope.phones = [
    {"name": "Nexus S",
     "snippet": "Fast just got faster with Nexus S."},
    {"name": "Motorola XOOM™ with Wi-Fi",
     "snippet": "The Next, Next Generation tablet."},
    {"name": "lenovo",
     "snippet": "The lenovo."},
    {"name": "huawei",
     "snippet": "The Next, huawei."},
    {"name": "MOTOROLA XOOM™",
     "snippet": "The Next, Next Generation tablet."}
  ];
  
  //数据绑定到$scope上。
}


解释：
<html ng-app> 程序启动ng-app
<body ng-controller="PhoneListCtrl"> 控制器ng-controller，对应js中的同名函数。
Search: <input ng-model="query"> 模型ng-model，提供数据

AngularJS在select元素和orderProp模型之间创建了一个双向绑定。而后，orderProp会被用作orderBy过滤器的输入。



====================================
AngularJS入门教程05：XHR和依赖注入
------------------------------------
$http仅仅是AngularJS众多内建服务中之一，这些服务可以处理一些Web应用的通用操作。AngularJS能将这些服务注入到任何你需要它们的地方。

index.html
<meta charset='utf-8'>
<html ng-app>
<head>
  <script src="../../js/angular-1.0.1.min.js"></script>
</head>
<body>
<h1>XHR和依赖注入</h1>
http://www.ituring.com.cn/article/15765<hr>

<div ng-controller="PhoneListCtrl">  

  <ul>
    <li ng-repeat="phone in phones">
     	 {{phone.name}}
    	<p>{{phone.snippet}} <b>{{phone.age}} years old</b></p>
    </li>
  </ul>

</div>  

<script>  
function PhoneListCtrl($scope,$http) {  
   $http.get("phones.json").success(function(data) {
		//$scope.phones = data;
		$scope.phones = data.splice(0, 3);//可以截取对象
   });
   $scope.orderProp = 'age';
}

//PhoneListCtrl.$inject = ['$scope', '$http'];
</script>
</body>
</html>



$http向Web服务器发起一个HTTP GET请求，索取phone/phones.json（注意，url是相对于我们的index.html文件的）。服务器用json文件中的数据作为响应。（这个响应或许是实时从后端服务器动态产生的。但是对于浏览器来说，它们看起来都是一样的。为了简单起见，我们在教程里面简单地使用了一个json文件。）

phones.json
[ 
	{
	  "age": 13,
	  "name": "13Motorola DEFY\u2122 with MOTOBLUR\u2122",
	  "snippet": "Are you ready for everything life throws your way?"
	 },
    {"name": "Nexus S",
     "snippet": "Fast just got faster with Nexus S.",
     "age":0},
    {"name": "Motorola XOOM™ with Wi-Fi",
     "snippet": "The Next, Next Generation tablet.",
     "age":1},
    {"name": "lenovo",
     "snippet": "The lenovo.",
     "age":2},
    {"name": "huawei",
     "snippet": "The Next, huawei.",
     "age":3},
    {"name": "MOTOROLA XOOM™",
     "snippet": "The Next, Next Generation tablet.",
     "age":4}
]





====================================
AngularJS入门教程06: 链接与图片模板
------------------------------------
我们同样为每条记录添加手机图片，只需要使用ngSrc指令代替<img>的src属性标签就可以了。如果我们仅仅用一个正常src属性来进行绑定（<img class="diagram" src="{{phone.imageUrl}}">），浏览器会把AngularJS的{{ 表达式 }}标记直接进行字面解释，并且发起一个向非法urlhttp://localhost:8000/app/{{phone.imageUrl}}的请求。因为浏览器载入页面时，同时也会请求载入图片，AngularJS在页面载入完毕时才开始编译——浏览器请求载入图片时{{phone.imageUrl}}还没得到编译！有了这个ngSrc指令会避免产生这种情况，使用ngSrc指令防止浏览器产生一个指向非法地址的请求。

index.html
<meta charset='utf-8'>
<html ng-app>
<head>
  <script src="../../js/angular-1.0.1.min.js"></script>
</head>
<style>
img{height:150px;}
</style>
<body>
<h1>链接与图片模板</h1>
http://www.ituring.com.cn/article/15766<hr>

<div ng-controller="PhoneListCtrl">  

 <ul class="phones">
  <li ng-repeat="phone in phones | filter:query | orderBy:orderProp" class="thumbnail">
    <a href="#/phones/{{phone.id}}" class="thumb"><img ng-src="{{phone.imageUrl}}"></a>
    <a href="#/phones/{{phone.id}}">{{phone.name}}</a>
    <p>{{phone.snippet}}</p>
  </li>
</ul>

</div>  

<script>  
function PhoneListCtrl($scope,$http) {  
   $http.get("phones.json").success(function(data) {
		$scope.phones = data;
   });
   $scope.orderProp = 'age';
}

//PhoneListCtrl.$inject = ['$scope', '$http'];
</script>
</body>
</html>

数据文件：
[ 
	{
	  "age": 13, "id":"001",
	  "name": "13Motorola DEFY\u2122 with MOTOBLUR\u2122",
	  "imageUrl": "img/phones/001.jpg",
	  "snippet": "Are you ready for everything life throws your way?"
	 },
    {"name": "Nexus S",	 "id":"002",
     "imageUrl": "img/phones/002.jpg",
     "snippet": "Fast just got faster with Nexus S.",
     "age":0},
    {"name": "Motorola XOOM™ with Wi-Fi","id":"003",
     "imageUrl": "img/phones/001.jpg",
     "snippet": "The Next, Next Generation tablet.",
     "age":1},
    {"name": "lenovo","id":"004",
     "imageUrl": "img/phones/003.jpg",
     "snippet": "The lenovo.",
     "age":2},
    {"name": "huawei","id":"005",
     "imageUrl": "img/phones/004.jpg",
     "snippet": "The Next, huawei.",
     "age":3},
    {"name": "MOTOROLA XOOM™","id":"006",
     "imageUrl": "img/phones/005.jpg",
     "snippet": "The Next, Next Generation tablet.",
     "age":4}
]




====================================
AngularJS入门教程07：路由与多视图
------------------------------------
注意到我们的布局模板中没再添加PhoneListCtrl或PhoneDetailCtrl控制器属性！
1.
index.html 
	html标签中加入了ng-app="phonecat"，标记模块。
	引入了js文件，在一个div中添加了ng-view视图标记。
<!doctype html>
<html lang="en" ng-app="phonecat">
<meta charset='utf-8'>
<head>
  <script src="../../js/angular-1.0.1.min.js"></script>
  <script src="js/app.js"></script>
  <script src="js/controllers.js"></script>
</head>
<style>
img{height:150px;}
</style>
<body>
<h1>多视图，路由和布局模板</h1>
http://www.ituring.com.cn/article/15767<hr>

<div ng-view></div>

</body>
</html>

$route服务通常和ngView指令一起使用。ngView指令的角色是为当前路由把对应的视图模板载入到布局模板中。
注意，我们把index.html模板里面大部分代码移除，我们只放置了一个<div>容器，这个<div>具有ng-view属性。我们删除掉的代码现在被放置在phone-list.html模板中.

2.
js/app.js
	为了给我们的应用配置路由，我们需要给应用创建一个模块。我们管这个模块叫做phonecat，并且通过使用configAPI，我们请求把$routeProvider注入到我们的配置函数并且使用$routeProvider.whenAPI来定义我们的路由规则。
	
angular.module('phonecat', []).
  config(['$routeProvider', function($routeProvider) {
  $routeProvider.
      when('/phones', {templateUrl: 'partials/phone-list.html',   controller: PhoneListCtrl}).
      when('/phones/:phoneId', {templateUrl: 'partials/phone-detail.html', controller: PhoneDetailCtrl}).
      otherwise({redirectTo: '/phones'});
}]);

我们的路由规则定义如下
1)当URL 映射段为/phones时，手机列表视图会被显示出来。为了构造这个视图，AngularJS会使用phone-list.html模板和PhoneListCtrl控制器。
2)当URL 映射段为/phone/:phoneId时，手机详细信息视图被显示出来。这里:phoneId是URL的变量部分。为了构造手机详细视图，AngularJS会使用phone-detail.html模板和PhoneDetailCtrl控制器。

我们重用之前创造过的PhoneListCtrl控制器，同时我们为手机详细视图添加一个新的PhoneDetailCtrl控制器，把它存放在js/controllers.js文件里。

3.js/controllers.js
function PhoneDetailCtrl($scope, $routeParams) {
  $scope.phoneId = $routeParams.phoneId;
}
//PhoneDetailCtrl.$inject = ['$scope', '$routeParams'];

function PhoneListCtrl($scope,$http) {  
   $http.get("phones.json").success(function(data) {
		$scope.phones = data;
   });
   $scope.orderProp = 'age';
}
//PhoneListCtrl.$inject = ['$scope', '$http'];

4.phones.json数据源
[ 
	{
	  "age": 13, "id":"001",
	  "name": "13Motorola DEFY\u2122 with MOTOBLUR\u2122",
	  "imageUrl": "img/phones/001.jpg",
	  "snippet": "Are you ready for everything life throws your way?"
	 },
    {"name": "Nexus S",	 "id":"002",
     "imageUrl": "img/phones/002.jpg",
     "snippet": "Fast just got faster with Nexus S.",
     "age":0},
    {"name": "Motorola XOOM™ with Wi-Fi","id":"003",
     "imageUrl": "img/phones/001.jpg",
     "snippet": "The Next, Next Generation tablet.",
     "age":1},
    {"name": "lenovo","id":"004",
     "imageUrl": "img/phones/003.jpg",
     "snippet": "The lenovo.",
     "age":2},
    {"name": "huawei","id":"005",
     "imageUrl": "img/phones/004.jpg",
     "snippet": "The Next, huawei.",
     "age":3},
    {"name": "MOTOROLA XOOM™","id":"006",
     "imageUrl": "img/phones/005.jpg",
     "snippet": "The Next, Next Generation tablet.",
     "age":4}
]


5.partials/phone-list.html
<div class="container-fluid">
  <div class="row-fluid">
    <div class="span2">
      <!--Sidebar content-->

      Search: <input ng-model="query">
      Sort by:
      <select ng-model="orderProp">
        <option value="name">Alphabetical</option>
        <option value="age">Newest</option>
      </select>

    </div>
    <div class="span10">
      <!--Body content-->

      <ul class="phones">
        <li ng-repeat="phone in phones | filter:query | orderBy:orderProp" class="thumbnail">
          <a href="#/phones/{{phone.id}}" class="thumb"><img ng-src="{{phone.imageUrl}}"></a>
          <a href="#/phones/{{phone.id}}">{{phone.name}}</a>
          <p>{{phone.snippet}}</p>
        </li>
      </ul>

    </div>
  </div>
</div>

6.partials/phone-detail.html
TBD: detail view for {{phoneId}}

接着，我们去实现手机详细信息视图。


====================================
AngularJS入门教程08：更多模板
------------------------------------
1.数据
phones/001.json（样例片段）
{
	"name":"nexus-s",
	"description":"some desc...",
  "additionalFeatures": "Contour Display, Near Field Communications (NFC),...",
  "android": {
      "os": "Android 2.3",
      "ui": "Android"
  },
  
  "availability":["jd.com", "tmall.com"],

  "images": [
      "img/phones/nexus-s.0.jpg",
      "img/phones/nexus-s.1.jpg",
      "img/phones/nexus-s.2.jpg"
  ],
  "storage": {
      "flash": "16384MB",
      "ram": "512MB"
  }
}
这个是详细信息。

2.控制器
我们使用$http服务获取数据，以此来拓展我们的PhoneListCtrl。这和之前的手机列表控制器的工作方式是一样的。
js/controllers.js
function PhoneDetailCtrl($scope, $routeParams, $http) {
  //$scope.phoneId = $routeParams.phoneId;
   $http.get('phones/' + $routeParams.phoneId + '.json').success(function(data) {
    $scope.phone = data;
  });
}
//PhoneDetailCtrl.$inject = ['$scope', '$routeParams', '$http'];

为了构造HTTP请求的URL，我们需要$route服务提供的当前路由中抽取$routeParams.phoneId。

3.模板：
partials/phone-detail.html
<img ng-src="{{phone.images[0]}}" class="phone">

<h1>name: {{phone.name}}</h1>

<p>desc: {{phone.description}}</p>

<ul class="phone-thumbs">
  <li ng-repeat="img in phone.images">
    <img ng-src="{{img}}">
  </li>
</ul>

<ul class="specs">
  <li>
    <span>Availability and Networks</span>
    <dl>
      <dt>Availability</dt>
      <dd ng-repeat="availability in phone.availability">{{availability}}</dd>
    </dl>
  </li>

  </li>
    <dd>OS:{{phone.android.os}}</dd>
    <dd>UI:{{phone.android.ui}}</dd>
    
    <dd>flash:{{phone.storage.flash}}</dd>
    <dd>ram:{{phone.storage.ram}}</dd>
  </li>

  </li>
    <span>Additional Features</span>
    <dd>{{phone.additionalFeatures}}</dd>
  </li>
</ul>


现在手机详细页面已经就绪了，接着我们将学习如何写一个显示过滤器。

====================================
AngularJS入门教程09：过滤器
------------------------------------
现在转到一个手机详细信息页面。在上一步，手机详细页面显示“true”或者“false”来说明某个手机是否具有特定的特性。现在我们使用一个定制的过滤器来把那些文本串图形化：√作为“true”；以及×作为“false”。来让我们看看过滤器代码长什么样子。


http://www.ituring.com.cn/article/15769


====================================
------------------------------------


====================================
------------------------------------



====================================
------------------------------------



====================================
------------------------------------



====================================
------------------------------------


====================================
------------------------------------



====================================
------------------------------------



====================================
------------------------------------



====================================
------------------------------------


====================================
------------------------------------



====================================
------------------------------------



====================================
------------------------------------



====================================
------------------------------------


