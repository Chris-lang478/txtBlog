markdown简介


要实现txtBlog支持markdown，就需要实现
- md 2 html, 方便网页展示; 
	- 要自动生成目录，最好是悬浮右侧，并自动移动位置的。
- md 2 pdf 或html 2 pdf，方便收藏或打印;
- 最好有一个支持的js所见即所得编辑器，方便编辑。



========================================
见识见识md
----------------------------------------
真把简单的东西搞复杂了，就wikipedia上看张图，对比一下就明白了
	https://en.wikipedia.org/wiki/Markdown#Example
	
请欣赏几个markdown博客：
谢益辉的博客,真是美的享受：http://yihui.name/cn/guestbook/
https://ideazhao.com/


带右侧固定目录的文档: https://pingcap.com/docs-cn/v3.0/benchmark/how-to-run-tpcc/




========================================
|-- 终极武器：网页md编辑器
----------------------------------------
1.所见即所得书写工具：
给出两个在线的Markdown编辑器
    http://mahua.jser.me/
    http://maxiang.info/
    第一个是个人开发的，免费使用，非常赞！
    第二个是一个已经发布的产品，可以免费在线编辑。除此之外，还可以将内容同步到印象笔记，不过只能试用10天，之后需要79/年，还是非常不错的。
#


2. Hugo：静态网站生成器。号称最快的！
https://gohugo.io/
The world’s fastest framework for building websites


3. Hexo 支持 GitHub Flavored Markdown 的所有功能
https://hexo.io/zh-cn/

不过，有人抱怨hexo 的生成速度过慢了：Hexo的生成速度明显比Hugo慢了一个等级。

	
MD教程：
1.http://www.appinn.com/markdown/
2.http://www.jianshu.com/p/1e402922ee32/
3.MarkDown语法简介：http://ued.taobao.org/blog/2012/07/getting-started-with-markdown/



========================================
|-- what and why?
----------------------------------------
markdown是什么？
	Markdown 的目标是实现「易读易写」。
	markdown(简称md)可以作为书写格式，而html可以作为发布格式。
	md便于书写和阅读，而html对设备支持度高，支持更灵活的样式配置。

流程上：
	我们可以先写成markdown格式；
	再使用软件转化为html，添加好看的样式； 
	如果需要，再打印成pdf格式。


使用 Markdown 的优点：
	专注你的文字内容而不是排版样式，安心写作。
	轻松的导出 HTML、PDF 和本身的 .md 文件。
	纯文本内容，兼容所有的文本编辑器与字处理软件。
	随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。
	可读、直观、学习成本低。

流行程度：github和stackoverflow都支持md格式。



========================================
学习 md 语法规则
----------------------------------------


========================================
|-- 标题
----------------------------------------

类 Atx 形式是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：
# 一级标题

## 二级标题

### 三级标题

建议在井号后加一个空格，这是最标准的 Markdown 语法。



类 Setext 形式:

This is an H1
=============

This is an H2
-------------
任何数量的 = 和 - 都可以有效果。





========================================
|-- 列表
----------------------------------------
列表的显示只需要在文字前加上 + 或 - 或 * 即可变为无序列表。 
	- something
	- something2

有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。
	1. sometext
	2. sometext
很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：



如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <p> 标签包起来，举例来说：

*   Bird
*   Magic
会被转换为：
<ul>
<li>Bird</li>
<li>Magic</li>
</ul>


但是这个：

*   Bird

*   Magic
会被转换为：
<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>





========================================
|-- 区块引用 Blockquotes
----------------------------------------
只需要在文本前加入 > 这种尖括号（大于号）即可

> some words by Bill Gates

========================================
|-- 图片和链接
----------------------------------------
插入链接与插入图片的语法很像，区别在一个 !号

图片为：![](){ImgCap}{/ImgCap}

链接为：[]()

如：
请单击 [Baidu](http://baidu.com) 搜索。

请看图片 ![Baidu](http://baidu.com/logo.png)

[?]怎么加title属性？
第二个参数(url, title)


图片详细叙述如下：
	一个惊叹号 !
	接着一个方括号，里面放上图片的替代文字
	接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。

========================================
|-- 粗体和斜体
----------------------------------------
用两个 * 包含一段文本就是粗体的语法，
用一个 * 包含一段文本就是斜体的语法。


========================================
|-- 表格
----------------------------------------
表格是我觉得 Markdown 比较累人的地方，例子如下：

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

* 原生markdown不支持这样的表格，扩展的markdown才支持

========================================
|-- 代码框
----------------------------------------
如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单. 

1.行内代码(inline code)
只需要用两个 ` 把中间的代码包裹起来。图例：

`alert(123);`

2.还有块代码(block code)的写法：代码每一行的前面都加4个空格或一个tab


3. 还有一种Fenced Code Block，写法是：第一行和最后一行都是3个 " ` "，中间的行是代码，

```
function n(s){
	console.log(s);
}
```


========================================
|-- 分割线
----------------------------------------
你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：

* * *

***

*****

- - -



========================================
|-- 强调
----------------------------------------
Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：

*single asterisks*
_single underscores_
**double asterisks**
__double underscores__

会转成：
<em>single asterisks</em>
<em>single underscores</em>
<strong>double asterisks</strong>
<strong>double underscores</strong>


你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。

强调也可以直接插在文字中间：
un*frigging*believable
但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。


========================================
为markdown生成toc（Table of Content）
----------------------------------------
https://ruby-china.org/topics/17028
效果图: http://i5ting.github.io/i5ting_ztree_toc/build/jquery.plugin.html


(1)
Jekyll 使用 kramdown 可以提供ToC 功能。
Stackedit 的ToC功能异常强大。

py的md解释器里也有toc的，我先去看看Stackedit和kramdown





(2)
TOC 一般是针对比较长的文档的阅读特别方便, 长文档还几个工具,百度百科做的还不错:

TOC 一直浮动展示, 不至于点到文档末尾切换 toc 就麻烦了.
可以控制自动展开下级菜单, 同时关闭其他打开的菜单---toc长了很有用



========================================
GitHub flavored markdown
----------------------------------------
markdown的解析器有很多（你自己写一个也不难），

要想用github上的样式应该叫GitHub flavored markdown，其实只要改一下CSS就行了


========================================
|-- GitHub Flavored Markdown 中实现【页内跳转】
----------------------------------------
https://blog.csdn.net/gfyzband/article/details/82849616

1. 任意 # 标注的标题都会被添加上同名的跳转链接，具体细节可参考这里的说明
[标题1](#标题1) 
[标题2](#标题2) 

# 标题1
## 标题2




2. 使用 html 标签
## <a name='TableOfContent'> Table of Content </a>
[1. Anchors](#Anchors)  
[2. Block Elements](#BlockElements)  

## <a name="Anchors"> 1. Anchors </a>
See [Table of Content](#TableOfContent) above.
## <a name="BlockElements"> 2. Block Elements </a>



注意
- 定义链接的时候，# 后必须与目标链接中的 name 保持一致
- 链接名称不能包含空格，可用 CamelCase 风格，或者 -(minus-sign) 连接
- 可以实现向后和向前跳转



========================================
纯python版的markdown解析器 mistune 的使用和学习
----------------------------------------
https://github.com/lepture/mistune
https://mistune.readthedocs.io/en/latest/

Block Level
Span Level
Footnotes
Lexers

md转html的代码:
import mistune
mistune.markdown('I am using **mistune markdown parser**')
# output: <p>I am using <strong>mistune markdown parser</strong></p>




只需要从github扒下来一套皮肤样式。




========================================
为什么使用reStructuredText
----------------------------------------
https://www.liangzl.com/get-article-detail-121398.html


经过仔细研究和比较，我终于从reStructuredText, Markdown, Wiki和Docbook中选择了reStructedText作为主要的写文档的工具。原因是：

 

reStructuredText(简称为rst)是一个WYSIWYG的plain text文本格式。因此rst与docbook比较,易于书写和阅读。
和同样是WYSIWYG的Markdown相比，rst支持工具更加丰富一些。并且rst还在不停的演变和发展，支持的功能更多一些，例如公式和网站发布。
 rst是python用以书写文档的工具。详细信息可以从http://docutils.sourceforge.net/rst.html获得。官方使用docutils来转换rst文档。

docutils在win32环境下使用有些别扭，要求在docutils/tools路径下执行转换命令：

python rst2html.py <source_file> <html_file>

 

可以用rst2latex.py转换为latex文档，然后使用pdflatex转换为pdf格式。

如果使用vim来编辑rst文档，一个plugin vst 可以很好的帮助大家。





https://my.oschina.net/asbamboo/blog/3027390




========================================
使用Sphinx生成文档
----------------------------------------
Sphinx是一个基于Python的文档生成项目。最早只是用来生成Python的项目文档，但随着这个项目的逐渐完善，很多非Python的知名项目也采用Sphinx作为文档写作工具，甚至完全可以用Sphinx来写书。


引用一段Sphinx生成文档的优点包括：

丰富的输出格式: 支持输出为HTML，LaTeX (可转换为PDF)， manual pages(man), 纯文本等若干种格式
完备的交叉引用: 语义化的标签,并对 函式,类,引文,术语以及类似片段消息可以自动化链接
明晰的分层结构: 轻松定义文档树,并自动化链接同级/父级/下级文章
美观的自动索引: 可自动生成美观的模块索引
精确的语法高亮: 基于 Pygments 自动生成语法高亮
开放的扩展: 支持代码块的自动测试,自动包含Python 的模块自述文档,等等
其实上面这么多功能，最本质的核心还是在于Sphinx采用了轻量级标记语言中的reStructuredText作为文档写作语言。reStructuredText是类似Wiki，Markdown的一种纯文本标记语言，所有Sphinx的文档其实都是扩展名为rst的纯文本文件，然后经过转换器转换为各种输出格式，并且可以配合版本控制系统轻松实现Diff。


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------
