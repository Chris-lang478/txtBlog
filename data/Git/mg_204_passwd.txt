密码管理的方法和技术
密码的研究

注意：
	这里不保存密码明文！！
	也不保存密码密文！
	只举例子，解释密码保存的原则、方法和技巧。



========================================
加密基本原理
----------------------------------------
1. 本文强调的是可逆的加密技术，因此不考虑hash。
也就是给一个密码，加密后保存密文。
如果知道原理或加密方式，能从密文恢复原文。

	不能在各个网站使用统一的密码，否则一个泄密，全泄密！



2. 加密方式的命名
技术编号前缀+版本后缀:密文  //秘钥
说明文档规定:
	密文中空格是否有意义？
	加密和解密使用哪种编程语言？一般本文会给出源代码。
	是否有秘钥？秘钥的位置等信息。



3. 为了方便，本文主要采用 js 实现。
特殊的，也不排除其他语言。
包括但不限于 
js
shell
c 
python
R
Perl
Go





4. 对于常用的密码，主要是自己想出一个密码，然后加密。
对于不常用的密码，可以考虑生成密码，记录生成过程。

大小写字母、数字、特殊符号，长度不低于8位。



网友设计的密码：
	经典的半似日兮半似月：1/2ri1/2yue
	用元素周期表，非常管用。
	我们化学老师叫我们用复杂的化学式或者化学方程式做密码比如NH42FeSO426H2O
	
	一般的密码是一些简单的组合后面跟一个+1s，这样一来密码一下就复杂了
	最好记得就是中文拼音阿，你妈是个大菠萝，Nimashigedaboluo，之类的。
	竹外桃花三两枝，春江水暖鸭先知：Zwth32zCjsnyxz；
	毕竟西湖六月中，风光不与四时同：BjxhJun.zFg!y4st。
	我的理想当密码: work955salary100M
	我的密码是shabitengxun
	
	圆周率后1至6位，7至12位，13至18位等等多个密码忘了就查下圆周率就好
	还以为网站名称加固定组合只有自己想得到，既然可恶的小编把这些都公布了，看来也不安全了
		我就是网站＋固定组合＋字符，比如QQ用qq@123%？#，jd用jd@123%？#
	
	我的密码都是将一串有意义的10进制数+字母 转换为 16进制数+字母
	excel随机数转16进制。打印出来，贴家里柜子里面。。。

	说得好，我选择脸滚键盘+纸质笔记本
	修改密码很容易造成密码体系崩塌的
	写一段话，哈希指纹当密码。






5. 高保密级别的密码怎么管理？
(1) https://www.zhihu.com/question/19984199/answer/13560822
以前在微软里面混的时候，权限大的密码都是每90天一换，且之前使用过的都不能在使用。密码的记忆都是口头告诉，没有落实在文档里，就是怕被黑了。     就单独说密码的管理的话，考虑双因子或者多因子方法吧。单一密码很容易出现问题。     比如，密码+动态密码+数字证书+生物信息等。    或者就干脆麻烦点，每次不记忆密码，计算出来，比如自己的身份证号异或老婆的身份证号等。


(2) 产品参考
https://www.passwordstore.org/






========================================
|-- 基础是ascii码: 将网址用js编码成ascii传递，在server端php还原成url
----------------------------------------
########################
将字母转为ascii的方法：
var str = "A";
str.charCodeAt();  // 65

将ascii码转为对应字母的方法：
var num = 97;
String.fromCharCode(num);  // 'a'
########################

<?php 
$str2=ord('S'); //将字母转为ascii的方法：
echo $str2; //返回值为83 

$str1=chr(88); //将ascii码转为对应字母的方法：
echo $str1; //返回值为X  
?> 
########################


1.ascii 范围
控制字符是 0-31,127 共33个字符。
32 是空格。

for(var i=0;i<128;i++){
        str=String.fromCharCode(i); 
        document.write(i+" "+str+"<br>")
}

编码  字符
33 !
34 "
35 #
36 $
37 %
38 &
39 '
40 (
41 )
42 *
43 +
44 ,
45 -
46 .
47 /
###############0-9
48 0
49 1
50 2
51 3
52 4
53 5
54 6
55 7
56 8
57 9
############### 几个标点符号
58 :
59 ;
60 <
61 =
62 >
63 ?
64 @

###############A-Z
65 A
66 B
67 C
68 D
69 E
70 F
71 G
72 H
73 I
74 J
75 K
76 L
77 M
78 N

79 O
80 P
81 Q
82 R
83 S
84 T
85 U
86 V
87 W
88 X
89 Y
90 Z

############### 几个标点符号
91 [
92 \
93 ]
94 ^
95 _
96 `

###############a-z
97 a
98 b
99 c
100 d
101 e
102 f
103 g
104 h
105 i
106 j
107 k
108 l
109 m
110 n
111 o
112 p
113 q
114 r
115 s
116 t
117 u
118 v
119 w
120 x
121 y
122 z

############### 几个标点符号
123 {
124 |
125 }
126 ~
127  是 DEL (delete) 删除





2. js编码url为ascii码
url1="http://www.baidu.com"
url2="https://ichef.bbc.co.uk/wwhp/144/cpsprodpb/17206/production/_107962749_lowry_getty.jpg"

function string2ascii(str){
        num=[]
        for(var i=0;i<str.length;i++){
                num.push(str.charCodeAt(i))
        }
        return(num.join('_') )
}
string2ascii(url2)
##
"104_116_116_112_115_58_47_47_105_99_104_101_102_46_98_98_99_46_99_111_46_117_107_47_119_119_104_112_47_49_52_52_47_99_112_115_112_114_111_100_112_98_47_49_55_50_48_54_47_1
12_114_111_100_117_99_116_105_111_110_47_95_49_48_55_57_54_50_55_52_57_95_108_111_119_114_121_95_103_101_116_116_121_46_106_112_103"




3.在php中接收ascii码，还原为url

<?php
echo "<pre>";
$ascii_url=$_GET['url'];
print_r($ascii_url);

echo "<br>";

// 
function ascii2str($ascii_url){
        $arr=explode("_",$ascii_url);
        #print_r($arr);
        
        $url="";
        for ($x=0; $x<count($arr); $x++) {
                $url.=chr($arr[$x]);
        }
        //echo "url=$str<br>";
        return $url;
}
var_dump( ascii2str($ascii_url) );

访问：
http://localhost/index.php?url=104_116_116_112_115_58_47_47_105_99_104_101_102_46_98_98_99_46_99_111_46_117_107_47_119_119_104_112_47_49_52_52_47_99_112_115_112_114_111_100
_112_98_47_49_55_50_48_54_47_112_114_111_100_117_99_116_105_111_110_47_95_49_48_55_57_54_50_55_52_57_95_108_111_119_114_121_95_103_101_116_116_121_46_106_112_103

页面返回：
string(86) "https://ichef.bbc.co.uk/wwhp/144/cpsprodpb/17206/production/_107962749_lowry_getty.jpg"

已经在php上还原结果。



========================================
|-- 字符操作: 求余、映射、拆分、转换
----------------------------------------
映射：字母表 映射出 0-26 ，这是最常见的方法了。

转换：指定几个字符变另一个字符
	Y->6
	B->8

拆分: 两两组合，123455-->12 34 55

求余: 诸位对5求余数 12345678 -->12340123
	12%6=0，34%6=4，56%6=2。

映射+求余这招很赞，这是个非常好的算法，在熟悉后能很快的心算出密码来！






========================================
|-- DES算法加密 //todo
----------------------------------------

DES算法具有极高安全性，除了用穷举搜索法对DES算法进行攻击外，还没有发现更有效的办法。而56位长的密钥的穷举空间为2^56，这意味着如果一台计算机的速度是每一秒钟检测一百万个密钥，则它搜索完全部密钥就需要将近2285年的时间。


ref: https://zhuanlan.zhihu.com/p/94208042






========================================
|-- AES 加密方法 //todo
----------------------------------------

https://zhuanlan.zhihu.com/p/78913397



========================================
|-- RSA: 非对称加密 //todo
----------------------------------------

https://www.zhihu.com/question/304030251/answer/543201982






========================================
可用版本
----------------------------------------





========================================
|-- base_n: 基础版，就是字符与ascii码互换，并向后移动n位
----------------------------------------
base_3: ascii码向后移动3位，最原始的凯撒加密——字母向后偏移3位。
移动0位就是原始密码。


test


<script>
//输入字符串，输出每个字符的ascii码组成的数组
function string2ascii(str){
	var num=[];
	for(var i=0;i<str.length;i++){
		num.push(str.charCodeAt(i))
	}
	//return(num.join('-') )
	return(num)
}
//string2ascii('*#06#') 
//[42, 35, 48, 54, 35]


//输入ascii码数组，输出字符串
function ascii2string(arr){
	var string=[]
	for(var i=0;i<arr.length;i++){
		string.push( String.fromCharCode(arr[i]) )
	}
	return(string.join('') )
}
//ascii2string( [42, 35, 48, 54, 35] ) //"*#06#"




/********************
* 核心加密算法: 配套2个，可逆变换
* base就是不加密，仅做ascii码原样输出
* 以后需要写的就是这些具体的加密实现了
* 加密: input numberArr, output: numberArr
* 解码: input numberArr, output numberArr
********************/

// 控制范围 [33, 126]
function inRange(num){
	while(num>126){
		num = num-126+32;
	}
	while(num<33){
		num = 127- (33-num);
	}
	return num;
}

/********************* base_0 begin ********************/
//原理: 输出ascii码数组，shift正，则ascii+1
function base(numberArr, shift=0){
	for(var i in numberArr){
		var num=numberArr[i] + shift%126;
		numberArr[i]= inRange(num);
	}
	return(numberArr)
}
//base([42, 35, 48, 54, 35])
//(5) [42, 35, 48, 54, 35]


//解密算法名字，加前缀 Reverse_ ，输出ascii码数组，shift正，则ascii-1
function Reverse_base(numberArr,shift=0){
	for(var i in numberArr){
		var num=numberArr[i]-shift%126;
		numberArr[i]=inRange(num);
	}
	return(numberArr)
}
//Reverse_base([42, 35, 48, 54, 35])
//(5) [42, 35, 48, 54, 35]
/********************* base end ********************/



// 通用加密外壳
function encrypt(originString, method){
	var method0=method||"base_0"
	var method=method0.split("_")[0];
	var shift=method0.split("_")[1];
	
	var arr=string2ascii(originString);
	var encryArr=eval(method)(arr, shift)
	//return(encryArr.join('-') +"@+@"+method0)
	return(ascii2string(encryArr) +"@+@"+method0) //返回字符串
}
//encrypt('*#06#', 'base_1')  //"42-35-48-54-35@base_0"
//"+$17$@+@base_1"

// 通用解密外壳
function decipher(paperStr){
	var arr=paperStr.split('@+@'); //如果密文中出现相同字符串，则解码失败。
	var method0=arr[1]
	var method=method0.split("_")[0];
	var shift=method0.split("_")[1];
	
	
	//var origin = eval('Reverse_' + method)( arr[0].split('-'), shift);
	var origin = eval('Reverse_' + method)( string2ascii(arr[0]), shift);
	return( ascii2string(origin) )
}
//decipher("42-35-48-54-35@base_0")  //"*#06#"
//decipher("+$17$@+@base_1")  //"*#06#"


// test
var test=function(pass, method){
	var log=console.log;
	//var pass='#~19abcXYZ|}';
	var pass2=encrypt( pass, method);
	var pass3=decipher(pass2);
	log("明文: ", pass);
	log('\t密文: ',pass2);
	log("\t解码后是否和原来相等: ", pass==pass3);
}
test('#~19abcXYZ|}', 'base_-10') //wt'/WXYNOPrs@+@base_-10
test('#~1|}', "base_1")          //$!2}~@+@base_1
test("bd.123456", "base_1")  //ce/234567@+@base_1
test("bd.123456", "base_2")  //df0345678@+@base_2

</script>



========================================
|-- multiTable-1: 多表加密
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


