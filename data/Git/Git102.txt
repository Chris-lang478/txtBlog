git常用场景


版本管理三国志 (CVS, Subversion, git)解答了为什么选择git？
http://www.cnblogs.com/vamei/archive/2013/02/21/2918069.html


========================================
文整理了git操作中常用的命令，使用场景及命令持续补充中。。。
----------------------------------------

一. 初始化一个Git仓库，添加文件到该仓库
操作步骤：
1. 创建一个文件夹gitTest，进入该文件夹，执行git init命令。
2. 添加文件到git仓库，使用git add <file>添加，git commit提交。

二. 查看提交记录
操作步骤：
1. 进入gitTest文件夹，执行git log命令，如果内容过多可以采用git log —pretty=oneline

三. 如何回退到指定版本
HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100，表示上100个版本
操作步骤：
1.进入gitTest文件夹，执行git log命令，查看commit信息，得到commit命令的Id,
执行 git reset —hard <commitId>就可以穿越到指定版本。

四. 如何查看命令的历史
操作步骤：
1. 执行git reflog查看命令历史

五. 当你在工作区改错了文件，想直接丢弃工作区的修改？
操作步骤：
1. 执行命令git checkout — <file>，丢弃文件的修改

六. 当你不只是改错了文件，而且还添加到了暂存区，如果想丢弃修改？
操作步骤：
1. 执行命令git reset —HEAD <file>，从暂存区删除
2. 执行命令git checkout — <file>，丢弃文件的修改



========================================
git 查看远程分支、本地分支、删除本地分支
----------------------------------------
http://blog.it985.com/753.html
1 查看远程分支
  $ git branch -r #只有远程分支
  $ git branch -a #远程和本地分支。前面带*号的代表你当前工作目录所处的分支
2 查看本地分支
  $ git branch
3 创建分支
   git branch test
   或者
   git checkout -b test #创建test分支并切换到该分支
4 切换分支到test
  $ git checkout test
5 删除本地分支   
  $ git branch -d test
  $ git branch #再查看分支，该分支已经删除
6 拉取远程分支并创建本地分支
http://firecloudphp.blog.163.com/blog/static/25082207020171973136710/
方法一:git checkout -b 本地分支名x origin/远程分支名x
使用该方式会在本地新建分支x，并自动切换到该本地分支x。

方式二:git fetch origin 远程分支名x:本地分支名x
使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。




========================================
使用Git比较本地分支版本和远程版本的不同之处?
----------------------------------------
1.假定远端库名为 origin, 你要比较的本地分支为 test, 远端分支为 xxx
# 获取远端库最新信息
$ git fetch origin

# 做diff
$ git diff test origin/xxx

2.合并远程分支
git merge origin/xxx 



========================================
更新远程代码到本地仓库【推荐】
----------------------------------------
http://firecloudphp.blog.163.com/blog/static/250822070201714104426191/


方式一
1. 查看远程仓库
$ git remote -v
eoecn   https://github.com/eoecn/android-app.git (fetch)
eoecn   https://github.com/eoecn/android-app.git (push)
origin  https://github.com/com360/android-app.git (fetch)
origin  https://github.com/com360/android-app.git (push)
su@SUCHANGLI /e/eoe_client/android-app (master)
从上面的结果可以看出，远程仓库有两个，一个是eoecn，一个是origin

2 ,从远程获取最新版本到本地
$ git fetch origin master
From https://github.com/com360/android-app
 * branch            master     -> FETCH_HEAD
su@SUCHANGLI /e/eoe_client/android-app (master)
$ git fetch origin master 这句的意思是：从远程的origin仓库的master分支下载代码到本地的origin master

3. 比较本地的仓库和远程参考的区别
$ git log -p master.. origin/master
su@SUCHANGLI /e/eoe_client/android-app (master)
因为我的本地仓库和远程仓库代码相同所以没有其他任何信息

4. 把远程下载下来的代码合并到本地仓库，远程的和本地的合并
$ git merge origin/master
Already up-to-date.
su@SUCHANGLI /e/eoe_client/android-app (master)
我的本地参考代码和远程代码相同，所以是Already up-to-date

以上的方式有点不好理解，大家可以使用下面的方式，并且很安全





方式二
1.查看远程分支，和上面的第一步相同

2. 从远程获取最新版本到本地
$ git fetch origin master:temp
From https://github.com/com360/android-app
 * [new branch]      master     -> temp
su@SUCHANGLI /e/eoe_client/android-app (master)
git fetch origin master:temp 这句命令的意思是：从远程的origin仓库的master分支下载到本地并新建一个分支temp

3. 比较本地的仓库和远程参考的区别
$ git diff temp
su@SUCHANGLI /e/eoe_client/android-app (master)
命令的意思是：比较master分支（个人理解为“本地master分支”）和temp分支的不同
由于我的没有区别就没有显示其他信息

4. 合并temp分支到master分支（个人理解为“本地master分支”）
$ git merge temp
Already up-to-date.
su@SUCHANGLI /e/eoe_client/android-app (master)
由于没有区别，所以显示Already up-to-date.
合并的时候可能会出现冲突，有时间了再把如何处理冲突写一篇博客补充上。
5.如果不想要temp分支了，可以删除此分支
$ git branch -d temp
Deleted branch temp (was d6d48cc).
su@SUCHANGLI /e/eoe_client/android-app (master)
如果该分支没有合并到主分支会报错，可以用以下命令强制删除git branch -D <分支名>

总结：方式二更好理解，更安全。 
对于pull也可以更新代码到本地，相当于fetch+merge，多人协作的话不够安全。




========================================
git克隆远程项目并创建本地对应分支
----------------------------------------
1.克隆远程库，只有master分支
$ git clone git@github.com:miostudio/bioMooc.com.git
$ git branch 

2.查看远程分支 
$ git branch -r
  origin/HEAD -> origin/master
  origin/gh-pages
  origin/master

3.建立本地对应分支
git checkout --track 或者 git checkout -b
如：
git checkout --track  origin/dev-xxx
git  checkout -b dev-xx  origin/dev-xxx

$ git checkout -b gh-pages origin/gh-pages
Branch gh-pages set up to track remote branch gh-pages from origin.
Switched to a new branch 'gh-pages'

4.建立分支后，默认会进到新建的分支里，如果想进去其他分支，可以通过
git checkout 加分支名切换
如:
git checkout master


========================================
怎么查一个文件谁修改过及修改时间？
----------------------------------------
1.git log --pretty=oneline 文件名 
查找 文件修订历史。列出一系列sha1号和评论。

2.git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e
查具体修改时间等信息。



========================================
git统计某一名开发者有效代码总行数以及历史删除、增加的总行数
----------------------------------------
1.代码量（按照行统计）
$ git log --author="jimmymall" --pretty=tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "增加的行数:%s 删除的行数:%s 总行数: %s\n",add,subs,loc }'

增加的行数:12705 删除的行数:2343 总行数: 10362

该命令统计一名开发者在当前分支的历史上所作出的全部增加代码的行数量，已经删除过的总的代码行数量，以及最后该名开发者最终保留在分支中的代码总行数。
https://blog.csdn.net/zhangphil/article/details/79956706


$ git log --author="$(git config --get user.name)" --pretty=tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }' -





2. 扫描 Log 单独统计每个人的增删行数加强版
$ git log --format='%aN' | sort -u | while read name; do echo -en "$name\t"; git log --author="$name" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }' -; done

Dawn    added lines: 3464, removed lines: 588, total lines: 2876
dawnEve added lines: 28663, removed lines: 2098, total lines: 26565
jimmy   added lines: 42551, removed lines: 4985, total lines: 37566
Jimmy   added lines: 53771, removed lines: 13383, total lines: 40388
jimmymall Note  added lines: 3, removed lines: 0, total lines: 3



3.统计文件夹内代码行数
$ cd file
$ find . -name "*.java" -or -name "*.html" -or -name ".css" -or -name "*.js" |xargs grep -v "^$"|wc -l




========================================
windows下git显示文件被修改，实际没有改动的问题解决办法
----------------------------------------

解决方案1：
在windows中的git bash中运行以下命令：
git config --global core.autocrlf true

https://blog.csdn.net/qq719365064/article/details/52775860



解决方案2：
https://blog.csdn.net/Winne_Shen/article/details/80511480
1.问题：从git上拉取服务端代码，然后只修改了一处地方，准备提交时，用diff软件查看，却发现整个文件都被修改了。这是git自动转换换行符导致的问题。 

2.原因
不同操作系统使用的换行符是不一样的。Unix/Linux使用的是LF，Mac后期也采用了LF，但Windows一直使用CRLF【回车(CR, ASCII 13, \r) 换行(LF, ASCII 10, \n)】作为换行符。而git入库的代码采用的是LF格式，它考虑到了跨平台协作的场景，提供了“换行符自动转换”的功能：如果在Windows下安装git，在拉取文件时，会自动将LF换行符替换为CRLF；在提交时，又会将CRLF转回LF。但是这个转换是有问题的：有时提交时，CRLF转回LF可能会不工作，尤其是文件中出现中文字符后有换行符时。 


3.解决方案
(1).禁用git的自动换行功能： 
在本地路径C:\ Users\ [用户名] \ .gitconfig 下修改git配置[core]，如果没有就直接添加上去：

[core]
	autocrlf = false
	filemode = false
	safecrlf = true

git bash命令行也可以修改，最终也是修改.gitconfig配置文件： 分别执行：
git config --global core.autocrlf false
git config --global core.filemode false
git config --global core.safecrlf true

(2).配置IDE开发环境，将它的换行格式指定为LF，以android studio为例： 








========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------

