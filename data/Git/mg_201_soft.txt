mg_201_soft

笼统的软件研发管理，尽量不关联具体技术。
有时候和人员管理分类是两可的。



========================================
怎么提高软件研发质量和效率 (2014-05-25 13:05:18)
----------------------------------------
http://blog.sina.com.cn/s/blog_46402b230101gi0y.html

以下是国内研发团队普遍常见问题，大家说说各个岗位怎么提高质量和效率吧。
一、产品设计
1、业务需求不会解构洞察，客户提什么就做什么，业务需求和软件功能要求混在一起
2、不会建立业务模型和产品模型，客户提什么就做什么
3、不会理性需求排级，不做数据度量论证/也没有数据可度量/也不知道度量哪些合理数据，客户谁权力大谁态度恶劣谁叫的声大，就先满足谁的需求
4、不会增量设计，只会撕开个口子强塞进去
5、场景不会分离，各种场景混合在一起
6、不考虑非功能性系统需求

二、项目管理
1、团队成员属于各自部门，成员受部门经理和项目经理双重领导
2、项目团队不坐在一起，测试坐在测试部、开发坐在开发部
3、不理解方案，不知道最佳方案，不知道如何合理评估工时，出了异常问题不知道如何做正确决策才算正确合理
4、不会资源管理、排产管理
5、推动力、协调调度、沟通说服能力不足
6、不知道如何正确开日立会、日立会的目的和重点是什么
7、不知道怎么做合适的项目报告

三、开发
1、不接触客户，不理解需求，不理解功能为啥要这样设计
2、开发期才介入项目
3、代码不会按场景分离
4、不会代码设计，流程和细节都在一个函数，功能多复杂代码就多复杂
5、不会进行接口设计、函数输入输出参数设计、异常日志报告与记录、返回值设计
6、不会面向对象编程，业务逻辑怎样就怎么写代码
7、不会单元测试

四、测试
1、不接触客户，不理解需求，不理解功能为啥要这样设计
2、测试期才介入项目
3、不会技术，阅读不懂专业测试工具产生的专业报告，不会自己开发或定制专业测试工具，也看不懂代码，也不会跟踪查询代码执行和数据变化

五、交付
没有灰度上线框架与工具
研发团队既负责研发，又负责实施上线/数据处理，又负责日常客户使用过程中的突发问题处理

六、运维
没有应用软件运维团队，只有基础设施运维团队
没有专业运维监控报警工具，基础设施运维团队自己不会开发软件


========================================
怎么入门编程？  2015-11-30
----------------------------------------
http://agetouch.blog.163.com/blog/static/2285350902015103093419886/

1.多敲代码是关键，看视频或书的时候不要找源码，自己敲出来。
2.打字速度：慢了肯定不行，一开始就要学习盲打，到最后打字速度要至少和思考的速度一致。
3.一定不要感叹难！简单的东西不值钱，相信大家都懂。我们学习一个东西，不是因为它难，而是因为它强大。
4.花多少时间？时间的投入是必要条件。精通一个东西需要投入至少一万个小时的有效时间。意味着每天投入10个小时需要连续3年。否则总会磕磕碰碰，似懂非懂。建议学习的时候只打开必须的软件，关掉QQ、360等无关的东西，如果你一会看看电影，一会看看空间，一会看新闻，请自觉减掉这些时间。学习确实很枯燥，随时有一条路你可以选择，就是放弃。达到一千小时基本就入门了。
5.什么是入门？入门不是一个时间概念，是指你有一定的自学能力了。自学能力是指对这个有一定的理解，熟练常用用法，很多高级概念不精通，但已经基本熟悉或知道了，摆脱了一问三不知的境地。这个阶段可以通过自身努力，寻找资源，有自己的学习方式，能做到逐步提高。

6.我是否有自学能力？这个很难判断，但是可以通过历史判断未来。问自己四个问题：
	1).你有没有成功自学一门技术，并达到很高的水准？如超过了80%的圈内人。这个是决定性的。
	2).每当与别人的判断不一致时，你的胜率是多少？
	3).你擅长独立思考并总结出适合自己的方法吗？
	4).你坚持做一件事，有没有超过两年时间？
怎么入门编程？ 图略。
 
	自学方法本身也是一个自我修正调整的过程。

7.什么是好的学习习惯？每天如何平衡做项目和探索新知识的时间？如何关注新知识？代码如何管理分享和协作？学着后面忘着前面怎么办？……对知识的管理是技术人员毕生的事业。
	- 能用自己的语言叙述出来，并且让不懂的人搞懂，才算真的懂。
	- 很久不用的技术能快速（当初学习时1%的时间）找回感觉，只能靠笔记，当然是电子笔记，比如博客。


8.我是否只看我关心的一个技术就行了？我的理解是在精力足够的情况下，能多学一点是一点。它会扩充你的视野，到后期加快你的学习速度。前段和后端是藕断丝连的，数据库也是贯穿始终的。到复杂场景的时候，数据局结构、算法也是不可避免的。大项目中设计模式也是必不可少的。非常规需求中离散数学也是需要重修的。团队协作和管理肯定也会是个坎……越学越感觉自己的无知是正常的。

9.怎么入门编程？
入门看视频，提高看书籍，飘升做项目。
老练研开源，高手读外文，大牛讲低调~

10.怎么找视频？
百度。很多东西都是靠搜索出来的。
商业机构的资源也不错，就看你怎么得到了。
推荐网站：慕课网。网易云课堂。百度贴吧中贴出来的百度云视频链接。达内。传智播客。


11.怎么找书？
百度贴吧中贴出来的百度云pdf书链接。新浪微盘。
牛人们的博客也是一大资源：百度搜索话题、iteye、csdn、博客园、简书、微信搜索(公众号)、GitHub、。

12.怎么找项目？
这个给钱就做。不给钱在开始阶段可以练练手。
注意一定要留一手，免得代码交付了却收不到钱。

13.怎么找开源？
开源中国，github等都有。看能力和时间找着做。

14.我不会外文可以吗？
因为最先进的东西总是英文，翻译过来的都晚好几年了。不过我们使用的一般都是稳定版本，大多数人不需要太追新。也就是不会英语当码农妥妥的，但走不远。不过，大多数人都走不远。

15.为什么讲低调？
我也不懂，还没到这个层次。不过，我猜测他们一般不写带代码了，整天画画设计图，管理一下项目进展，制定一下标准specs，参加会议讲话什么的，基本不再对具体代码做评论了，所以在小白看来是低调了。

16.遇到瓶颈了，怎么提高？
基础不牢，地动山摇。
温故而知新。
刻意练习的程度决定着能达到的高度。刻意练习，就是找到自己的薄弱环节，专门大量练习，这个过程很痛苦，但最有效。

17.你感觉这个世界对新手很不友好？
那就对了，有人不停地问你拼音和英语字母（不是英语，是英语字母）的书写和发音，你烦不烦？
等你入门了再看看当时你问的问题，你想想你会回答多少？
所以，感谢愿意回答你傻瓜问题的人。你骂人家，人家收你钱了吗？
那新手应该怎么办？
没见过冰岛语，就想用冰岛语写文章?!磨刀不误砍柴工。
买本书，从第一页看起。按部就班，是最快的学习方法。

18.我现在学晚吗？
种一棵树最好的时间是十年前，其次是现在。

19. 我感觉学不会？
所谓的尽力，就是为了做成一件事而相尽办法，不择手段。
自己衡量，感觉真的已经尽力，那就放弃吧。毕竟每个人天资不同，地球上能写操作系统的人也不多。


建议：
程序员整天给别人写软件，给自己写的软件不多：
- 学习git的使用，记录自己的代码。
- 学习linux的使用，命令行才是写代码最常用的格式。
- 学习一个重量级（如eclipse）一个轻量级的文本编辑器（如notepad++、sublime等）。


微软的知识体系自成一家，建议看微软的msdn。

一个生信manual网站：https://www.plob.org/article/258.html





========================================
----------------------------------------


========================================
好的文案会引发人们的联想
----------------------------------------
看这段流传很广的广告文案：
　　“你写PPT时，阿拉斯加的鳕鱼正跃出水面，你看报表时，梅里雪山的金丝猴刚好爬上树尖。你挤进地铁时，西藏的山鹰一直盘旋云端。”

对比下面另外一个版本：
　　“你写PPT时，别人在旅行；你看报表时，别人在旅行；你挤地铁时，别人在旅行。”

表达同样的意思，第一段话让人动容，第二段话让人瞌睡。这是为什么呢？因为大脑中，处理画面的皮质区域非常庞大，我们可以非常轻松地处理大量的场景视觉信息。

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------
