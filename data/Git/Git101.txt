git使用详解 

http://firecloudphp.blog.163.com/blog/static/250822070201573072450693/

========================================
一.git文件状态变化
----------------------------------------	
  Untracked            UnModified            Modified            Staged
     |                     |                    |                  |   
     |---Add the file -------------- ------------- --------------->|  
     |                     |                    |                  |      
     |                     |---Edit the file--->|                  |      
     |                     |                    |                  |      
     |                     |                    |--Stage the file->|      
     |                     |                    |                  |      
     |<--Remove the file---|                    |                  |      
     |                     |                    |                  |      
     |                     |<--------- ----------- -------Commit---|      
     |                     |                    |                  |  

  状态说明：
            Untracked: 刚新加的文件，还没有纳入git管理范围
           UnModified: 已经committed的文件
             Modified: 已经committed的文件，通过vi等修改后，就变成Modified
               Staged: git add 后的文件

  状态转换:
      Untracked->Staged: 通过git add 来完成
   UnModified->Modified: 修改文件内容来完成，比如vi命令
       Modified->Staged: 通过git add 来完成
  UnModified->Untracked: 通过git rm 来完成    
     Staged->UnModified: 通过git commit 来完成
                                      
		
# 工作区、暂存区





========================================
|-- 查看提交记录 git log
----------------------------------------

基础命令 
git log 


限制显示3条
git log -n 3


只用一行显示(一行时，不显示作者和日期)
git log --oneline

图形化显示
git log --graph 


图形化、一行简略显示
git log --graph --decorate --oneline


显示所有分支
git log --graph --decorate --oneline --simplify-by-decoration --all
参数解释:
--decorate： 标记会让git log显示每个commit的引用
--oneline： 一行显示
--simplify-by-decoration：只显示被branch或tag引用的commit
--all: 所有分支



========================================
二.正常流程
----------------------------------------
  2.1 git clone 从远程拉一个工程下来  
    #git clone git@github.com:sotrip/gittest.git	     
    Cloning into 'gittest'...
    warning: You appear to have cloned an empty repository.
    Checking connectivity... done. 
  
  2.2 增加一个文件
    #vi 1.txt  里面内容如下:
    the first line
  
  2.3 git status 查看状态
    #git status
    On branch master            //表示我们目前在master分支上
    
    Initial commit
    
    Untracked files:            //有哪些文件是Untracked状态，有1.txt
      (use "git add ..." to include in what will be committed)
    
    	1.txt
    
    nothing added to commit but untracked files present (use "git add" to track)
  
  
  2.4 git add 把文件从Untracked-->Staged
    #git add 1.txt  成功后，没有输出
    #git status     再次查看
    On branch master
    
    Initial commit
    
    Changes to be committed:       //表示1.txt已经是staged了，可以被提交了
      (use "git rm --cached ..." to unstage)  //如果不想提交了，可以用git rm --cached 1.txt
    
    	new file:   1.txt
  
  
  2.5 git rm --cached  文件已经是staged了，但想要退回原来的状态 
    #git rm --cached 1.txt
    rm '1.txt'
    
    #git status       再来看又回来2.3这一步了
    On branch master
    
    Initial commit
    
    Untracked files:
      (use "git add ..." to include in what will be committed)
    
    	1.txt
    
    #git add 1.txt  我们还是再加上
    #git status
    On branch master
    
    Initial commit
    
    Changes to be committed:     //1.txt 又改为staged状态 准备提交
      (use "git rm --cached ..." to unstage)
    
    	new file:   1.txt

  
  2.6 git commit 提交
    #git commit -m "first commit"          //-m后面是我们这一次提交的注释
    [master (root-commit) e6b0e7d] first commit
     1 file changed, 1 insertion(+)
     create mode 100644 1.txt
   
   
  2.7 git push 把master分支的内容提交到远端
    #git push origin master
    Warning: Permanently added the RSA host key for IP address '*.*.*.*' to the list of known hosts.
    Counting objects: 3, done.
    Writing objects: 100% (3/3), 214 bytes | 0 bytes/s, done.
    Total 3 (delta 0), reused 0 (delta 0)
    To git@github.com:sotrip/gittest.git
     * [new branch]      master -> master 




========================================
|-- git 开发简单流程
----------------------------------------
1.主干master稳定

2.切出feature分支br1, br2
3.br1，br2独立前进：commit
4.master合稳定功能，前进： master-second-commit

5.br1合入master代码：rebase方式
6.br2合入master代码：merge

7.br1，br2前进：commit
8.br1, br2稳定准备合入master
9.master merge br1/br2
10.功能完毕，回到第2步骤循环往复，不断迭代bug

https://blog.csdn.net/zhuge1127/article/details/82494783




========================================
三.git diff 查看变化
----------------------------------------
1.
  命令概括
    #git diff           查看 Modified的文件，做了哪些修改
    #git diff --staged  查看 Staged的文件，做了哪些修改
  
  
  操作实例
    #vi 1.txt    在后面增加一行,变成如下
    the first line
    the second line
    
    #git status    
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes not staged for commit:       //这个表示1.txt已经变为Modified了，not staged
      (use "git add ..." to update what will be committed)
      (use "git checkout -- ..." to discard changes in working directory)
    
    	modified:   1.txt
    
    no changes added to commit (use "git add" and/or "git commit -a")
    
    #git diff      查看Modified的文件，修改了哪些地方
    diff --git a/1.txt b/1.txt
    index 137b7fd..067030b 100644
    --- a/1.txt
    +++ b/1.txt
    @@ -1 +1,2 @@
     the first line
    +the second line
    
    #git add 1.txt       //把1.txt加入到staged中
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD ..." to unstage)
    
    	modified:   1.txt
    	
    #git diff  这个时候不会输出任何东西，因为没有Modified的文件了	
    #git diff --staged    //查看staged的文件和上一次commit有哪些修改
    diff --git a/1.txt b/1.txt
    index 137b7fd..067030b 100644
    --- a/1.txt
    +++ b/1.txt
    @@ -1 +1,2 @@
     the first line
    +the second line
#





========================================
|-- 查看某个文件和某个历史版的变化，项目整体回到某历史版本并测试，再回现在
----------------------------------------
(1)使用git log -n 20 查看历史版本的commit号
commit 6be3b26be318bfef7d5745b83ffd1d72d3b08757
Author: jimmy <JimmyMall@live.com>
Date:   Fri Aug 16 16:38:40 2019 +0800

    v0.0.7-5 txt页面默认是纸质书背景

commit fb4d271705dc96c752a13b21b131c05dbb0e8a12
Author: jimmy <JimmyMall@live.com>
Date:   Fri Aug 16 14:39:58 2019 +0800

    v0.0.7-4 fix bug: txt.js 目录单击时锚点错了一行，已经微调.
根据comment注释，锁定范围，就是版本号v0.0.7-4了(记录commit fb4d2717)。


(2) 查看static/js/txt.js 和这两个版本号的变化。
$ git diff fb4d  static/js/txt.js


(3) 回到这个版本，运行并查看效果
1)先查看当前版本，方便尝试效果后再穿越回来
$ git log -n 3
commit 571bb36413864e9fb0dbb185a3bf90b6a434444f (HEAD -> bug, origin/master, master)
Author: jimmy <JimmyMall@live.com>
Date:   Mon Aug 19 13:59:48 2019 +0800

    v0.0.7-8 增加左下角目录，能响应滚动
2) 回到过去
$ git reset --hard fb4d
这时项目所有文件已经回到过去提交点了，可以运行测试了。
这个提交点已经有bug了！
可能是浏览器行为变了，没办法，老老实实改代码吧。
3) 回到现在
$ git reset --hard 571bb36413864e





========================================
四.回滚还没有commit的文件
----------------------------------------
  命令概括
    #git reset HEAD 1.txt    //文件已经Staged的了，用这个来回滚到Modified状态，但是内容不会回滚
    #git checkout 1.txt      //如果文件是Modified，不想做修改了，恢复原样，使用这个
    #git reset HEAD 后面什么都不跟，则上一次add的全部撤销。你的修改不影响，就像你没有做过上一次git add一样。
  
  操作实例
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD ..." to unstage)
    
    	modified:   1.txt
    	
    	
    #git diff --staged
    diff --git a/1.txt b/1.txt
    index 137b7fd..067030b 100644
    --- a/1.txt
    +++ b/1.txt
    @@ -1 +1,2 @@
     the first line
    +the second line	
    
    #git reset HEAD 1.txt        //把1.txt 的状态由Staged变为Staged， 但是1.txt的内容不会变
    Unstaged changes after reset:
    M	1.txt
    
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes not staged for commit:            //可以看出1.txt 由Staged变为Modified
      (use "git add ..." to update what will be committed)
      (use "git checkout -- ..." to discard changes in working directory)
    
    	modified:   1.txt
    
    no changes added to commit (use "git add" and/or "git commit -a")
    
    #cat 1.txt            //查看内容，发现 1.txt的内容并没有回滚
    the first line
    the second line
    
    
    #git checkout 1.txt   //回滚
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    nothing to commit, working directory clean
    
    #cat 1.txt           //内容已经回滚
    the first line



========================================
五.撤销(git reset[回到过去某个提交])和回滚(git revert[反做后生成新提交])某个提交的比较
----------------------------------------
1.git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，则之后的版本就不存在了。
适用场景： 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了


使用“git reset --hard 目标版本号”命令将版本回退：
$ git reset --hard fb4d
$ git log #查看版本信息，此时本地的HEAD已经指向之前的版本
$ git push -f #强制提交更改。
#此时如果用“git push”会报错，因为我们本地库HEAD指向的版本比远程库的要旧。





2.git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。

适用场景： 如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。

$ git log # 查看版本号
$ git revert -n 版本号 #反做
#注意： 这里可能会出现冲突，那么需要手动修改冲突的文件。而且要git add 文件名。
$ git commit -m 版本名 #提交
$ git log #查看本地的版本信息，可见多生成了一个新的版本。老版本都还在。
$ git push #提交


  命令概括
    #git revert HEAD         //回滚上一次提交
    #git revert HEAD^        //回滚上上次提交
    #git revert #commit no#  //回滚某一次提交
  
  
  操作实例
    增加了2.txt 并提交了，现在想回滚
    #vi 2.txt  在里面增加内容
    #git add 2.txt    把文件由Untracked 变为 Staged
    #git commit -m "2.txt commit"  提交
    
    #git log   查看提交日志
    commit 710c5e84bd02e5d041b537b8732b9e80fee257a1    //这个是我们2.txt的提交
    Author: jingbo 
    Date:   Thu Apr 7 22:10:00 2016 +0800
    
        2.txt commit
    
    commit e6b0e7d844154d5473a37baed2ef56807dca16b3
    Author: jingbo 
    Date:   Wed Apr 6 22:42:44 2016 +0800
    
        first commit
        
    #git revert 710c5e84bd02e5d041b537b8732b9e80fee257a1  //回滚提交
    [master d3ab103] Revert "2.txt commit"
     1 file changed, 1 deletion(-)
     delete mode 100644 2.txt    
 


========================================
|-- git reset --hard 和 git reset --soft区别
----------------------------------------

有时候，进行了错误的提交，但是还没有push到远程分支，想要撤销本次提交，可以使用git reset –-soft/hard命令。

1、二者区别：
$ git reset –-soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可；
可见commit取消了，代码更改并没有取消。


$ git reset -–hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉；
注意：上述命令执行成功之后，会彻底返回到回退前的版本状态，新发生的变更将会丢失。对于部分发生了变更，但是变更部分的文件夹存在未提交的文件可能导致目录非空而删除失败，此时需要自行处置。









========================================
六.分支操作(查看、创建、推送、比较、合并、拉取、删除)
----------------------------------------
  6.1 查看分支
    #git branch    //查看目前有哪些分支
    * master       //只有一个分支,"*"表示当前是在master分支上
  
  
  6.2 创建分支
    #git branch first-branch  //打出第一个分支，名字是first-branch
    #git branch
      first-branch   //分支已经有了
    * master         //"*"表示当前是在master分支上
    
    #git checkout first-branch
    Switched to branch 'first-branch'
    
    #git branch
    * first-branch    //已经成功切换到自己打的分支上了
      master
  
  
  6.3 分支上增加内容
    #vi 2.txt
    #cat 2.txt         //增加的内容如下
    edit in first-branch
    
    
    #git add 2.txt
    #git commit -m "2.txt commit in first-branch"      //在分支上提交
    [first-branch 9abd8f2] 2.txt commit in first-branch
     1 file changed, 2 insertions(+)
     create mode 100644 2.txt
  
  
  6.4 推送分支到远程 
    #git push origin first-branch
    Counting objects: 7, done.
    Delta compression using up to 4 threads.
    Compressing objects: 100% (5/5), done.
    Writing objects: 100% (7/7), 692 bytes | 0 bytes/s, done.
    Total 7 (delta 0), reused 0 (delta 0)
    To git@github.com:sotrip/gittest.git
     * [new branch]      first-branch -> first-branch
  
  
  6.5 两个分支进行比较
    #git diff master first-branch    //比较master与first-branch
    diff --git a/2.txt b/2.txt
    new file mode 100644
    index 0000000..b09edf1
    --- /dev/null
    +++ b/2.txt              //表示first-branch上多了一个2.txt
    @@ -0,0 +1,2 @@
    +edit in first-branch
    +
  
  6.6 分支合并到master上
    #git checkout master
    #git merge first-branch    //把first-branch的内容合并到master上
		推荐加上 --no-ff参数，能保留分支信息

###
https://segmentfault.com/q/1010000002477106
git merge --no-ff 可以保存你之前的分支历史。能够更好的查看 merge历史，以及branch 状态。
git merge 则不会显示 feature，只保留单条分支记录。
###

    Updating d3ab103..9abd8f2
    Fast-forward
     2.txt | 2 ++
     1 file changed, 2 insertions(+)
     create mode 100644 2.txt
     
    #ls
    1.txt	2.txt
    
    #cat 2.txt
    edit in first-branch
    
    
    #git log
    commit 9abd8f2d8fe7c08ca246464552dae25397694582
    Author: jingbo 
    Date:   Thu Apr 7 22:26:26 2016 +0800
    
        2.txt commit in first-branch         //在first-branch上提交的内容也显示在日志中
    
    ...
   
   
  6.7 从远程拉一个分支
    有两个办法，第一种是
    #git fecth origin 
    #git checkout first-branch
    Branch first-branch set up to track remote branch first-branch from origin.
    Switched to a new branch 'first-branch'
    
    第二个办法
    #git checkout -t origin/first-branch
    Branch first-branch set up to track remote branch first-branch from origin.
    Switched to a new branch 'first-branch'
#


实例: git clone后在master分支上，但是远程还有一个dev分支，可以一起拉下来:
Administrator@wangjl-PC MINGW64 /e/c1_br_analysis_code (master)
$ git checkout -b dev origin/dev
Switched to a new branch 'dev'
Branch 'dev' set up to track remote branch 'dev' from 'origin'.

Administrator@wangjl-PC MINGW64 /e/c1_br_analysis_code (dev) #已经自动切换为dev分支





6.8 删除分支
(1)删除一个已被终止的分支
如果需要删除的分支不是当前正在打开的分支，使用branch -d直接删除
git branch -d <branch_name>

(2)删除一个正打开的分支
如果我们在试图删除一个分支时自己还没转移到另外的分支上，Git就会给出一个警告，并拒绝该删除操作。
如果坚持要删除该分支的话，就需要在命令中使用-D选项。
git branch -D <branch_name>

(3)恢复被删除的分支
Git会自行负责分支的管理，所以当我们删除一个分支时，Git只是删除了指向相关提交的指针，但该提交对象依然会留在版本库中。
因此，如果我们知道删除分支时的散列值，就可以将某个删除的分支恢复过来。在已知提交的散列值的情况下恢复某个分支：
git branch <branch_name> <hash_val>






========================================
|-- 合并分支: git merge 和 git rebase(变基) 的区别
----------------------------------------
重要的事情说三遍：公共分支禁止使用rebase!!
rebase黄金法则：绝不要在公共分支上使用它

注意:
- 不要在公共分支使用rebase
- 本地和远端对应同一条分支,优先使用rebase,而不是merge



1.rebase会把你当前分支的 commit 放到公共分支的最后面,所以叫变基。就好像你从公共分支又重新拉出来这个分支一样。

举例:如果你从 master 拉了个feature分支出来,然后你提交了几个 commit,这个时候刚好有人把他开发的东西合并到 master 了,这个时候 master 就比你拉分支的时候多了几个 commit,如果这个时候你 rebase master 的话，就会把你当前的几个 commit，放到那个人 commit 的后面。


(1)
Q: 为什么不要再公共分支使用rebase?
A: 因为往后放的这些 commit 都是新的,这样其他从这个公共分支拉出去的人，都需要再 rebase,相当于你 rebase 东西进来，就都是新的 commit 了

例子:
1)1-2-3 是现在的分支状态
2)这个时候从原来的master ,checkout出来一个prod分支
3)然后master提交了4.5，prod提交了6.7
这个时候master分支状态就是1-2-3-4-5，
prod状态变成1-2-3-6-7

4A)如果在prod上用rebase master ,prod分支状态就成了1-2-3-4-5-6'-7'
提交点7和8已经被修改，就相当于你的分支被接到了master分支的末尾。
相关提交就会改变。


4B)如果是merge，会出来一个8，这个8的提交就是把4-5合进来的提交
1-2-3-6-7-8
....|4-5



(2)更通俗的解释一波.
merge和rebase实际上只是用的场景不一样

1)比如rebase,你自己开发分支一直在做,然后某一天，你想把主线的修改合到你的分支上,做一次集成,这种情况就用rebase比较好.把你的提交都放在主线修改的头上

2)如果用merge，会产生新提交点8, 你如果想回退你分支上的某个提交就很麻烦,还有一个重要的问题,rebase的话,本来我的分支是从3拉出来的,rebase完了之后,就不知道我当时是从哪儿拉出来的我的开发分支

同样的,如果你在主分支上用rebase, rebase其他分支的修改,是不是要是别人想看主分支上有什么历史,他看到的就不是完整的历史课,这个历史已经被你篡改了


(3)
git rebase会获得一个干净的没有merge commit的线性历史树
git merge可以避免commit history的风险






2.具体操作

(1)简单示例
Git merge是用来合并两个分支的。
git merge b      # 将b分支合并到当前分支

同样 git rebase b，也是把 b分支合并到当前分支

1)
git checkout feature
git merge master
此时在feature上git会自动产生一个新的commit

2)
git checkout feature
git rebase master（feature分支上）
它会把你整个feature分子移动到master分支后面，有效的把所有master分支新的提交并入过来




(2)原理 如下： 

假设你现在基于远程分支"origin"，创建一个叫"mywork"的分支。
$ git checkout -b mywork origin
假设远程分支"origin"已经有了2个提交，

现在我们在这个分支做一些修改，然后生成两个提交(commit).
$ vi file.txt
$ git commit
$ vi otherfile.txt
$ git commit


>> 但是与此同时，有些人也在"origin"分支上做了一些修改并且做了提交了. 这就意味着"origin"和"mywork"这两个分支各自"前进"了，它们之间"分叉"了。


在这里，你可以用"pull"命令把"origin"分支上的修改拉下来并且和你的修改合并； 结果看起来就像一个新的"合并的提交"(merge commit):


但是，如果你想让"mywork"分支历史看起来像没有经过任何合并一样，你也许可以用 git rebase:
$ git checkout mywork
$ git rebase origin

这些命令会把你的"mywork"分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到".git/rebase"目录中),然后把"mywork"分支更新 为最新的"origin"分支，最后把保存的这些补丁应用到"mywork"分支上。

当'mywork'分支更新之后，它会指向这些新创建的提交(commit),而那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除. （请查看 git gc)





3. 冲突解决
在rebase的过程中，也许会出现冲突(conflict). 
在这种情况，Git会停止rebase并会让你去解决 冲突；
在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:
$ git rebase --continue

这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用--abort参数来终止rebase的行动，并且"mywork" 分支会回到rebase开始前的状态。
$ git rebase --abort






4. git rebase和git merge的区别
现在我们可以看一下用合并(merge)和用rebase所产生的历史的区别：
当我们使用Git log来参看commit时，其commit的顺序也有所不同。

c1-c2-C3-C5-C6
	|-C4

假设C3提交于9:00AM,C5提交于10:00AM,C4提交于11:00AM，C6提交于12:00AM,
对于使用git merge来合并所看到的commit的顺序（从新到旧）是：C7 ,C6,C4,C5,C3,C2,C1
对于使用git rebase来合并所看到的commit的顺序（从新到旧）是：C7 ,C6',C5',C4,C3,C2,C1
 因为C6'提交只是C6提交的克隆，C5'提交只是C5提交的克隆，
从用户的角度看使用git rebase来合并后所看到的commit的顺序（从新到旧）是：C7 ,C6,C5,C4,C3,C2,C1






5. 使用场景
两个使用场景是不一样的，merge只是合并另外一个分支的内容，rebase也合并另外一个分支的内容，但是会把本分支的commits顶到最顶端

假设我们现在有3个分支
1)master分支：线上环境使用的分支
2)testing分支：测试环境使用的分支
3)my_feature分支：开发新功能的分支，也就是当前分支

A. 假设我在my_feature上开发了一段时间，之后另外的同事开发的功能正式上线到master分支了，那么我可以在当前的分支下rebase一下master分支，这样我这个分支的几个commits相对于master还是处于最顶端的，也就是说rebase主要用来跟上游同步，同时把自己的修改顶到最上面

B. 我在my_feature上开发了一段时间了，想要放到testing分支上，那就切到testing，然后merge my_feature进来，因为是个测试分支，commits的顺序无所谓，也就没必要用rebase (当然你也可以用rebase)

另外，单独使用rebase，还有调整当前分支上commits的功能(合并，丢弃，修改commites msg)


S:
其他知友的答案都说到冲突的问题，
1). 用merge确实只需要解决一遍冲突，比较简单粗暴
2). 用rebase有时候会需要多次fix冲突（原因在于本地分支已经提交了非常多的commit，而且很久都没有和上游合并过）

我个人推荐大家开发的时候，尽量及时rebase上游分支（我习惯是每周merge一次），有冲突提前就fix掉，即使我们自己的分支开发了很久（哪怕是几个月），也不会积累太多的conflict，最后合并进主分支的时候特别轻松， 非常反对从master check出新分支，自己闷头开发几个月，结果最后merge进主分支的时候，一大堆冲突，自己还嗷嗷叫的行为。



https://www.jianshu.com/p/4079284dd970
https://www.cnblogs.com/marblemm/p/7161614.html
https://blog.csdn.net/qq_41047322/article/details/81584437





========================================
|-- reflog命令: 找到想要恢复的分支的散列值
----------------------------------------
git reflog 命令
显示整个本地仓储的commit，包括所有branch的commit，甚至包括已经撤销的commit。
只要HEAD发生了变化， 就会在reflog里面看得到。
这时恢复分支a_branch分支如下：
git branch <branch_name> HEAD@{4}


如果我们不知道想要恢复的分支的散列值，可以用reflog命令将它找出来。如：
$ git reflog 
571bb36 (HEAD -> bug, origin/master, master) HEAD@{0}: reset: moving to 571bb36413864e
6be3b26 HEAD@{1}: reset: moving to 6be3
fb4d271 HEAD@{2}: reset: moving to fb4d
571bb36 (HEAD -> bug, origin/master, master) HEAD@{3}: reset: moving to HEAD
571bb36 (HEAD -> bug, origin/master, master) HEAD@{4}: checkout: moving from master to bug
571bb36 (HEAD -> bug, origin/master, master) HEAD@{5}: commit: v0.0.7-8 增加左下角目录，能响应滚动
d5eb9d7 HEAD@{6}: commit: v0.0.7-7 md highlight.js; v0.0.7-8 增加左下角目录
468f400 HEAD@{7}: commit: v0.0.7-6 为md增加js，自动生成顶部目录。txt.js, base.css



https://www.cnblogs.com/utank/p/7880441.html




========================================
七.tag操作
----------------------------------------
  tag一般维护一个只读的版本，不再进行修改
  
  #git tag -a v1.0 -m "v1.0 ready for  publish"    //创建一个tag ,名字是"v1.0"
  
  
  #git tag   //查看tag 
  v1.0
  
  
  #git push origin v1.0            //推送tag 到github上
  Counting objects: 1, done.
  Writing objects: 100% (1/1), 162 bytes | 0 bytes/s, done.
  Total 1 (delta 0), reused 0 (delta 0)
  To git@github.com:sotrip/gittest.git
   * [new tag]         v1.0 -> v1.0
   
  
  #git checkout v1.0   切换到这个tag 上
  
  
  注意 最好不要在tag进行修改东西，就把tag维护成一个只读的版本 




========================================
八.其他
---------------------------------------- 
  #git rm 2.txt  删除2.txt 这个文件
  #git remote -v   可以查看远程的git的地址



========================================
九.彻底清除Github上某个文件以及历史(敏感操作)
----------------------------------------
不小心把含有很多人信息的通信录push到github了，虽然立刻删除了该文件，但是历史记录还在，github搜索还能找到，怎么办？
下面6行代码能彻底删除该文件及其历史记录。
虽然不知道他们的作用机制是什么，不过真的解决了我的问题。看起来，以前我说我熟练掌握git，真是自不量力。


注意：如下操作会删除选中的文件以及历史记录，若你想保留最新版本的记录，请做好备份。
cd进入到你的本地项目文件夹，然后依次执行下面6行命令即可：

git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILE_PATH' --prune-empty --tag-name-filter cat -- --all

git push origin master --force

rm -rf .git/refs/original/

git reflog expire --expire=now --all

git gc --prune=now

git gc --aggressive --prune=now
注意上面的FILE_PATH是文件全路径



实例：比如彻底删除一个联系人信息表:
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch Python/dustbin/contact.html' --prune-empty --tag-name-filter cat -- --all
并push即可。


refer:
https://www.cnblogs.com/xxoome/p/7794090.html
https://www.cnblogs.com/xieqiankun/p/del_github_file_history.html



========================================
附录1： 真正理解 git fetch, git pull 以及 FETCH_HEAD  
----------------------------------------
http://firecloudphp.blog.163.com/blog/static/250822070201673110171221/

真正理解 git fetch, git pull 

要讲清楚git fetch，git pull,必须要附加讲清楚git remote，git merge 、远程repo， branch 、 commit-id 以及 FETCH_HEAD。

1. 【git remote】首先， git是一个分布式的结构，这意味着本地和远程是一个相对的名称。

本地的repo仓库要与远程的repo配合完成版本对应必须要有 git remote子命令，通过git remote add来添加当前本地长度的远程repo， 有了这个动作本地的repo就知道了当遇到git push 的时候应该往哪里提交代码。

2. 【git branch】其次，git天生就是为了多版本分支管理而创造的，因此分支一说，不得不提， 分支就相当于是为了单独记录软件的某一个发布版本而存在的，既然git是分布式的，便有了本地分支和远程分支一说，git branch 可以查看本地分支， git branch -r  可以用来查看远程分支。 本地分支和远程分支在git push 的时候可以随意指定，交错对应，只要不出现版本从图即可。

3. 【git merge】再者，git的分布式结构也非常适合多人合作开发不同的功能模块，此时如果每个人都在其各自的分支上开发一个相对独立的模块的话，在每次release制作时都需先将各成员的模块做一个合并操作，用于合并各成员的工作成果，完成集成。 此时需要的就是git merge.

4.【git push 和 commit-id】在每次本地工作完成后，都会做一个git commit 操作来保存当前工作到本地的repo， 此时会产生一个commit-id，这是一个能唯一标识一个版本的序列号。 在使用git push后，这个序列号还会同步到远程repo。

在理解了以上git要素之后，分析git fetch 和 git pull 就不再困难了。 

 

首先，git fetch 有四种基本用法

1. git fetch            →→ 这将更新git remote 中所有的远程repo 所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中

2. git fetch remote_repo         →→ 这将更新名称为remote_repo 的远程repo上的所有branch的最新commit-id，将其记录。 

3. git fetch remote_repo remote_branch_name        →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name

4. git fetch remote_repo remote_branch_name:local_branch_name       →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name ，并在本地创建local_branch_name 本地分支保存远端分支的所有数据。

FETCH_HEAD： 是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。




git pull 的运行过程：

git pull : 首先，基于本地的FETCH_HEAD记录，比对本地的FETCH_HEAD记录与远程仓库的版本号，然后git fetch 获得当前指向的远程分支的后续版本的数据，然后再利用git merge将其与本地的当前分支合并。




Git中从远程的分支获取最新的版本到本地有这样2个命令：

1. git fetch：相当于是从远程获取最新版本到本地，不会自动merge
git fetch origin master
git diff -p master..origin/master
git merge origin/master

    以上命令的含义：
   首先从远程的origin的master主分支下载最新的版本到origin/master分支上
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并
   上述过程其实可以用以下更清晰的方式来进行：

git fetch origin master:tmp
git diff tmp 
git merge tmp
   从远程获取最新的版本到本地的tmp分支上
   之后再进行比较合并

我是用了 
git fetch
git diff master FETCH_HEAD
git merge FETCH_HEAD


2. git pull：相当于是从远程获取最新版本并merge到本地
 git pull origin master
上述命令其实相当于git fetch 和 git merge
在实际使用中，git fetch更安全一些
因为在merge前，我们可以查看更新情况，然后再决定是否合并

结束

参考链接 :  
1.https://ruby-china.org/topics/4768
2.http://stackoverflow.com/questions/9237348/what-does-fetch-head-in-git-mean
3.http://www.cnblogs.com/ToDoToTry/p/4095626.html
4.[推荐]http://blog.csdn.net/hudashi/article/details/7664457

  
  
  
  
  
========================================
refer:
----------------------------------------
http://hszy00232.blog.163.com/blog/static/4302275320154127108367/

http://www.itshouce.com.cn/linux/linux-git.html