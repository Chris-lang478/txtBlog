symfony

win7,64bits + xampp

http://www.chrisyue.com/symfony2-in-action-day-1.html
另一个翻译：http://tieba.baidu.com/p/4369558734?pid=84498807574&cid=0#84498807574
框架的比较：http://tieba.baidu.com/p/3907778980?pid=71899218784&cid=0#71899218784
	http://tieba.baidu.com/p/3729192856?pid=67634207639&cid=0#67634207639
php的5种境界：http://tieba.baidu.com/p/3628455450?pid=69552490162&cid=0#69552490162

========================================
安装sf并新建项目myApp
----------------------------------------
refer http://symfony.com/download

1)Installation on Windows 在windows系统上安装，输入如下命令：
c:\> php -r "file_put_contents('symfony', file_get_contents('https://symfony.com/installer'));"

如果不能从cli运行php命令，请搜索设置php环境变量的方法。

2)Move the downloaded file to your projects directory and execute it as 
移动下载的文件到你的项目文件夹，然后执行如下命令：
$ php symfony.

windows下命令如下：
f:\xampp\htdocs\symfony>php symfony

输出结果：

	 Symfony Installer (1.5.0)
	 =========== ==============
	symfony安装器(1.5.0)
	 
	 This is the official installer to start new projects based on the
	 Symfony full-stack framework.
	这是基于symfony全栈框架的官方安装器，用于启动一个新的工程。
	 
	 To create a new project called blog in the current directory using
	 the latest stable version of Symfony, execute the following command:
	   symfony new blog
	在当前目录创建一个名字为blog的项目，使用最新稳定版的symfony，执行如下命令： symfony new blog
	 

	 Create a project based on the Symfony Long Term Support version (LTS):
	   symfony new blog lts
	基于symfony长支持版本创建新的项目：symfony new blog lts

	 Create a project based on a specific Symfony branch:
	   symfony new blog 2.3
	基于symfony特定分支创建新项目：symfony new blog 2.3

	 Create a project based on a specific Symfony version:
	   symfony new blog 2.5.6
	基于symfony特定版本创建新项目：symfony new blog 2.5.6

	 Create a demo application to learn how a Symfony application works:
	   symfony demo
	创建一个demo应用，学习symfony应用是怎么工作的。

	 Updating the Symfony Installer
	 -------------- ----------------
	 更新symfony安装器

	 New versions of the Symfony Installer are released regularly. To update your
	 installer version, execute the following command:
	   symfony self-update
	新版的symfony安装器定期更新。更新您的安装器可以执行如下命令：  symfony self-update




3)创建新项目：$php symfony new myApp
开始下载文件。之后显示：

 Preparing project...

 OK  Symfony 3.0.3 was successfully installed. Now you can:

    * Change your current directory to F:\xampp\htdocs\symfony\myApp

    * Configure your application in app/config/parameters.yml file.

    * Run your application:
        1. Execute the php bin/console server:run command.
        2. Browse to the http://localhost:8000 URL.

    * Read the documentation at http://symfony.com/doc

4)启动php自带服务器
进入项目目录
f:\xampp\htdocs\symfony>cd myApp

启动服务器
f:\xampp\htdocs\symfony\myApp>php bin/console server:start localhost:8000

 [ERROR] This command needs the pcntl extension to run.

 You can either install it or use the "server:run" command instead to run the
 built-in web server.

 Do you want to execute server:run immediately? [Yn]  [1]:
 > 1


 [OK] Server running on http://localhost:8000

 // Quit the server with CONTROL-C.

5)然后访问 http://localhost:8000/ ，可见页面：
	Welcome to Symfony 3.0.3

	Your application is now ready. You can start working on it at: F:\xampp\htdocs\symfony\myApp/

	What's next?

	Read the documentation to learn
	How to create your first page in Symfony http://symfony.com/doc/current/book/page_creation.html

6) 查看文档：http://symfony.com/doc



7)检查系统是否已经足够symfony运行
$ php app/check.php 	//在3.0版本已经失效了。

在浏览器中访问：http://localhost:8000/config.php

Configuration Checker

This script analyzes your system to check whether is ready to run Symfony applications.

RECOMMENDATIONS
To enhance your Symfony experience, it’s recommended that you fix the following:

Install and enable the intl extension (used for validators).
Install and/or enable a PHP accelerator (highly recommended).


推荐我安装intl扩展。

注意：代码在src/ 和 app/文件夹中。

========================================
创建第一个页面
----------------------------------------
第一步结尾的web欢迎页中，sf给出一个连接：
How to create your first page in Symfony:
	http://symfony.com/doc/current/book/page_creation.html

	
Create your First Page in Symfony
3.0 version 

Creating a new page - whether it's an HTML page or a JSON endpoint - is a simple two-step process:
创建一个新页面，不管是html页面或者json终端，都是很简单的两步搞定。

Create a route: A route is the URL (e.g. /about) to your page and points to a controller;
创建路由：路由就是一个你页面的url（比如 /about），指向一个控制器；

Create a controller: A controller is the function you write that builds the page. You take the incoming request information and use it to create a Symfony Response object, which can hold HTML content, a JSON string or anything else.
创建一个控制器：控制器是你写的用于建立页面的函数。你获取进来的请求信息，使用它创建一个symfony相应对象，可以包含html内容，json字符串，或者其他任何内容。

Just like on the web, every interaction is initiated by an HTTP request. Your job is pure and simple: understand that request and return a response.
就像在网上，每一个交互都是被http请求发起的。你的工作很纯粹很简单：理解请求，返回响应。


	Do you prefer video tutorials? Check out the Joyful Development with Symfony screencast series from KnpUniversity.
	你喜欢视频教程吗？看一下来自KnpUniversity的《symfony快乐开发》系列的截屏：http://knpuniversity.com/screencast/symfony/first-page

========================================
Creating a Page: Route and Controller 创建一个页面：路由和控制器
----------------------------------------

	Before continuing, make sure you've read the Installation chapter and can access your new Symfony app in the browser.
	继续之前，请确定已经读过安装章节，并且可以通过浏览器访问你刚创建的symfony应用。
	
Suppose you want to create a page - /lucky/number - that generates a lucky (well, random) number and prints it. To do that, create a class and a method inside of it that will be executed when someone goes to /lucky/number:
比如你想创建页面 /lucky/number，来产生一个幸运（其实是随机的）数字并打印它。为此，创建一个类，内含一个方法，当用户访问 /lucky/number 时执行：


	// src/AppBundle/Controller/LuckyController.php
	namespace AppBundle\Controller;

	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
	use Symfony\Component\HttpFoundation\Response;

	class LuckyController
	{
		/**
		 * @Route("/lucky/number")
		 */
		public function numberAction()
		{
			$number = rand(0, 100);

			return new Response(
				'<html><body>Lucky number: '.$number.'</body></html>'
			);
		}
	}


译者注：没想到这家伙连注释都用上了！这是路由：@Route("/lucky/number")

Before diving into this, test it out! http://localhost:8000/lucky/number
之前，先测试一下！http://localhost:8000/lucky/number

If you set up a proper virtual host in Apache or Nginx, replace http://localhost:8000 with your host name - like http://symfony.dev/app_dev.php/lucky/number.
如果你使用了Apache或Nginx建立一个合适的虚拟主机，把http://localhost:8000 替换为你的主机名，类似 http://symfony.dev/app_dev.php/lucky/number


小结：
	1.Code goes in src/ and app/
	2.域名比较奇葩：
		使用sf的主机：http://localhost:8000/lucky/number
		我的apatch主机：http://localhost/symfony/myApp/web/app_dev.php/lucky/number
	3.路由在注释中，比如修改为@Route("/lucky/number2")，则需要调整url为 http://localhost:8000/lucky/number2


If you see a lucky number being printed back to you, congratulations! But before you run off to play the lottery, check out how this works.
如果你看到返回一个幸运数字，恭喜你！在你关掉去玩彩票之前，检查一下他是怎么工作的。

The @Route above numberAction() is called an annotation and it defines the URL pattern. You can also write routes in YAML (or other formats): read about this in the routing chapter. Actually, most routing examples in the docs have tabs that show you how each format looks.
在numberAction()之上的@Route被称作注释，它定义了URL的类型。你可以在YAML（或者其他格式）中写路由：请阅读路由章节。实际上，文档中大部分路由例子有tab，为你展示每种形式的样子。

The method below the annotation - numberAction - is called the controller and is where you build the page. The only rule is that a controller must return a Symfony Response object (and you'll even learn to bend this rule eventually).
注释下的方法，numberAction，被称作控制器，这就是你建立页面的地方。唯一的规则是每一个控制器必须返回一个symfony相应对象（最终你将学会如何打破这个规则）。










========================================
Creating a JSON Response 返回一个json响应
----------------------------------------

The Response object you return in your controller can contain HTML, JSON or even a binary file like an image or PDF. You can easily set HTTP headers or the status code.
你的控制器中返回的响应对象可以包含html、json或者像图片或pdf的二进制文件。你可以很容易的设置http头或者状态码。

Suppose you want to create a JSON endpoint that returns the lucky number. Just add a second method to LuckyController:
假设你想创建一个json终端作为幸运数字的返回。就直接在LuckyController加第二个方法：

	// src/AppBundle/Controller/LuckyController.php

	// ...
	class LuckyController
	{
		// ...

		/**
		 * @Route("/api/lucky/number")
		 */
		public function apiNumberAction()
		{
			$data = array(
				'lucky_number' => rand(0, 100),
			);

			return new Response(
				json_encode($data),
				200,
				array('Content-Type' => 'application/json')
			);
		}
	}

Try this out in your browser:http://localhost:8000/api/lucky/number
浏览器中试试：http://localhost:8000/api/lucky/number

译者注：访问 http://localhost/symfony/myApp/web/app_dev.php/api/lucky/number ，输出json字符串：{"lucky_number":43}


You can even shorten this with the handy JsonResponse:
你甚至使用便利的JsonResponse来缩减代码：

	// src/AppBundle/Controller/LuckyController.php

	// ...
	// --> don't forget this new use statement
	use Symfony\Component\HttpFoundation\JsonResponse;

	class LuckyController
	{
		// ...

		/**
		 * @Route("/api/lucky/number")
		 */
		public function apiNumberAction()
		{
			$data = array(
				'lucky_number' => rand(0, 100),
			);

			// calls json_encode and sets the Content-Type header
			return new JsonResponse($data);
		}
	}


	
	
	
	
	
	

========================================
Dynamic URL Patterns: /lucky/number/{count} 动态URL样式： /lucky/number/{count}
----------------------------------------

Woh, you're doing great! But Symfony's routing can do a lot more. Suppose now that you want a user to be able to go to /lucky/number/5 to generate 5 lucky numbers at once. Update the route to have a {wildcard} part at the end:
哇，你做的很棒！但是symfony的路由可以做的更多。假设你想让一个用户可以访问 /lucky/number/5 而一次性获得5个幸运数字。更新路由，尾部加上一个{wildcard}部分。

	// src/AppBundle/Controller/LuckyController.php

	// ...
	class LuckyController
	{
		/**
		 * @Route("/lucky/number/{count}")
		 */
		public function numberAction()
		{
			// ...
		}

		// ...
	}

你可以使用注释、YAML、XML、php等来定义路由。
http://symfony.com/doc/current/book/page_creation.html

Because of the {count} "placeholder", the URL to the page is different: it now works for URLs matching /lucky/number/* - for example /lucky/number/5. The best part is that you can access this value and use it in your controller:
因为{counter}这个占位符，到该页面的url不同了：现在它对符合 /lucky/number/* 的url工作，比如 /lucky/number/5。很棒的是你可以获得该值，并在控制器中使用它：
	// src/AppBundle/Controller/LuckyController.php
	// ...

	class LuckyController
	{

		/**
		 * @Route("/lucky/number/{count}")
		 */
		public function numberAction($count)
		{
			$numbers = array();
			for ($i = 0; $i < $count; $i++) {
				$numbers[] = rand(0, 100);
			}
			$numbersList = implode(', ', $numbers);

			return new Response(
				'<html><body>Lucky numbers: '.$numbersList.'</body></html>'
			);
		}

		// ...
	}
Try it by going to /lucky/number/XX - replacing XX with any number: http://localhost:8000/lucky/number/7
前往 /lucky/number/XX （使用任何数字替代XX）： http://localhost:8000/lucky/number/7


You should see 7 lucky numbers printed out! You can get the value of any {placeholder} in your route by adding a $placeholder argument to your controller. Just make sure they have the same name.
你应该看到7个幸运数字打印出来了！你可以获得任何路由中{placeholder}中的数字，只要在控制器参数中增加 $placeholder。只需要确保他们同名。

The routing system can do a lot more, like supporting multiple placeholders (e.g. /blog/{category}/{page}), making placeholders optional and forcing placeholder to match a regular expression (e.g. so that {count} must be a number).
路由系统可以做的更多，比如支持多部分占位符（比如 /blog/{category}/{page} ），使占位符可选，以及强制占位符匹配一个正则表达式（比如{count}必须是数字）。


Find out about all of this and become a routing expert in the Routing chapter.
在路由章节中找到相关所有内容，那就成了路由专家。












========================================
Rendering a Template (with the Service Container) 在模板中渲染（借助Service容器）
----------------------------------------

If you're returning HTML from your controller, you'll probably want to render a template. Fortunately, Symfony comes with Twig: a templating language that's easy, powerful and actually quite fun.
如果你从控制器中返回了html，你可能希望渲染一个模板。幸运的是，symfony带了Twig：一个简单、强大并且确实很有趣的模板语言。

So far, LuckyController doesn't extend any base class. The easiest way to use Twig - or many other tools in Symfony - is to extend Symfony's base Controller class:
目前为止，LuchyController不从任何基类继承。使用Twig最简单的方式，或者很多symfony中的其他工具都是继承symfony的基本控制器类的：

	// src/AppBundle/Controller/LuckyController.php

	// ...
	// --> add this new use statement
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;

	class LuckyController extends Controller
	{
		// ...
	}

Using the templating Service 使用模板服务

This doesn't change anything, but it does give you access to Symfony's container: an array-like object that gives you access to every useful object in the system. These useful objects are called services, and Symfony ships with a service object that can render Twig templates, another that can log messages and many more.
这不能改变任何东西，但是它确实让你访问symfony容器：一个类数组对象，让你访问系统中的每一个有用的对象。这些有用的对象被称作服务，然后symfony传递一个服务用于渲染Twig模板的，另一个服务用于记录消息，以及更多。

To render a Twig template, use a service called templating:
为了渲染Twig模板，使用一个叫做templating的模板：

	// src/AppBundle/Controller/LuckyController.php

	// ...
	class LuckyController extends Controller
	{
		/**
		 * @Route("/lucky/number/{count}")
		 */
		public function numberAction($count)
		{
			// ...
			$numbersList = implode(', ', $numbers);

			$html = $this->container->get('templating')->render(
				'lucky/number.html.twig',
				array('luckyNumberList' => $numbersList)
			);

			return new Response($html);
		}

		// ...
	}

You'll learn a lot more about the important "service container" as you keep reading. For now, you just need to know that it holds a lot of objects, and you can get() any object by using its nickname, like templating or logger. The templating service is an instance of TwigEngine and this has a render() method.
继续读，你将会学到更多关于“服务容器”的重要性。目前，你只需要知道它包含了很多对象，你可以通过get()方法和昵称获取任何对象，像 templating 或 logger。templating服务是TwigEngine的实例，他有一个render方法。

译者注：这里有点类似ci中的类库加载，加载后放到超级对象中。但是sf是自动加载的。

But this can get even easier! By extending the Controller class, you also get a lot of shortcut methods, like render():
但是，这还可以更简单！通过继承Controller类，你也获得了很多快捷方法，像render():
	return $this->render(
		'lucky/number.html.twig',
		array('luckyNumberList' => $numbersList)
    );

Learn more about these shortcut methods and how they work in the Controller chapter.
在Controller章节中了解更多快捷方法，以及他们是怎么工作的。

	For more advanced users, you can also register your controllers as services.
	对于更高级的使用者，你可以注册自己的控制器作为服务(http://symfony.com/doc/current/cookbook/controller/service.html)


	
小结：
	1.记得继承Controller后才能使用Service容器；

========================================
Create the Template 创建模板：Twig模板
----------------------------------------
If you refresh now, you'll get an error:
如果你现在刷新，可以看到报错：

Unable to find template "lucky/number.html.twig"
Fix that by creating a new app/Resources/views/lucky directory and putting a number.html.twig file inside of it:
不能找到 "lucky/number.html.twig" 模板，通过创建 app/Resources/views/lucky 目录，并放一个number.html.twig文件来修复该错误。
	{# app/Resources/views/lucky/number.html.twig #}
	{% extends 'base.html.twig' %}

	{% block body %}
		<h1>Lucky Numbers: {{ luckyNumberList }}</h1>
	{% endblock %}

Welcome to Twig! This simple file already shows off the basics: like how the {{ variableName }} syntax is used to print something. The luckyNumberList is a variable that you're passing into the template from the render call in your controller.
欢迎来到Twig！这个简单文件已经展示了基本情况：比如{{ variableName }} 语法用来打印东西。luckyNumberList是一个变量，你从控制器的render方法传递到模板的。

The {% extends 'base.html.twig' %} points to a layout file that lives at app/Resources/views/base.html.twig and came with your new project. It's really basic (an unstyled HTML structure) and it's yours to customize. The {% block body %} part uses Twig's inheritance system to put the content into the middle of the base.html.twig layout.
{% extends 'base.html.twig' %} 指向布局文件app/Resources/views/base.html.twig，你项目自带过来的。他真的很基础（一个没有样式的html结构），留给你去自定义。{% block body %}部分使用Twig的继承系统放置内容到 base.html.twig 布局的中间。

Refresh to see your template in action! http://localhost:8000/lucky/number/9
立刻刷新查看你的模板吧！ http://localhost:8000/lucky/number/9

If you view the source code, you now have a basic HTML structure thanks to base.html.twig.
如果你看一下源码，多亏了base.html.twig 你现在有了一个html结构。

This is just the surface of Twig's power. When you're ready to master its syntax, loop over arrays, render other templates and other cool things, read the Templating chapter.
这仅仅是Twig功能的冰山一角。当你想掌握它的语法、循环数组、渲染模板或者其他有趣的事情，请阅读模板章节（http://symfony.com/doc/current/book/templating.html）。

========================================
Exploring the Project 探索项目文件
----------------------------------------
You've already created a flexible URL, rendered a template that uses inheritance and created a JSON endpoint. Nice!
你已经创建了一个灵活的url，使用继承渲染了一个模板，创建了一个json终端。很好！

It's time to explore and demystify the files in your project. You've already worked inside the two most important directories:
是时候探索并阐明你项目中的文件了。你已经在两个最重要的目录中工作了：

app/
	Contains things like configuration and templates. Basically, anything that is not PHP code goes here.
	包括配置文件和模板。基本上，只要不是php的代码都在这里。
	
src/
	Your PHP code lives here.
	你的php代码在这里。
	
99% of the time, you'll be working in src/ (PHP files) or app/ (everything else). As you get more advanced, you'll learn what can be done inside each of these.
你99%的时间工作在src/(php文件)或app/(其他任何文件)。当你水平更高时，你会学到每个文件是干啥的。

The app/ directory also holds some other things, like app/AppKernel.php, which you'll use to enable new bundles (this is one of a very short list of PHP files in app/).
app文件夹也包含其他东西，比如 app/AppKernel.php文件，用于设置你的bundles（这是app/目录中的一小部分php文件列表）可用。



The src/ directory has just one directory - src/AppBundle - and everything lives inside of it. A bundle is like a "plugin" and you can find open source bundles and install them into your project. But even your code lives in a bundle - typically AppBundle (though there's nothing special about AppBundle). To find out more about bundles and why you might create multiple bundles (hint: sharing code between projects), see the Bundles chapter.
src/ 文件夹只有一个目录 src/AppBundle，所有东西都在里面。一个bundle就像一个 “插件”，你可以发现开源bundles，并且安装到你的项目中。但是即使你的代码也在一个bundle中，典型的是 AppBundle(虽然 AppBundle 并没有什么特殊)。
查找更多bundles信息，以及为什么你要创建很多bundles（提示：便于不同项目共享代码），请查看bundles章节。

So what about the other directories in the project?
项目中其他文件夹是干啥的呢？




web/
	This is the document root for the project and contains any publicly accessible files, like CSS, images and the Symfony front controllers that execute the app (app_dev.php and app.php).
	这是项目的文档根，包含任何公开访问的文件，比如css、图像，以及执行该app的symfony前端控制器（app_dev.php和app.php）。
	
tests/
	The automatic tests (e.g. Unit tests) of your application live here.
	你的应用的自动化测试（比如 单元测试）。
	
bin/
	The "binary" files live here. The most important one is the console file which is used to execute Symfony commands via the console.
	放二进制文件。最重要的是console文件，被用于通过控制台执行symfony命令。
	
var/
	This is where automatically created files are stored, like cache files (var/cache/) and logs (var/logs/).
	放自动生成的文件，比如缓存文件（vars/cache/）和日志文件(var/logs/)。
	
vendor/
	Third-party libraries, packages and bundles are downloaded here by the Composer package manager. You should never edit something in this directory.
	通过Composer包管理器下载的第三方库，包，和bundle。你一定不要编辑该目录内的文件。

Symfony is flexible. If you need to, you can easily override the default directory structure. See How to Override Symfony's default Directory Structure.
symfony很灵活。如果需要，你可以很容易的复写默认目录结构。查看怎么复写symfony的默认目录结构（http://symfony.com/doc/current/cookbook/configuration/override_dir_structure.html）

========================================
Application Configuration 应用配置
----------------------------------------
Symfony comes with several built-in bundles (open your app/AppKernel.php file) and you'll probably install more. The main configuration file for bundles is app/config/config.yml:
symfony自带一些内置bundle（打开你的 app/AppKernel.php文件），你可能安装更多。bundle的主配置文件是 app/config/config.yml

	# app/config/config.yml

	# ...
	framework:
		secret: '%secret%'
		router:
			resource: '%kernel.root_dir%/config/routing.yml'
		# ...

	twig:
		debug:            '%kernel.debug%'
		strict_variables: '%kernel.debug%'

	# ...

The framework key configures FrameworkBundle, the twig key configures TwigBundle and so on. A lot of behavior in Symfony can be controlled just by changing one option in this configuration file. To find out how, see the Configuration Reference section.
框架健配置FrameworkBundle，twig健配置TwigBundle，等等。很多symfony的行为可以仅仅改变配置文件中的选项而改变。至于怎么做，请查看配置参考部分。(http://symfony.com/doc/current/reference/index.html)

Or, to get a big example dump of all of the valid configuration under a key, use the handy bin/console command:$ php bin/console config:dump-reference framework
或者，获得一个健下的合法配置的大量例子，请手工输入 bin/console 命令:$ php bin/console config:dump-reference framework

There's a lot more power behind Symfony's configuration system, including environments, imports and parameters. To learn all of it, see the Configuration chapter.

========================================
What's Next? 下一步？
----------------------------------------
Congrats! You're already starting to master Symfony and learn a whole new way of building beautiful, functional, fast and maintainable apps.
恭喜！你已经开始掌握symfony了，并且学了一个全新的方式去建立优美、有效、快速、可维护的app。

Ok, time to finish mastering the fundamentals by reading these chapters:
那么，通过阅读本章节掌握基础部分该结束了：

	Controller(http://symfony.com/doc/current/book/controller.html)
	Routing(http://symfony.com/doc/current/book/routing.html)
	Creating and Using Templates(http://symfony.com/doc/current/book/templating.html)

Then, in the Symfony Book, learn about the service container, the form system, using Doctrine (if you need to query a database) and more!
然后，在 Symfony Book(http://symfony.com/doc/current/book/index.html) 中，学习关于 service容器，表单系统，使用 Doctrine(如果你需要查询数据库)等等。 
	- http://symfony.com/doc/current/book/service_container.html
	- http://symfony.com/doc/current/book/forms.html
	- http://symfony.com/doc/current/book/doctrine.html

There's also a Cookbook packed with more advanced "how to" articles to solve a lot of problems.
另外还有一本 Cookbook(http://symfony.com/doc/current/cookbook/index.html) ，包含很多更高级的“怎么做”的文章，会解决很多问题。

Have fun!
祝玩的开心！

小结：
接下来还有很多书要读。

========================================
翻译计划
----------------------------------------
还有视频可看：http://knpuniversity.com/screencast/symfony/routing-wildcards#play


http://symfony.com/doc/current/index.html
这一页我们看到7本书：
	Symfony Book
	Symfony Cookbook
	Symfony Components
	Symfony Best Practices
	Symfony Bundles
	Symfony Reference
	Symfony Training

	

其中第一本书有如下章节：
The Symfony Book
Prepared by the core team, this is the reference that covers the needs for every kind of Symfony developer.
核心团队所写，这是一本涵盖各类Symfony开发者需求的参考手册。

	Controllers
	Routing
	Templating
	Doctrine
	Testing
	Forms
	Validation
	Security
	HTTP Cache
	Translation
	Services
	Performance

接下来翻译更多的部分。使用md格式。


========================================
[视频]常用小命令：（win下用git的控制台比windows自带的命令行好用）
----------------------------------------
1.控制台命令：
	f:\xampp\htdocs\symfony\myApp>php bin/console
	Symfony version 3.0.3 - app/dev/debug

	Usage:
	  command [options] [arguments]

	Options:
	  -h, --help            Display this help message
	  -q, --quiet           Do not output any message
	  -V, --version         Display this application version
		  --ansi            Force ANSI output
		  --no-ansi         Disable ANSI output
	  -n, --no-interaction  Do not ask any interactive question
	  -e, --env=ENV         The Environment name. [default: "dev"]
		  --no-debug        Switches off debug mode.
	  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output,
	 2 for more verbose output and 3 for debug

查版本号：
	f:\xampp\htdocs\symfony\myApp>php bin/console -V
	Symfony version 3.0.3 - app/dev/debug

查询目前的所有路由设置：
	debug:router          Displays current routes for an application

	Administrator@PeptideLab MINGW64 /f/xampp/htdocs/symfony/myApp
	$ php bin/console debug:router
	 ----------- --------------- -------- -------- ------ ---------------- -------------------
	  Name                       Method   Scheme   Host   Path
	 ------------ -------------- -------- -------- ------ ----------------- ------------------
	  _wdt                       ANY      ANY      ANY    /_wdt/{token}
	  _profiler_home             ANY      ANY      ANY    /_profiler/
	  _profiler_search           ANY      ANY      ANY    /_profiler/search
	  _profiler_search_bar       ANY      ANY      ANY    /_profiler/search_bar
	  _profiler_info             ANY      ANY      ANY    /_profiler/info/{about}
	  _profiler_phpinfo          ANY      ANY      ANY    /_profiler/phpinfo
	  _profiler_search_results   ANY      ANY      ANY    /_profiler/{token}/search/results
	  _profiler                  ANY      ANY      ANY    /_profiler/{token}
	  _profiler_router           ANY      ANY      ANY    /_profiler/{token}/router
	  _profiler_exception        ANY      ANY      ANY    /_profiler/{token}/exception
	  _profiler_exception_css    ANY      ANY      ANY    /_profiler/{token}/exception.css
	  _twig_error_test           ANY      ANY      ANY    /_error/{code}.{_format}
	  homepage                   ANY      ANY      ANY    /
	  app_lucky_number           ANY      ANY      ANY    /lucky/number
	  app_lucky_numberlist       ANY      ANY      ANY    /lucky/number/{count}
	  app_lucky_numberlist2      ANY      ANY      ANY    /lucky/number2/{count}
	  app_lucky_numberlist3      ANY      ANY      ANY    /lucky/number3/{count}
	  app_lucky_apinumber        ANY      ANY      ANY    /api/lucky/number
	  app_lucky_apinumber2       ANY      ANY      ANY    /api/lucky/number2
	 ------------ -------------- -------- -------- ------ ----------------- ------------------
	注意最后6个是我们设置的路由。path是可以访问的url，name是对应的方法名。



========================================
[视频]后一半：就是使用service(前一半是路由和控制器)
----------------------------------------
Listing and Using Services: http://knpuniversity.com/screencast/symfony/listing-services#play

Service=Useful Object.

像呼叫关联数组一样呼叫Container（它其实是一个Object），就有一堆service(也就是对象)可用。
	key:mailer
	key:logger 	Logger object;
	
	$this->container->get('templating');//then you can use the templating's method.

In fact, Symfony doesn't really do anything: everything is done by one of these services.
实际上，sf什么也没做，所有的事情都是由那些service完成的。




继承Controller基类之后，可以极度简化控制器中的方法：
    /**
     * @Route("/lucky/number4/{count}") 
     * 这个路由是动态路由
     */
    public function numberList4Action($count)
    {
        return $this->render(
	        'lucky/number.html.twig',
	        array('luckyNumberList' => $count)
	    );
    }
[?]（可以追踪render()也是调用的templating service实现的。）目前没有找到基类的代码在哪里。。。
译者注：不知道作者用的什么IDE，类似eclipse中按下ctrl键单击方法能看源码。


查看都有哪些服务可用：超过200个，需要的话先看名字，然后读文档吧。
	$ php bin/console debug:container

	Symfony Container Public Services
	================ =================

	 ----------- --------------
	  Service ID                          Class name
	 ----------- -------------- 

	  annotation_reader                   Doctrine\Common\Annotations\CachedReader
	  assets.context                      Symfony\Component\Asset\Context\RequestStackContext
	  assets.packages                     Symfony\Component\Asset\Packages
	  cache_clearer                       Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer
	  cache_warmer                        Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate
	  config_cache_factory                Symfony\Component\Config\ResourceCheckerConfigCacheFactory
	  console.command.sensiolabs_security_command_securitycheckercommand   alias for "sensio_distribution.security_checker.command"
	  data_collector.dump                 Symfony\Component\HttpKernel\DataCollector\DumpDataCollector
	  data_collector.form                 Symfony\Component\Form\Extension\DataCollector\FormDataCollector
	  data_collector.form.extractor       Symfony\Component\Form\Extension\DataCollector\FormDataExtractor
	  data_collector.request              Symfony\Component\HttpKernel\DataCollector\RequestDataCollector
	  data_collector.router               Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector
	  database_connection                 alias for "doctrine.dbal.default_connection"
	  debug.controller_resolver           Symfony\Component\HttpKernel\Controller\TraceableControllerResolver
	  debug.debug_handlers_listener       Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
	  debug.dump_listener                 Symfony\Component\HttpKernel\EventListener\DumpListener
	  debug.event_dispatcher              Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
	  debug.stopwatch                     Symfony\Component\Stopwatch\Stopwatch
	  doctrine                            Doctrine\Bundle\DoctrineBundle\Registry
	  doctrine.dbal.connection_factory    Doctrine\Bundle\DoctrineBundle\ConnectionFactory
	  doctrine.dbal.default_connection    Doctrine\DBAL\Connection

	  doctrine.orm.default_entity_listener_resolver                        Doctrine\ORM\Mapping\DefaultEntityListenerResolver

	  doctrine.orm.default_entity_manager Doctrine\ORM\EntityManager

	  doctrine.orm.default_listeners.attach_entity_listeners               Doctrine\ORM\Tools\AttachEntityListenersListener

	  doctrine.orm.default_manager_configurator                            Doctrine\Bundle\DoctrineBundle\ManagerConfigurator

	  doctrine.orm.default_metadata_cache alias for "doctrine_cache.providers.doctrine.orm.default_metadata_cache"

	  doctrine.orm.default_query_cache    alias for "doctrine_cache.providers.doctrine.orm.default_query_cache"

	  doctrine.orm.default_result_cache   alias for "doctrine_cache.providers.doctrine.orm.default_result_cache"

	  doctrine.orm.entity_manager         alias for "doctrine.orm.default_entity_manager"

	  doctrine.orm.validator.unique       Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator

	  doctrine.orm.validator_initializer  Symfony\Bridge\Doctrine\Validator\DoctrineInitializer

	  doctrine_cache.providers.doctrine.orm.default_metadata_cache         Doctrine\Common\Cache\ArrayCache

	  doctrine_cache.providers.doctrine.orm.default_query_cache            Doctrine\Common\Cache\ArrayCache

	  doctrine_cache.providers.doctrine.orm.default_result_cache           Doctrine\Common\Cache\ArrayCache
	  event_dispatcher                    alias for "debug.event_dispatcher"
	  file_locator                        Symfony\Component\HttpKernel\Config\FileLocator
	  filesystem                          Symfony\Component\Filesystem\Filesystem
	  form.factory                        Symfony\Component\Form\FormFactory
	  form.registry                       Symfony\Component\Form\FormRegistry
	  form.resolved_type_factory          Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy
	  form.type.birthday                  Symfony\Component\Form\Extension\Core\Type\BirthdayType
	  form.type.button                    Symfony\Component\Form\Extension\Core\Type\ButtonType
	  form.type.checkbox                  Symfony\Component\Form\Extension\Core\Type\CheckboxType
	  form.type.choice                    Symfony\Component\Form\Extension\Core\Type\ChoiceType
	  form.type.collection                Symfony\Component\Form\Extension\Core\Type\CollectionType
	  form.type.country                   Symfony\Component\Form\Extension\Core\Type\CountryType
	  form.type.currency                  Symfony\Component\Form\Extension\Core\Type\CurrencyType
	  form.type.date                      Symfony\Component\Form\Extension\Core\Type\DateType
	  form.type.datetime                  Symfony\Component\Form\Extension\Core\Type\DateTimeType
	  form.type.email                     Symfony\Component\Form\Extension\Core\Type\EmailType
	  form.type.entity                    Symfony\Bridge\Doctrine\Form\Type\EntityType
	  form.type.file                      Symfony\Component\Form\Extension\Core\Type\FileType
	  form.type.form                      Symfony\Component\Form\Extension\Core\Type\FormType
	  form.type.hidden                    Symfony\Component\Form\Extension\Core\Type\HiddenType
	  form.type.integer                   Symfony\Component\Form\Extension\Core\Type\IntegerType
	  form.type.language                  Symfony\Component\Form\Extension\Core\Type\LanguageType
	  form.type.locale                    Symfony\Component\Form\Extension\Core\Type\LocaleType
	  form.type.money                     Symfony\Component\Form\Extension\Core\Type\MoneyType
	  form.type.number                    Symfony\Component\Form\Extension\Core\Type\NumberType
	  form.type.password                  Symfony\Component\Form\Extension\Core\Type\PasswordType
	  form.type.percent                   Symfony\Component\Form\Extension\Core\Type\PercentType
	  form.type.radio                     Symfony\Component\Form\Extension\Core\Type\RadioType
	  form.type.range                     Symfony\Component\Form\Extension\Core\Type\RangeType
	  form.type.repeated                  Symfony\Component\Form\Extension\Core\Type\RepeatedType
	  form.type.reset                     Symfony\Component\Form\Extension\Core\Type\ResetType
	  form.type.search                    Symfony\Component\Form\Extension\Core\Type\SearchType
	  form.type.submit                    Symfony\Component\Form\Extension\Core\Type\SubmitType
	  form.type.text                      Symfony\Component\Form\Extension\Core\Type\TextType
	  form.type.textarea                  Symfony\Component\Form\Extension\Core\Type\TextareaType
	  form.type.time                      Symfony\Component\Form\Extension\Core\Type\TimeType
	  form.type.timezone                  Symfony\Component\Form\Extension\Core\Type\TimezoneType
	  form.type.url                       Symfony\Component\Form\Extension\Core\Type\UrlType
	  form.type_extension.csrf            Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension
	  form.type_extension.form.data_collector                              Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension
	  form.type_extension.form.http_foundation                             Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension

	  form.type_extension.form.validator  Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension

	  form.type_extension.repeated.validator                               Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension

	  form.type_extension.submit.validatorSymfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension

	  form.type_guesser.doctrine          Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser

	  form.type_guesser.validator         Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser

	  fragment.handler                    Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler
	  fragment.listener                   Symfony\Component\HttpKernel\EventListener\FragmentListener
	  fragment.renderer.esi               Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer
	  fragment.renderer.hinclude          Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer
	  fragment.renderer.inline            Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer
	  fragment.renderer.ssi               Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer
	  http_kernel                         Symfony\Component\HttpKernel\HttpKernel
	  kernel
	  kernel.class_cache.cache_warmer     Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer
	  locale_listener                     Symfony\Component\HttpKernel\EventListener\LocaleListener
	  logger                              Symfony\Bridge\Monolog\Logger
	  mailer                              alias for "swiftmailer.mailer.default"
	  monolog.handler.console             Symfony\Bridge\Monolog\Handler\ConsoleHandler
	  monolog.handler.debug               Symfony\Bridge\Monolog\Handler\DebugHandler
	  monolog.handler.main                Monolog\Handler\StreamHandler
	  monolog.logger.doctrine             Symfony\Bridge\Monolog\Logger
	  monolog.logger.event                Symfony\Bridge\Monolog\Logger
	  monolog.logger.php                  Symfony\Bridge\Monolog\Logger
	  monolog.logger.profiler             Symfony\Bridge\Monolog\Logger
	  monolog.logger.request              Symfony\Bridge\Monolog\Logger
	  monolog.logger.router               Symfony\Bridge\Monolog\Logger
	  monolog.logger.security             Symfony\Bridge\Monolog\Logger
	  monolog.logger.templating           Symfony\Bridge\Monolog\Logger
	  monolog.logger.translation          Symfony\Bridge\Monolog\Logger
	  profiler                            Symfony\Component\HttpKernel\Profiler\Profiler
	  profiler_listener                   Symfony\Component\HttpKernel\EventListener\ProfilerListener

	  property_accessor                   Symfony\Component\PropertyAccess\PropertyAccessor

	  request_stack                       Symfony\Component\HttpFoundation\RequestStack

	  response_listener                   Symfony\Component\HttpKernel\EventListener\ResponseListener

	  router                              Symfony\Bundle\FrameworkBundle\Routing\Router

	  router_listener                     Symfony\Component\HttpKernel\EventListener\RouterListener

	  routing.loader                      Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader

	  security.authentication.guard_handler                                Symfony\Component\Security\Guard\GuardAuthenticatorHandler

	  security.authentication_utils       Symfony\Component\Security\Http\Authentication\AuthenticationUtils

	  security.authorization_checker      Symfony\Component\Security\Core\Authorization\AuthorizationChecker

	  security.csrf.token_manager         Symfony\Component\Security\Csrf\CsrfTokenManager

	  security.encoder_factory            Symfony\Component\Security\Core\Encoder\EncoderFactory

	  security.firewall                   Symfony\Component\Security\Http\Firewall

	  security.firewall.map.context.dev   Symfony\Bundle\SecurityBundle\Security\FirewallContext

	  security.firewall.map.context.main  Symfony\Bundle\SecurityBundle\Security\FirewallContext

	  security.password_encoder           Symfony\Component\Security\Core\Encoder\UserPasswordEncoder

	  security.rememberme.response_listener                                Symfony\Component\Security\Http\RememberMe\ResponseListener

	  security.token_storage              Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage

	  security.user_checker.main          Symfony\Component\Security\Core\User\UserChecker

	  security.validator.user_password    Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator

	  sensio_distribution.security_checkerSensioLabs\Security\SecurityChecker

	  sensio_distribution.security_checker.command                         SensioLabs\Security\Command\SecurityCheckerCommand

	  sensio_framework_extra.cache.listener                                Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener

	  sensio_framework_extra.controller.listener                           Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener

	  sensio_framework_extra.converter.datetime                            Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter

	  sensio_framework_extra.converter.doctrine.orm                        Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter

	  sensio_framework_extra.converter.listener                            Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener

	  sensio_framework_extra.converter.manager                             Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager

	  sensio_framework_extra.security.listener                             Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener

	  sensio_framework_extra.view.guesser Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser

	  sensio_framework_extra.view.listenerSensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener

	  service_container

	  session                             Symfony\Component\HttpFoundation\Session\Session
	  session.handler                     Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler
	  session.save_listener               Symfony\Component\HttpKernel\EventListener\SaveSessionListener
	  session.storage                     alias for "session.storage.native"
	  session.storage.filesystem          Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage
	  session.storage.native              Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage
	  session.storage.php_bridge          Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage
	  session_listener                    Symfony\Bundle\FrameworkBundle\EventListener\SessionListener
	  streamed_response_listener          Symfony\Component\HttpKernel\EventListener\StreamedResponseListener

	  swiftmailer.email_sender.listener   Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener
	  swiftmailer.mailer                  alias for "swiftmailer.mailer.default"
	  swiftmailer.mailer.default          Swift_Mailer
	  swiftmailer.mailer.default.plugin.messagelogger                      Swift_Plugins_MessageLogger
	  swiftmailer.mailer.default.spool    Swift_MemorySpool
	  swiftmailer.mailer.default.transportSwift_Transport_SpoolTransport
	  swiftmailer.mailer.default.transport.real                            Swift_Transport_EsmtpTransport
	  swiftmailer.plugin.messagelogger    alias for "swiftmailer.mailer.default.plugin.messagelogger"
	  swiftmailer.spool                   alias for "swiftmailer.mailer.default.spool"
	  swiftmailer.transport               alias for "swiftmailer.mailer.default.transport"
	  swiftmailer.transport.real          alias for "swiftmailer.mailer.default.transport.real"

	  templating                          Symfony\Bundle\TwigBundle\TwigEngine
	  templating.filename_parser          Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser
	  templating.helper.logout_url        Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper
	  templating.helper.security          Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper
	  templating.loader                   Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader
	  templating.name_parser              Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser
	  translation.dumper.csv              Symfony\Component\Translation\Dumper\CsvFileDumper
	  translation.dumper.ini              Symfony\Component\Translation\Dumper\IniFileDumper
	  translation.dumper.json             Symfony\Component\Translation\Dumper\JsonFileDumper
	  translation.dumper.mo               Symfony\Component\Translation\Dumper\MoFileDumper
	  translation.dumper.php              Symfony\Component\Translation\Dumper\PhpFileDumper
	  translation.dumper.po               Symfony\Component\Translation\Dumper\PoFileDumper
	  translation.dumper.qt               Symfony\Component\Translation\Dumper\QtFileDumper
	  translation.dumper.res              Symfony\Component\Translation\Dumper\IcuResFileDumper
	  translation.dumper.xliff            Symfony\Component\Translation\Dumper\XliffFileDumper
	  translation.dumper.yml              Symfony\Component\Translation\Dumper\YamlFileDumper
	  translation.extractor               Symfony\Component\Translation\Extractor\ChainExtractor
	  translation.extractor.php           Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor
	  translation.loader                  Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader
	  translation.loader.csv              Symfony\Component\Translation\Loader\CsvFileLoader
	  translation.loader.dat              Symfony\Component\Translation\Loader\IcuDatFileLoader
	  translation.loader.ini              Symfony\Component\Translation\Loader\IniFileLoader
	  translation.loader.json             Symfony\Component\Translation\Loader\JsonFileLoader
	  translation.loader.mo               Symfony\Component\Translation\Loader\MoFileLoader
	  translation.loader.php              Symfony\Component\Translation\Loader\PhpFileLoader
	  translation.loader.po               Symfony\Component\Translation\Loader\PoFileLoader
	  translation.loader.qt               Symfony\Component\Translation\Loader\QtFileLoader
	  translation.loader.res              Symfony\Component\Translation\Loader\IcuResFileLoader
	  translation.loader.xliff            Symfony\Component\Translation\Loader\XliffFileLoader
	  translation.loader.yml              Symfony\Component\Translation\Loader\YamlFileLoader
	  translation.writer                  Symfony\Component\Translation\Writer\TranslationWriter
	  translator                          Symfony\Component\Translation\IdentityTranslator
	  translator.default                  Symfony\Bundle\FrameworkBundle\Translation\Translator
	  translator_listener                 Symfony\Component\HttpKernel\EventListener\TranslatorListener

	  twig                                Twig_Environment
	  twig.controller.exception           Symfony\Bundle\TwigBundle\Controller\ExceptionController
	  twig.controller.preview_error       Symfony\Bundle\TwigBundle\Controller\PreviewErrorController
	  twig.exception_listener             Symfony\Component\HttpKernel\EventListener\ExceptionListener
	  twig.loader                         Symfony\Bundle\TwigBundle\Loader\FilesystemLoader
	  twig.profile                        Twig_Profiler_Profile
	  twig.translation.extractor          Symfony\Bridge\Twig\Translation\TwigExtractor
	  uri_signer                          Symfony\Component\HttpKernel\UriSigner
	  validator                           Symfony\Component\Validator\Validator\ValidatorInterface
	  validator.builder                   Symfony\Component\Validator\ValidatorBuilderInterface
	  validator.email                     Symfony\Component\Validator\Constraints\EmailValidator
	  validator.expression                Symfony\Component\Validator\Constraints\ExpressionValidator
	  var_dumper.cli_dumper               Symfony\Component\VarDumper\Dumper\CliDumper
	  var_dumper.cloner                   Symfony\Component\VarDumper\Cloner\VarCloner
	  web_profiler.controller.exception   Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController
	  web_profiler.controller.profiler    Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController
	  web_profiler.controller.router      Symfony\Bundle\WebProfilerBundle\Controller\RouterController
	  web_profiler.debug_toolbar          Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener
	 ------- ----------- --------------- 


	 // To search for a specific service, re-run this command with a search term. (e.g. debug:container log)


我们按照提示，搜索特定的命令：
	$ php bin/console debug:container log

	 Select one of the following services to display its information:
	  [0 ] security.logout_url_generator
	  [1 ] templating.helper.logout_url
	  [2 ] monolog.handler.main
	  [3 ] monolog.handler.console
	  [4 ] swiftmailer.mailer.default.plugin.messagelogger
	  [5 ] doctrine.dbal.logger.profiling.default
	  [6 ] monolog.logger.request
	  [7 ] monolog.logger.translation
	  [8 ] monolog.logger.templating
	  [9 ] monolog.logger.profiler
	  [10] monolog.logger.router
	  [11] monolog.logger.php
	  [12] monolog.logger.event
	  [13] monolog.logger.security
	  [14] monolog.logger.doctrine
	  [15] monolog.handler.debug
	  [16] logger
	  [17] swiftmailer.plugin.messagelogger
	>


输入16，回车：
16
	Information for Service "logger"
	========== =========== ===========

	 --------- --------- --------- ------------ ----------
	  Option             Value
	 --------- --------- --------- ------------- ---------
	  Service ID         logger
	  Class              Symfony\Bridge\Monolog\Logger
	  Tags               -
	  Public             yes
	  Synthetic          no
	  Lazy               no
	  Shared             yes
	  Abstract           no
	  Autowired          no
	  Autowiring Types   -
	 -------- ---------- -------- ------------- ----------





========================================
Twig: For a Good time with Templates 与模板和谐相处
----------------------------------------
http://knpuniversity.com/screencast/symfony/hello-twig#play

Twig语法：
	{{ }} Say something tag .like javascript.
	{% %} Do something tag

twig语法文档：http://twig.sensiolabs.org/documentation
	The flexible, fast, and secure template engine for PHP
	灵活、快速和安全的php模板引擎。

	
循环语句的语法：
	{% extends 'base.html.twig' %}
	{% block body %}
	<h1>The Genus {{ name }}</h1>
	<ul>
		{% for note in notes %}
			<li>{{ note }}</li>
		{% endfor %}
	</ul>
	{% endblock %}

	
	
    /* 输出全部变量 */<br>
    {{ dump() }} 
    除了输出赋值变量外，还输出一个变量app




模板中输出css（/*web/css/styles.css*/）
	{% block stylesheets %}
		<link rel="stylesheet" type="text/css" href="{{ asset('/css/styles.css') }}" />
	{% endblock %}


========================================
Loading CSS & JS Assets 载入css和js资源
----------------------------------------
http://knpuniversity.com/screencast/symfony/layout-assets#play

asset函数。


基于Twig的继承机制，很好很强大！
可以考虑把Twig模板单独拿出来。


========================================
JSON Responses + Route Generation   json响应和路由生成
----------------------------------------
http://knpuniversity.com/screencast/symfony/json-api#play


sf是很适合编写API的！



	// src/AppBundle/Controller/LuckyController.php
	namespace AppBundle\Controller;

	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
	use Symfony\Component\HttpFoundation\Response;
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;


	// --> don't forget this new use statement
	use Symfony\Component\HttpFoundation\JsonResponse;

	//method
	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;

    /**
    * @Route("/api/{name}/notes")
    * @Method("GET")
    */
    public function getNotesAction($name){
    	//
    	$notes=[
    		['id'=>1, 'username'=>'Jim','url'=>'/images/001.jpg','note'=>'i am Jim'],
    		['id'=>2, 'username'=>'Robin','url'=>'/images/002.jpg','note'=>'i am Robin'],
    	];

    	$data=[
    		'notes'=>$notes,
    		'name'=>$name
    	];
    	//return new Response(json_encode($data));
    	return new JsonResponse($data);//better way
    	/*
			Content-Type:application/json
    	*/
    }
记得：
	1.添加Route()和Method()
	2.添加Method的引入：

========================================
Generating URLs   生成URL
----------------------------------------

如果你想使用json，路径怎么确定呢？
写死是不好的，万一改变path你就没法用了。
sf中提供了路由的name属性，在你更改路由之后依然可以访问该json。

1.先访问一个页面：
    /**
     * @Route("/lucky/number4/{count}") 
     * 这个路由是动态路由
     */
    public function numberList4Action($count)
    {
        return $this->render(
            'lucky/number.html.twig',
            array('luckyNumberList' => $count, 
                'title'=>'number list',
                'name' => 'Jim'
                )
        );
    }
2.它的模板中写上连接：

	<a href='/api/{{ name }}/notes'>Json01</a>

	<a href="{{ path('Json_show_notes',{'name':123})  }}">Json02</a>

其中{{ path(路由名, 路由名中需要的参数json格式) }}

3.定义json的api控制器：

    /**
    * @Route("/api/{name}/notes", name="Json_show_notes" )
    * @Method("GET")
    */
    public function getNotesAction($name){
        //
        $notes=[
            ['id'=>1, 'username'=>'Jim','url'=>'/images/001.jpg','note'=>'i am Jim'],
            ['id'=>2, 'username'=>'Robin','url'=>'/images/002.jpg','note'=>'i am Robin']
        ];

        $data=[
            'notes'=>$notes,
            'name'=>$name
        ];
        //return new Response(json_encode($data));
        return new JsonResponse($data);//better way
        /*
            Content-Type:application/json
        */
    }

@Route的第二个参数 name="Json_show_notes" 可以关联该路由，即使后来改名字
@Route("/api/{name}/notes2", name="Json_show_notes" )
我们第一个页面依旧可以访问到该json。

我们从命令行查看路由：
$ php bin/console debug:router
 ------------ -------------- -------- -------- ------ --------------- --------------------
  Name                       Method   Scheme   Host   Path
 ------------ -------------- -------- -------- ------ ---------------- -------------------
  _wdt                       ANY      ANY      ANY    /_wdt/{token}
  _profiler_home             ANY      ANY      ANY    /_profiler/
  _profiler_search           ANY      ANY      ANY    /_profiler/search
  _profiler_search_bar       ANY      ANY      ANY    /_profiler/search_bar
  _profiler_info             ANY      ANY      ANY    /_profiler/info/{about}
  _profiler_phpinfo          ANY      ANY      ANY    /_profiler/phpinfo
  _profiler_search_results   ANY      ANY      ANY    /_profiler/{token}/search/results
  _profiler                  ANY      ANY      ANY    /_profiler/{token}
  _profiler_router           ANY      ANY      ANY    /_profiler/{token}/router
  _profiler_exception        ANY      ANY      ANY    /_profiler/{token}/exception
  _profiler_exception_css    ANY      ANY      ANY    /_profiler/{token}/exception.css
  _twig_error_test           ANY      ANY      ANY    /_error/{code}.{_format}
  homepage                   ANY      ANY      ANY    /
  app_lucky_number           ANY      ANY      ANY    /lucky/number
  app_lucky_numberlist       ANY      ANY      ANY    /lucky/number/{count}
  app_lucky_numberlist2      ANY      ANY      ANY    /lucky/number2/{count}
  app_lucky_numberlist3      ANY      ANY      ANY    /lucky/number3/{count}
  app_lucky_numberlist4      ANY      ANY      ANY    /lucky/number4/{count}
  app_lucky_apinumber        ANY      ANY      ANY    /api/lucky/number
  app_lucky_apinumber2       ANY      ANY      ANY    /api/lucky/number2
  Json_show_notes            GET      ANY      ANY    /api/{name}/notes
 ---------- ---------------- -------- -------- ------ --------------- --------------------
可以看到最后一条，path不变，而name已经变了。如果没有设置name，则默认使用方法名。

小结：
	1.控制器中route的第二个参数是name属性；
	2.在模板中使用{{ path(name, 参数json) }}函数生成url，并且名字不变的话，方法名改变则path结果也相应改变，不影响json数据的获取。


========================================
ReactJS talks to your API   使用ReactJS与API交谈
----------------------------------------
1.twig块的继承：
	如果子模板中使用{% block something %}{% endblock %}，则会覆盖父模板；
	如果想在父模板中添加代码，则需要先使用{{ parent() }}函数：
		{% block something %}
			{{ parent() }}
			//other code goes here		
		{% endblock %}

2.ReactJS可以渲染json成html。





# 接下来需要学习的
	数据库会话
	使用表格
	建立安全机制
	处理API输入和验证
	how and why 注册自己的服务
	event listener是什么？
	
