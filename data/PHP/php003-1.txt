
语言之争是无止境的，不要陷入这个争吵，保持冷静。不要浪费时间。
但是适当关注语言之争是必要的，能帮助我们在更高的层次上看清优劣，扬长避短。

========================================
语言具有取代性
----------------------------------------
servlet出现的时候，perl/php已死
jsp出现的时候，servlet已死
struts2出来的时候，struts1已死

存在就是有价值，“已死”之类的词还是有点“牵强”

http://www.jdon.com/38448

========================================
最好的前后端架构？
----------------------------------------
过去，MVC主要是在服务器端实现，主要语言有 Java和C#等，
如今客户端MVC已经出现，如AngularJS BackoneJS和EmberJS等。

服务器端MVC框架容易使用，有许多选择和成熟的解决方案，后端编程语言选择有 Java, Scala, C#, Clojure, JavaScript/NodeJS, 等等，其实我们并不需要在浏览器方面的豪华阵容，Adobe Flash已经死了， Silverlight 从来没有雄起，因为Html5到来了，浏览器世界变化很快。

如果再考虑到移动设备开发，并没有一种原生语言适合所有设备，所以，使用Html也许是一种解决方案。

所有这些都有一个共同点，无论是移动 Web 或桌面，或Google眼镜，所有的设备都要和后端API通过REST通讯。

客户端Javascript驱动的MVC如angular, ember, backbone等的问题是比较慢，用户体验差，同时对搜索引擎不友好，因此，J业界开始实现Javacript的服务器端渲染。
就一句话: "第一次服务端渲染,后面客户端渲染"。
http://www.jdon.com/46982

========================================
依赖注入模式 反转模式
----------------------------------------
赖注射概念最早是 Uncle Bob 在他May 1996的 C++报告, The Dependency Inversion Principle.

这个原理简单归结如下：
高层次模块不应该依赖低层次模块，他们应该依赖于一种抽象。

依赖注入可以看成是 反转控制 inversion of control 的一个特例。反转的是依赖，而不是其他。

依赖注入是最早Spring和piconcontainer等提出，如今已经是一个缺省主流模式，并扩展到前端如Angular.js。本主题国内最早IOC和依赖注入的讨论专题。

在通常情况下，我们是在使用A时同时需要将B的实例赋予A。
　　A a = new A(new B());
　　a. mymethod();

而通过依赖注入容器或框架，A对B的依赖无需我们编写代码时赋予，只要我们从一个工厂或容器中获取A的实例，这个工厂或容器是依赖注入框架提供的，它会在里面偷偷地将B的实例注入到A中：
　　A a = factory.getA();
　　a. mymethod();
这样，我们客户端调用代码就只和A耦合，这样，我们无需打开A的代码，观察其内部和哪些其他类发生依赖耦合，然后手工将这些依赖的实例注入其中。


http://www.jdon.com/di.html

========================================
AOP面向方面编程
----------------------------------------
AOP是OOP的延续，是Aspect Oriented Programming的缩写，意思是面向方面编程。AOP带来了新的编程革新。 使得软件设计更加细化，代码的编写顺序不再决定其运行顺序，诞生动态组件概念，结合IOC DI模式，可以实现软件编写和运行的最大灵活性，自诞生以来已经成为Java领域主流模式，典型框架有Spring或AspectJ框架。

　　 在面向对象系统中，我们经常需要一些任务活动，如记录，交易的安全性，缓存等，这些活动是必要的，但不是业务逻辑的一部分，被称为"横切关注点"。

（横切关注==跨整个系统的常用功能）


========================================
一名合格的PHP工程师的知识结构是怎样的？
----------------------------------------
作者：叶重
链接：https://www.zhihu.com/question/19875503/answer/41122699
来源：知乎
著作权归作者所有，转载请联系作者获得授权。

一.Linux方面

Linux常用命令 
1. 文件处理命令
2. 权限管理命令
3. 帮助命令
4. 文件搜索命令
5. 压缩解压命令
6. 命令使用技巧
7. 文本编辑器Vim 
掌握Linux常见命令操作，学会Linux基本使用，熟悉Linux下文本编辑器。

Linux系统管理
1. 软件包管理
2. 用户和用户组管理
3. 服务与进程管理 
掌握Linux系统常见的系统管理操作。

Linux网络应用 
1. 基本网络设置
2. 网络文件共享 
掌握Linux系统常见的网络配置文件和命令，熟悉文件共享服务SSH、FTP。 

LAMP环境编译及Apache配置 
1. LAMP环境编译
2. Apache基本选项及应用案例 
掌握源代码包编译构架LAMP环境，学会Apache的基本配置及典型互联网应用配置。 
_______________________________________________________________
二.对象的程序设计 

面象对象的介绍 
1. 类和对象之间的关系
2. 面向对象的程序设计 
面向对象是PHP5中的新加功能，也是PHP以后编写代码的方式，掌握面向对象在行业中的应用，并了解一些基本的面向对象的声明语法。 

如何抽象一个类 
1. 类的声明
2. 成员属性
3. 成员方法

通过类实例化对象
1. 创建对象
2. 对象类型在内存中的分配
3. 对象中成员的访问
4. 特殊的对象引用“$this”
5. 构造方法与析构方法 
掌握对象在程序中的应用，在内存中的分配形式，还要对象中的成员访问方式，并要掌握构造和析构以及关键字$this 使用。

封装性 
1. 设置私有成员
2. 私有成员的访问
3. __set()、__get()、__isset()和__unset()
4. 四个方法 
使用面向对象一定要使用他的三大特性，封装就是其中之一，掌握封装的意义以及封装的应用和各种与封装有关的魔术方法。

继承性 
1. 类继承的应用
2. 访问类型控制
3. 子类中重载父类的方法 
继承性也是面向对象的三大特性之一，需要掌握继承的意义与应用，访问控制和重载的方式。

常见的关键字和魔术方法 
1. final关键字的应用
2. static和const关键字的使用
3. 克隆对象
4. 类中通用的方法__toString()
5. 通过__call()方法处理错误调用
6. 自动加载类
7. 对象串行化 
在PHP的面向对象的程序设计中会用动一些常见的关键字和一些常用的魔术方法，需要全部掌握，并可以灵活运用。

抽象类与接口和多态 
1. 抽象方法和抽象类
2. 接口技术
3. 多态性的应用 
了解抽象类和接口的作用，并掌握他们的声明与应用，重点掌握多态性的应用。

与类和对象有关的系统函数 
1. 与类有关的系统函数
2. 与对象有关的系统函数 
PHP中提供的类和对象有关的函数不多，但比较常用

常用功能类的编写 
1. 分页类
2. 验证码类
3. 图像处理类
4. 文件上传类
5. 数据验证类 
通过这几个类的编写，不仅可以方便你在所有PHP项目中通用这些功能类，还可以对面向对象技术进行总结。
_______________________________________________________________
三.抽象层PDO 

PDO所支持的数据库 
1. PDO的应用及所支持的数据库 
掌握PDO的应用原理和驱动设置，以及PDO的安装方法，并可以以多种方式创建PDO对象，和面要了解PDO对象中的成员。 

创建PDO对象 
1. 以多种方式调用构造方法
2. PDO对象中的成员方法

使用PDO对象 
1. 调整PDO的行为属性
2. PDO处理PHP程序和数据库之间的数据类型转换
3. PDO的错误处理模式
4. 使用PDO执行SQL语句 
需要掌握PHP中的各种属性的应用、设置和读取，以及PDO的错误处理模式，还需要了解通过PDO执行SQL语句。

PDO对预处理语句的支持 
1. 了解PDOStatement对象
2. 准备语句
3. 绑定参数
4. 执行准备好的查询
5. 获取数据 
PDO的预处理对象，可以完成PHP程序和数据库之间的各种操作。需要掌握如果使用PDO准备预处理语句，和绑定参数、执行准备好的语句，获取数据和大数据对象的存取，并可以使用PDO完成事务处理操作。

PDO的事务处理 
PDO的事务处理方式
_______________________________________________________________
四.脚本JavaScript 

JavaScript语法 
1. JavaScript应用概述
2. JavaScript脚本中变量与运算符
3. JavaScript流程控制和函数
4. JavaScript中数组和对象的创建及应用 
可以完成JvavaScript的所有语法的学习，以及和HTML和CSS联合使用，并可以编写一些页面中常见的脚本程序。 

DOM编程 
1. DOM及DHTML的应用介绍
2. 各种事件及事件处理程序的应用
3. 窗口window对象的属性和方法
4. 文档document对象的应用
5. 其location、body、form、screen等对象的使用 

学会页面中DOM的灵活应用、事件处理，还有各种DOM对象的属性和方法，以及网页中所有特效的编写。
_______________________________________________________________
五.Ajax 

Ajax的应用 
1. Ajax概述
2. Ajax定义
3. 使用Ajax创建Ajax的引擎
4. Ajax Web应用模式（异步）
5. AJAX 开发中的应用
6. 编写和应用自定义的Ajax类
7. 使用Ajax完成XML的操作
8. 在Ajax应用Json技术
9. Ajax3.0的应用 
要了解异步传递数据的方式，并掌握创建AJAX对象和应用AJAX对象中的属性和方法。
_______________________________________________________________
六.Ajax与JQuery框架应用 

JQuery的使用 
1. JQuery的概述
2. JQuery的核心方法
3. JQuery的选择器
4. JQuery的属性
5. JQuery的筛选和文档处理
6. JQuery的CSS应用 
掌握在HTML文件中添加JQuery的应用，可以使用JQuery中的核心方法，以及常用选择器的使用，和一些常用的JQuery方法。 

JQuery的Ajax应用 
1. JQuery的事件
2. JQuery的效果
3. 使用JQuery中的AjAX应用 
Ajax是JQuery重点实现的技术，掌握JQuery中的几种实现方法。
_______________________________________________________________
七.设计模式 

MVC模式
1. MVC模式介绍
2. 视图
3. 控制器
4. 模型
5. 模块和操作
6. 主入口文件
7. MVC模式应用 

需要掌握MVC的设计模式，包括视图、控制器、模型的应用。其他的设计模式最好也要会使用。
_______________________________________________________________
八.代码规范

PHP编码规范
数据库规范设置
模板编写规范 
1. 适用范围
2. 开发工具
3. PHP的文件格式
4. 注释规范
5. 空行和空白
6. 字符串的使用
7. 命名原则
8. 语言结构
9. 数表表的设计
10. 索引设计原则
11. SQL语句的设计
12. 模板设计规范 
_______________________________________________________________
九.版本控制

github和svn
_______________________________________________________________
十.框架
了解一些框架，比如Laravel，Yii，CodeIgniter，ThinkPHP之类的

========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


