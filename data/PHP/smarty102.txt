smarty3模板引擎

学习方法建议：下载最新版手册，对着手册敲代码。
当前最新版：version   3.1.30-dev


========================================
smarty3模板引擎
----------------------------------------
1.下载地址：http://www.smarty.net/download
github:https://github.com/smarty-php/smarty

You can download the latest master from Smarty GitHub repository:
git clone https://github.com/smarty-php/smarty.git

Download lastest master as a zip file:
https://github.com/smarty-php/smarty/archive/master.zip

Visit the GIT Repository: https://github.com/smarty-php/smarty

Smarty versions 3.1.11 or later are now on github and can be installed with Composer.

2.文档：
	官网：http://www.smarty.net/docs/zh_CN/
	镜像：http://www.speedphp.com/smarty/index.html
3.为什么使用smarty？
	1.强大的表现逻辑；
	2.模板编译；
	3.缓存；
	4.高度可配置性和可扩展性；
	5.安全；防止程序遭到设计人员有意无意的破坏；


========================================
工作流程
----------------------------------------
1.先是引入smarty引擎；
2.创建php脚本，业务逻辑层；
3.创建tpl模板文件，表现层；
4.smarty模板引擎把php和tpl混合，得到编译文件，是php文件，混合了php和html。
5.如果开启模板缓存功能，则编译文件还会生成一个缓存文件，纯静态html文件；
6.如果再次访问，并且没有超时，则访问时直接执行纯静态的html文件；


========================================
引入smarty模板引擎
----------------------------------------
1.安装smarty模板引擎；
	(1)直接到官网下载，解压并提取libs文件夹，改名为smarty3，放到网站根目录。
	(2)创建demo1文件夹，新建一个php文件，引入smarty入口文件。
		//include('../smarty3/Smarty.class.php');//建议用绝对路径。
		
		<?php
		//创建实际路径
		define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn
		require(ROOT_PATH . '/../smarty3/Smarty.class.php');

		//实例化
		$_smarty=new Smarty();

		//打印
		$_smarty->display('demo1.tpl');

	(3)建立所需要的4个文件夹，后续慢慢建。
	
2.运行报错，因为没有demo1.tpl文件。那么tpl文件的位置在哪呢？尝试发现，可以放到入口文件所在目录，或该目录下的templates文件夹。
	在Smarty主文件的293行：  protected $template_dir = array('./templates/');
	
	我们放到templates文件夹。demo1.tpl文件内容为：<h1>this is title</h1>
	
	刷新后，发现Smarty又建立一个templates_c文件夹，里面是编译文件73119e5a60ab2a480d8b1b251ff4100a284925bf_0.file.demo1.tpl.php
	这就是编译文件。
	
3.如何定义变量：
	
	我们在入口文件定义变量：
		<?php
		//创建实际路径
		define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn
		require(ROOT_PATH . '/../smarty3/Smarty.class.php');

		//实例化
		$_smarty=new Smarty();

		//注册变量
		$_smarty->assign('name','Dawn');

		//打印
		$_smarty->display('demo1.tpl');

	在模板文件demo1.tpl中引用：
		<h1>this is {$name}</h1>
	访问后打印出：this is Dawn

目前，你已经会引入模板，并注册变量了！

一般我们先定义变量，再赋值：
//定义变量
$myName='Dawn2';

//注册变量
$_smarty->assign('name',$myName);

然后模板中正常引用。



4.如何修改模板目录，编译文件目录？
给变量$_smarty->template_dir指定模板目录。
给变量$_smarty->compile_dir指定编译目录

	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn
	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//修改模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/tpl';
	//修改编译目录
	$_smarty->compile_dir=ROOT_PATH . '/tpl_c';

	//定义变量
	$myName='Dawn3';

	//注册变量
	$_smarty->assign('name',$myName);

	//打印
	$_smarty->display('demo1.tpl');

然后，在tpl文件夹下新建文件demo1.tpl:
	<h1>this is {$name}</h1>
	from tpl dir.

结果输出：
this is Dawn2
from tpl dir.

同时，在tpl_c目录发现一个编译文件 b2ff82e789febf8d5ebe73e8d019c419b3a96224_0.file.demo1.tpl.php

建议不修改文件名，但是改成绝对路径：
//修改模板文件路径
$_smarty->template_dir=ROOT_PATH . '/templates';
//修改编译目录
$_smarty->compile_dir=ROOT_PATH . '/templates_c';



5.是否开启缓存
$_smarty->caching=true;

建议：开发调试阶段要关闭缓存！
	否则php中的变量不会及时改变。要及时删掉缓存文件，麻烦。最好不缓存方便调试。
	
6.ptl中的定界符{}很有可能和js以及css的{}冲突，怎么解决呢？
	(1)要么修改smarty的定界符；
		//左右定界符
		$_smarty->left_delimiter='<!--{';
		$_smarty->right_delimiter='}-->';
	
	在模板文件中：
		<h1>this is {$name}</h1>
		<!--{$name}-->
	
	解析结果：
	this is {$name} 
	Dawn6
	
	(2)要么全部使用外部js和css文件。不要出现{}符号。

	
	建议：不修改定界符，用外部js和css文件。

7.好多配置信息！怎么独立出去？
在入口文件所在目录建立smarty.inc.php文件：
	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn

	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/templates/';
	//编译目录
	$_smarty->compile_dir=ROOT_PATH . '/templates_c/';
	//配置文件目录
	$_smarty->config_dir=ROOT_PATH . '/configs/';
	//缓存目录
	$_smarty->cache_dir=ROOT_PATH . '/cache/';

	//是否开启缓存
	$_smarty->caching=false;

	//左右定界符
	$_smarty->left_delimiter='{';//'<!--{'
	$_smarty->right_delimiter='}';//'}-->'
	
在入口文件index.php中引入即可：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//这里可以注册全局变量 global.

	//定义变量
	$myName='Dawn8';

	//注册变量
	$_smarty->assign('name',$myName);

	//打印
	$_smarty->display('demo1.tpl');
demo1.tpl内容为：
	<h1>this is {$name}</h1>
	<!--{$name}-->

打印出结果：
	this is Dawn8

说明配置文件已经独立出去了。系统还正常工作。

	

========================================
smarty模板引擎：分配变量
----------------------------------------
1.大纲
	第四章.变量 
	内容列表 
	从PHP分配的变量 
	变量范围 
	从配置文件读取的变量 
	{$smarty} 保留变量 


2.现在的文件格式为：
smarty.inc.php
	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn

	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/templates/';
	//编译目录
	$_smarty->compile_dir=ROOT_PATH . '/templates_c/';
	//配置文件目录
	$_smarty->config_dir=ROOT_PATH . '/configs/';
	//缓存目录
	$_smarty->cache_dir=ROOT_PATH . '/cache/';

	//是否开启缓存
	$_smarty->caching=false;

	//左右定界符
	$_smarty->left_delimiter='{';//'<!--{'
	$_smarty->right_delimiter='}';//'}-->'

index.php
	<?php
	//引入配置文件
	require('smarty.inc.php');
	global $_smarty;

	//定义变量
	$myName='Dawn80';
	//注册变量
	$_smarty->assign('name',$myName);

	//打印
	$_smarty->display('demo2.tpl');

templates/demo2.tpl文件夹中：
	<h1>this is {$name}</h1>
	<!--{$name}-->

3. assign()方法[smarty3中文手册->14章方法->assign()]

3.1 从php分配的变量 普通变量
php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//定义变量
	$title='标题2';
	//注册变量
	$_smarty->assign('htmlTitle',$title);

	//打印
	$_smarty->display('demo2.tpl');
模板中：
	<meta charset='utf-8'>
	<title>{$htmlTitle}</title>
打印结果：
	<meta charset='utf-8'>
	<title>标题2</title>

	
3.2 从php分配的变量 数组变量
普通数组：
	//定义变量
	$arr=array('a','b','c');
	//注册变量
	$_smarty->assign('letter',$arr);

模板：
	<meta charset='utf-8'>
	<h1>{$letter[0]}</h1>
	<h1>{$letter[1]}</h1>
	<h1>{$letter[2]}</h1>
打印结果：
	a
	b
	c

使用php原生语法风格引用数组索引。


关联数组：
	//定义变量
	$arr2=array('a'=>'apple','b'=>'boy','c'=>'cat');
	//注册变量
	$_smarty->assign('letter',$arr2);
模板：
	<meta charset='utf-8'>
	<h1>{$letter['a']}</h1>
	<h1>{$letter.b}</h1>
打印结果：
	apple
	boy

	
二维数组时：
	//定义变量
	$arr3=array(
		array('a','apple'),
		array('b','boy'),
		array('c','cat')
		);
	//注册变量
	$_smarty->assign('letter',$arr3);
模板：
	<meta charset='utf-8'>
	<h1>{$letter[0][0]}</h1>
	<h1>{$letter[2][1]}</h1>
打印结果：
	a
	cat

总结：
	索引数组模板中使用 数组名[索引号]
	关联数组模板中使用 数组名[key值] 或 数组名.key值
	可以连续引用。数组名[索引号][key值]

4. 对象的引用属性和方法（php原生风格）
php文件中：
	//定义变量
	class Person{
		public $name='';
		public $email;
		public function __construct($name,$email){
			$this->name=$name;
			$this->email=$email;
		}
		function toString(){
			return '[方法运行中...]<br>]name: ' . $this->name . ', email: ' . $this->email;
		}
	}
	$p=new Person('Dawn', 'JimmyMall@live.com');

	//注册变量
	$_smarty->assign('person',$p);
	
模板中：
	<meta charset='utf-8'>
	<h1>{$person->name}</h1>
	<h1>{$person->email}</h1>
	{$person->toString()}
打印结果：
	Dawn
	JimmyMall@live.com
	[方法运行中...]
	]name: Dawn, email: JimmyMall@live.com

思考题：
对于数组中包含对象，对象中包含数组的情况怎么处理呢？


5. 模板中数值可以运算
定义：
	//定义变量
	$a=1;
	$b=200;

	//注册变量
	$_smarty->assign('a',$a);
	$_smarty->assign('b',$b);
模板：
	<meta charset='utf-8'>
	{$a+$b}
打印结果：
	201

6.从配置文件中读取变量
	在之前我们把配置文件定义在configs文件夹中
		//配置文件目录
		$_smarty->config_dir=ROOT_PATH . '/configs/';

	打开该文件夹，创建【键值对】为内容的配置文件，文件名和后缀随意。
configs/myConfig.myconfig
	name="Dawn's blog"
	email='JimmyMall@live.com'
	bodyBgColor = #000000
	color=#fff

然后在模板demo2.php中引用，2种方法。
用到内置函数 {config_load}[smarty3手册->第七章 内置函数->{config_load}]
还有一个是smarty保留变量$smarty.config [smarty3手册->第三章 基本语法->{$smarty}保留变量->{$smarty.config}]

	<meta charset='utf-8'>
	<!--导入配置文件-->
	{config_load file='myConfig.myconfig'}

	//配置文件变量#hash#方法的示例<br>
	//$smarty.config方法的示例：<br>

	<body style="background:{#bodyBgColor#};color:{$smarty.config.color}">
	<p>name: {#name#}</p>
	<p>email: {$smarty.config.email}</p>

打印结果：
	<meta charset='utf-8'>
	<!--导入配置文件-->

	//配置文件变量#hash#方法的示例<br>
	//$smarty.config方法的示例：<br>

	<body style="background:#000000;color:#fff">
	<p>name: Dawn's blog</p>
	<p>email: JimmyMall@live.com</p>


7.smarty保留变量
[smarty3手册->第三章 基本语法->{$smarty}保留变量->{$smarty.*}]

7.1 $smarty.get
模板demo2.php直接写：
	<h1>{$smarty.get.id}</h1>
访问：/index.php?id=2
得到结果：<h1>2</h1>

7.2 $smarty.server
模板中：
	<h1>{$smarty.server.REMOTE_ADDR}</h1>
打印的结果：
	<h1>127.0.0.1</h1>

更多例子：
{$smarty.server.SERVER_NAME} -> localhost

<h1>{$smarty.env.PATH}</h1>	//获取失败todo
<h1>{$smarty.env.TEMP}</h1>	//获取失败todo



7.3 $smarty.const常量
在php中直接定义，
	define('PI', 3.1415926);
在模板中引用
	<h1>{$smarty.const.PI}</h1>
打印结果：
	3.1415926
	

========================================
smarty模板引擎：自定义函数(上)[第八章 自定义函数]
----------------------------------------
1.自定义函数一般是用在tpl中使用上的。
自定义函数共分三类：
	1.模板自定义函数，smarty提供；
	2.手写的函数，在php中定义，注册到smarty中；
	3.以插件形式扩展的自定义函数；

请注意，Smarty3将原smarty2的一些自定义函数转移至内置函数。
Smarty3本身未增加自定义函数。就个人看法，有些Smarty自带的自定义函数可能会加重了php解释和从磁盘读取的消耗，而且还会增加一些学习成本，请谨慎使用。不过，可能有些同学习惯了Smarty的这些输入，那就没必要改回手工输入相应的html。


2. assign函数的使用：
index.php的内容如下，smarty.inc.php和上一节一样，没有变化。
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//定义变量
	//$a='12';
	//注册变量
	//$_smarty->assign('a',$a);

	//打印
	$_smarty->display('demo3.tpl');

模板文件demo3.tpl如下：
	<meta charset='utf-8'>

	{assign var="name" value="Bob"}
	{assign "name" "Bob"} {* 简写 *}
	The value of $name is {$name}.
打印结果：
	The value of $name is Bob.


3. counter函数的使用：
模板中：
	<meta charset='utf-8'>

	{counter start=10 skip=2 direction=down}.
	{counter}.
	{counter print=false}.
	{counter}.
	{counter}.

打印结果：
	10. 8. . 4. 2.

4. {cycle}可以交替多个值，但每个{cycle}的name属性必须唯一。
用于表格的隔行换色。
模板中：
	<meta charset='utf-8'>

	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>
	<p style='background:{cycle values="red, green"}'>xx</p>

打印结果：
	<meta charset='utf-8'>

	<p style='background:red'>xx</p>
	<p style='background: green'>xx</p>
	<p style='background:red'>xx</p>
	<p style='background: green'>xx</p>
	<p style='background:red'>xx</p>

也可以放更多的颜色：
	<p style='background:{cycle values="red, green,yellow,blue"}'>xx</p>

5. {debug} 调试，查看模板中的变量详细信息
使用chrome会自动拦截，建议选择始终允许弹出。

在模板中直接使用{debug}即可看到弹出新窗口中的debug信息。

6.{eval}将变量作为一个模板求值。该特性用于诸如将模板标签/变量嵌入至另一变量，或将标签/变量嵌入至配置文件中的变量的情形。
基本没用，用法重复。
对于php分配过来的变量，在模板中
{eval var=$foo}，其实简单的{$foo}也行。

7. {fetch}用于从本地文件系统、HTTP或FTP上检索文件并显示其内容。 
{fetch}不支持重定向，使用前请确定希望抓取的网页地址以'/'结尾！

模板中：
	{fetch file='https://www.baidu.com/'}
结果url还是当前url，但是内容已经变成了百度首页。

还可以用于引入js和css等。
{* 模板里包含 javascript *}{fetch file='/export/httpd/www.example.com/docs/navbar.js'}


8.自定义函数{html_image}产生一个HTM<img>标签。
{html_image file='http://www.baidu.com/img/bd_logo.png'}

译注: 此自定义函数是Smarty越俎代疱、闲得蛋疼的典型表现，也是Smarty越来越臃肿的原因之一。


9. 自定义函数{html_table}将数组中的数据填充到HTML表格中。 
php中分配变量：
	//注册变量
	$_smarty->assign( 'data', array(1,2,3,4,5,6,7,8,9) );
	$_smarty->assign( 'tr', array('bgcolor="#eeeeee"','bgcolor="#dddddd"') );
模板中：
	{html_table loop=$data}

显示：
	<table border="1">
		<tbody>
			<tr>
				<td>1</td>
				<td>2</td>
				<td>3</td>
			</tr>
			<tr>
				<td>4</td>
				<td>5</td>
				<td>6</td>
			</tr>
			<tr>
				<td>7</td>
				<td>8</td>
				<td>9</td>
			</tr>
		</tbody>
	</table>

算了，还是自己写把，巨丑无比。

10. {math}计算
php中：
	//注册变量
	$_smarty->assign( 'width', 10 );
	$_smarty->assign( 'height', 20 );
模板中：
	{$width*$height}
	{math equation=$width*$height}
结果：
	200 200
结论:这个函数多此一举！

不过，重新计算功能还是可以考虑的：
{math equation="x*x+y" x=$width y=$height}
输出：120

或者直接赋值计算：
{math equation="(( x + y ) / z )" x=2 y=10 z=2}
输出：6


11. {mailto}自动生成电子邮件链接，并根据选项决定是否对地址信息进行编码。经编码后的email将使网络蜘蛛破解邮件地址变得更困难。
模板：{mailto address="me@example.com" text="send me some mail"}
输出：<a href="mailto:me@example.com" >send me some mail</a>

12.{textformat}用于格式化文本。该函数主要清理空格和特殊字符，对段落按单词边界换行和行缩进等段落格式化处理。
基本没啥用。




========================================
smarty模板引擎：自定义函数(中)[第八章 自定义函数]
----------------------------------------
1. 复选框	自定义函数{html_checkboxes}根据给定的数据创建复选按钮组。该函数可以指定哪些元素被选定。 
php:

	//注册变量
	$_smarty->assign('cust_ids', array(1000,1001,1002,1003));
	$_smarty->assign('cust_names', array(
			'Joe Schmoe',
			'Jack Smith',
			'Jane Johnson',
			'Charlie Brown')
		);
	$_smarty->assign('customer_id', 1001);
	//打印
	$_smarty->display('demo4.tpl');
	
模板：
	{html_checkboxes name='id' values=$cust_ids output=$cust_names
	selected=$customer_id separator='<br />'}

输出结果：
	<meta charset='utf-8'>

	<label><input type="checkbox" name="id[]" value="1000" />Joe Schmoe</label><br />
	<label><input type="checkbox" name="id[]" value="1001" checked="checked" />Jack Smith</label><br />
	<label><input type="checkbox" name="id[]" value="1002" />Jane Johnson</label><br />
	<label><input type="checkbox" name="id[]" value="1003" />Charlie Brown</label><br />

这个还是挺好用的。
不想要label标签，可以增加  labels=false；

2.单选框，只需要把上文的html_checkboxes换成html_radios：

{html_radios name='id' values=$cust_ids output=$cust_names
selected=$customer_id separator='<br />' labels=false}

输出结果：
	<meta charset='utf-8'>

	<input type="radio" name="id" value="1000" />Joe Schmoe<br />
	<input type="radio" name="id" value="1001" checked="checked" />Jack Smith<br />
	<input type="radio" name="id" value="1002" />Jane Johnson<br />
	<input type="radio" name="id" value="1003" />Charlie Brown<br />

3.下拉菜单：同上，仅仅是模板开头换成html_options
模板：
	{html_options name='id' values=$cust_ids output=$cust_names selected=$customer_id}

显示：
	<meta charset='utf-8'>

	<select name="id">
	<option value="1000">Joe Schmoe</option>
	<option value="1001" selected="selected">Jack Smith</option>
	<option value="1002">Jane Johnson</option>
	<option value="1003">Charlie Brown</option>
	</select>
4.显示时间的下拉列表{html_select_date}
模板：
	{html_select_date month_format='%m' start_year=2010 end_year=2020 field_order='YMD'}

显示：
	年、月、日下拉框。
疑问：怎么显示当前年份前后若干年？
	
5.显示时间的下拉列表{html_select_time}
PHP文件中设置默认时区：
	date_default_timezone_set('PRC');
在模板中：
	{html_select_time}
显示：当前时间下拉框。

6.貌似smarty3不支持popup_init了
	{popup_init  src='js.js'} 报错。


========================================
smarty模板引擎：自定义函数(下)[第14章 Smarty类方法] 【推荐！经典！】
----------------------------------------
1.php自定义函数，tpl中是单标签，如{info weight=140}

>>注意：smarty3.1用registerPlugin()替代了register_function()。

配置文件smarty.inc.php
	<?php
	//创建实际路径
	define('ROOT_PATH',dirname( __FILE__ ));//F:\xampp\htdocs\smartyLearn

	require(ROOT_PATH . '/../smarty3/Smarty.class.php');
	//实例化
	$_smarty=new Smarty();

	//模板文件路径
	$_smarty->template_dir=ROOT_PATH . '/templates/';
	//编译目录
	$_smarty->compile_dir=ROOT_PATH . '/templates_c/';
	//配置文件目录
	$_smarty->config_dir=ROOT_PATH . '/configs/';
	//缓存目录
	$_smarty->cache_dir=ROOT_PATH . '/cache/';

	//是否开启缓存
	$_smarty->caching=false;

	//左右定界符
	$_smarty->left_delimiter='{';//'<!--{'
	$_smarty->right_delimiter='}';//'}-->'


index.php中引入配置文件，并定义函数：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//定义php自定义函数
	//模板中传入的参数被转化为关联数组
	function fn_info($_arr){
		//为了相应不同参数个数，应用很多if
		$str='';
		if(isset($_arr['age'])){
			$str .= '您的年龄是：'.$_arr['age'];
		}
		if(isset($_arr['weight'])){
			$str .= '您的体重是：'.$_arr['weight'];
		}
		return $str;
	}

	//注册函数
	$_smarty->registerPlugin('function','info', 'fn_info');
	/*
	void registerPlugin(string type, string name, mixed callback, bool cacheable, mixed cache_attrs);
	本方法在脚本中注册函数或方法作为插件。其参数如下： 
		“type”定义插件的类型，其值为下列之一：“function”、“block”、“compiler”和“modifier”； 
		“name”定义插件的函数名； 
		“callback”为定义的php回调函数，其类型为下列之一：
			1、包含函数名的字符串；
			2、格式为(&$object, $method)的数组，其中，&$object为引用对象，$method为包含方法名的字符串；
			3、格式为($class, $method)的数组，其中，$class为类名，$method为类中的方法。 
	*/

	//打印
	$_smarty->display('demo5.tpl');

模板文件：
	<meta charset='utf-8'>

	{info weight=140}<br>
	{info age=10}<br>
	{info age=10 weight=140}<br>

输出：
	您的体重是：140
	您的年龄是：10
	您的年龄是：10您的体重是：140


2. php自定义函数，tpl中是双标签，如{info weight=140}some text here{/info}
	比如，自定义一个textformatNew代替很不好用的textformat块状结构。
index.php中定义块状插件
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//定义php自定义函数
	//模板中传入的参数被转化为关联数组
	function block_info($_arr,$_content){
		//为了相应不同参数个数，应用很多if
		$str="<p style='color:{$_arr['color']};background:{$_arr['background']}'>{$_content}</p>";
		return $str;
	}

	//注册插件
	$_smarty->registerPlugin('block','info', 'block_info');
	/*
	void registerPlugin(string type, string name, mixed callback, bool cacheable, mixed cache_attrs);
	本方法在脚本中注册函数或方法作为插件。其参数如下： 
		“type”定义插件的类型，其值为下列之一：“function”、“block”、“compiler”和“modifier”； 
		“name”定义插件的函数名； 
		“callback”为定义的php回调函数，其类型为下列之一：
			1、包含函数名的字符串；
			2、格式为(&$object, $method)的数组，其中，&$object为引用对象，$method为包含方法名的字符串；
			3、格式为($class, $method)的数组，其中，$class为类名，$method为类中的方法。 
	*/

	//打印
	$_smarty->display('demo5.tpl');


模板中：
	{info color='white' background='blue'}
		这是一行信息。
	{/info}

显示一行蓝底白字：
	<p style='color:white;background:blue'></p><p style='color:white;background:blue'>
		这是一行信息。
	</p>

	

3.以插件形式扩展的函数，使用是最多的。
位置：在smarty3/plugins/文件夹下
定义方式：必须放在plugins目录下，同时命名方式必须是function.xxx.php的形式；
function.info.php
	<?php 
	function smarty_function_info($params)
	{
			//为了相应不同参数个数，应用很多if
			$str='';
			if(isset($params['age'])){
				$str .= '您的年龄是：'.$params['age'];
			}
			if(isset($params['weight'])){
				$str .= '您的体重是：'.$params['weight'];
			}
			return $str;
	}
在index.php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//以插件形式定义的函数
	//打印
	$_smarty->display('demo5.tpl');
	
在模板中：
	{info weight=140}<br>
	{info age=10}<br>
	{info age=10 weight=140}<br>

输出：
	您的体重是：140
	您的年龄是：10
	您的年龄是：10您的体重是：140

------
也可以向模板中传递参数：
index.php中：
	$_smarty->assign('age',60);

模板中：
	{info age=$age}

显示：
	您的年龄是：60
	
4.以插件形式扩展的块。
位置：在smarty3/plugins/文件夹下
定义方式：必须放在plugins目录下，同时命名方式必须是block.xxx.php的形式；

	貌似block和function不能出现重名，只好使用info2做例子了：
	
block.info2.php
	<?php 
	function smarty_block_info2($params, $content)
	{
		$str="<p style='color:{$params['color']};background:{$params['background']}'>{$content}</p>";
		return $str;
	}

index.php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//以插件形式定义的块
	$_smarty->assign('age',60);

	//打印
	$_smarty->display('demo5.tpl');


模板中：
	{info2 color='white' background='red'}
		your age is {$age}
	{/info2}

显示：
	<meta charset='utf-8'>
	<p style='color:white;background:red'></p><p style='color:white;background:red'>
		your age is 60
	</p>

	

5. 一般的，我们不直接修改smarty文件夹内的内容，我们可以把自定义插件放到smarty文件夹之外。
Name:addPluginsDir() — 在插件目录下添加一个新目录
Description:Smarty addPluginsDir(string|array plugins_dir);

index.php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	// 给贮存的插件添加目录 
	$_smarty->addPluginsDir('./plugins_1');

	//查看插件目录链
	//var_dump($_smarty->getPluginsDir());

	//以插件形式定义的块
	$_smarty->assign('age',10);

	//打印
	$_smarty->display('demo5.tpl');

在index.php所在目录建立文件夹plugins_1，并把block.info2.php剪切进入。
这是直接刷新，页面报错，因为有编译缓存文件。
打开templates_c文件夹，删除所有缓存文件。
再次刷新，发现又正常显示了。

下次编写插件时，可以自定义插件位置了。


========================================
Smarty3模板引擎：变量调节器[第五章.变量调节器]
----------------------------------------
1.变量调节器作用于变量、自定义函数或字符串。在模板中使用。
变量调节器的用法是：‘|’符号右接调节器名称。
变量调节器可接收附加参数影响其行为。参数位于调节器右边，并用‘：’符号分开。

如果定义了1个字符串，需要输出三次，一个完整输出，一个输出10个字符，另一个输出大写字符。
现在解决方案：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//赋值
	$name='听说Smarty3比老版本好用。不知道change有多大。Any one who can give me a list.';

	$_smarty->assign('text',$name);
	$_smarty->assign('text2',substr($name,0,20));
	$_smarty->assign('text3',strtoupper($name));


	//打印
	$_smarty->display('demo6.tpl');


模板：
	<p>{$text}</p>
	<p>{$text2}</p>
	<p>{$text3}</p>

输出：
	听说Smarty3比老版本好用。不知道change有多大。Any one who can give me a list.
	听说Smarty3比老�
	听说SMARTY3比老版本好用。不知道CHANGE有多大。ANY ONE WHO CAN GIVE ME A LIST.

2.使用变量调节器的版本：
php中只需要一次赋值：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//赋值
	$name='听说Smarty3比老版本好用。不知道change有多大。Any one who can give me a list.';
	$_smarty->assign('text',$name);

	//打印
	$_smarty->display('demo6.tpl');

模板中：
	<p>{$text}</p>
	<p>{$text|truncate:10}</p>
	<p>{$text|upper}</p>
	<p>{$text|truncate:10|upper}</p>
	
输出：
	听说Smarty3比老版本好用。不知道change有多大。Any one who can give me a list.
	听说Smart...
	听说SMARTY3比老版本好用。不知道CHANGE有多大。ANY ONE WHO CAN GIVE ME A LIST.
	听说SMART...

--------
多个参数用:隔开，比如不希望输出...结尾：
	模板	//	输出
	<p>{$text|truncate:10:""}</p> //	听说Smarty3比
	<p>{$text|truncate:10}</p> //	听说Smart...

3.capitalize[首字符大写]
模板：
	<p>{$text}</p>
	<p>{$text|capitalize}</p> 	
输出：
	听说Smarty3比老版本好用。不知道change有多大。Any one who can give me a list.
	听说smarty3比老版本好用。不知道change有多大。Any One Who Can Give Me A List.
	
4.cat[连接字符串]
模板：<p>{$text|cat:'123456'}</p>
输出：听说Smarty3比老版本好用。不知道change有多大。Any one who can give me a list.123456

5.count_characters[字符计数]
模板：<p>{$text|count_characters}</p>
输出：53

是否包含空格
<p>{$text|count_characters:true}</p> //60

6.count_paragraphs[计算段数]
<p>{$text|count_paragraphs}</p> //1


7.count_sentences[计算句数]
计算变量里句子的数量（英文）。 句子由点号、问号或感叹号分隔(.?!)。
模板：
	<p>{$text}</p>
	<p>{$text|count_sentences}</p>
输出：
	听说Smarty3比老版本好用。不知道change有多大. Any one who can give me a list.
	2

8.count_words[计算词数]
计算变量里的词数 。 
	<p>{$text|count_words}</p> //11


9.date_format[格式化日期]
模板：<p>{$smarty.now|date_format}</p>
输出：Jan 17, 2016

模板：<p>{$smarty.now|date_format:"%Y-%m-%d"}</p>
输出：2016-01-17

模板：<p>{$smarty.now|date_format:"%Y-%m-%d %H:%M:%S"}</p>
输出：2016-01-17 10:25:45

10.default[默认值]
为变量设置一个默认值。当变量未设置或为空字符串时，将由给定的默认值替代其输出。Default需要一个参数。
模板：<p>{$text2|default:'nothing'}</p>
输出：nothing

11.escape[转义]
escape作用于变量，用以html、url、单引号、十六进制、十六进制实体、javascript、邮件的转码或转义。默认为html转义。

php中：
	//赋值
	$name='听说<b>Smarty3</b>比老版本好用。不知道change有多大. Any one who can give me a list.';
	$_smarty->assign('text',$name);
模板中：
	<p>{$text}</p>
	<p>{$text|escape}</p>
输出html：
	<p>听说<b>Smarty3</b>比老版本好用。不知道change有多大. Any one who can give me a list.</p>
	<p>听说&lt;b&gt;Smarty3&lt;/b&gt;比老版本好用。不知道change有多大. Any one who can give me a list.</p>

也可以按照url编码：
模板：<p>{$text|escape:'url'}</p>
输出：%E5%90%AC%E8%AF%B4%3Cb%3ESmarty3%3C%2Fb%3E%E6%AF%94%E8%80%81%E7%89%88%E6%9C%AC%E5%A5%BD%E7%94%A8%E3%80%82%E4%B8%8D%E7%9F%A5%E9%81%93change%E6%9C%89%E5%A4%9A%E5%A4%A7.%20Any%20one%20who%20can%20give%20me%20a%20list.

对于邮件：
php中：$_smarty->assign('EmailAddress','jimmyMall@live.com');
模板中：
	{* 搞乱email地址 *}
	<a href="mailto:{$EmailAddress|escape:'hex'}">{$EmailAddress|escape:'mail'}</a>
输出：<a href="mailto:%6a%69%6d%6d%79%4d%61%6c%6c%40%6c%69%76%65%2e%63%6f%6d">jimmyMall [AT] live [DOT] com</a>


12.indent[缩进]
模板：
	<p>{$text}</p>
	<p>{$text|indent:10}</p>
	<p>{$text|indent:10:'&nbsp;'}</p>
输出：
	<p>听说<b>Smarty3</b>比老版本好用。不知道change有多大. Any one who can give me a list.</p>
	<p>          听说<b>Smarty3</b>比老版本好用。不知道change有多大. Any one who can give me a list.</p>
	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;听说<b>Smarty3</b>比老版本好用。不知道change有多大. Any one who can give me a list.</p>
	
只有最后一个有实际缩进效果。其他都是html代码中缩进，浏览器渲染后没效果。


这个 <p>{$text|indent:10:"\r\n"}</p>
输出很多换行，在html代码中可见，浏览器渲染之后不可见效果。


.from_charset[字符串转码]
from_charset用于将字符串从一个给定的字符集转码至内置字符集。这与to_charset调节器正好相反。

13.nl2br[换行符替换成<br />] 
所有的换行符将被替换成 <br />，功能同PHP中的nl2br()函数一样。
模板中：
	<p>{$text}</p>
	<p>{$text|nl2br}</p>
输出：
	<p>听说<b>Smarty3</b>比老版本好用。
	不知道change有多大. 
	Any one who can give me a list.</p>
	<p>听说<b>Smarty3</b>比老版本好用。<br />
	不知道change有多大. <br />
	Any one who can give me a list.</p>


14.regex_replace[ 正则替换] 
模板：
	<p>{$text}</p>
	<p>{$text|regex_replace:"/[a-zA-Z0-9]/":""}</p>
输出：
	听说Smarty3比老版本好用。 不知道change有多大. Any one who can give me a list.
	听说<>比老版本好用。 不知道有多大. .

------
高亮显示关键字：
模板：
	<p>{$text}</p>
	<p>{$text|regex_replace:"/(Smarty3)/i":"<b style='color:red'>$1</b>"}</p>
输出：
	<p>听说<b>Smarty3</b>比老版本好用。不知道change有多大. Any one who can give me a list.</p>
	<p>听说<b><b style='color:red'>Smarty3</b></b>比老版本好用。不知道change有多大. Any one who can give me a list.</p>
确实关键词变红了。

15.replace[替换] 
一种在变量中进行简单的搜索和替换字符串的处理。等同于php的str_replace()函数。 
模板：
	<p>{$text}</p>
	<p>{$text|replace:"Smarty3":"javascript"}</p>
输出：
	听说Smarty3比老版本好用。不知道change有多大. Any one who can give me a list.
	听说javascript比老版本好用。不知道change有多大. Any one who can give me a list.


16.spacify[插空 ] 
插空(不知道这个词是什么意思,顾名思义了^^)是一种在变量的字符串的每个字符之间插入空格或者其他的字符(串)的方法。
模板：
	<p>{$text}</p>
	<p>{$text|spacify:'_'}</p>
输出：
	听说Smarty3比老版本好用。不知道change有多大. Any one who can give me a list.
	听_说_<_b_>_S_m_a_r_t_y_3_<_/_b_>_比_老_版_本_好_用_。_不_知_道_c_h_a_n_g_e_有_多_大_._ _A_n_y_ _o_n_e_ _w_h_o_ _c_a_n_ _g_i_v_e_ _m_e_ _a_ _l_i_s_t_.

17.string_format[字符串格式化]
一种格式化字符串的方法，例如格式化为十进制数等等。实际运用的是php的sprintf()函数。 
php中：$_smarty->assign('num',12.345);
模板中：
	<p>{$num}</p>
	<p>{$num|string_format:"%d"}</p>
	<p>{$num|string_format:"%0.2f"}</p>
输出：
	<p>12.345</p>
	<p>12</p>
	<p>12.35</p>
和C语言，php类似。

18.strip[去除(多余空格)]
php中：
	//赋值
	$name='   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.';
	$_smarty->assign('text',$name);
模板：
	<p>{$text}</p>
	<p>{$text|strip}</p>
输出：
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p> 听说<b>Smarty3</b>比老版本好用。 不知道change有多大. Any one who can give me a list.</p>

19.strip_tags[清除标记标签]
去除标记标签，主要是在<和>之间的内容。
模板：
	<p>{$text}</p>
	<p>{$text|strip_tags}</p>
输出：
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p>   听说 Smarty3 比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>

20.truncate[截取]
模板：
	<p>{$text}</p>
	<p>{$text|truncate:33:"-.-"}</p>
	<p>{$text|truncate:33:"...":true}</p>
输出：
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p>   听说<b>Smarty3</b>比老版本好用。-.-</p>
	<p>   听说<b>Smarty3</b>比老版本好用。  不知...</p>

21.upper[大写]
大写化变量，等同于php的strtoupper()函数。 
模板：
	<p>{$text}</p>
	<p>{$text|upper}</p>
输出：
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p>   听说<B>SMARTY3</B>比老版本好用。  不知道CHANGE有多大.   ANY ONE WHO CAN GIVE ME A LIST.</p>

22.wordwrap[行宽约束]
可以指定段落的列宽(也就是一行多少个字符，超过这个字符数换行)，默认80。第二个参数可选，指定在约束点使用什么换行符，默认为"\n"。默认情况下smarty将截取到词尾，如果想精确到设定长度的字符，请将第三个参数设为ture。本调节器等同于php的wordwrap()函数。 
模板：
	<p>{$text}</p>
	<p>{$text|wordwrap:10}</p>
	<p>{$text|wordwrap:10:"<br />\n"}</p>
输出：
	<meta charset='utf-8'>
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p>  
	听说<b>Smarty3</b>比老版本好用。
	不知道change有多大.
	Any one
	who can
	give me a
	list.</p>
	<p>  <br />
	听说<b>Smarty3</b>比老版本好用。<br />
	不知道change有多大.<br />
	Any one<br />
	who can<br />
	give me a<br />
	list.</p>


23.组合调节器
对于同一个变量，你可以使用多个修改器。它们将从左到右按照设定好的顺序被依次组合使用。使用时必须要用"|"字符作为它们之间的分隔符。

模板：
	<p>{$text}</p>
	<p>{$text|lower|truncate:40:". . ."|spacify}</p>
	<p>{$text|lower|spacify|truncate:40:". . ."}</p>
	<p>{$text|truncate:40:". . ."|cat:'<a href="#">阅读更多></a>'}</p>
输出：
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p>      听 说 < b > s m a r t y 3 < / b > 比 老 版 本 好 用 。 .   .   .</p>
	<p>      听 说 < b > s m a r t y 3 < / b. . .</p>
	<p>   听说<b>Smarty3</b>比老版本好用。. . .<a href="#">阅读更多></a></p>


24.自己编写变量调节器。作用：截取中文字符串。
现在index.php中补充插件文件夹位置：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	// 给贮存的插件添加目录 
	$_smarty->addPluginsDir('./myPlugin');

	//查看插件目录链
	//var_dump($_smarty->getPluginsDir());


	//赋值
	$name='   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.';
	$_smarty->assign('text',$name);


	//打印
	$_smarty->display('demo6.tpl');

接着在index.php所在目录建立新目录myPlugin，并新建文件 modifier.zw_truncate.php
	<?php 
	function smarty_modifier_zw_truncate($string, $length, $encoding)
	{
		if(mb_strlen($string)<$length){
			return mb_substr($string,0,$length,$encoding);
		}else{
			return mb_substr($string,0,$length,$encoding) . '...';
		}

	}

在模板中使用：
	<p>{$text}</p>
	<p>{$text|zw_truncate:20:'utf-8'}</p>

输出：
	<p>   听说<b>Smarty3</b>比老版本好用。  不知道change有多大.   Any one who can give me a list.</p>
	<p>   听说<b>Smarty3</b>比...</p>


========================================
Smarty3模板引擎：内置函数(上)[第七章.内置函数]
----------------------------------------
1.Smarty自带了一些内置函数，这些内置函数是Smarty模板引擎的组成部分。他们被编译成相应的内嵌PHP代码，以获得最大性能。
您创建的自定义函数不能与内置函数同名，也不必修改这些内置函数。
其中一些具有assign属性，用来收集函数结果，并将结果分配给一个命名的模板变量，而不是将内容输出，类似于{assign}函数。

2.内置函数与自定义函数的区别？
内置函数是smarty3引擎必须使用的，不能动，而自定义函数则可以根据需要进行删除、修改等。

这个不支持了。
{php}
	echo 1+10;
{/php}

{php}已被Smarty弃用，不应再使用。还是用你自己编写的php脚本或插件函数来代替它吧！
{include_php}在Smarty新版本中已被废弃，可使用插件恰当地解决从（php）代码分离html的问题。

3.{include} 
{include}标签用于在当前模板中包含其它模板。当前模板中的任何有效变量在被包含模板中同样可用。 
index.php
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//赋值
	$num=12;
	$_smarty->assign('n1',$num);
	$_smarty->assign('n2',$num*2);

	//打印
	$_smarty->display('demo7.tpl');

模板：
	<meta charset='utf-8'>

	{$n1}
	{include file='demo7_1.tpl'}

被引入的另一个模板demo7_1.tpl
	<hr>{$n2}

输出：
	12
	<hr>24

说明模板文件是谁调用谁赋值。

4.{config_load}
{config_load}用来从配置文件中加载config变量（#variables#）到模版。 

index.php不用传值。
在configs文件夹下建立example.confi文件（该文件随便命名，后缀名也是随便）。
	name = 'dawn'
	height=181

在模板文件中：
	<meta charset='utf-8'>

	{config_load file="example.confi"}
	{#name#}
	{#height#}
输出结果：
	dawn 181

5.{literal}{/literal}标签通常是没有必要（使用）的，因为Smarty会忽略空白包围的定界符（因为这同样起到{literal}的作用，而且更简单），不过这要确保使用javascript和css时，花括号‘{’、‘}’里面两旁含有空格。这是Smarty3的新规则。

<style>
/*只要css中{后面紧跟一个空格，就可以避免被smarty解析*/
body{ color:red; }
</style>

6.{if}{elseif}{else} 条件
随着一些特性加入到模版引擎，Smarty的{if}语句与php的if语句一样富有弹性。每一个{if}必须与一个{/if}成对出现，允许使用{else}和{elseif}，所有php条件和函数在这里同样适用，诸如||、or、&&、and、is_array()等等。

php文件：
	//赋值
	$_smarty->assign('flag',true);
模板文件：
	{if $flag}
		ok
	{/if}
输出：ok

------
试试如下模板：
{if $flag}
	ok
{else}
	no
{/if}

7.{strip}会打破纯文本的排版，将它们全部排成一行可不是个好主意，使用时须注意。
好处是：代码之间的空白被压缩了。
缺点是：代码可读性下降了。
不建议使用。

8.{capture}捕获 
{capture}用来捕获模板输出的数据并将其存储到一个变量里，而不是将它们输出到页面。
任何在{capture name="foo"}和{/capture}之间的数据将被存储到变量$foo中，该变量由name属性指定。
输出的时候{$smarty.capture.foo}最后foo就是当时定义的name。

模板：
	<pre>
	这里是定义：
	{capture name="banner"} {* short-hand *} 
		some text of a file by include.
	{/capture}

	<hr>
	这里是使用：
	{$smarty.capture.banner}
输出：
	<pre>
	这里是定义：

	<hr>
	这里是使用：
	  
		some text of a file by include.

注意：当捕获{insert}输出时要非常小心！
如果你开启了$caching缓存，希望在缓存内容里运行{insert}命令。那么，请不要捕获{insert}里面的内容！因为{insert}内容总是不被缓存。

9.{insert}
{insert}标签类似于{include}标签，不同之处是即使打开caching，{insert}所包含的内容也不会被缓存，每次调用模板都会执行{insert}。 

使用场景：使模板的一部分不被缓存很重要。如果开启了缓存, {insert}标签不会被缓存，即使是在缓存页面中，每次调用页面它们都会被动态加载，该特性可以广泛应用于广告条、投票、实时天气预报、搜索结果、反馈信息等区域。




========================================
Smarty3模板引擎：内置函数(下)[第七章.内置函数] 遍历循环函数(推荐用{foreach})
----------------------------------------
1.{foreach}用来遍历数据数组，{foreach}与{section}循环相比更简单、语法更干净，也可以用来遍历关联数组。
一共支持2种语法：
	这是smarty3的新语法：{foreach $arrayvar as $itemvar}
	这是兼容的老语法：{foreach $arrayvar as $keyvar=>$itemvar} 

php中分配变量数组：
	//赋值
	$arr=array(
		'a'=>'10',
		'b'=>'20',
		'c'=>'30',
		'd'=>'40',
	);
	$_smarty->assign('myarray',$arr);
模板中：
	<ul>
	{foreach from=$myarray key="mykey" item="myitem"}
		 <li>{$mykey} : {$myitem}</li>
	{/foreach}
	</ul>
输出结果：
	<ul>
		 <li>a : 10</li>
		 <li>b : 20</li>
		 <li>c : 30</li>
		 <li>d : 40</li>
	</ul>

或者这样写模板：
	<ul>
	{foreach $myarray as $mykey=>$myitem}
		 <li>{$mykey} : {$myitem}</li>
	{/foreach}
	</ul>
输出结果不变。


也可以传递普通数组：
	$arr2=array(9,8,7,6,5,4);
	$_smarty->assign('myarray',$arr2);
模板不变，输出如下：
	<ul>
		 <li>0 : 9</li>
		 <li>1 : 8</li>
		 <li>2 : 7</li>
		 <li>3 : 6</li>
		 <li>4 : 5</li>
		 <li>5 : 4</li>
	</ul>
2.{foreachelse}如果没有数据怎么办？
至少是个空数组。如果根本没赋值，则直接报错！
index.php中
	$arr2=array();
	$_smarty->assign('myarray',$arr2);
模板中：
	<ul>
	{foreach $myarray as $mykey=>$myitem}
		 <li>{$mykey} : {$myitem}</li>
	{foreachelse}
		没有任何数据
	{/foreach}
	</ul>
输出：
	<ul>
		没有任何数据
	</ul>
	
	
3.还可以循环嵌套：
	//赋值
	$arr=array(
		'a'=>array('10',100,'apple'),
		'b'=>array('20',200,'boy','big'),
		'c'=>array('30',300,'cat'),
		'd'=>array('40','dog'),
	);
	$_smarty->assign('myarray',$arr);
模板：
	<ul>
	{foreach $myarray as $k=>$arr}
		 <li>{$k}
			<ul>
				{foreach $arr as $mykey=>$myitem} 
				<li>{$mykey} : {$myitem}</li>
			 
				{/foreach}
			</ul>
		 </li>
		 
	{foreachelse}
		没有任何数据
	{/foreach}
	</ul>
输出：
	<meta charset='utf-8'>
	<ul>
		 <li>a
			<ul>
				<li>0 : 10</li>
				<li>1 : 100</li>
				<li>2 : apple</li>
			</ul>
		 </li>
	</ul>



4.{section},{sectionelse}遍历数组（不能用于关联数组！）
不同于{foreach}遍历单层关联数组，{section}支持循序索引遍历数组中的数据（支持一次性读取多维数组）。
每个{section}标签必须与闭合标签{/section}成对出现。 

{section}循环不能遍历关联数组，（被循环的）数组必须是数字索引，像这样（0，1，2，...）。对于关联数组，请用{foreach}循环。
{foreach}可以做{section}能做的所有事，而且语法更简单、更容易。它通常是循环数组的首选。

php中赋值：
	//赋值
	$arr=array(
		array('10','apple'),
		array('20','boy','big'),
		array('30','cat'),
		array('40','dog'),
	);
	$_smarty->assign('myarray',$arr);

模板：
	{section name=arr2 loop=$myarray step=-1}
		id:{$myarray[arr2][0]}:{$myarray[arr2][1]}<br />
	{/section}

输出：
	id:40:dog
	id:30:cat
	id:20:boy
	id:10:apple

显然有些数组没有输出完全，需要用双重循环解决这个问题。

5.{section},{sectionelse}双重循环
php中：
	//赋值
	$arr=array(
		array('10','apple'),
		array('20','boy','big'),
		array('30','cat'),
		array('40','dog'),
	);
	$_smarty->assign('myarray',$arr);
	
模板中：
	{section name=arr2 loop=$myarray}
		{section name=arr3 loop=$myarray[arr2]}
			| {$myarray[arr2][arr3]}
		{/section}
		<br>
	{/section}

输出：
	| 10 | apple 
	| 20 | boy | big 
	| 30 | cat 
	| 40 | dog 
	
不过，输出的写法并不简洁。

6.对于关联数组，只能按照变量的方式进行访问
php中：
	//赋值
	$arr=array(
		array('id'=>'10','product'=>'apple'),
		array('id'=>'20','product'=>'boy'),
		array('id'=>'30','product'=>'cat'),
		array('id'=>'40','product'=>'dog'),
	);
	$_smarty->assign('myarray',$arr);

模板：
	{section name=arr2 loop=$myarray}
		{$myarray[arr2]["id"]}:{$myarray[arr2]["product"]} |||
		{$myarray[arr2].id}:{$myarray[arr2].product}<br>
	{/section}

输出：
	10:apple ||| 10:apple
	20:boy ||| 20:boy
	30:cat ||| 30:cat
	40:dog ||| 40:dog


========================================
Smarty3模板引擎：缓存机制
----------------------------------------
1.php文件显示有编译缓存，
如果开启模板缓存，则在cache文件夹生成模板编译文件。
模板编译文件分为2种缓存周期，全局缓存周期和自定义缓存周期。

    * define caching modes
     */
    const CACHING_OFF = 0;
    const CACHING_LIFETIME_CURRENT = 1;
    const CACHING_LIFETIME_SAVED = 2;

----
缓存用来贮存文件的输出内容从而起到加速display()或fetch()函数执行的作用。如果调用的缓存有效，那么将用缓存代替实际输出内容。缓存加速程序运行的威力非常惊人，特别是对那些耗时的复杂模板计算效果更加明显。一旦启用display()或fetch()函数输出缓存，一个由几个模板文件、配置文件等等组成的缓存文件体系将被建立。

因为模板是动态的，因此在建立缓存模板的时候一定要考虑清楚哪些地方需要缓存，缓存周期该设为多久。举个例子，比如你站点的前端页面更新并不频繁，那么对其缓存一个小时或是更长时间会取得良好效果。相反，如果显示的页面包含几分钟就要更新信息的内容，这时使用缓存就得不偿失了。

2.缓存示例：让变量没10s更新一次。
要开启缓存，并设置缓存周期。
控制缓存周期的方法 $_smarty->setCacheLifetime(10);//单位是秒

配置文件'smarty.inc.php'中：
	//是否开启缓存
	$_smarty->caching=1;

php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用

	//设置缓存周期
	$_smarty->setCacheLifetime(10);
	echo $_smarty->getCacheLifetime();


	//赋值
	$name='dawn6';
	$_smarty->assign('name',$name);

	//打印
	$_smarty->display('demo8.tpl');

模板中：
	{$name}
输出：
	10 dawn6

更改 $name='dawn7';
刷新没有变化，一直刷新，大概10s后输出 10 dawn7。


模板缓存文件位置：cache/8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php


2.模板修改会立刻更新
模板
	{$name}
	{$smarty.now|date_format:"%H:%M:%S"}
输出：
	10 dawn6 08:44:13
刷新，发现10s更新一次。

但是如果修改模板：
	{$smarty.now|date_format:"%H:%M:%S"}0
刷新立刻发现更新：10 dawn6 08:46:030

结论：
当模板修改后，页面立刻更新。
但是php中修改变量后，需要等缓存周期之后才能更新。因为缓存周期到之前，直接跳过php输出cache中缓存文件。


3.某一个页面需要1s更新一次，怎么个性化设置呢？（很少用）
配置文件中没有定义缓存周期，则默认为3600s。在库文件的smarty/sysplugins/Smarty_Internal_TemplateBase.php下。
设置$_smarty->caching=2来控制单个缓存文件自己的生存周期。
$_smarty->setCacheLifetime(1);表示当前缓存周期为1s。


首先在index.php中
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用


	//是否开启缓存
	$_smarty->caching=2;

	//设置缓存周期
	$_smarty->setCacheLifetime(1);
	//echo $_smarty->getCacheLifetime();


	//赋值
	$name='dawn6';
	$_smarty->assign('name',$name);

	//打印
	$_smarty->display('demo8.tpl');
	
模板：
	{$name}
	{$smarty.now|date_format:"%H:%M:%S"}
输出：一直刷新，大约每1s更新一次。


4.一个模板多个缓存。
默认情况下一个模板一个缓存，但是有分页的情况，一个模板会有多个缓存文件。
只需要在display方法中传入该参数即可：

php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');
	//global $_smarty;//这个貌似没啥用


	//是否开启缓存
	//$_smarty->caching=2;

	//设置缓存周期
	//$_smarty->setCacheLifetime(1);
	//echo $_smarty->getCacheLifetime();

	//赋值
	$mypage=$_GET['p'];
	$_smarty->assign('page',$mypage);

	//打印
	$_smarty->display('demo8.tpl',$mypage);

模板中：
	{$page}
	{$smarty.now|date_format:"%H:%M:%S"}

访问不用地址：
	demo8/index.php?p=1
	demo8/index.php?p=2
	demo8/index.php?p=3

找到cache文件夹，发现3个缓存文件：
	1^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	2^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	3^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
这几个文件除了首数字不同外，其余相同。


5.如果继续加参数呢？生成多少缓存文件？
先清除cache和templates_c目录下的缓存文件。
php中修改一行：
	$_smarty->display('demo8.tpl',$mypage,$myuser);

分别访问：
	demo8/index.php?p=1&u=dawn
	demo8/index.php?p=2&u=dawn
	demo8/index.php?p=1&u=jim
	demo8/index.php?p=2&u=jim

在cache文件夹下生成了4个模板缓存文件
	1^dawn^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	2^dawn^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	1^jim^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	2^jim^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php

看来都缓存了。但是如果参数更多怎么办？

6.更多参数可以使用系统全局变量
先清除cache和templates_c目录下的缓存文件。

php中修改一行：
	//打印
	$_smarty->display('demo8.tpl',$_SERVER['REQUEST_URI']);

继续访问以上4个url，查看cache文件夹：
	_smartyLearn_demo8_index_php_u_dawn_p_1^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	_smartyLearn_demo8_index_php_u_dawn_p_2^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	_smartyLearn_demo8_index_php_u_jim_p_1^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php
	_smartyLearn_demo8_index_php_u_jim_p_2^8f978b2685761d68ffe43a16adaeabac6e3dd631.demo8.tpl.php

多个参数这样更简便了。

但是一定要注意安全性！如果用户输入很多参数，则会生成很多缓存文件，势必占很大存储空间。


7.效率问题：目前为止，我们的缓存正常输出了，但是再次访问的时候根本没有读取缓存文件！
例如在php中加一句echo 'some new text';
结果在缓存期内，但是该变量还是直接输出了！
说明，php代码还是执行了！

怎么在再次访问的只读取缓存文件，而不运行php代码？
在php中用is_cached()(smarty2)方法做判断。如果缓存了且没过期，直接读取缓存，否则运行php代码。

函数改名字了，新版本(smarty3)的对应函数是isCached。

index.php
	<?php
	//引入配置文件
	require('smarty.inc.php');

	//开启单页面缓存
	$_smarty->caching=2;

	//设置缓存周期10s
	$_smarty->setCacheLifetime(10);
	//echo $_smarty->getCacheLifetime();

	//是否存在不过期的缓存？
	if(!$_smarty->isCached('demo8.tpl',$_SERVER['REQUEST_URI'])) {
		//无有效缓存则进行php操作
		$mypage=$_GET['p'];
		echo 123;
		$_smarty->assign('page',$mypage);
	}

	//打印
	$_smarty->display('demo8.tpl',$_SERVER['REQUEST_URI']);

模板中：
	{$page}[{$smarty.now|date_format:"%H:%M:%S"}]
输出：
	一般输出：2[09:37:06]
	连续刷新，偶尔会输出：123 2[09:38:00]
原因：可能是不执行的时间内echo无法被执行到。

警示：不要在php中使用echo语句，只处理逻辑，在模板中输出。	


8.局部不缓存。使用nocache。
注意：当从缓存加载页面时请确定非缓存节块里的任何变量的赋值同样来自PHP。

使用场景：如果对一些经常变化的区域，不能缓存，比如用户信息区域，天气预报等。
这就需要局部缓存。
在模板中用块包含一部分内容即可，模板中用{nocache}包裹的部分不缓存。
还有一个函数{insert}也不缓存。

index.php
	<?php
	//引入配置文件
	require('smarty.inc.php');

	//开启单页面缓存
	$_smarty->caching=2;

	//设置缓存周期10s
	$_smarty->setCacheLifetime(10);
	//echo $_smarty->getCacheLifetime();

	//是否存在不过期的缓存？
	if(!$_smarty->isCached('demo8.tpl',$_SERVER['REQUEST_URI'])) {
		//无有效缓存则进行php操作
		$mypage=$_GET['p'];
		echo 123;
		$_smarty->assign('page',$mypage);
	}

	//打印
	$_smarty->display('demo8.tpl',$_SERVER['REQUEST_URI']);

模板中：
	{$page}
	{nocache}
		[{$smarty.now|date_format:"%H:%M:%S"}]
	{/nocache}
	
输出：
	4 [09:52:26]
	而且连续刷新，连续修改。说明时间确实不缓存了。
打开cache中的缓存文件，发现这一句直接是：
	[<?php echo smarty_modifier_date_format(time(),"%H:%M:%S");?>
	]
	<?php }

如果去掉{nocache}标签，则缓存文件中：
	4 [09:56:12]

<hr>避免单标签缓存，在末尾加nocache: {$smarty.now|date_format nocache}



9.定义不缓存的插件。
如果自定义插件，默认块是缓存的。
我们定义一个局部不缓存的自定义块：
index.php中：
	<?php
	//引入配置文件
	require('smarty.inc.php');

	//开启单页面缓存
	$_smarty->caching=2;

	//设置缓存周期10s
	$_smarty->setCacheLifetime(10);
	//echo $_smarty->getCacheLifetime();

	//是否存在不过期的缓存？
	if(!$_smarty->isCached('demo8.tpl',$_SERVER['REQUEST_URI'])) {
		//无有效缓存则进行php操作
		$mypage=$_GET['p'];

		$_smarty->assign('page',$mypage);
		$_smarty->assign('num',1);//这个是缓存的变量
	}

	//自定义模板块
	function no_cache($arr,$content){
		return $content;
	}
	//注册自定义模板块
	$_smarty->registerPlugin('block','nocache2','no_cache',false);//最后这个false就是不缓存的意思

	//打印
	$_smarty->display('demo8.tpl',$_SERVER['REQUEST_URI']);

以上自定义了一个no_cache函数，并注册为模板块nocache2。
模板中使用nocache2：
	{$num} | {$page}
	{nocache2}
		[{$smarty.now|date_format:"%H:%M:%S"}]
	{/nocache2}
访问：demo8/index.php?u=dawn&p=4
输出：1 | 4 [10:23:41]
	连续刷新，发现时间一直在变。这样我们就自定义了一个局部不缓存的块。


10.清理缓存: clearCache()和clearAllCache()
[版本区别]:函数名由clear_all_cache变为clearAllCache。

共2种方法，一个是按时清理缓存，一个是手动清理缓存。
http://www.smarty.net/docs/en/caching.tpl
http://www.smarty.net/docs/en/api.clear.all.cache.tpl

// clear only cache for demo8.tpl
$_smarty->clearCache('demo8.tpl');

// 清除所有超过10s期限的文件
$_smarty->clearAllCache(10);

// clear out all cache files
$_smarty->clearAllCache();





========================================
Smarty3模板引擎：小结
----------------------------------------
smarty模板引擎是强大的。
虽然确实不是必须的，因为php本身就可以嵌入html，但是他实现的前后端分离效果还是撑起来一个时代。

目前终端运算能力足够强大，前后端完全分离的思想出现，后台（不管什么后台语言）输出json，前台框架（angularJS）渲染界面的web app架构正在悄然盛情，比如百度贴吧。

但是，这并不妨碍我们继续应用成熟的后台渲染技术来开发web应用。其实，生活中我们用的最多的也是老方法。

有使用场景的技术就是好技术。


------------------
end at 2016-01-18
------------------