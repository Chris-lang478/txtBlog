thinkPHP-quick




========================================
实例化model的三种方法
----------------------------------------
数据表定义：
CREATE TABLE `think_blog` (
  `id` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `uid` int(10) NOT NULL,
  `title` varchar(100) DEFAULT NULL,
  `content` text DEFAULT NULL,
  `add_time` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into think_blog(uid,title,content,add_time)values
(1,'php7 is released','php7 content','1451629825'),
(2,'thinkPHP is released','thinkPHP content','1451629826'),
(4,'ci is released','ci content','1451629827'),
(4,'cakePHP is released','cakePHP content','1451629828');


new Model();
M();
D();



========================================
thinkPHP与ajax
----------------------------------------

http://blog.csdn.net/vvinggth204/article/details/38499025

hinkphp 的ajaxReturn很好用，尤其是配合前端的jQuery

今天写程序，发现在后台ajaxReturn返回数据时候，如果写成下面这样

$respone['status'] = 0;   
$respone['startlabel'] = 1;   
$this->ajaxReturn($respone);  


在前端接收后，在前端接收到的status 和 startlabel竟然是空，竟然是空....只好把服务器端改成加上单引号
$respone['status'] = '0';     
$respone['startlabel'] = '1';     
$this->ajaxReturn($respone);  
这样问题又来了，在前端，本来想使用 startlabel = startlabel + 1，结果，得到的是1，11，111.....

改成 ++startlabel，恢复正常。



========================================
ThinkPHP权限认证Auth实例详解
----------------------------------------
权限验证及源码解读：http://www.jb51.net/article/52547.htm
	http://www.thinkphp.cn/topic/28596.html
模板中的权限控制：http://my.oschina.net/u/1586815/blog/223820


1.定义数据表：

-- ----------------------------
-- think_auth_rule，规则表，
-- id:主键，name：规则唯一标识, title：规则中文名称 status 状态：为1正常，为0禁用，condition：规则表达式，为空表示存在就验证，不为空表示按照条件验证
-- ----------------------------
 DROP TABLE IF EXISTS `think_auth_rule`;
CREATE TABLE `think_auth_rule` (  
    `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,  
    `name` char(80) NOT NULL DEFAULT '',  
    `title` char(20) NOT NULL DEFAULT '',  
    `type` tinyint(1) NOT NULL DEFAULT '1',    
    `status` tinyint(1) NOT NULL DEFAULT '1',  
    `condition` char(100) NOT NULL DEFAULT '',  # 规则附件条件,满足附加条件的规则,才认为是有效的规则
    PRIMARY KEY (`id`),  
    UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;
-- ----------------------------
-- think_auth_group 用户组表， 
-- id：主键， title:用户组中文名称， rules：用户组拥有的规则id， 多个规则","隔开，status 状态：为1正常，为0禁用
-- ----------------------------
 DROP TABLE IF EXISTS `think_auth_group`;
CREATE TABLE `think_auth_group` ( 
    `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT, 
    `title` char(100) NOT NULL DEFAULT '', 
    `status` tinyint(1) NOT NULL DEFAULT '1', 
    `rules` char(80) NOT NULL DEFAULT '', 
    PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;
-- ----------------------------
-- think_auth_group_access 用户组明细表
-- uid:用户id，group_id：用户组id
-- ----------------------------
DROP TABLE IF EXISTS `think_auth_group_access`;
CREATE TABLE `think_auth_group_access` (  
    `uid` mediumint(8) unsigned NOT NULL,  
    `group_id` mediumint(8) unsigned NOT NULL, 
    UNIQUE KEY `uid_group_id` (`uid`,`group_id`),  
    KEY `uid` (`uid`), 
    KEY `group_id` (`group_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;






========================================
原生SQL查询有 query() 和 execute() 两个方法：
----------------------------------------

$array=$model - > query ("select * from user");
$bo=$model - > excute ("delete from user where userid = 1 limit 1");


query()：用于 SQL 查询操作，并返回符合查询条件的数据集
execute()：更新和写入数据的 SQL 操作，返回影响的记录数

public function read(){
    // 实例化一个空模型，没有对应任何数据表
    $Dao = M();
    //或者使用 $Dao = new Model();
 
    $list = $Dao->query("select * from user where uid<5");
    if($list){
        $this->assign('list', $list );
        $this->display();
    } else {
        $this->error($Dao->getError());
    }
}

public function read(){
    header("Content-Type:text/html; charset=utf-8");
    // 实例化一个空模型，没有对应任何数据表
    $Dao = M();
    //或者使用 $Dao = new Model();
 
    $num = $Dao->execute("update user set email = '12345@xxx.com' where uid=3");
    if($num){
        echo '更新 ',$num,' 条记录。';
    }else{
        echo '无记录更新';
    }
}


http://zhidao.baidu.com/link?url=3vofadf5vKt7ZfSYvPlJ0rkIKZJlZXehb9KHqeyX-Bm0PSkTUY8ZrV16TY_yNiXVM5tUPjoIQgKTb0alsLgi1u1z3FzAsciQWROjpM-qloO

========================================
sql语句中having和where的区别
----------------------------------------
having()方法设置查询条件，where()设置查询条件
having  和 where区别
①	使用有先后顺序
②	where  price>100     having price>100
③	where  设置条件，字段必须是数据表中存在的字段 
④	having 设置条件，字段必须是select语句查询出来的字段可以使用


========================================
模型（Model）层
----------------------------------------
1. 数据层：Model/UserModel 用于定义数据相关的自动验证和自动完成和数据存取接口
2. 逻辑层：Logic/UserLogic 用于定义用户相关的业务逻辑
3. 服务层：Service/UserService 用于定义用户相关的服务接口等
而这三个模型操作类统一都继承Model类即可，例如：

定义方式：
数据层： Home/Model/UserModel.class.php
namespace Home\Model;
use Think\Model;
class UserModel extends Model{
}
逻辑层： Home/Logic/UserLogic.class.php
namespace Home\Logic;
use Think\Model;
class UserLogic extends Model{
}
服务层： Home/Service/UserService.class.php
namespace Home\Service;
use Think\Model;
class UserService extends Model{
}


实例化：
D('User') //实例化UserModel
D('User','Logic') //实例化UserLogic
D('User','Service') //实例化UserService



========================================
TP中的Behavior（行为）总结（行为扩展B方法）
----------------------------------------
首先解释一下什么是钩子 （hook）？什么是行为？
看TP的源码看得出，hook是一个抽象的概念，是一套触发机制。钩子应该具有的基本方法应该有：
-设置钩子
-触发钩子
-执行行为

行为就是继承了Behavior的行为类，类名以Behavior结尾，实现run方法。也可以称之为 钩子函数。

第一步设置钩子，也就是埋设陷阱。把你的钩子想象成一个陷阱，放到系统流程可能经过的路上，如果陷阱被系统踩到，就会执行你的行为，当执行完后，系统会根据你的程序的结果继续运行。

在Thinkphp Behavior中，我们把这些行为发生作用的位置（陷阱）称之为标签（位）(tag)，当应用程序运行到这个标签的时候，就会被拦截下来，统一执行相关的行为。

在tp中，典型的例子就是：thinkphp/conf/mode/common.php
'tags'  =>  array(
        'app_init'      =>  array(
        ),
        'app_begin'     =>  array(
            'Behavior\ReadHtmlCache', // 读取静态缓存
        ),
        'app_end'       =>  array(
            'Behavior\ShowPageTrace', // 页面Trace显示
        ),
        'path_info'     =>  array(),
        'action_begin'  =>  array(),
        'action_end'    =>  array(),
        'view_begin'    =>  array(),
        'view_parse'    =>  array(
            'Behavior\ParseTemplate', // 模板解析 支持PHP、内置模板引擎和第三方模板引擎
        ),
        'template_filter'=> array(
            'Behavior\ContentReplace', // 模板输出替换
        ),
        'view_filter'   =>  array(
            'Behavior\WriteHtmlCache', // 写入静态缓存
        ),
        'view_end'      =>  array(),
    ),

第二部，触发钩子。 在需要添加行为的函数里 ，直接Hook::Listen(tags,prarm)，注意param一定要传变量，不需要传常量。触发行为的关键方法是Hook类中的listen方法，它通过遍历某个行为标签下的所有行为，依次实例化并调用run方法.
在tp中，典型的例子就是：App.class.php
static public function run() {
	// 应用初始化标签
	Hook::listen('app_init');
	App::init();
	// 应用开始标签
	Hook::listen('app_begin');
	// Session初始化
	if(!IS_CLI){
		session(C('SESSION_OPTIONS'));
	}
	// 记录应用初始化时间
	G('initTime');
	App::exec();
	// 应用结束标签
	Hook::listen('app_end');
	return ;
}
	
第三部，执行行为。 找到行为类，类名以Behavior结尾，实现run方法。
class ReadHtmlCacheBehavior {
    // 行为扩展的执行入口必须是run
    public function run(&$params){
        // 开启静态缓存
        if(IS_GET && C('HTML_CACHE_ON'))  {
            $cacheTime = $this->requireHtmlCache();
            if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { //静态页面有效
                // 读取静态页面输出
                echo Storage::read(HTML_FILE_NAME,'html');
                exit();
            }
        }
    }
}

钩子在MVC模式下十分重要，他实现了在不改变源代码的前提下提升系统的灵活性，如，在文章输出前打印版权信息，在文章输出后生成二维码信息，app运行前检查用户权限，还有更多产品经理提出的变态要求，都可以。



我的例子：
1.定义钩子
文件位置Home/Behavior/AuthCheckBehavior.class.php 
<?php 
namespace Home\Behavior;

class AuthCheckBehavior{
	// 行为扩展的执行入口必须是run
	public function run(&$params){
		echo '<div style="color:red">This is AuthCheck behavior.</div>';
	}
}
2.触发和执行钩子
方法1：
Home/Conf/tags.php 
<?php 
return array(
    //'app_init'=>array('Home\Behavior\AuthCheckBehavior'), //为什么不行？
	'app_begin' => array('Home\Behavior\AuthCheckBehavior')
);

这样，访问任何一个控制器都可以看到钩子执行后的输出。

方法2：
在控制器中主动调用。

//自我验证
function auth(){
	B('Home\Behavior\AuthCheck');
}
访问：http://tp.dawneve.cc/blog/auth 可见到钩子执行。



http://www.thinkphp.cn/topic/36226.html
http://www.thinkphp.cn/topic/1752.html


========================================
加载自定义的类
----------------------------------------
1.新建文件夹/Home/Component/Page.class.php 
<?php  
namespace Home\Component;

class Page{
    function index(){
        echo 'Page-index';
    }
}



2.在Blog控制器中实例化并调用
    function page2(){
        $m=new \Home\Component\Page();
        $m->index();
    }

3.访问 http://tp.dawneve.cc/blog/page2 ，可见：
Page-index




4.实现机制：
自动加载方法 Library/Think/Think.class.php 
autoload()方法。


或者定义为跨模块的应用。
（1）和Home与Admin并列 /Component/Page.class.php 
<?php  
namespace Component;

class Page{
    function index(){
        echo 'Page-index';
    }
}

（2）在Home/Blog控制器中
    function page2(){
        $m=new \Component\Page();
        $m->index();
    }

(3)访问	http://tp.dawneve.cc/blog/page2。


	
========================================
在模型中直接返回数据，不经过数据库
----------------------------------------
1.在Model文件夹平齐位置新建文件夹Logic/UserLogic.class.php 
<?php
namespace Home\Logic;
//use Think\Model;

//class UserLogic extends Model{
class UserLogic{
	function getdata(){
	   return 'UserLogic->index() data here';
    }
}

2.在Blog控制器调用 
    //从logic层直接获取数据，不经过数据库
    function test2(){
        $user=A('User','Logic');
        echo $user->getdata();
    }
3.访问 http://tp.dawneve.cc/blog/test2
显示 UserLogic->index() data here


========================================
分页效果
----------------------------------------
有两种方法分页，自定义分页类，和tp内置分页类。

原理：
直接读取数据库，使用limit限定offset total。
分页类输出底部显示栏。


1.控制器中：

//分页1
    function showlist(){
    	$wb=D('Weibo');
        //1.获取总条目
        $total=$wb->count();
        //2.实例化分页对象
        $per=5;
        $page=new \Component\Page($total,$per);//自定义分页类
        //3.拼装sql语句
        $sql="select * from think_weibo ". $page->limit;
        $info=$wb->query($sql);
        //4.获得页码代码
        $pagelist=$page->fpage(); //自定义分页类
        //5.模板显示
        $this->assign('info',$info);
        $this->assign('pagelist',$pagelist);
        $this->display();
    }
    
    //分页2
    function showlist2($p=1){
        $wb=D('Weibo');
        //1.获取总条目
        $total=$wb->count();
        //2.实例化分页对象
        $per=5;
        $page=new \Think\Page($total, $per);//tp内置分页类
        
        //3.拼装sql语句,来分页
        //$sql="select * from think_weibo limit ". $p*$per .','.$per;
        //$info=$wb->query($sql);
        
        $info=$wb->page($p.','.$per)->select();
        
        //4.获得页码代码
        $pagelist=$page->show();//tp内置分页类
        //5.模板显示
        $this->assign('info',$info);
        $this->assign('pagelist',$pagelist);
        $this->display('showlist');
    }
	
2.视图：
<style>
html,body,div,p{margin:0;padding:0;}
body{background:#efeeef; font-family:'微软雅黑'}
.wrap{width:1200px; margin:0 auto;}
.box{border:1px solid #aaa; margin:10px; padding:10px; background:#fff;}
.box p.title{color:#0096ff; background:#fff;}
.pagelist{background:#aaa;padding:3px;}
.pagelist a{padding:5px;}

.footer{background:#000;color:#fff;padding:20px 5px; margin-top:20px;}
</style>

<div class=wrap>
<h1>分页</h1>

<volist name="info" id="vo">
	<div class='box'>
	    <p class=title>#{$vo.id} | {$vo.add_time|date="Y-m-d H:i:s",###}</p>
	    <p>{$vo.content|nl2br}</p>
	</div>
</volist>
<div class='pagelist'>{$pagelist}</div>
</div>


<div class='footer'>
    <div class=wrap>
        &copy;2016
    </div>
</div>



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




