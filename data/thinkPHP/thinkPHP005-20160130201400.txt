
thinkPHP3.2.3 笔记 深入篇

D() 使用模型。
M() 不使用模型。

========================================
466. thinkPHP的CURD操作（上）
----------------------------------------
给zend studio安装aptana插件，需要先卸载并清除zend的各种痕迹。

文档：http://www.kancloud.cn/manual/thinkphp/1758
1.数据创建：create方法
随便新建一个html文件：
<meta charset='utf-8'>
<form method='post' action='http://tp.dawneve.cc/user/create'>
	<p>用户:<input type='text' name='user' /><p>
	<p>邮箱:<input type='text' name='email' /><p>
	<p>生日:<input type='text' name='birthday' /><p>
	<input type='submit' value='提交' />
</form>

指向的user控制器下的create操作：
	function create(){
	    $u=M('User');
	    dump( $u->create() );
	}
结果在表格中填写完点击提交之后，没有birthday的值：
array(2) {
  ["user"] => string(3) "sfd"
  ["email"] => string(3) "sof"
}
说明：create仅对mysql表中字段做收集，对于字段不存在的部分忽视。
这是和post不同的地方。

我们熟悉的令牌验证、自动验证和自动完成功能，其实都必须通过create方法才能生效。


2.数据写入：add方法





========================================
467. thinkPHP的CURD操作（下）
----------------------------------------

save()方法更新。


========================================
468. thinkPHP自动验证（上）
----------------------------------------
	必须是D方法，才会有效。M方法不会触发自动验证。
	
数据验证有两种方式：
	静态方式：在模型类里面通过$_validate属性定义验证规则。 
	动态方式：使用模型类的validate方法动态创建自动验证规则。 

无论是什么方式，验证规则的定义是统一的规则，定义格式为：
array(
    array(验证字段1,验证规则,错误提示,[验证条件,附加规则,验证时间]),   
    array(验证字段2,验证规则,错误提示,[验证条件,附加规则,验证时间]), 
    ......
);


其中，验证条件（可选）包含下面几种情况：
	self::EXISTS_VALIDATE 或者0 存在字段就验证（默认） 
	self::MUST_VALIDATE 或者1 必须验证 
	self::VALUE_VALIDATE或者2 值不为空的时候验证 

	//定义自动验证
	protected $_validate=array(
		array('user','require','用户名必须填写',1),
		array('email','require','邮箱必须填写',1),
		array('add_time','require','添加时间必须填写',1), //如果不填写1，则默认为0，不存在该字段就不验证。
	);

	

	
========================================
469. thinkPHP自动验证（下）
----------------------------------------
	array('num','/^\d{2,5}$/','必须是2-5位的数字',0,'regex'), //使用正则表达式作为验证条件
	array('num','123456','传递过来的值不相等',0,'equal'), //必须与传递过来的值相等
	array('psw','repsw','密码不一致',0,'confirm'),  //验证密码是否一致
	array('user','张三,李四,王五', '不在给定的范围内！',0,'in'), //值必须在给定范围
	array('psw','6,8', '密码必须6-8位',0,'length'), //密码必须是6-8位长度
	
//array('psw',array(6,8), '密码必须6-8位',0,'between',3), //密码必须是6-8位长度. 不起作用【失败】??
	
	array('email', '', '邮箱已经存在！', 1, 'unique', 3), // email唯一
	array('user', '202.196.120.202', '您的IP没有被允许！', 1, 'ip_allow'), // IP访问权限
    array('user', '202.196.120.202', '您的IP被禁止！', 1, 'ip_deny'), // IP访问权限
	
	
自定义规则：使用callback 或 function。
callback是调用的模型的方法。
	protected $_validate=array(
	    array('psw', 'checkLength', '密码至少6位！', 0, 'callback', 3), // callback验证
	}
	protected function checkLength($str){
	   if( strlen($str) < 6){
	       return false;
	   }
	   return true;
	}
	

function需要定义在公共函数库：
	protected $_validate=array(
		array('psw', 'checkLength2', '密码至少6位！', 0, 'function', 3), // function验证
	}
其中，函数checkLength2定义在Apps/Home/Common/function.php中：
	//目的：User模型中的自动验证
	function checkLength2($str){
		if( strlen($str) < 6){
			return false;
		}
		return true;
	}
	
	
	
	
如果有很多错误，但是只想一次提示完，怎么做？
	在模型中增加一条：
	protected $patchValidate = true; //默认是false
	
	//错误输出为数组，格式类似：
	array(2) {
	  ["email"] => string(18) "邮箱必须填写"
	  ["psw"] => string(19) "密码至少6位！"
	}
	
	
也可以把错误提示输出成json，交给前端处理：
	 $this->ajaxReturn($user->getError());
	 //{"email":"\u90ae\u7bb1\u5fc5\u987b\u586b\u5199","psw":"\u5bc6\u7801\u81f3\u5c116\u4f4d\uff01"}
	
	//完整形式示例
	$User = D("User"); // 实例化User对象
	if (!$User->create()){     
		// 如果创建失败 表示验证没有通过 输出错误提示信息     
		$this->ajaxReturn($User->getError());
	}else{     
		// 验证通过 可以进行其他数据操作
	}
	
	
	
	
动态验证，就是控制器中做验证，比较灵活。但是规范的写法是：把验证写到模型中。
	//动态验证
    function valid3(){
        $user=M('User');//可以使用M()方法
        //制定规则
        $rules=array(
            array('user','require','用户名必须填写',1),
            array('email','require','邮箱必须填写',1),
        );
        //模拟表单数据
        $data=array(
           'user'=>'张三2',
           //'email'=>'Jimmy2@163.com',
        );
        $rs=$user->validate($rules)->create($data);//在create前使用validate方法验证，传入规则
        if(!$rs){
            dump($user->getError());
        }else{
            echo '所有数据都通过验证了~~';
        } 
    }	
	
========================================
470. thinkPHP自动完成
----------------------------------------

http://tp.dawneve.cc/user/auto2






========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
477路由功能。
13:45 2015/12/28 
----------------------------------------
http://tp.dawneve.cc/new/12


----------------------------------------

