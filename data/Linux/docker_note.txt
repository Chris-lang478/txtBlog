docker笔记

http://www.imooc.com/video/14623

下面开始本教程。
本教程能让你了解docker最基本的概念和操作。更细节的还需要看文档。

准备：
你需要熟悉基本的linux命令，同时有一个用于练习的用root权限的linux系统。可以是：
1.一个能登陆联网的ubuntu16.04服务器的终端。终端可以使linux命令行、windows下的git bash、windows下的putty等。服务器可以是虚拟机、物理主机、云主机。
2.或者 一台安装有ubuntu1604的联网电脑。



========================================
docker 权威书籍
----------------------------------------
https://github.com/eduleboss/the-best-docker-books


一、《Docker: Up & Running》2015
https://www.oreilly.com/library/view/docker-up/9781491917565/

1. Learn how Docker simplifies dependency management and deployment workflow for your applications
简化依赖和部署流程

2. Start working with Docker images, containers, and command line tools
镜像、容器、命令行工具

3. Use practical techniques to deploy and test Docker-based Linux containers in production
生产环境下部署和测试docker容器

4. Debug containers by understanding their composition and internal processes
通过理解他们的构成和内部过程，调试容器

5. Deploy production containers at scale inside your data center or cloud environment
批量部署生产容器，在数据中心或云环境

6. Explore advanced Docker topics, including deployment tools, networking, orchestration, security, and configuration
docker高级话题： 部署工具，网络，编排，安全性和配置。




========================================
日常使用docker
----------------------------------------
1.常用语句
(1). 列举主机上的镜像 $ docker images

(2). 当你运行一个容器时，你可以这样指定一个带标签的镜像：
$ docker run -t -i ubuntu:14.04 /bin/bash
如果你想运行一个ubuntu 12.04镜像，你可以使用
$ docker run -t -i ubuntu:12.04 /bin/bash
不指定tag则默认使用 ubuntu:latest 镜像

(3). 获得一个新的镜像 $ docker pull centos

(4). 查找镜像 $ docker search sinatra
docker公司提供或建立、验证和支持的。这类镜像可以用一个单词识别，比如 ubuntu
用户创建的镜像，有创建者的用户名前缀识，比如 training/sinatra 

(5). 拉取镜像 $ docker pull training/sinatra

(6). 运行镜像 $ docker run -t -i training/sinatra /bin/bash
root@a8cb6ce02d85:/#


(7)从主机中移除镜像  $ docker rmi training/sinatra
注意：从host中移除镜像，请确认没有基于该镜像的容器处于激活状态。







2.启动故障排查
https://askubuntu.com/questions/977961/unit-docker-service-could-not-be-found
报错
$ sudo docker ps
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?

##
$ sudo snap services
Service         Startup  Current   Notes
docker.dockerd  enabled  inactive  -

$ sudo snap start docker
Started.

$ sudo snap services
Service         Startup  Current  Notes
docker.dockerd  enabled  active   -



3.被断电重启工作站后，怎么恢复docker服务？
$ docker ps -a
$ docker start 72d
$ docker start b06

然后进入docker内部，启动apache 服务
$ sudo docker exec -it 72d bash
# service apache2 restart 
# exit



========================================
|-- docker中使用bioconductor的R包  
----------------------------------------
R包的镜像资源：
https://hub.docker.com/r/bioconductor/
http://bioconductor.org/help/docker/


下载镜像（耗时步骤）
$ docker pull dawneve/bioconductor_core2
也可以下载官方镜像
下载的镜像可以改名字，比如nginx名字太长，改简单点。
# docker tag hub.c.163.com/library/nginx dawneve/nginx


查看镜像
$ docker images



##
To open a Bash shell on the container:
$ docker run -ti dawneve/bioconductor_core2 bash
Note: The docker run command is very powerful and versatile. For full documentation, type docker run --help or visit the help page.


To run R from the command line:
$ docker run -ti dawneve/bioconductor_core2 R


一般需要做个地址映射：
$ docker run -ti -v /home/wangjl/:/home/wangjl/ dawneve/bioconductor_core2 bash





##
To run RStudio Server:
$ docker run -it -p 8080:8787 -v /home/wangjl/docker_R:/home/wangjl/ -d dawneve/bioconductor_core2
然后使用主机的IP进行访问 http://IP:8080
-p端口映射  -p 实体机器:镜像内
-v文件映射  -v 实体机器:镜像内




##
进入已经运行的docker容器：
先查找容器ID
$ docker ps
CONTAINER ID        IMAGE                        COMMAND             CREATED             STATUS              PORTS               NAMES
7639e26e324a        dawneve/bioconductor_core2   "bash"              4 hours ago         Up 4 hours          8787/tcp            lucid_poincare

$ docker exec -it 7639e26e324a /bin/bash
或者简写为
$ docker exec -it 7639e bash #id可以用前几个字符，只要不产生歧义

直接 ctrl + d 或者直接输入 exit 退出即可。





##
here are two ways to modify these images:
	1. Making changes in a running container and then committing them using the docker commit command.
	2. Using a Dockerfile to declare the changes you want to make.
The second way is the recommended way. Both ways are documented here.
https://docs.docker.com/get-started/




========================================
|-- 安装docker版的wordpress (做文件和端口映射)
----------------------------------------
https://hub.docker.com/r/library/wordpress/


1.拉取镜像 
$ sudo docker pull wordpress:latest



2.准备数据库

登录上述docker版的mysql数据库
G:\xampp\mysql\bin> mysql -h y.biomooc.com -P 7070 -u root -p

新建 wordpress数据库；
> create database wordpress;

如果你想允许用户wp从ip为任何的主机连接到mysql服务器，并使用123456作为密码
> GRANT ALL PRIVILEGES ON *.* TO 'wp'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
> flush privileges;



3.启动wordpress容器
$ sudo docker run -it --name some-wordpress -e WORDPRESS_DB_HOST=y.biomooc.com:7070 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=123456 -p 8080:80 -d wordpress
秒退。

$ sudo docker ps #发现这些容器都刚运行就退出了
$ sudo docker ps -a|grep Exited #查询容器ID
批量删除Docker中已停止的容器
$ sudo docker ps -a|grep Exited | cut -d" " -f 1 | xargs sudo docker rm

最后加一个长期执行的命令就可以了，bash：
$ sudo docker run -it --name some-wordpress -e WORDPRESS_DB_HOST=y.biomooc.com:7070 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=123456 -p 8080:80 -d wordpress bash

进入docker内部
$ sudo docker exec -it 716c bash
启动apache服务器
# service apache2 restart 

# pwd
/var/www/html
# rm -rf *
# cp -r /usr/src/wordpress/* . #复制wordpress文件到www目录

浏览器打开 y.biomooc.com:8080

填写数据库信息：
DB: wordpress
usr: root 
psw: xxx
host: 192.168.2.120:7070
table_prefix:wp_





进入docker内部，使用head/tail/cat命令修改 wp-config.php中数据库一行，改为：
define('DB_HOST', 'p:192.168.2.120:7070');

可以正常访问web页面。











************
* 以下部分可以不看
************
4.排错
(1)使用p解决频繁链接失败的问题。
https://stackoverflow.com/questions/3210270/php-mysqli-connection-randomly-fails-with-cannot-assign-requested-address

<?php
$link = mysqli_connect('p:192.168.2.120:7070', 'wp', '123456');
if (!$link) {
die('Could not connect: ' . mysqli_error());
}
echo 'Connected successfully';
mysqli_close($link);
?>



(2)ERR_CONNECTION_RESET 连接已重置
https://blog.csdn.net/y472360651/article/details/79127285

尝试修改 C:\windows\system32\drivers\etc\hosts

加上服务器ip 域名，例如 
74.125.39.99 chrome.google.com
然后，访问就没问题了！





5.设置wordpress的尝试过程
进入docker内部
$ sudo docker exec -it 0e027 bash

(1)# find / -name "*wordpress*" 2>/dev/null
/usr/src/wordpress
...

(2)# find / -name "*apache*" 2>/dev/null
/etc/apache2
/etc/apache2/apache2.conf
...


(3)# service apache2 status #原来是apache服务没开
# service apache2 restart

再次访问y.biomooc.com:8080 ，提示
Forbidden
You don't have permission to access / on this server.
Apache/2.4.25 (Debian) Server at y.biomooc.com Port 8080

然后用cat命令新建一个/var/www/html/index.html文件，访问y.biomooc.com:8080显示该index.html文件。


(4)docker系统竟然没有文本编辑器，也安装不上去，有博客说需要更新系统
https://www.cnblogs.com/zr520/p/6083436.html

# apt-get update #这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。等更新完毕以后再敲命令：apt-get install vim
总是更新失败。
没办法，用head和cat命令编辑文件吧。。。

文件在本机读写出现问题，所以不能文件映射！//todo




========================================
谁在用docker? 怎么用？
----------------------------------------
1.docker是什么？
docker打包了代码及其运行环境，像虚拟机但更轻量化、更方便移植。
可用于可重复性研究，持续集成等。
免安装，拉取过来即可运行。解决了“在你电脑上能运行，在我的电脑上为什么运行不来啊？”的痛点。


2.有paper已经在推荐docker： 
Nature Biotechnology 2017 
Reproducibility of computational workflows is automated using continuous analysis: 
https://www.nature.com/articles/nbt.3780
"Docker, a container technology akin to virtual machines"

3.bioconductor发布的一直有docker镜像。
Bioconductor is also available as an AMI (Amazon Machine Image) and a series of Docker images.

http://www.bioconductor.org/help/docker/


4.我的docker主页: https://hub.docker.com/u/dawneve/



========================================
|-- docker简介、目的、原理、关键词
----------------------------------------
1.
docker作用
http://www.imooc.com/video/14609
docker在京东、淘宝、腾讯都有大规模应用。
docker和git的命令很相似。


2.
什么是docker

2010 dotCloud PAAS
2013 docker开源
2014.6 Docker1.0
2014.7 C轮 $4 000万
2015.4 D轮 $9 500万
至今 Docker 1.13

docker是一个装应用和环境的容器。构建、迁移、运行。
https://www.docker.com/
官网介绍: Docker is the world’s leading software container platform. 

download: https://download.docker.com/linux/ubuntu/dists/
代码托管在github： https://github.com/docker/docker-ce

跨平台，支持win,linux,Mac.


3.
理解docker

docker思想体现在docker的logo上。
docker思想：
	集装箱;
	标准化(运输方式/存储方式/API接口);
	隔离(比虚拟机更快，数秒启动)

docker解决的问题：
	我本地运行没问题啊?!: 打包环境和代码。
	系统好卡，哪个哥们写死循环了?!: docker是隔离的，只影响自己。
	双11来了，服务器撑不住了?!: 1台扩展成上万台很容易。

docker的原理: 单独的带有namespace的进程，该进程直接在物理机上跑；


4.docker是未来吗？Container War in 2016, docker VS Rocket:  
	docker注册了自己的商标，使用该名词都很麻烦。
	spec (specification:规范) 都是自己定义的。趋向于封闭。  
	docker将要做成容器类的github。  
	openStock?


5.总结
集装箱、标准化、隔离
镜像、容器、仓库(build ship run)
docker命令pull,build,run,stop,restart,exec...



========================================
|-- 走进docker的hello world
----------------------------------------
1.
docker的三个核心词汇： build(集装箱),ship(码头),run(运行的镜像就是容器).

docker镜像(image): 就是一系列文件，包括应用和环境。
	保存到本地了。linux下的联合文件系统(unifss)
	文件分层，底层镜像image都是只读的，顶层container才是可写的。
	构建镜像的目的，是为了方便在其他机器上运行。
docker容器(container):如果需要修改底层数据，则先拷贝到顶层，修改。而查找都是从上到下的，所以以后找到的都是修改过的最新部分。
	容器是可以修改的，而镜像不能修改，决定着镜像是稳定的。
docker仓库(repo): 先把镜像传到仓库，再在其他机器从仓库拉这个镜像。
	hub.docker.com，下载着很慢。
		浏览镜像： https://hub.docker.com/explore/
		我的仓库：https://hub.docker.com/r/dawneve/
	国内镜像： 
		c.163.com 网易蜂巢找不到镜像中心的问题：
			需要登陆，然后输入地址：https://c.163.com/hub#/m/home/
		https://www.docker-cn.com/registry-mirror
		https://www.zhihu.com/question/55135855
		http://mirrors.aliyun.com/
#


2. 实例
(1)ubuntu国内的安装，docker本身在ubuntu下开发的。
检查内核版本
# uname -r
4.10.0-28-generic

(2)系统自带安装，可能不是最新版本
#apt-get install docker 

最新版的安装
#curl -s https://get.docker.com | sh 

(3)安装好后查看版本
#docker version
Client:
 Version:      17.06.0-ce
 API version:  1.30
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:23:31 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.06.0-ce
 API version:  1.30 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:19:04 2017
 OS/Arch:      linux/amd64
 Experimental: false

 
(4)拉取第一个docker镜像
#docker pull[option] NAME[:TAG] 拉取镜像
# docker pull hello-world
# docker pull dawneve/ping:latest
latest: Pulling from dawneve/ping
271134aeb542: Already exists
bb8612de0ef8: Pull complete
Digest: sha256:4ce09a01b4193e90d1314b470fc30e670ed619de5b5deb6d148294f10ae76446
Status: Downloaded newer image for dawneve/ping:latest


(5)#docker images [options] [repository][:tag] 查看本地多少镜像
# docker images
REPOSITORY       TAG     IMAGE ID	    CREATED	     SIZE
ubuntu	   latest  14f60031763d	2 weeks ago	 120MB
busybox	  latest  efe10ee6727f	2 weeks ago	 1.13MB
bioconductor/release_core2   latest  75b1bf6ef48b	3 weeks ago	 1.71GB
hello-world      latest  1815c82652c0	7 weeks ago	 1.84kB
learn/tutorial   latest  a7876479f1aa	4 years ago	 128MB

dawneve/ping	latest	5bd062e39404	17 months ago	139MB


(6)运行第一个docker容器
# docker run [options] IMAGE[:TAG] [COMMAND][ARG...]
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon. |客户端连接daemon
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.|daemon本地找不到，就从docker仓库拉取
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading. |daemon用该镜像创建容器，产生该文本
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.|daemon把信息输出给客户端，也就是那你的终端。

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

参数说明：
 -i : –interactive，交互界面。
 -t : –tty，伪终端界面。


Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/


还可以在容器内运行命令
# docker run dawneve/ping
hi
# docker run dawneve/ping ping baidu.com #测试ping命令
PING baidu.com (123.125.114.144) 56(84) bytes of data.
64 bytes from 123.125.114.144: icmp_req=1 ttl=54 time=5.51 ms

# docker run dawneve/ping uname -r #打印容器内系统的内核版本号
4.10.0-28-generic



========================================
|-- 推送与拉取镜像
----------------------------------------

1.
想推送需要有一个hub.docker.com账号。先去注册。

# docker login -u dawneve -p yourPassWord #登陆

# docker ps #查看容器
# docker commit 36279 dawneve/tomcat #提交一个新镜像

# docker images #查看镜像
root@ubt16:/home/wangjl# docker images
REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE
dawneve/bioconductor_core2   latest              5b8c5f497247        4 days ago          1.78GB
dawneve/jpress               latest              1159f08345b2        4 days ago          313MB
dawneve/tomcat               latest              b226d7ee3462        5 days ago          292MB
dawneve/nginx                latest              46102226f2fd        3 months ago        109MB
dawneve/mysql                latest              9e64176cd8a2        3 months ago        407MB


# 推送到docker hub 
# docker push dawneve/mysql
The push refers to a repository [docker.io/dawneve/mysql]

打开 hub.docker.com/u/dawneve 即可看到刚推送的镜像。






2.
拉取镜像不需要账号，只需要网络好即可。

其他地方想用该镜像，只需要拉取即可：
# docker pull dawneve/mysql 
而
# docker run -it xxx 时，如果本地找不到xxx镜像，则自动到hub.docker.com上拉取并运行该镜像。





3.当执行push或pull操作时，会为镜像生成摘要。
$ docker images --digests | head  #查看摘要
create, run, rmi以及Dockerfile的FROM镜像参考中使用摘要。比如按照摘要pull下来镜像
$ docker pull ouruser/sinatra@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf



========================================
|-- docker中运行Nginx服务、修改docker镜像名字
----------------------------------------
(1)实践前奏：
	持久运行的容器
	前台挂起&后台运行
	进入容器内部

(2)复习命令
docker images 查看本地镜像。
docker pull 拉取镜像。
docker run 运行镜像

(3)找到并下载nginx镜像
# docker pull hub.c.163.com/library/nginx:latest

(4)查看本地镜像 
# docker images #又多了一行镜像信息
REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
hub.c.163.com/library/nginx   latest              46102226f2fd        3 months ago        109MB

(5)前台运行镜像
# docker run hub.c.163.com/library/nginx
发现没有任何反应。

查看后台运行的容器
新开一个终端，输入#docker ps
# docker ps
CONTAINER ID        IMAGE                         COMMAND                  CREATED              STATUS              PORTS               NAMES
3c2c46733af3        hub.c.163.com/library/nginx   "nginx -g 'daemon ..."   About a minute ago   Up About a minute   80/tcp              cranky_aryabhata
表明nginx确实在运行。

在第一个终端ctrl+C终止掉nginx后，再次docker ps查看，发现没有结果。

说明nginx最好在后台运行。

(6)后台运行容器
查看帮助文档 docker run --help
发现  -d, --detach   Run container in background and print container ID
于是，这样运行nginx容器：

# docker run -d hub.c.163.com/library/nginx
9319a08b6fd22e470c95cd80997409568f7c3b0bdf95281ab29c07208123e131
#
# docker ps
CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS               NAMES
9319a08b6fd2        hub.c.163.com/library/nginx   "nginx -g 'daemon ..."   5 seconds ago       Up 4 seconds        80/tcp              nostalgic_morse
root@ubt16:/home/wangjl#

发现容器id是一样的。

(7)进入容器内部 
#docker exec --help
Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
Run a command in a running container 在一个运行的容器内运行一条命令。
Options:
  -d, --detach               Detached mode: run command in the background
      --detach-keys string   Override the key sequence for detaching a container
  -e, --env list             Set environment variables
      --help                 Print usage
  -i, --interactive交互         Keep STDIN open even if not attached
      --privileged           Give extended privileges to the command
  -t, --tty 伪终端                  Allocate a pseudo-TTY
  -u, --user string          Username or UID (format: <name|uid>[:<group|gid>])
#docker exec 9319a08b6fd2 ls
# docker exec 9319a08b6fd2 service nginx status
nginx is running.

如果想长时间待在容器内部，则可以使用-it参数的如下命令：
root@ubt16:/home/wangjl# docker exec -it 9319a bash
root@9319a08b6fd2:/# ls #注意用户名已经变了。

查找nginx位置
root@9319a08b6fd2:~# which nginx
/usr/sbin/nginx

查看nginx服务是否运行
root@9319a08b6fd2:/# ps -ef
bash: ps: command not found
root@9319a08b6fd2:/# service nginx status
[ ok ] nginx is running.

退出容器# exit 

(8)停止镜像
# docker stop 931
931
# docker ps #已经没有运行的容器了。


(9)重新运行一个停止的容器/启动一个已经停止的容器实例
1) docker ps -a #找到停止的容器的id
2) docker start cea58c #重新运行该容器

docker ps 可以查看运行状态的容器。



(10)修改docker镜像名字
refer:https://stackoverflow.com/questions/25211198/docker-how-to-change-repository-name-or-rename-image
nginx名字太长，改简单点。
# docker tag hub.c.163.com/library/nginx dawneve/nginx
# docker images
REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
hello-world                   latest              1815c82652c0        7 weeks ago         1.84kB
dawneve/nginx                 latest              46102226f2fd        3 months ago        109MB
hub.c.163.com/library/nginx   latest              46102226f2fd        3 months ago        109MB





========================================
|-- docker的网络和端口映射-p参数
----------------------------------------
(1)docker网络
	pid namespace用来隔离进程用的，
	network namespace用来隔离网络的。
	网络类型：bridge有独立IP，host模式和主机一样，none时没有网络通信。
	端口映射: ech0是主机的网卡。端口映射是对bridge模式来说的。
		host模式时容器直接连接主机网卡；
		bridge模式时，容器虚拟网卡eth0与docker0网桥连接，网桥和主机eth0连；

(2)查找端口映射的命令参数
# docker run --help  #参数太多，用port过滤一下
# docker run --help | grep port
      --expose list         Expose a port or a range of ports
      --health-retries int  Consecutive failures needed to report unhealthy
  -p, --publish list        Publish a container's port(s) to the host 开容器的一个端口到主机
  -P, --publish-all         Publish all exposed ports to random ports 容器所有端口到主机随机端口
都试试吧。

(3)尝试-p端口映射
root@ubt16:~# docker run -d -p 8080:80 dawneve/nginx # -p 主机端口:容器端口
a43468841f4280139b021ec320377a3d232b8e3c9a5c085c59b0c0e58d5a4814
root@ubt16:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
a43468841f42        dawneve/nginx       "nginx -g 'daemon ..."   15 seconds ago      Up 14 seconds       0.0.0.0:8080->80/tcp   mystifying_murdock

查看端口，发现主机已经监听8080端口。
root@ubt16:~# netstat -na|grep 8080
tcp6       0      0 :::8080                 :::*                    LISTEN

在浏览器中输入主机IP(ubuntu下查ip用ifconfig命令)加上8080端口号，可以访问容器中的nginx服务了。
http://172.16.112.86:8080/
Welcome to nginx!

If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.

Thank you for using nginx.

停止docker容器
# docker stop a43 
再次访问http://172.16.112.86:8080/，已经不能访问了。

(4)尝试-P端口映射
root@ubt16:~# docker run -d -P dawneve/nginx
245a25cc79ed2c3bd00d17a0509c7c51cf8989e4c9da2a69143a30bed86b2676
root@ubt16:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
245a25cc79ed        dawneve/nginx       "nginx -g 'daemon ..."   4 seconds ago       Up 3 seconds        0.0.0.0:32768->80/tcp   romantic_colden
#可见，docker随机在主机开一个32768映射到容器的80端口。

访问 http://172.16.112.86:32768/ ，可以看到nginx欢迎页面。







========================================
|-- 运行和使用 docker版的mysql(文件映射-v)
----------------------------------------
1. 运行docker版的mysql
https://c.163.com/hub#/m/repository/?repoId=2955
# docker pull hub.c.163.com/library/mysql:latest #下载

查看网易页面上的帮助
Starting a MySQL instance is simple:
$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
... where some-mysql is the name you want to assign to your container, my-secret-pw is the password to be set for the MySQL root user and tag is the tag specifying the MySQL version you want. See the list above for relevant tags.
-e是指定环境变量

# docker run --name some-mysql3 -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest

# docker ps #最后的NAMES和设定的一样some-mysql3。
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                    NAMES
00df8c0d6559        hub.c.163.com/library/mysql:latest   "docker-entrypoint..."   13 seconds ago      Up 11 seconds       3306/tcp                 some-mysql3
f3a05abb2f2e        dawneve/jpress                       "catalina.sh run"        27 minutes ago      Up 27 minutes       0.0.0.0:8888->8080/tcp   sharp_bassi
root@ubt16:/home/wangjl/Documents#

#docker stop 00d #关掉mysql，做端口映射

# docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest
c130260481b50c03880ee034d6dafd01ca1cb72298c08e260ccb7016bf018a46

忘了创建数据库了，关掉，重启
# docker stop c1
# docker run -p 3306:3306 -e MYSQL_DATABASE=jpress_db -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest

# docker run -p 3306:3306 -e MYSQL_DATABASE=jpress_db -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest
2ff32e902b5f01710f947eba7900511b5695cae793b55a4ab7698a592928237e
# docker ps
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                    NAMES
2ff32e902b5f        hub.c.163.com/library/mysql:latest   "docker-entrypoint..."   3 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp   nostalgic_jennings
f3a05abb2f2e        dawneve/jpress                       "catalina.sh run"        39 minutes ago      Up 39 minutes       0.0.0.0:8888->8080/tcp   sharp_bassi

#netstat -na|grep 3306 # 端口正常
tcp6       0      0 :::3306                 :::*                    LISTEN






2. 在windows上练习数据库。

1)启动ubuntu上docker中的数据库
$ sudo docker run -p 7070:3306 -d -it -e MYSQL_ROOT_PASSWORD=123456 dawneve/mysql
ee96cc19c63f5247d327b4d0010b8d0583f75a93cb1188a576339c65506e0064

解释:
 -p 是做端口映射，把主机的7070端口映射到docker上的3306.
 -d 后台运行 
 -it 进入容器内部
 -e 传入环境参数
 最后返回sha1码



2)windows下登陆数据库：
G:\xampp\mysql\bin>mysql -h y.biomooc.com -P 7070 -u root -p
解释：
 -h 是host名
 -P是指定port
 -u是mysql用户名
 -p是回车后输入密码


新建数据库wang，新建表user。
MySQL [(none)]> create database wang;
Query OK, 1 row affected (0.60 sec)

> use wang;
Database changed
> \s
...
> create table user(
    id int(4) not null primary key auto_increment,
    name char(20) not null,
    sex int(4) not null default '0',
    degree double(16,2));
Query OK, 0 rows affected (0.06 sec)

> show tables;
> desc user;

> insert into user values(1,'Tom',1,96.45),(2,'Joan',1,82.99), (3,'Wang',0, 96.59);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

> select * from user;
+----+--- ---+-----+- -------+
| id | name | sex | degree |
+----+--- ---+-----+- -------+
|  1 | Tom  |   1 |  96.45 |
|  2 | Joan |   1 |  82.99 |
|  3 | Wang |   0 |  96.59 |
+----+--- ---+-----+-- ------+
3 rows in set (0.03 sec)
重复n次如下语句，造数据。没特殊要求就重复1次好了。
> insert user(name,sex,degree) select name,sex,degree from user;


3)在ubuntu上重启该docker，则数据被重置，想保存数据，就需要做目录映射，把docker中的读写保存到ubuntu主机上。


在ubuntu上查看运行的docker的编号
$ sudo docker ps
CONTAINER ID        IMAGE
ee96cc19c63f        dawneve/mysql
进入docker文件内部，查看mysql文件：/opt/mysql_data  
$ sudo docker exec -it ee96 bash
root@ee96cc19c63f:/# find . -name "*wang*" | grep wang
./var/lib/mysql/wang
root@ee96cc19c63f:/var/lib/mysql/wang# ls -lth
total 112K
-rw-r----- 1 mysql mysql  96K Sep  6 08:36 user.ibd #2建立表格，插入数据，该文件增大。
-rw-r----- 1 mysql mysql 8.5K Sep  6 08:36 user.frm #2建立表格
-rw-r----- 1 mysql mysql   65 Sep  6 08:26 db.opt #1只有数据库时




4) docker cp命令可以实现docker容器内外文件的复制。
详情本页的专题。

$ docker cp outer.html ed7ee9:/var/www/html/  #外部文件复制到docker容器内
$ docker cp ed7ee90e50de:/var/www/html/index.html . #容器内文件复制到外部




5) 做文件映射(-v 主机目录:docker地址)吧
$ sudo docker stop ee96 
然后刚才创建的数据库数据全部消失了。

$ sudo docker run -p 7070:3306 -d -it -e MYSQL_ROOT_PASSWORD=123456 -v /home/wangjl/dockerFile:/var/lib/mysql dawneve/mysql
3d08b2ab56277e32765d41e128dfa60b5cb1b8ffbf5ce371af5768d541818f14





6) 然后登陆mysql创建表格。同上述步骤2);
进入docker：
$ sudo docker exec -it 3d08 bash
docker内部能看到数据库文件：
root@3d08b2ab5627:/# cd /var/lib/mysql
root@3d08b2ab5627:/var/lib/mysql# ls -lth

在ubuntu主机上 /home/wangjl/dockerFile 也有很多数据库文件，这就是docker使用的文件。
这些文件保存在ubuntu主机上，不会随着docker的关闭或重启而消失。

我们重启 docker。
$ sudo docker restart 3d08
数据库中数据确实还在。




========================================
|-- 文件映射 -v参数
----------------------------------------
如果容器停止，则所有运行期间的数据就丢失了。
为了保存mysql运行期间的数据，可以把数据库文件映射到宿主主机上。



可以支持多个文件夹映射，映射之间用分号隔开，或者使用多个-v参数
$ docker run -p8080:80 -v /encoder/:/encoder/;/pyt_models/:/pyt_models/;/dataset/:/dataset/ -it actit_mount:latest

$ docker run -p8080:80 \ 
  -v $(pwd)/encoder/:/Docker/encoder/ \
  -v $(pwd)/pyt_models/:/Docker/pyt_models/ \
  -v $(pwd)/dataset/:/Docker/dataset/ \
  -it actit_mount:latest
#



(1)做文件映射 
# docker run -e MYSQL_ROOT_PASSWORD=123456 -d -p3306:3306 -v /opt/mysql_data:/var/lib/mysql hub.c.163.com/library/mysql

ubuntu下mysql的文件夹位置和权限：http://blog.csdn.net/wang794686714/article/details/39273385

(2)创建数据库
可以用宿主机ip登陆mysql。

mysql> create database wjl;
Query OK, 1 row affected (0.33 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| wjl                |
+--------------------+
5 rows in set (0.01 sec)

发现在宿主机器上多了个wjl文件夹
root@ubt16:/opt/mysql_data# ls -tl
total 188480
drwxr-x--- 2 vboxadd vboxsf     4096 8月   6 06:16 wjl
root@ubt16:/opt/mysql_data# ls wjl
db.opt

(3)创建数据表
mysql> use wjl;
Database changed
mysql> create table goods(id int(10), name varchar(20));
Query OK, 0 rows affected (0.07 sec)

mysql> show tables;
+---------------+
| Tables_in_wjl |
+---------------+
| goods         |
+---------------+
1 row in set (0.00 sec)

在宿主机器上可见：
root@ubt16:/opt/mysql_data# ls wjl
db.opt  goods.frm  goods.ibd

(4)插入数据
mysql> insert into goods values(1,'pen');
Query OK, 1 row affected (0.01 sec)

mysql> insert into goods values(2,'apple');
Query OK, 1 row affected (0.04 sec)

mysql> select * from goods;
+------+-------+
| id   | name  |
+------+-------+
|    1 | pen   |
|    2 | apple |
+------+-------+
2 rows in set (0.72 sec)

宿主机
# ls wjl
db.opt  goods.frm  goods.ibd
root@ubt16:/opt/mysql_data# ls wjl -lt
total 112
-rw-r----- 1 vboxadd vboxsf 98304 8月   6 06:21 goods.ibd
-rw-r----- 1 vboxadd vboxsf  8586 8月   6 06:19 goods.frm
-rw-r----- 1 vboxadd vboxsf    65 8月   6 06:16 db.opt

添加一条记录
mysql> insert into goods values(3,'pie');
Query OK, 1 row affected (0.17 sec)

文件大小没变?!
root@ubt16:/opt/mysql_data/wjl# ls -lt
total 112
-rw-r----- 1 vboxadd vboxsf 98304 8月   6 06:24 goods.ibd
-rw-r----- 1 vboxadd vboxsf  8586 8月   6 06:19 goods.frm
-rw-r----- 1 vboxadd vboxsf    65 8月   6 06:16 db.opt



mysql文件简介
	ibdata是innodb引擎使用的
	如果是使用myisam引擎 则于ibdata无关  只是用frm myi myd
#




========================================
|-- docker不同容器间的通信 //todo
----------------------------------------
https://blog.csdn.net/lao_pei/article/details/79157712
https://blog.csdn.net/wucong60/article/details/83757813





========================================
|-- docker cp 命令： Docker与外部主机互传文件
----------------------------------------
前置条件：一个已经运行的nginx容器，做过端口映射



1.把外部文件复制到docker容器中
http://qa.supermap.com/23274?show=23274

docker cp 本地主机文件路径 容器id://usr/share/nginx/html

(1)查正在运行的容器id
$ docker ps
CONTAINER ID IMAGE COMMAND  CREATED        STATUS         PORTS                    NAMES
ed7ee90e50de 9376e "bash"   12 minutes ago Up 12 minutes  0.0.0.0:7000->80/tcp     tender_meninsky

(2) 在容器内新建文件路径，现有路径可以直接用
$ docker exec -it ed7ee90 bash
# mkdier -p /var/www/html/
# exit

(3) 将外部文件拷贝到容器
$ docker cp outer.html ed7ee9:/var/www/html/

访问 http://y.biomooc.com:7000/outer.html 可以看到内容。



(4)此时，可以对容器进行提交，生成一个新的容器，该容器将包含添加到nginx里面的outer.html页面。
示例命令：docker commit -m '注释' 容器id 自定义容器名
完整命令：docker commit -m 'a new nginx container with outer.html' ed7ee90e50de george/static_web:addOuterFile
sha256:1222d23b39e9a5fa9b8f7d7ae71

(5)使用docker images列出所有的容器，可以看到容器first-nginx在其中。
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
george/static_web   addOuterFile        1222d23b39e9        46 seconds ago      151MB
george/static_web   latest              9376e822266c        2 hours ago         151MB






2.将外部主机文件拷贝到Docker容器

将nginx容器中的文件复制到本地需要调换一下参数位置。

示例命令：docker cp nginx容器id://usr/share/nginx/html/index.html 本地主机文件路径
完整命令：
$ docker cp ed7ee90e50de:/var/www/html/index.html .





========================================
制作自己的docker镜像: Dockerfile文件
----------------------------------------
有两种方法更新和创建镜像：commit 变动的容器获得新镜像，或者通过Dockerfile 从现有镜像(特别是官方镜像)创建新镜像。

- commit命令是一个相当简单的扩展一个镜像的方式，但是很笨重，而且不容易在团队中分享开发进程。替代方案是使用新的命令，docker build，抓取建立镜像。
- Dockerfile是docker构建镜像的基础，也是docker区别于其他容器的重要特征，正是有了Dockerfile，docker的自动化和可移植性才成为可能。
不论是开发还是运维，学会编写Dockerfile几乎是必备的，这有助于你理解整个容器的运行。




FROM , 从一个基础镜像构建新的镜像
FROM ubuntu 

MAINTAINER , 维护者信息
MAINTAINER William <wlj@nicescale.com>

ENV , 设置环境变量
ENV TEST 1

RUN , 非交互式运行shell命令
RUN apt-get -y update 
RUN apt-get -y install nginx

ADD , 将外部文件拷贝到镜像里,src可以为url
ADD http://nicescale.com/  /data/nicescale.tgz

WORKDIR /path/to/workdir, 设置工作目录
WORKDIR /var/www

USER , 设置用户ID
USER nginx

VULUME <#dir>, 设置volume
VOLUME ['/data']

EXPOSE , 暴露哪些端口
EXPOSE 80 443 

ENTRYPOINT ['executable', 'param1', 'param2']执行命令
ENTRYPOINT ["/usr/sbin/nginx"]

CMD ["param1","param2"]
CMD ["start"]

docker创建、启动container时执行的命令，如果设置了ENTRYPOINT，则CMD将作为参数



Dockerfile最佳实践
 - 尽量将一些常用不变的指令放到前面
 - CMD和ENTRYPOINT尽量使用json数组方式

通过Dockerfile构建image: docker build csphere/nginx:1.7 .

镜像仓库Registry: 镜像从Dockerfile build生成后，需要将镜像推送(push)到镜像仓库。企业内部都需要构建一个私有docker registry，这个registry可以看作二进制的scm，CI/CD也需要围绕registry进行。

部署registry
$ mkdir /registry
$ docker run -p 80:5000 -e STORAGE_PATH=/registry -v /registry:/registry registry:2.0


推送镜像保存到仓库
假设192.168.1.2是registry仓库的地址：
$ docker tag  csphere/nginx:1.7 192.168.1.2/csphere/nginx:1.7
$ docker push 192.168.1.2/csphere/nginx:1.7



========================================
|-- Dockerfile建立nginx镜像实例( ADD / RUN / EXPOSE )
----------------------------------------
1. 实例1：
https://dockerbook.com/TheDockerBook_sample.pdf

(1)新建文件夹
$ mkdir static_web
$ cd static_web
$ touch Dockerfile


(2) 编写内容
# Version: 0.0.1
FROM ubuntu:18.04
LABEL maintainer="george@example.com"
RUN apt-get update; apt-get install -y nginx
RUN echo 'Hi, I am in your container' \
	>/var/www/html/index.html

#添加本地文件到镜像内
ADD outer.html /var/www/html/

#暴露80端口
EXPOSE 80



解释说明：
每条指令都有一个大写的前缀声明： INSTRUCTION statement
#后的是注释。
第一行总是 指令FROM， 指明镜像来源，是ubuntu:18.04版，没有作者，表明是官方来源。
指令MAINTAINER指定维护者。
RUN指令执行一个镜像内部命令，比如安装一个包。




(3)docker build 建立镜像，用-t指定名字（查看帮助 docker build --help）
$ cd static_web
$ docker build -t george/static_web .  ##默认tag是latest，注意最后有一个点号

说明：
1)尽量加上-t设置镜像名字，方便后续操作；
2)镜像名字可加上标签tag: docker build -t "george/static_web:v2" .
-t表明我们的新镜像属于用户george，仓库名static_web，标签v2。

3)最后一个点号，表示在当前位置找Dockerfile，也可以指定在github上找:
## docker build -t "george/static_web:v1" github.com/turnbullpress/docker-static_web
4)Docker 1.5.0及之后，可以用-f参数指定文件路径，而且该文件可以不命名为Dockerfile了，例如
## docker build -t "george/static_web" -f /path/to/file


以下是一堆输出：
Sending build context to Docker daemon  2.048kB
Step 1/5 : FROM ubuntu:18.04
 ---> 3556258649b2
...省略
Successfully built 9376e822266c
Successfully tagged george/static_web:latest


从输出第一行看，docker首先上传build上下文：基本上就是你正在build的文件夹。
做这些是因为docker守护进程需要本地上下文来build镜像。

接下来根据 Dockerfile 的指令一步一步执行。每步提交变化，并删掉中间容器。

注意：不管什么样的存储驱动，一个镜像都不能超过127层。这个限制是全局的，以鼓励优化镜像的总体尺寸。


更多指令可以查看官方文档。为了帮助你写一个清晰、可读、可维护的Dockerfile，我们写了一个《Dockerfile最佳实践指南》。
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/


(4)查看镜像，多了一个基础镜像ubuntu:18.04和一个新构建的george/static_web:latest镜像：
$ docker images
REPOSITORY         TAG     IMAGE ID      CREATED        SIZE
george/static_web  latest  9376e822266c  33 seconds ago 151MB
ubuntu             18.04   3556258649b2  2 weeks ago    64.2MB


可以在commit或build之后，给每一个已经存在的镜像添加标签。docker tag命令就可以做到。现在，为镜像george/static_web添加一个标签。
$ docker tag 9376e822266c george/static_web:devel
$ docker images
REPOSITORY         TAG     IMAGE ID      CREATED      SIZE
george/static_web  devel   9376e822266c  4 hours ago  151MB
george/static_web  latest  9376e822266c  4 hours ago  151MB

结果就是同一个image id，但是有好几个tag。
删掉旧的tag呢？
$ docker rmi george/static_web:latest
Untagged: george/static_web:latest 
该image id只剩下一个了。






(5)运行该镜像
$ sudo docker run -p 7000:80 -it 9376e /bin/bash
-i 表示交互式
-t 表示获取一个终端
-p 做端口映射，格式 物理机端口:虚拟机端口

root@01896f11caac:/# service nginx start
root@01896f11caac:/# service nginx status

使用浏览器查看主机的7000端口
http://y.biomooc.com:7000/
Hi, I am in your container

root@01896f11caac:/# exit
再访问，服务就不存在了。


#####
要想在退出容器shell后继续后台运行，可以添加-d参数。
$ docker run -it -p 7000:80 -d 9376e bash
8e4c5eb0
查看容器id: $ docker ps
进入容器
$ docker exec -it 8e4c bash
开启nginx服务
# service nginx start
# exit
访问该网址，服务还在。


(6)关闭容器
查看启动的容器id ： 运行命令 docker container ls 或 docker ps
关闭容器 ：运行命令 docker stop 容器id



容器退出后，依旧可以查其容器id: docker ps -a 
删除一个容器: docker rm 容器id

查看镜像: docker images 
删除一个镜像: docker rmi 镜像id





========================================
|-- 基于tomcat镜像的Jpress展示站点: 使用 COPY 把自定义文件加入到docker镜像中
----------------------------------------
(8) 怎么把自己的文件加入到docker中？从本地或者github都行。
https://www.cnblogs.com/20143605--pcx/p/10305680.html


1.实例1 
(1)制作自己的镜像
	dockerfile
	docker build 
	Jpress: http://jpress.io/ 做演示，先下载war包。
		放到Dockerfile所在文件夹，$ cp /home/wangjl/Public/jpress-web-newest.war .
	基础镜像：登陆 https://c.163.com/hub#/m/home/
		搜索tomcat，https://c.163.com/hub#/m/search/?keyword=tomcat
		下载docker版的 https://c.163.com/hub#/m/repository/?repoId=3105
		# docker pull hub.c.163.com/library/tomcat:latest
		改个短名字# docker tag hub.c.163.com/library/tomcat dawneve/tomcat
		因为tomcat依赖jdk，所以不用担心jdk问题了。
(2)写dockerfile
网易tomcat文件的dockerfile：
https://github.com/docker-library/tomcat/blob/a227157792e94c669148c3c2a09072fb317070e0/7/jre7/Dockerfile
dockerfile命令总结：http://blog.csdn.net/yeasy/article/details/40041707


#vim Dockerfile	 #简单写一个dockerfile
#指定基础镜像
from dawneve/tomcat
#所有者
MAINTAINER Jimmy JimmyMall@live.com 

#复制本地文件到基础镜像的文件夹中(参照该镜像文档 CATALINA_HOME:   /usr/local/tomcat)
COPY jpress-web-newest.war /usr/local/tomcat/webapps

(3)建立镜像
# docker build .
Sending build context to Docker daemon   20.8MB
Step 1/3 : FROM dawneve/tomcat
 ---> b226d7ee3462
Step 2/3 : MAINTAINER Jimmy JimmyMall@live.com
 ---> Using cache
 ---> 189049f0dac0
Step 3/3 : COPY jpress-web-newest.war /usr/local/tomcat/webapps
 ---> 1159f08345b2
Removing intermediate container 1eb46d2a6ce8
Successfully built 1159f08345b2




(4)docker images查看到一个没有名字的镜像。
# docker images
REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE
<none>                         <none>              1159f08345b2        31 seconds ago      313MB
dawneve/tomcat                 latest              b226d7ee3462        15 hours ago        292MB

(5)重新构建，用-t指定名字（查看帮助 docker build --help）
# docker build . -t dawneve/jpress:latest
Sending build context to Docker daemon   20.8MB
Step 1/3 : FROM dawneve/tomcat
 ---> b226d7ee3462
Step 2/3 : MAINTAINER Jimmy JimmyMall@live.com
 ---> Using cache
 ---> 189049f0dac0
Step 3/3 : COPY jpress-web-newest.war /usr/local/tomcat/webapps
 ---> Using cache
 ---> 1159f08345b2
Successfully built 1159f08345b2
Successfully tagged dawneve/jpress:latest
# docker images #名字正常
REPOSITORY       TAG     IMAGE ID            CREATED             SIZE
dawneve/jpress   latest  1159f08345b2        8 minutes ago       313MB
dawneve/tomcat   latest  b226d7ee3462        15 hours ago        292MB



(6)运行该容器
# docker run -d -p 8888:8080 dawneve/jpress
f3a05abb2f2e64164aaf70cfd07e423e985e0a43b09840065c6c215584a9ba75

# docker ps
CONTAINER ID IMAGE          COMMAND             CREATED        STATUS        PORTS                   NAMES
f3a05abb2f2e dawneve/jpress "catalina.sh run"   6 seconds ago  Up 4 seconds  0.0.0.0:8888->8080/tcp  sharp_bassi

#netstat -na|grep 8888
tcp6       0      0 :::8888                 :::*                    LISTEN



(7)访问主机的IP:8888查看效果
http://172.16.112.86:8888/
出现tomtat欢迎页面：Apache Tomcat/8.5.16。但是访问jpress页面报错。
原来url路径名要和war包同名
http://172.16.112.86:8888/jpress-web-newest/install
发现要安装jpress还需要数据库。
能不能用docker运行一个mysql呢？



(8)开启一个mysql服务
参考 运行和使用 docker版的mysql 的第一部分。


(9)回到jpress web安装页面，填写mysql信息。

数据库名: jpress_db 将JPress安装到哪个数据库？
用户名: root 您的MySQL用户名
密码:123456 …及其密码
数据库主机:172.16.112.86 如果localhost不能用，您通常可以从网站服务提供商处得到正确的信息。
端口号:3306 Mysql默认是3306
表前缀: jpress_ 如果您希望在同一个数据库安装多个JPress，请修改前缀。

点击下一步后，设置jpress管理员用户名和密码
网站名称： jpress in docker 
admin/admin


JPress安装向导
安装完成。
安装完成！稍等几秒后自动刷新。若一直停留在此页面，请重启你的web容器。

看来需要重启web容器了。
# docker restart f3a
f3a

http://172.16.112.86:8888/jpress-web-newest/
可以访问了。
后面加admin就可以访问后台了。用户名和密码刚才设置过。







========================================
|-- 怎么实现启动docker时自动启动服务呢？ //todo
----------------------------------------
https://www.jb51.net/article/147645.htm


在 Dockerfile 最后一行加上
# 容器默认启动命令
ENTRYPOINT ["service","nginx","start"]
好像不起作用！！！





========================================
制作自己的docker镜像:commit命令
----------------------------------------
对于运行的容器，如果有文件有变动，则可以使用commit命令提交为新的镜像。
推荐用Dockerfile文件建立镜像。因为该方法更可重复。

# find ID of your running container:
docker ps

# create image (snapshot) from container filesystem
docker commit 12345678904b5 mysnapshot
完整形式：docker commit 12345678904b5 myusername/mysnapshot:mytag
还可以加上注释 -m。
# docker commit -m'comments here' 242 myu/myimg:testTag
sha256:edb24adf0dd2c4d9c056c62cd38ab89951c0c12a0b5c0cc53ee4f4324d8997e1

#查看新提交的镜像
# docker images
REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE
myu/myimg                    testTag             edb24adf0dd2        12 seconds ago      120MB

# explore this filesystem using bash (for example)
docker run -t -i mysnapshot /bin/bash

#删除镜像
如果有基于该镜像的容器在运行或停止运行，需要加上-f参数 docker rmi -f IMGidOrName。
# docker rmi myu/myimg
Error response from daemon: No such image: myu/myimg:latest
root@ubt16:/home/wangjl# docker rmi myu/myimg:testTag
Untagged: myu/myimg:testTag
Deleted: sha256:edb24adf0dd2c4d9c056c62cd38ab89951c0c12a0b5c0cc53ee4f4324d8997e1





========================================
进一步学习docker
----------------------------------------
docker inspect imageID #查看分层Layers

docker 镜像的位置 
root@ubt16:/var/lib/docker/containers# pwd
/var/lib/docker/containers


Dockerfile是一个重点，有很多细节，
Dockerfile reference：https://docs.docker.com/engine/reference/builder/



1.使用容器
当你能在Docker容器中运行你的应用的时候，你就学会怎么管理那些容器了。学习怎么检查、监视和管理你的容器：
Go to Working With Containers.

2.使用docker镜像
你学完怎么使用docker，就应该进行下一步了，学习使用docker构建你自己的应用。
Go to Working with Docker Images.


3.联网的容器
目前为止你看到怎么在docker容器中构建私人应用。现在学习怎么使用docker网络构建整个应用栈。
Go to Networking Containers.


4.管理容器中的数据
现在你知道了怎么把众多docker容器连接起来，下一步就是学习怎么管理这些容器内部的数据、容量和挂载。
Go to Managing Data in Containers.


# Getting help
	- [Docker homepage](https://www.docker.com/)
	- [Docker Hub](https://hub.docker.com/)
	- [Docker blog](https://blog.docker.com/)
	- [Docker documentation](https://docs.docker.com/)
	- [Docker Getting Started Guide](https://docs.docker.com/mac/started/)
	- [Docker code on GitHub](https://github.com/docker/docker)
	- [Docker mailing list](https://groups.google.com/forum/#!forum/docker-user)
	- Docker on IRC: irc.freenode.net and channel #docker
	- [Docker on Twitter](https://twitter.com/docker)
	- Get [Docker help](https://stackoverflow.com/search?q=docker) on StackOverflow
	- [Docker.com](https://www.docker.com/)





========================================
|-- 容器之间的通信: 容器端口映射
----------------------------------------
端口映射的指令是什么？docker指令：docker run -p ip:hostPort:containerPort redis

ref: https://yeasy.gitbooks.io/docker_practice/network/port_mapping.html#映射到指定地址的指定端口
使用 ip::containerPort 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。
$ docker run -d -p 127.0.0.1::5000 training/webapp python app.py




1. 通过sudo docker ps 查看当前的进程


2. 通过 sudo docker inspect <id> ；例如我上面的例子 sudo docker inspect 4efcb2f82953
找到这个ip 

"Ports": {
	"3306/tcp": [ #2.那么容器的这个端口来响应
		{
			"HostIp": "0.0.0.0", #1.这里是如果用户访问宿主机IP和端口
			"HostPort": "7070"
		}
	]
},
...
"IPAddress": "172.17.0.2", ##就是这一行




3. 第三步：设置端口映射  
$ sudo  docker run -d -p 172.17.0.2::9090 training/webapp python app.py
注意红色字体(172.17.0.2)前面是docker容器的ip地址，后面是我们需要映射的端口号(9090)

绑定 已有容器172.17.0.2 的任意端口绑定到 将要新建的容器的9090端口，已有容器会自动分配一个端口。



4. sudo docker ps 查看当前是不是映射成功

出现0.0.0.0:7070->3306/tcp表示宿主机的7070端口映射到了虚拟机的3306端口。




5. 也可以使用docker port NAME查看端口映射情况。
$ sudo docker port agitated_hawking
红色字体(agitated_hawking)指的是当前端口号的name。


$ sudo docker port 740
3306/tcp -> 0.0.0.0:7070

表示虚拟机的3306端口映射到了主机的7070端口。
如果没有任何回复，表示端口映射失败。




https://blog.csdn.net/taowuhua0505/article/details/88255773




========================================
|-- 为运行中的容器添加端口映射 // todo 
----------------------------------------
1.方法1 容器打包成镜像，重新运行该镜像时添加端口映射
$ docker ps

$ docker run -it --name web_demo -p 8000:80  fanzone/aaa:v1  /bin/bash  # 添加了端口映射

$ docker run -it --name web_demo -p 8000:80  fanzone/aaa:v1  bash



2.修改容器的json文件：
暂停容器，
修改容器映射时只需要 修改hostconfig.json的PortBindings , 增加容器映射时还需要改config.v2.json的ExposedPorts

重新运行容器。





========================================
把用户添加到docker组
----------------------------------------
1.查看自己是否在docker分组
$ cat /etc/group | grep docker
## docker:x:978:hou,rqfu


2.添加自己到docker组
http://www.markjour.com/article/docker-no-root.html
不一定好使。





========================================
故障排除 troubleshooting
----------------------------------------



========================================
|-- mysql 从容器外连不上怎么办？
----------------------------------------
有人说改这个，没改，/etc/mysql/mysql.conf.d
(1)在mysqld下添加skip-name-resolve
(2)In my.cnf file, add:
connect_timeout = 10
table_open_cache = 900
Restart MySQL.

(3)It might be the firewall problem or maybe because the MySQL server is bound to the loop-back IP (127.0.0.1 / localhost) which effectively cuts you off from connecting from “outside”.



感觉问题不在容器及内部的服务，在宿主机的端口不可访问，证据如下： 



1. docker是正常运行的
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
740797493b8c        dawneve/mysql       "docker-entrypoint.s…"   8 weeks ago         Up 9 minutes        0.0.0.0:7070->3306/tcp   loving_engelbart



进入docker可以登录mysql，
$ docker exec -it 740 bash
root@740797493b8c:/# mysql -u root -p 
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3

也就是docker提供的mysql服务一直在，一直正常运行！





2. 但是在docker外部怎么都无法连接mysql

$ mysql -h 127.0.0.1 -P7070 -uroot -p
Enter password: 
ERROR 2013 (HY000): Lost connection to MySQL server at 'reading initial communication packet', system error: 0


$ mysql -h192.168.2.120 -P 7070 -uroot -p
Enter password: 
ERROR 2003 (HY000): Can't connect to MySQL server on '192.168.2.120' (111)







3. 使用telnet看端口，直接连不上。
$ telnet y.biomooc.com 7070
Trying 10.20.46.143...
telnet: Unable to connect to remote host: Connection refused




4.nmap扫描的结果是 filtered，
$ sudo nmap -sS -p 7000-8000 192.168.2.120

Starting Nmap 7.60 ( https://nmap.org ) at 2019-12-05 22:20 CST
Nmap scan report for sustc-HG.lan (192.168.2.120)
Host is up (0.000015s latency).
Not shown: 998 closed ports
PORT     STATE    SERVICE
7000/tcp open     afs3-fileserver
7070/tcp filtered realserver
8000/tcp open     http-alt

什么意思？
(1)https://blog.csdn.net/lee244868149/article/details/39177669
filtered(被过滤的)
由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。

难道是防火墙？

(2)
https://blog.csdn.net/m0_37268841/article/details/80234365
Filtered（过滤的）：由于报文无法到达指定的端口，nmap不能够决定端口的开放状态，这主要是由于网络或者主机安装了一些防火墙所导致的。当nmap收到icmp报文主机不可达报文（例如：type为3，code为13（communication administratively prohibit）报文）或者目标主机无应答，常常会将目标主机的状态设置为filtered。





5. 监听端口
http://www.kbase101.com/question/16413.html

(1)
$ sudo tcpdump -A 'udp and port 7070' -w tcpdump.out
[sudo] password for wangjl: 
tcpdump: listening on docker0, link-type EN10MB (Ethernet), capture size 262144 bytes
^C0 packets captured
0 packets received by filter
0 packets dropped by kernel

现在停止转储并检查是否有任何数据包在tcpdump.out中被捕获或者没有使用wireshark。


(2)
$ nc y.biomooc.com -u 7070
如果没有捕获数据包，这意味着某些中间设备（防火墙）阻止了通信。否则，如果捕获，请检查服务器给出的回复以回复请求。如果它是带有某些错误代码的任何类型的ICMP回复，则表示存在一些阻塞的本地防火墙。


那就是防火墙问题了？





6. 关掉防火墙
(1)
$ sudo iptables -F
清空iptables设置。


(2)
$ service ufw status
$ service ufw stop

$ netstat | grep 7070
tcp        0      1 sustc-HG.lan:54550      10.20.46.143:7070       SYN_SENT   
tcp        0      1 sustc-HG.lan:54548      10.20.46.143:7070       SYN_SENT


这个用的 centos: https://blog.csdn.net/Blog_inG/article/details/88963043


(3)
关闭ubuntu的防火墙 ufw disable 开启防火墙 ufw enable
https://www.jb51.net/article/138876.htm

$ sudo ufw disable
这个有用了。可以连接mysql了。
不知道是不是因为这个？


Ubuntu 防火墙更多命令：
sudo ufw allow 80 允许外部访问80端口
sudo ufw delete allow 80 禁止外部访问80 端口
sudo ufw allow from 192.168.1.1 允许此IP访问所有的本机端口





7.回测：
步骤4和5的结果还是一样，没变化。

步骤3 telnet端口，结果是：
$ telnet y.biomooc.com 7070
Trying 10.20.46.143...
Connected to y.biomooc.com.
Escape character is '^]'.
J
5.7.B8  1g<.rDA43X#r:mysql_native_password

^CConnection closed by foreign host.






8.更多端口查看方法
(1)
$ netstat -an|grep 7070
tcp6       0      0 :::7070                 :::*                    LISTEN 


(2)
服务端查看所有开放端口：$ netstat -luntp

$ netstat -luntp | head
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:43917         0.0.0.0:*               LISTEN      9690/python


$ netstat -luntp | grep 7070
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
tcp6       0      0 :::7070                 :::*                    LISTEN      -    



(3)
$ ss -tnl

(4)
$ curl -i http://y.biomooc.com:7070
$ wget http://y.biomooc.com:7070



https://blog.csdn.net/Blog_inG/article/details/88963043



========================================
----------------------------------------



========================================
----------------------------------------


