docker笔记

http://www.imooc.com/video/14623


========================================
docker简介及目的
----------------------------------------
1.
docker作用
http://www.imooc.com/video/14609
docker在京东、淘宝、腾讯都有大规模应用。
docker和git的命令很相似。


2.
什么是docker

2010 dotCloud PAAS
2013 docker开源
2014.6 Docker1.0
2014.7 C轮 $4 000万
2015.4 D轮 $9 500万
至今 Docker 1.13

docker是一个装应用和环境的容器。构建、迁移、运行。
https://www.docker.com/
官网介绍: Docker is the world’s leading software container platform. 

download: https://download.docker.com/linux/ubuntu/dists/
代码托管在github： https://github.com/docker/docker-ce

跨平台，支持win,linux,Mac.


3.
理解docker

docker思想体现在docker的logo上。
docker思想：
	集装箱;
	标准化(运输方式/存储方式/API接口);
	隔离(比虚拟机更快，数秒启动)

docker解决的问题：
	我本地运行没问题啊?!: 打包环境和代码。
	系统好卡，哪个哥们写死循环了?!: docker是隔离的，只影响自己。
	双11来了，服务器撑不住了?!: 1台扩展成上万台很容易。



========================================
走进docker
----------------------------------------
docker的三个核心词汇： build(集装箱),ship(码头),run(运行的镜像就是容器).

docker镜像(image): 就是一系列文件，包括应用和环境。
	保存到本地了。linux下的联合文件系统(unifss)
	文件分层，底层镜像image都是只读的，顶层container才是可写的。
	构建镜像的目的，是为了方便在其他机器上运行。
docker容器(container):如果需要修改底层数据，则先拷贝到顶层，修改。而查找都是从上到下的，所以以后找到的都是修改过的最新部分。
	容器是可以修改的，而镜像不能修改，决定着镜像是稳定的。
docker仓库(repo): 先把镜像传到仓库，再在其他机器从仓库拉这个镜像。
	hub.docker.com，下载着很慢。
		浏览镜像： https://hub.docker.com/explore/
		我的仓库：https://hub.docker.com/r/dawneve/
	国内镜像： 
		c.163.com 网易蜂巢找不到镜像中心的问题：
			需要登陆，然后输入地址：https://c.163.com/hub#/m/home/
		https://www.docker-cn.com/registry-mirror
		https://www.zhihu.com/question/55135855
		http://mirrors.aliyun.com/

		
========================================
hello world
----------------------------------------
(1)ubuntu国内的安装，docker本身在ubuntu下开发的。
检查内核版本
# uname -r
4.10.0-28-generic

(2)系统自带安装，可能不是最新版本
#apt-get install docker 

最新版的安装
#curl -s https://get.docker.com | sh 

(3)安装好后查看版本
#docker version
Client:
 Version:      17.06.0-ce
 API version:  1.30
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:23:31 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.06.0-ce
 API version:  1.30 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   02c1d87
 Built:        Fri Jun 23 21:19:04 2017
 OS/Arch:      linux/amd64
 Experimental: false

 
(4)拉取第一个docker镜像
#docker pull[option] NAME[:TAG] 拉取镜像
# docker pull hello-world
# docker pull dawneve/ping:latest
latest: Pulling from dawneve/ping
271134aeb542: Already exists
bb8612de0ef8: Pull complete
Digest: sha256:4ce09a01b4193e90d1314b470fc30e670ed619de5b5deb6d148294f10ae76446
Status: Downloaded newer image for dawneve/ping:latest


(5)#docker images [options] [repository][:tag] 查看本地多少镜像
# docker images
REPOSITORY       TAG     IMAGE ID	    CREATED	     SIZE
ubuntu	   latest  14f60031763d	2 weeks ago	 120MB
busybox	  latest  efe10ee6727f	2 weeks ago	 1.13MB
bioconductor/release_core2   latest  75b1bf6ef48b	3 weeks ago	 1.71GB
hello-world      latest  1815c82652c0	7 weeks ago	 1.84kB
learn/tutorial   latest  a7876479f1aa	4 years ago	 128MB

dawneve/ping	latest	5bd062e39404	17 months ago	139MB


(6)运行第一个docker容器
# docker run [options] IMAGE[:TAG] [COMMAND][ARG...]
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon. |客户端连接daemon
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.|daemon本地找不到，就从docker仓库拉取
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading. |daemon用该镜像创建容器，产生该文本
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.|daemon把信息输出给客户端，也就是那你的终端。

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/


还可以在容器内运行命令
# docker run dawneve/ping
hi
# docker run dawneve/ping ping baidu.com #测试ping命令
PING baidu.com (123.125.114.144) 56(84) bytes of data.
64 bytes from 123.125.114.144: icmp_req=1 ttl=54 time=5.51 ms

# docker run dawneve/ping uname -r #打印容器内系统的内核版本号
4.10.0-28-generic




========================================
docker中运行Nginx服务
----------------------------------------
(1)实践前奏：
	持久运行的容器
	前台挂起&后台运行
	进入容器内部

(2)复习命令
docker images 查看本地镜像。
docker pull 拉取镜像。
docker run 运行镜像

(3)找到并下载nginx镜像
# docker pull hub.c.163.com/library/nginx:latest

(4)查看本地镜像 
# docker images #又多了一行镜像信息
REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
hub.c.163.com/library/nginx   latest              46102226f2fd        3 months ago        109MB

(5)前台运行镜像
# docker run hub.c.163.com/library/nginx
发现没有任何反应。

查看后台运行的容器
新开一个终端，输入#docker ps
# docker ps
CONTAINER ID        IMAGE                         COMMAND                  CREATED              STATUS              PORTS               NAMES
3c2c46733af3        hub.c.163.com/library/nginx   "nginx -g 'daemon ..."   About a minute ago   Up About a minute   80/tcp              cranky_aryabhata
表明nginx确实在运行。

在第一个终端ctrl+C终止掉nginx后，再次docker ps查看，发现没有结果。

说明nginx最好在后台运行。

(6)后台运行容器
查看帮助文档 docker run --help
发现  -d, --detach   Run container in background and print container ID
于是，这样运行nginx容器：

# docker run -d hub.c.163.com/library/nginx
9319a08b6fd22e470c95cd80997409568f7c3b0bdf95281ab29c07208123e131
#
# docker ps
CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS               NAMES
9319a08b6fd2        hub.c.163.com/library/nginx   "nginx -g 'daemon ..."   5 seconds ago       Up 4 seconds        80/tcp              nostalgic_morse
root@ubt16:/home/wangjl#

发现容器id是一样的。

(7)进入容器内部 
#docker exec --help
Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
Run a command in a running container 在一个运行的容器内运行一条命令。
Options:
  -d, --detach               Detached mode: run command in the background
      --detach-keys string   Override the key sequence for detaching a container
  -e, --env list             Set environment variables
      --help                 Print usage
  -i, --interactive交互         Keep STDIN open even if not attached
      --privileged           Give extended privileges to the command
  -t, --tty 伪终端                  Allocate a pseudo-TTY
  -u, --user string          Username or UID (format: <name|uid>[:<group|gid>])
#docker exec 9319a08b6fd2 ls
# docker exec 9319a08b6fd2 service nginx status
nginx is running.

如果想长时间待在容器内部，则可以使用-it参数的如下命令：
root@ubt16:/home/wangjl# docker exec -it 9319a bash
root@9319a08b6fd2:/# ls #注意用户名已经变了。

查找nginx位置
root@9319a08b6fd2:~# which nginx
/usr/sbin/nginx

查看nginx服务是否运行
root@9319a08b6fd2:/# ps -ef
bash: ps: command not found
root@9319a08b6fd2:/# service nginx status
[ ok ] nginx is running.

退出容器# exit 

(8)停止镜像
# docker stop 931
931
# docker ps #已经没有运行的容器了。


(9)修改docker镜像名字
refer:https://stackoverflow.com/questions/25211198/docker-how-to-change-repository-name-or-rename-image
nginx名字太长，改简单点。
# docker tag hub.c.163.com/library/nginx dawneve/nginx
# docker images
REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
hello-world                   latest              1815c82652c0        7 weeks ago         1.84kB
dawneve/nginx                 latest              46102226f2fd        3 months ago        109MB
hub.c.163.com/library/nginx   latest              46102226f2fd        3 months ago        109MB





========================================
docker的网络和端口映射-p参数
----------------------------------------
(1)docker网络
	pid namespace用来隔离进程用的，
	network namespace用来隔离网络的。
	网络类型：bridge有独立IP，host模式和主机一样，none时没有网络通信。
	端口映射: ech0是主机的网卡。端口映射是对bridge模式来说的。
		host模式时容器直接连接主机网卡；
		bridge模式时，容器虚拟网卡eth0与docker0网桥连接，网桥和主机eth0连；

(2)查找端口映射的命令参数
# docker run --help  #参数太多，用port过滤一下
# docker run --help | grep port
      --expose list         Expose a port or a range of ports
      --health-retries int  Consecutive failures needed to report unhealthy
  -p, --publish list        Publish a container's port(s) to the host 开容器的一个端口到主机
  -P, --publish-all         Publish all exposed ports to random ports 容器所有端口到主机随机端口
都试试吧。

(3)尝试-p端口映射
root@ubt16:~# docker run -d -p 8080:80 dawneve/nginx # -p 容器端口:主机端口。
a43468841f4280139b021ec320377a3d232b8e3c9a5c085c59b0c0e58d5a4814
root@ubt16:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
a43468841f42        dawneve/nginx       "nginx -g 'daemon ..."   15 seconds ago      Up 14 seconds       0.0.0.0:8080->80/tcp   mystifying_murdock

查看端口，发现主机已经监听8080端口。
root@ubt16:~# netstat -na|grep 8080
tcp6       0      0 :::8080                 :::*                    LISTEN

在浏览器中输入主机IP(ubuntu下查ip用ifconfig命令)加上8080端口号，可以访问容器中的nginx服务了。
http://172.16.112.86:8080/
Welcome to nginx!

If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.

Thank you for using nginx.

停止docker容器
# docker stop a43 
再次访问http://172.16.112.86:8080/，已经不能访问了。

(4)尝试-P端口映射
root@ubt16:~# docker run -d -P dawneve/nginx
245a25cc79ed2c3bd00d17a0509c7c51cf8989e4c9da2a69143a30bed86b2676
root@ubt16:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
245a25cc79ed        dawneve/nginx       "nginx -g 'daemon ..."   4 seconds ago       Up 3 seconds        0.0.0.0:32768->80/tcp   romantic_colden
#可见，docker随机在主机开一个32768映射到容器的80端口。

访问 http://172.16.112.86:32768/ ，可以看到nginx欢迎页面。



========================================
制作自己的docker镜像:Dockerfile文件
----------------------------------------
(1)制作自己的镜像
	dockerfile
	docker build 
	Jpress: http://jpress.io/ 做演示，先下载war包。
		放到Dockerfile所在文件夹，$ cp /home/wangjl/Public/jpress-web-newest.war .
	基础镜像：登陆 https://c.163.com/hub#/m/home/
		搜索tomcat，https://c.163.com/hub#/m/search/?keyword=tomcat
		下载docker版的 https://c.163.com/hub#/m/repository/?repoId=3105
		# docker pull hub.c.163.com/library/tomcat:latest
		改个短名字# docker tag hub.c.163.com/library/tomcat dawneve/tomcat
		因为tomcat依赖jdk，所以不用担心jdk问题了。
(2)写dockerfile
网易tomcat文件的dockerfile：
https://github.com/docker-library/tomcat/blob/a227157792e94c669148c3c2a09072fb317070e0/7/jre7/Dockerfile
dockerfile命令总结：http://blog.csdn.net/yeasy/article/details/40041707


#vim Dockerfile	 #简单写一个dockerfile
#指定基础镜像
from dawneve/tomcat
#所有者
MAINTAINER Jimmy JimmyMall@live.com 

#复制本地文件到基础镜像的文件夹中(参照该镜像文档 CATALINA_HOME:   /usr/local/tomcat)
COPY jpress-web-newest.war /usr/local/tomcat/webapps

(3)建立镜像
# docker build .
Sending build context to Docker daemon   20.8MB
Step 1/3 : FROM dawneve/tomcat
 ---> b226d7ee3462
Step 2/3 : MAINTAINER Jimmy JimmyMall@live.com
 ---> Using cache
 ---> 189049f0dac0
Step 3/3 : COPY jpress-web-newest.war /usr/local/tomcat/webapps
 ---> 1159f08345b2
Removing intermediate container 1eb46d2a6ce8
Successfully built 1159f08345b2

(4)docker images查看到一个没有名字的镜像。
# docker images
REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE
<none>                         <none>              1159f08345b2        31 seconds ago      313MB
dawneve/tomcat                 latest              b226d7ee3462        15 hours ago        292MB

(5)重新构建，用-t指定名字（查看帮助 docker build --help）
# docker build . -t dawneve/jpress:latest
Sending build context to Docker daemon   20.8MB
Step 1/3 : FROM dawneve/tomcat
 ---> b226d7ee3462
Step 2/3 : MAINTAINER Jimmy JimmyMall@live.com
 ---> Using cache
 ---> 189049f0dac0
Step 3/3 : COPY jpress-web-newest.war /usr/local/tomcat/webapps
 ---> Using cache
 ---> 1159f08345b2
Successfully built 1159f08345b2
Successfully tagged dawneve/jpress:latest
# docker images #名字正常
REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE
dawneve/jpress                 latest              1159f08345b2        8 minutes ago       313MB
dawneve/tomcat                 latest              b226d7ee3462        15 hours ago        292MB

(6)运行该容器
# docker run -d -p 8888:8080 dawneve/jpress
f3a05abb2f2e64164aaf70cfd07e423e985e0a43b09840065c6c215584a9ba75
s# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES
f3a05abb2f2e        dawneve/jpress      "catalina.sh run"   6 seconds ago       Up 4 seconds        0.0.0.0:8888->8080/tcp   sharp_bassi

#netstat -na|grep 8888
tcp6       0      0 :::8888                 :::*                    LISTEN

(7)访问主机的IP:8888查看效果
http://172.16.112.86:8888/
出现tomtat欢迎页面：Apache Tomcat/8.5.16。但是访问jpress页面报错。
原来url路径名要和war包同名
http://172.16.112.86:8888/jpress-web-newest/install
发现要安装jpress还需要数据库。
能不能用docker运行一个mysql呢？

(8)运行docker版的mysql
https://c.163.com/hub#/m/repository/?repoId=2955
# docker pull hub.c.163.com/library/mysql:latest #下载

查看网易页面上的帮助
Starting a MySQL instance is simple:
$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
... where some-mysql is the name you want to assign to your container, my-secret-pw is the password to be set for the MySQL root user and tag is the tag specifying the MySQL version you want. See the list above for relevant tags.
-e是指定环境变量

# docker run --name some-mysql3 -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest

# docker ps #最后的NAMES和设定的一样some-mysql3。
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                    NAMES
00df8c0d6559        hub.c.163.com/library/mysql:latest   "docker-entrypoint..."   13 seconds ago      Up 11 seconds       3306/tcp                 some-mysql3
f3a05abb2f2e        dawneve/jpress                       "catalina.sh run"        27 minutes ago      Up 27 minutes       0.0.0.0:8888->8080/tcp   sharp_bassi
root@ubt16:/home/wangjl/Documents#

#docker stop 00d #关掉mysql，做端口映射

# docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest
c130260481b50c03880ee034d6dafd01ca1cb72298c08e260ccb7016bf018a46

忘了创建数据库了，关掉，重启
# docker stop c1
# docker run -p 3306:3306 -e MYSQL_DATABASE=jpress_db -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest

# docker run -p 3306:3306 -e MYSQL_DATABASE=jpress_db -e MYSQL_ROOT_PASSWORD=123456 -d hub.c.163.com/library/mysql:latest
2ff32e902b5f01710f947eba7900511b5695cae793b55a4ab7698a592928237e
# docker ps
CONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                    NAMES
2ff32e902b5f        hub.c.163.com/library/mysql:latest   "docker-entrypoint..."   3 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp   nostalgic_jennings
f3a05abb2f2e        dawneve/jpress                       "catalina.sh run"        39 minutes ago      Up 39 minutes       0.0.0.0:8888->8080/tcp   sharp_bassi

#netstat -na|grep 3306 # 端口正常
tcp6       0      0 :::3306                 :::*                    LISTEN

(9)回到jpress web安装页面，填写mysql信息。

数据库名: jpress_db 将JPress安装到哪个数据库？
用户名: root 您的MySQL用户名
密码:123456 …及其密码
数据库主机:172.16.112.86 如果localhost不能用，您通常可以从网站服务提供商处得到正确的信息。
端口号:3306 Mysql默认是3306
表前缀: jpress_ 如果您希望在同一个数据库安装多个JPress，请修改前缀。

点击下一步后，设置jpress管理员用户名和密码
网站名称： jpress in docker 
admin/admin


JPress安装向导
安装完成。
安装完成！稍等几秒后自动刷新。若一直停留在此页面，请重启你的web容器。

看来需要重启web容器了。
# docker restart f3a
f3a

http://172.16.112.86:8888/jpress-web-newest/
可以访问了。
后面加admin就可以访问后台了。用户名和密码刚才设置过。




========================================
制作自己的docker镜像:commit命令
----------------------------------------
对于运行的容器，如果有文件有变动，则可以使用commit命令提交为新的镜像。
推荐用Dockerfile文件建立镜像。因为该方法更可重复。

# find ID of your running container:
docker ps

# create image (snapshot) from container filesystem
docker commit 12345678904b5 mysnapshot
完整形式：docker commit 12345678904b5 myusername/mysnapshot:mytag
还可以加上注释 -m。
# docker commit -m'comments here' 242 myu/myimg:testTag
sha256:edb24adf0dd2c4d9c056c62cd38ab89951c0c12a0b5c0cc53ee4f4324d8997e1

#查看新提交的镜像
# docker images
REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE
myu/myimg                    testTag             edb24adf0dd2        12 seconds ago      120MB

# explore this filesystem using bash (for example)
docker run -t -i mysnapshot /bin/bash

#删除镜像
如果有基于该镜像的容器在运行或停止运行，需要加上-f参数 docker rmi -f IMGidOrName。
# docker rmi myu/myimg
Error response from daemon: No such image: myu/myimg:latest
root@ubt16:/home/wangjl# docker rmi myu/myimg:testTag
Untagged: myu/myimg:testTag
Deleted: sha256:edb24adf0dd2c4d9c056c62cd38ab89951c0c12a0b5c0cc53ee4f4324d8997e1




========================================
推送与拉取镜像
----------------------------------------

1.
想推送需要有一个hub.docker.com账号。先去注册。

# docker login -u dawneve -p yourPassWord #登陆

# docker ps #查看容器
# docker commit 36279 dawneve/tomcat #提交一个新镜像

# docker images #查看镜像
root@ubt16:/home/wangjl# docker images
REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE
dawneve/bioconductor_core2   latest              5b8c5f497247        4 days ago          1.78GB
dawneve/jpress               latest              1159f08345b2        4 days ago          313MB
dawneve/tomcat               latest              b226d7ee3462        5 days ago          292MB
dawneve/nginx                latest              46102226f2fd        3 months ago        109MB
dawneve/mysql                latest              9e64176cd8a2        3 months ago        407MB


# 推送到docker hub 
# docker push dawneve/mysql
The push refers to a repository [docker.io/dawneve/mysql]

打开 hub.docker.com/u/dawneve 即可看到刚推送的镜像。


2.
拉取镜像不需要账号，只需要网络好即可。

其他地方想用该镜像，只需要拉取即可：
# docker pull dawneve/mysql 
而
# docker run -it xxx 时，如果本地找不到xxx镜像，则自动到hub.docker.com上拉取并运行该镜像。

========================================
文件映射 -v参数
----------------------------------------
如果容器停止，则所有运行期间的数据就丢失了。
为了保存mysql运行期间的数据，可以把数据库文件映射到宿主主机上。

(1)做文件映射 
# docker run -e MYSQL_ROOT_PASSWORD=123456 -d -p3306:3306 -v /opt/mysql_data:/var/lib/mysql hub.c.163.com/library/mysql

ubuntu下mysql的文件夹位置和权限：http://blog.csdn.net/wang794686714/article/details/39273385

(2)创建数据库
可以用宿主机ip登陆mysql。

mysql> create database wjl;
Query OK, 1 row affected (0.33 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| wjl                |
+--------------------+
5 rows in set (0.01 sec)

发现在宿主机器上多了个wjl文件夹
root@ubt16:/opt/mysql_data# ls -tl
total 188480
drwxr-x--- 2 vboxadd vboxsf     4096 8月   6 06:16 wjl
root@ubt16:/opt/mysql_data# ls wjl
db.opt

(3)创建数据表
mysql> use wjl;
Database changed
mysql> create table goods(id int(10), name varchar(20));
Query OK, 0 rows affected (0.07 sec)

mysql> show tables;
+---------------+
| Tables_in_wjl |
+---------------+
| goods         |
+---------------+
1 row in set (0.00 sec)

在宿主机器上可见：
root@ubt16:/opt/mysql_data# ls wjl
db.opt  goods.frm  goods.ibd

(4)插入数据
mysql> insert into goods values(1,'pen');
Query OK, 1 row affected (0.01 sec)

mysql> insert into goods values(2,'apple');
Query OK, 1 row affected (0.04 sec)

mysql> select * from goods;
+------+-------+
| id   | name  |
+------+-------+
|    1 | pen   |
|    2 | apple |
+------+-------+
2 rows in set (0.72 sec)

宿主机
# ls wjl
db.opt  goods.frm  goods.ibd
root@ubt16:/opt/mysql_data# ls wjl -lt
total 112
-rw-r----- 1 vboxadd vboxsf 98304 8月   6 06:21 goods.ibd
-rw-r----- 1 vboxadd vboxsf  8586 8月   6 06:19 goods.frm
-rw-r----- 1 vboxadd vboxsf    65 8月   6 06:16 db.opt

添加一条记录
mysql> insert into goods values(3,'pie');
Query OK, 1 row affected (0.17 sec)

文件大小没变?!
root@ubt16:/opt/mysql_data/wjl# ls -lt
total 112
-rw-r----- 1 vboxadd vboxsf 98304 8月   6 06:24 goods.ibd
-rw-r----- 1 vboxadd vboxsf  8586 8月   6 06:19 goods.frm
-rw-r----- 1 vboxadd vboxsf    65 8月   6 06:16 db.opt



mysql文件简介
	ibdata是innodb引擎使用的
	如果是使用myisam引擎 则于ibdata无关  只是用frm myi myd



========================================
课程总结
----------------------------------------
集装箱、标准化、隔离
镜像、容器、仓库(build ship run)
docker命令pull,build,run,stop,restart,exec...



========================================
进一步学习docker
----------------------------------------
docker inspect imageID #查看分层Layers


Dockerfile是一个重点，有很多细节，
Dockerfile reference：https://docs.docker.com/engine/reference/builder/
