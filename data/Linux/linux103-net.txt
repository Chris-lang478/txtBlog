Linux网络


linux简介4|网络与iptables  





========================================
网络原理
----------------------------------------

网络编制：主流是IP编址；
IPv4地址为32位长，IPv6地址为128位长，
IPv4包括：网络部分和主机部分：

$ ifconfig #查看当前IP等信息

子网掩码：IP和子网掩码成对出现才能知道那些部分为网络部分。
子网掩码为1的部分对应IP中的网络部分。余下的是

同一个网络主机之间通信：ARP协议。

不同网络之间通信：网关/路由器或具有路由器功能的主机。

路由：不同网络之间传输数据的功能叫做路由功能，一般有多个接口，连接到不同的网络中，并且通过路由表进行数据转发。

域名：IP地址难记，所有我们一般使用域名进行管理。

域名分为三个部分，用.分开：
	类型：www org
	域名：域名称
	主机名：该域中的某台主机。

DNS：每个域名代表一个IP，而DNS服务器就是用来在IP与域名之间进行转换的。


========================================
网络基础配制
----------------------------------------
lspci 列出所有网卡信息 eth0 eth1 ...；
lsusb	列出所有usb设备；

ifconfig -a查看所有接口
ifconfig eth0 查看特定接口

ifup、ifdown 来启用禁用某网卡
ifup eth0
ifdown eth0

setup命令配制网络：类图形界面，其实是文本的界面。
配制完成，用ifup启用网卡，并使用ifconfig命令查看信息。



网络相关配置文件
网卡配制文件
/etc/sysconfig/network-scripts/ifcfg-eth0

DNS配置文件
/etc/resolv.conf

主机名配置文件
/etc/sysconfig/network

静态主机名配置文件
/etc/hosts



网络相关配置文件Ubuntu1604
du@Bioinf1:/etc/network$ ls -lth
总用量 32K
-rw-r--r-- 1 root root  510 10月 17 11:49 interfaces

du@Bioinf1:/etc/network$ cat interfaces


========================================
网络测试命令
----------------------------------------
测试网络连通性
ping 192.168.1.1
ping baidu.com

测试DNS解析
host baidu.com
dig baidu.com

显示路由表
ip route

追踪到达目标地址的网络路径
traceroute baidu.com

使用mtr进行网络质量测试（结合traceroute和ping）
mtr baidu.com

修改主机名 hostname NGS
这是临时修改，重启就没了，永久修改需要:
主机名配置文件
/etc/sysconfig/network


========================================
故障排查
----------------------------------------
网络故障排查遵循 从底层到高层、从自身到外部 的流程进行；
1 先查看网络配置信息是否正确：
	-IP地址
	-子网掩码
	-网关
	-DNS
2.查看到达网关是否连通
ping 网关IP地址

3.查看DNS解析是否正常：(防止对方挂掉，多试几个)
host baidu.com
host 163.com
host douban.com



========================================
如何查看实时网速？
----------------------------------------
推荐工具：nload
ubuntu的安装可以使用apt进行，apt-get install nload 

其他系统安装过程如下
wget http://www.roland-riegel.de/nload/nload-0.7.2.tar.gz
tar zxvf nload-0.7.2.tar.gz
cd nload-0.7.2
./configure;make;make install

安装完成后，直接用nload （也可后面跟上网卡号查看指定网卡号）
-u参数可以指定显示的网速的单位，如nload -u M是以MB为单位，nload -u K是以KB为单位

使用

如何使用 nload 显示当前网络使用量呢？

基本语法是：
nload
nload device
nload [options] device1 device2

键入下列命令：
$ nload
$ nload eth0
$ nload em0 em2

会得到输出：

操控 nload 应用程序

nload 命令一旦执行就会开始监控网络设备，你可以使用下列快捷键操控 nload 应用程序。

你可以按键盘上的 ← → 或者 Enter/Tab 键在设备间切换。
按 F2 显示选项窗口。
按 F5 将当前设置保存到用户配置文件。
按 F6 从配置文件重新加载设置。
按 q 或者 Ctrl+C 退出 nload。
设置显示刷新间隔

默认每 100 毫秒刷新一次显示数值，下面的例子将时间间隔设置成 500 毫秒：

$ nload -t {interval_number_in_millisec}
$ nload -t 500
输出：

========================================
VMware12中安装的虚拟机Ubuntu12桥接联网不能用怎么办？
----------------------------------------
一般恢复默认设置即可解决：VM菜单“编辑”下的“虚拟网络编辑器”，右下角有一个 “恢复默认设置”，经过几分钟，重启虚拟主机中的系统即可联网。



========================================
iptables安全防护盾
----------------------------------------
1.
定义：iptables是常见的应用于linux下的应用层防火墙工具。
常用人员：系统管理人员、网络工程人员、安全人员等等。
视频：http://www.imooc.com/learn/389
	http://www.imooc.com/search/?words=iptables

2.场景：模拟用iptables控制并发的http访问。
ab命令通过100(win7)机器访问117(CentOS6.5)http服务.

(1)启动http服务
[wangjl@NGSL ~]$ sudo /etc/init.d/httpd status
httpd (pid  3756) is running...
##关掉防火墙
$ sudo service iptables stop
##写入http文件
# cd /var/www/html/
# cat >test.txt
test
访问]http://192.168.1.117/test.txt
可以看到文字：test

(2)win7客户端开始并发访问
使用apache的ab工具做压力测试。
I:\xampp\apache\bin>ab
ab: wrong number of arguments
Usage: ab [options] [http://]hostname[:port]/path

#-n总请求数，-c每次并发的数量。
I:\xampp\apache\bin>ab -n 100000 -c 40 http://192.168.1.117/test.txt

(3)赶快查看服务端的压力和连接数
$ netstat -an|grep 80|grep 192.168.1.100|grep EST -c
31
$ w
 12:35:08 up  4:37,  4 users,  load average: 6.39, 2.70, 1.18

而静息状态下，这两个参数分别是：
$ netstat -an|grep 80|grep 192.168.1.100|grep EST -c
0
$ w
 12:42:18 up  4:44,  4 users,  load average: 0.05, 0.68, 0.76


(4)在服务端控制并发
如果想控制一下这些高并发，可以使用iptables工具在服务端设置
# iptables -I INPUT -p tcp --dport 80 -s 192.168.1.100 -m connlimit --connlimit-above 10 -j REJECT

客户端再次并发访问：
>ab -n 100000 -c 40 http://192.168.1.117/test.txt
直接报错，而-c修改为5的时候就正常了。


3.学习iptables的意义
1）如何用iptables搭建一套实际使用的防火墙；
2）如何用iptables进行防攻击；
3）如何利用iptables进行数据包转发；
4）明白iptables的强大及实际使用的意义。


4.Netfilter
Netfilter是linux操作系统核心层内部的一个数据包处理模块；
什么是Hook point？数据包在Netfilter中的挂载点共5个：
	PRE_ROUTING/ INPUT/ OUTPUT/ FORWARD/ POST_ROUTING

用户层的iptables命令是调用内核层的Netfilter，通过挂载点Hook point操作数据包的。



5.iptables规则组成 
(1)组成部分：四张表 + 五条链 +规则
四张表：filter表、nat表、 mangle表、raw表
五条链：PREROUTING/ INPUT/ OUTPUT/ FORWARD/  POSTROUTING

mangle表：修改数据包，改变包头中的内容（TTL, TOS, MARK）
raw表：


最常用的表是： filter表（访问控制）和nat（转发）表。

(2)iptable规则的组成

数据包访问控制： ACCEPT、DROP、REJECT
数据包改写：SNAT、DNAT
信息记录：LOG

DROP没有返回消息，而REJECT给客户端有返回消息。
SNAT是对发起端地址改写，DNAT对目标地址改写。

命令：
-L和-n一般连用。
-F对现有规则进行清理。
-P设置默认iptables规则。
-A在末尾添加规则。
-I在开头插入规则。
-D删除规则


参数：
-p 连接类型
-s 发起源有哪些
-d 目标地址
--sport 源端口
--dport 目标端口
--dports 端口段
-m 在原有基础上做个补充，tcp, state, multiport



========================================
iptables配制-场景1
----------------------------------------
规则1：对所有的地址开放本机的tcp（80、22、10-21）端口的访问；
规则2：允许对所有的地址开放本机的基于ICMP协议的数据包的访问。
规则3：其他未被允许的端口则禁止访问。

服务端查看所有开放端口：
$ netstat -luntp
$ iptables --version
iptables v1.4.7

#-L列出之前设置过的iptables规则
$ iptables -L

$ iptables -nL #-n是数字化显示主机ip和端口号

$ iptables -F # -F更新为新的规则，如果没有新规则，相当于逐条删除已有规则。
 -F, --flush [chain]   Flush the selected chain (all the chains in the table if none is given).  This is equivalent to deleting all the  rules  one  by one.

（1）设置新的规则
# iptables -I INPUT -p tcp --dport 80 -j ACCEPT #允许访问80端口
# iptables -I INPUT -p tcp --dport 22 -j ACCEPT #允许访问22端口: ssh。一定要允许，否则服务器失控。
# iptables -I INPUT -p tcp --dport 10:21 -j ACCEPT
$ sudo iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpts:10:21
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:22
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:80

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

$ sudo iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             anywhere            tcp dpts:10:ftp
ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh
ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:http

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

设置规则2：
# iptables -I INPUT -p icmp -j ACCEPT

设置规则3的拒绝：
# iptables -A INPUT -j REJECT
## -A表示是追加到末尾。

$ sudo iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpts:10:21
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:22
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:80
REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-port-unreachable

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

$ netstat -lntp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name
tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN      -
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      -
tcp        0      0 127.0.0.1:631               0.0.0.0:*                   LISTEN      -
tcp        0      0 0.0.0.0:42712               0.0.0.0:*                   LISTEN      -
tcp        0      0 127.0.0.1:25                0.0.0.0:*                   LISTEN      -
tcp        0      0 :::111                      :::*                        LISTEN      -
tcp        0      0 :::80                       :::*                        LISTEN      -
tcp        0      0 :::22                       :::*                        LISTEN      -
tcp        0      0 ::1:631                     :::*                        LISTEN      -
tcp        0      0 ::1:25                      :::*                        LISTEN      -
tcp        0      0 :::44731                    :::*                        LISTEN      -


使用一个Ubuntu机器上的端口扫描工具：
$ sudo apt install nmap
$ sudo nmap -sS -p 0-1000 192.168.1.117
Starting Nmap 7.01 ( https://nmap.org ) at 2017-09-07 15:28 CST
Nmap scan report for bogon (192.168.1.117)
Host is up (0.00030s latency).
Not shown: 987 filtered ports
PORT   STATE  SERVICE
10/tcp closed unknown
11/tcp closed systat
12/tcp closed unknown
13/tcp closed daytime
14/tcp closed unknown
15/tcp closed netstat
16/tcp closed unknown
17/tcp closed qotd
18/tcp closed unknown
19/tcp closed chargen
20/tcp closed ftp-data
21/tcp closed ftp
22/tcp open   ssh
80/tcp open   http
MAC Address: 08:00:27:59:54:C6 (Oracle VirtualBox virtual NIC)

Nmap done: 1 IP address (1 host up) scanned in 23.94 seconds


（2）在服务器上删除一条80端口的访问规则：
 # iptables -D INPUT -p tcp --dport 80 -j ACCEPT

在Ubuntu上扫描该服务器端口，发现80端口已经不能外部访问了。
~$ sudo nmap -sS -p 0-1000 192.168.1.117
Starting Nmap 7.01 ( https://nmap.org ) at 2017-09-07 15:32 CST
Nmap scan report for bogon (192.168.1.117)
Host is up (0.00035s latency).
Not shown: 988 filtered ports
PORT   STATE  SERVICE
10/tcp closed unknown
11/tcp closed systat
12/tcp closed unknown
13/tcp closed daytime
14/tcp closed unknown
15/tcp closed netstat
16/tcp closed unknown
17/tcp closed qotd
18/tcp closed unknown
19/tcp closed chargen
20/tcp closed ftp-data
21/tcp closed ftp
22/tcp open   ssh
MAC Address: 08:00:27:59:54:C6 (Oracle VirtualBox virtual NIC)

Nmap done: 1 IP address (1 host up) scanned in 23.06 seconds



（3）如果服务器上明确禁止访问80端口呢？
$sudo iptables -I INPUT -p tcp --dport 80 -j REJECT
查看现有规则：
$ sudo iptables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
REJECT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:80 reject-with icmp-port-unreachable
ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpts:10:21
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:22
REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-port-unreachable

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination


在其他机器上扫描的结果：
$ sudo nmap -sS -p 0-1000 192.168.1.117
Starting Nmap 7.01 ( https://nmap.org ) at 2017-09-07 17:21 CST
Nmap scan report for bogon (192.168.1.117)
Host is up (0.00049s latency).
Not shown: 988 filtered ports
PORT   STATE  SERVICE
10/tcp closed unknown
11/tcp closed systat
12/tcp closed unknown
13/tcp closed daytime
14/tcp closed unknown
15/tcp closed netstat
16/tcp closed unknown
17/tcp closed qotd
18/tcp closed unknown
19/tcp closed chargen
20/tcp closed ftp-data
21/tcp closed ftp
22/tcp open   ssh
MAC Address: 08:00:27:59:54:C6 (Oracle VirtualBox virtual NIC)

Nmap done: 1 IP address (1 host up) scanned in 21.87 seconds

和上一个一样，80端口看不到状态，也就是不能访问。




（4）以上设置iptables对本机访问有什么不良影响？

在服务器上看，80端口对本地是开放的
$ netstat -lntp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name
tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN      -
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      -
tcp        0      0 127.0.0.1:631               0.0.0.0:*                   LISTEN      -
tcp        0      0 0.0.0.0:42712               0.0.0.0:*                   LISTEN      -
tcp        0      0 127.0.0.1:25                0.0.0.0:*                   LISTEN      -
tcp        0      0 :::111                      :::*                        LISTEN      -
tcp        0      0 :::80                       :::*                        LISTEN      -
tcp        0      0 :::22                       :::*                        LISTEN      -
tcp        0      0 ::1:631                     :::*                        LISTEN      -
tcp        0      0 ::1:25                      :::*                        LISTEN      -
tcp        0      0 :::44731                    :::*                        LISTEN      -


问题1：本机不能访问本机
$ ssh wangjl@127.0.0.1
一直连接中...
也就是外网可以访问，但是本机不能访问本机的22端口（回环地址）。

解决方法：如要对回环网卡lo做允许。
# iptables -I INPUT -i lo -j ACCEPT #允许所有数据包通过lo网卡。

[!] -i, --in-interface name
              Name of an interface via which a packet was received (only for packets entering the INPUT, FORWARD and PREROUTING chains).  When the "!" argument is used before the interface name, the sense is inverted.  If the interface name ends in a "+", then any interface which begins with this name will match.  If this option is omitted, any interface name will match.


再用ssh登陆自己就可以了。
$ ssh wangjl@127.0.0.1
The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.
RSA key fingerprint is 8d:96:7a:f8:9f:0b:3e:e1:e5:49:dc:70:dd:89:8c:57.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '127.0.0.1' (RSA) to the list of known hosts.
wangjl@127.0.0.1's password:
Last login: Fri Aug 19 12:23:24 2016 from 192.168.1.100



问题2：本机不能访问其他主机
$ wget http://www.imooc.com/
--2016-08-19 14:05:39--  http://www.imooc.com/
Resolving www.imooc.com...
一直连接不上。

对已经建立的监听，设置允许
# iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

match = -m matchname [per-match-options]
state: This module, when combined with connection tracking, allows access to the connection tracking state for this packet.
      [!] --state state
       Where  state  is  a comma separated list of the connection states to match.  Possible states are INVALID meaning that the packet could not be identified for some reason which includes running out of memory and ICMP errors which don’t correspond to any known connection,  ESTABLISHED  meaning that the packet is associated with a connection which has seen packets in both directions, NEW meaning that the packet has started a new connection, or otherwise associated with a connection which has not  seen  packets  in both  directions,  and  RELATED meaning that the packet is starting a new connection, but is associated with an existing connection, such as an FTP data transfer, or an ICMP error.




再访问外网就正常了。
$ wget http://www.imooc.com/
--2016-08-19 14:14:42--  http://www.imooc.com/
Resolving www.imooc.com... 117.121.101.40, 117.121.101.41, 115.182.41.180
Connecting to www.imooc.com|117.121.101.40|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: “index.html”

    [  <=>                            ] 220,830      534K/s   in 0.4s

2016-08-19 14:14:43 (534 KB/s) - “index.html” saved [220830]

$ curl -I http://imooc.com
返回消息头。


（5）只允许IP为具体值的主机访问httpd服务
删除这条拒绝所有人访问的规则
$ sudo iptables -D INPUT -p tcp --dport 80 -j REJECT

允许-s源机器IP访问
$ sudo iptables -I INPUT -p tcp -s 192.168.1.110 --dport 80 -j ACCEPT

在110上访问目标主机
$ curl -I http://192.168.1.117/
HTTP/1.1 403 Forbidden
Date: Fri, 19 Aug 2016 06:40:02 GMT
Server: Apache/2.2.15 (CentOS)
Accept-Ranges: bytes
Content-Length: 4961
Connection: close
Content-Type: text/html; charset=UTF-8

换个115的主机:
$ curl http://192.168.1.117
curl: (7) Failed to connect to 192.168.1.117 port 80: Connection refused

说明只允许110访问设置成功了。





iptables配制-场景2
ftp主动模式和被动模式下的设置。http://www.imooc.com/video/7609




========================================
CentOS中iptables常用设置
----------------------------------------

1.在Linux中设置防火墙，以CentOS为例，打开iptables的配置文件：
$ sudo vim /etc/sysconfig/iptables
# Firewall configuration written by system-config-firewall
# Manual customization of this file is not recommended.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT



修改vi /etc/sysconfig/iptables命令添加使防火墙开放80端口
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT  

2.关闭/开启/重启防火墙
 $ sudo /etc/init.d/iptables start 
iptables: Applying firewall rules:                         [  OK  ]
 $ sudo /etc/init.d/iptables stop
 $ sudo /etc/init.d/iptables restart 


3.永久性关闭防火墙
    chkconfig --level 35 iptables off     
    /etc/init.d/iptables stop  
    iptables -P INPUT DROP  


4.打开主动模式21端口
    iptables -A INPUT -p tcp --dport 21 -j ACCEPT  
     
5.打开被动模式49152~65534之间的端口
    iptables -A INPUT -p tcp --dport 49152:65534 -j ACCEPT  
    iptables -A INPUT -i lo -j ACCEPT  
    iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT  

$ ~$ iptables -h
查找参数意义。


注意：
一定要给自己留好后路,留VNC一个管理端口和ssh的管理端口。
需要注意的是，你必须根据自己服务器的情况来修改这个文件。
全部修改完之后重启iptables: service iptables restart
你可以验证一下是否规则都已经生效：iptables -L或者iptables -nL



========================================
----------------------------------------


========================================
----------------------------------------

