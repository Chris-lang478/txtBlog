LinuxBase02-shell


========================================
Linux下获取帮助
----------------------------------------
没有必要记住所有东西。linux有非常详细的文档和帮助工具。
help: 几乎所有的命令都可以通过 -h和--help获得使用方法、参数信息等。
man: 最为常用的linux帮助命令，获得详细描述。9中命令类型。如 man 1 ls
	man -k 关键字 可以用来查询包含该关键字的文档；
info 与man类似，但是提供的信息更为详细深入，以类似网页的形式显示。
	可以通过:/ 关键词 进行搜索；
终极方法：doc文档为详细信息，保存路径/usr/share/doc目录中，txt、html、pdf等格式。

用图形界面打开当前窗口：nautilus

或者google之~~


========================================
命令行BASH的基本操作
----------------------------------------
1.安装ubuntu
2.图形化界面gnome简介：
（CentOS）打开文件用浏览器：打开文件，菜单 edit》preference》behavior，always open in browser window勾选即可。
尽量不要使用root权限。

可以设定桌面个数。

3-命令行BASH的基本操作
内核：kernel
外壳：shell=图形界面（GUI） + CLI（命令行界面 bash）

bash：
	--提示符：$(一般用户)     #(root)
	--firefox后面加&符号，也就是运行 firefox& 就是后台执行，不干扰当前命令行。
	-终止当前命令：ctrl +C

	--通过tab键自动补齐（但不补参数），按2次给出所有相关命令的提示。空白双击tab，提示是否显示2393个命令？
	--history 显示所有执行过的命令。上下键：最近执行过的命令。
	-- 很少用，脚本中用：
	 	!! 重复前一个命令；
		 !字符 重复前一个以“字符”开头的命令；
		!num 按照历史记录的序号执行命令；
		!?abc	重复之前包含abc的命令
		!-n重复n个命令之前的那个命令；
	--历史命令搜索命令：ctrl+R
	--按esc，再按 小数点，重复使用上一次的参数；

	--bash通配符：
		* 匹配任何字符；
		?	匹配任意一个字符；
		[0-9] 匹配一个数字；
		[abc]	匹配列表中任意字符
		[^abc]	匹配列表中字符以外字符

bash切换用户：
su - 切换到root用, 加-切换到新终端（推荐），不加 - 则使用原终端；
exit 退出当前登录
sudo	使用管理员身份运行命令；
id	显示当前用户信息；
passwd	修改当前用户密码；

bash作业管理：
后台运行：命令后加一个&则后台运行该指令；
暂停某个程序：ctrl+z 或者发送信号17；

管理后台作业命令：
	jobs 查看 
	bg 后台作业
 	fg 前台作业


========================================
Linux文件系统基本结构
----------------------------------------
-倒转的单根树状结构；
-文件系统的根为/
-文件系统严格区分大小写；
-路径使用"/"分割；

当前工作目录
-显示shell或系统进程的当前工作目录：pwd  （Print Working Directory）

文件名称
-文件与目录没有区别；文件的名称大小写敏感；最多255个字符；除了正斜线都是有效字符；
-touch命令可以创建一个空白文件或更新已有文件时间；
-以 ‘.’ 开头的文件是隐藏文件；

ls命令
ls -a 显示所有文件，包括隐藏文件；
ls -l  详细信息；
ls -R 递归的显示所有子目录
ls Downloads/  显示Downloads文件下文件；

file  xx  查看文件xx的类型；


绝对路径和相对路径
绝对路径：以/开头，递归每级目录直到目标；恒定；
相对路径：以当前目录为起点，到达目标文件；变动；

cd 命令切换路径；
上一级 cd ..
当前目录 cd .
家目录 cd ~  或者cd 回车
到达上一个工作目录 cd -

========================================
Linux文件基本操作管理
----------------------------------------
复制文件和目录
cp xxfile
cp -r xxfileDir
cp xxA xxDir

移动文件
mv xxA xxDir

删除文件
rm xxFile
	-i 交互删除
	-r 递归删除
	-f 强制删除

创建文件夹 	mkdir
删除非空目录 rm -r ccDir

========================================
Linux系统目录架构
----------------------------------------
bin文件夹：常用的可执行文件，所有用户都可以执行；
boot文件夹：启动、引导，操作系统内核（版本号）；
dev文件夹：所有的硬件、设备都抽象为文件了；
etc文件夹：几乎所有的配置文件，.conf（configuration）文件；
home文件夹：与用户名同名的文件夹；
lib文件夹：库文件（对应win下的dll文件）；
media文件夹：U盘等的；
opt文件夹：经常空着，大型程序可以放到这里；
proc 实时文件夹
sbin只有超级用户才能执行；
sys 底层目录
temp 临时目录
usr 默认软件
var 经常变的信息： log等信息；

========================================
Linux系统常用命令
----------------------------------------
显示时间：date
	格式化显示 date +%Y--%m--%d   #2014--5--12
查看日历：cal
查看系统运行时间：uptime

输出、查看命令
-echo 显色输入内容；
-cat 显示文件内容；
-head 显示文件的头几行（默认10行） -n 指定显示的行数；
-tail显示文件的末尾几行（默认10行）
	 -n 指定显示的行数，
	-f 追踪显示文件更新（一般用于查看日历，命令不会退出，而是持续显示新加入的内容）；
-more 用于显示文件内容（只能向下翻页）
-less 用于显示文件内容（只能上下翻页）
-lspci 查看PCI设备，-v查看详细信息；
-lsusb 查看usb设备，-v查看详细信息；
-lsmod查看加载的模块（驱动）；

关机、重启
-shutdown 用以关闭、重启计算机
	-h 关闭计算机
	-r重新启动
	如 立即关机 shutdown -h now
	10分钟后关机 shutdown -h +10
	23:30分关机 shutdown -h 23:30
	立即重启 shutdown -r now
 -poweroff 用以立即关闭计算机
-reboot用以立即重启计算机

归档、压缩
-命令zip用以压缩文件：
	zip linux2.zip myfile
	unzip linux2.zip #解压缩zip文件
-gzip linex2 压缩文件
-tar命令以归档文件
	tar -cvf out.tar linux2 	#打包归档
	tar -xvf linux2.tar	#解包
	tar -cvzf backup.tar.gz /etc	
		-z参数将压缩后的归档文件进行gzip压缩以减少大小

 xxxx.tar.gz文件使用tar带zxvf参数，可以一次解压开。XXXX为文件名。 例如：  $tar zxvf xxxx.tar.gz   

========================================
查找命令: locate 和 find
----------------------------------------
查找locate用以快速查找文件、文件夹
	locate keyword
此命令在数据库中查找文件等，对于新建立的文件，需要立即手工更新数据库，
	updateedb	#

命令find高级查找文件、文件夹
	find 查找位置 查找参数
如 -name  -perm  -user  -group  -ctime  -type  -size
	find . -name *linux*  	# . 当前文件
	find / -name *.conf		# / 根目录
	find / -perm 777	#权限为777的文件
	find / -type d 查找目录类型
	find . -name "a*" -exec ls -l {} \;  #固定格式



========================================
vim文件编辑器从入门到精通(1234晋级), 及其常用命令
----------------------------------------
linux中知名的文本编辑器除了vim还有emacs，功能比vim还强；
vim是vi的增强版。
vim filename		如果有文件，则辩解此文件，否则，则创建文件。
三种模式（命令模式、插入模式、ex模式）



http://www.vim.org/

0.提醒

序言：vim是linux上的文本编辑器。十分强大。强大的东西都不好学。
学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。


我建议下面这四个步骤：
1.存活
2.感觉良好
3.觉得更好，更强，更快
4.使用VIM的超能力
当你走完这篇文章，你会成为一个vim的 superstar。

在开始学习以前，我需要给你一些警告：
	- 学习vim在开始时是痛苦的。
	- 需要时间
	- 需要不断地练习，就像你学习一个乐器一样。
	- 不要期望你能在3天内把vim练得比别的编辑器更有效率。
	- 事实上，你需要2周时间的苦练，而不是3天。


0.1 基础知识: 这里介绍vim的细节操作。

vim的基础知识请自行百度。这里只列出提纲：
1.vim分为三种模式：是什么？
2.各个模式的作用？怎么切换？
3.保存文件：esc进入单行模式，
	:w 回车就保存了
	:wq 是保存和退出
	:q! 强制退出，放弃保存


0.2 常用功能

1.vi里怎么把一行文字上移到上一行
将上一行移到下一行就相当于将下一行移到上一行了
具体操作如下：
1).光标落在上一行使用 dd 删除当前行；
2).再使用 p 粘贴删除的行；










1 第一级 – 存活

常用操作：
	i → Insert 模式，按 ESC 回到 Normal 模式.
	x → 删当前光标所在的一个字符。
	:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （注：:w 后可以跟文件名）
	dd → 删除当前行，并把删除的行存到剪贴板里
	p → 粘贴剪贴板

推荐:
	hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。
	:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（注：退出帮助需要输入:q）

能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。
	

注意:
1.其他软件是按下ctrl后才有几个快捷键，而vim是满键盘都是功能键。
2.下面的文字中，如果是 Ctrl-λ我会写成 <C-λ>.
3.以 : 开始的命令你需要输入 <enter>回车，例如 — 如果我写成 :q 也就是说你要输入 :q<enter>.










2 第二级 – 感觉良好

上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在Normal模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）

各种插入模式
a → 在光标后插入
o → 在当前行后插入一个新行
O → 在当前行前插入一个新行
cw → 替换从光标所在位置后到一个单词结尾的字符

简单的移动光标
0 → 数字零，到行头
^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ → 到本行行尾
g_ → 到本行最后一个不是blank字符的位置。
/pattern → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）

拷贝/粘贴 （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）
P → 粘贴
yy → 拷贝当前行当行于 ddP
Undo/Redo
u → undo
<C-r> → redo

打开/保存/退出/改变文件(Buffer)
:e <path/to/file> → 打开一个文件
:w → 存盘
:saveas <path/to/file> → 另存为 <path/to/file>
:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）

花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。










3 第三级 – 更好，更强，更快

先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。

更好
下面，让我们看一下vim是怎么重复自己的：

. → (小数点) 可以重复上一次的命令
N<command> → 重复某个命令N次
下面是一个示例，找开一个文件你可以试试下面的命令：

2dd → 删除2行
3p → 粘贴文本3次
100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “
. → 重复上一个命令—— 100 “desu “.
3. → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).
更强
你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。

NG → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）
gg → 到第一行。（注：相当于1G，或 :1）
G → 到最后一行。
按单词移动：
w → 到下一个单词的开头。
e → 到下一个单词的结尾。
> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）

> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）


Word moves example
下面，让我来说说最强的光标移动：
% : 匹配括号移动，包括 (, {, [. （注：你需要把光标先移到括号上）
* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）
相信我，上面这三个命令对程序员来说是相当强大的。

更快
你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：

<start position><command><end position>

例如 0y$ 命令意味着：

0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。

你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。

还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：

d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等
（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）










4 第四级 – Vim 超能力


你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。

在当前行上移动光标: 0 ^ $ f F t T , ;
0 → 到行头
^ → 到本行的第一个非blank字符
$ → 到行尾
g_ → 到本行最后一个不是blank字符的位置。
fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
t, → 到逗号前的第一个字符。逗号可以变成其它字符。
3fa → 在当前行查找第三个出现的a。
F 和 T → 和 f 和 t 一样，只不过是相反方向。
Line moves
还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "。

区域选择 <action>a<object> 或 <action>i<object>
在visual 模式下，这些命令很强大，其命令格式为

<action>a<object> 和 <action>i<object>

action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。

vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))
Text objects selection

块操作: <C-v>
块操作，典型的操作： 0 <C-v> <C-d> I-- [ESC]

^ → 到行头
<C-v> → 开始块操作
<C-d> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)
I-- [ESC] → I是插入，插入“--”，按ESC键来为每一行生效。
Rectangular blocks

在Windows下的vim，你需要使用 <C-q> 而不是 <C-v> ，<C-v> 是拷贝剪贴板。

自动提示： <C-n> 和 <C-p>
在 Insert 模式下，你可以输入一个词的开头，然后按 <C-p>或是<C-n>，自动补齐功能就出现了……

Completion

宏录制： qa 操作序列 q, @a, @@
qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例

在一个只有一行且这一行只有“1”的文本中，键入如下命令：

qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.
Macros

可视化选择： v,V,<C-v>
前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：

J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 （注：这个功能相当强大，我太喜欢了）
Autoindent

在所有被选择的行后加上点东西：

<C-v>
选中相关的行 (可使用 j 或 <C-d> 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。
Append to many lines

分屏: :split 和 vsplit.
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。

:split → 创建分屏 (:vsplit创建垂直分屏)
<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
<C-w>+ (或 <C-w>-) : 增加尺寸











5 结束语


上面是作者最常用的90%的命令。
我建议你每天都学1到2个新的命令。
在两到三周后，你会感到vim的强大的。
有时候，学习VIM就像是在死背一些东西。
幸运的是，vim有很多很不错的工具和优秀的文档。
运行vimtutor直到你熟悉了那些基本命令。
其在线帮助文档中你应该要仔细阅读的是 :help usr_02.txt.
你会学习到诸如  !， 目录，寄存器，插件等很多其它的功能。
学习vim就像学弹钢琴一样，一旦学会，受益无穷。

————正文结束————

对于vi/vim只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。不然，Visual Studio也不就会有vim的插件了。

(全文完)


http://linux.vbird.org/linux_basic/0310vi.php
http://blog.csdn.net/niushuai666/article/details/7275406

http://baike.baidu.com/link?url=sYuCPqcOMJo8-5trt3LguqMvWK9gPB8BNV_eUx6mRm4sdbeoSYMybzV2QHKolKXctdlfJrBlLdeboAQwY33yMbw_wSPYBWl6OfAjpVvNBVO




6 Putty的复制和粘贴

突然发现putty在选择后就跑到粘贴板上去了，可以在windows中直接ctrl+V！在网上搜了一下，总结：
（一）复制：
　　（１）左键选择，就相当于ctrl+C；
　　（２）左键双击，选择一个单词；
　　（３）左键双击不抬起鼠标，左右移动，则以单词为单位选择；
　　（４）三击为选择一行；
　　（５）三击最后不抬鼠标，上下移动，则以行为单位选择。
（二）粘贴：
　　（１）鼠标右键。
　　（２）Unix终端通用：shift+insert
http://blog.chinaunix.net/uid-20332519-id-3498113.html







========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



