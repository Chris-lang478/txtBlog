用htaccess进行访问控制


Chapter: htaccess 设置技巧
1. .htaccess 使用指南开篇
2. 开启.htaccess重写之前先来看看mod_rewrite
3. htaccess URL重写rewrite与重定向redirect
4. 改写URL的查询字符串QUERY_STRING
5. 用htaccess进行访问控制
6. htaccess 正则规则整理


学习前提：（不会的朋友要学习一下，才能更好的理解下面的文字呢）
Linux基础（不会也没事啦，写个.htaccess没必要大费周折啦，推荐：鸟哥私房菜linux基础）
正则表达式（Rewrite规则建立在正则的基础之上，推荐：正则表达式30分钟入门教程）


rewrite的语法格式：
RewriteEngine On #要想rewrite起作用，必须要写上哦
RewriteBase url-path #设定基准目录，例如希望对根目录下的文件rewrtie，就是”/”
RewriteCond test-string condPattern #写在RewriteRule之前，可以有一或N条，用于测试rewrite的匹配条件，具体怎么写，后面会详细说到。
RewriteRule Pattern Substitution #规则


========================================
什么是.htaccess
----------------------------------------
Apache服务器的.htaccess是一个非常强大的分布式配置文件，学会使用.htaccess，对虚拟主机用户来说，可以实现众多的功能。作为本小节的第一篇，先介绍容易理解的东西作为入门。

.htaccess 介绍

尽管.htaccess只是一个文件，但它可以更改服务器的设置，允许你做许多不同的事情，最流行的功能是您可以创建自定义的“404 error”页面。.htaccess 并不难于使用，归根结底，它只是在一个text文档中添加几条简单的指令而已。


1. 我的主机支持它吗？

这可能很难用简单的答案来回答。许多主机支持.htaccess，但实际上并不会特别声明，许多其他类型的主机有能力但并不允许他们的用户使用.htaccess。一般来说，如果你的主机使用Unix或Linux系统，或任何版本的Apache网络服务器，从理论上都是支持.htaccess的，尽管你的主机服务商可能不允许你使用它。

判断你的主机是否允许.htaccess，一个标志很好的是它是否支持文件夹密码保护。为达到此功能，主机服务商需要使用.htaccess（当然，少数情况下他们虽提供密码保护功能，但却并不允许你使用.htaccess）。如果你不确定自己的主机是否支持.htaccess，最好的办法是上传你自己的.htaccess文件看看是否有用，或者直接发送e-mail向你的主机服务商咨询。


2. .htaccess 能做什么？

你可能疑惑.htaccess到底能做些什么，或者你可能曾知道它的一些功能但并不真正了解你实际到底可以用它来做多少事情。

.htaccess可以做大量的事情，包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件。


3. 创建一个.htaccess文档

创建.htaccess文件也许会给你带来一些困难。写文件很容易，你只需要在文字编缉器（例如：写字板）里写下适当的代码。真正困难的可能是文件的保存，因为.htaccess是一个古怪的文件名（它事实上没有文件名，只有一个由8个字母组成的扩展名），而在一些系统（如windows 3.1）中无法接受这样的文件名。在大多数的操作系统中，你需要做的是将文档保存成名为：".htaccess" （包括引号）。如果这也不行，你需要将其先命名为其它名字（例如htaccess.txt），再将其上传到服务器上，之后直接使用FTP软件来重命名。

4. 自定义错误页

我要介绍的.htaccess的第一个应用是自定义错误页面，这将使你可以拥有自己的、个性化的错误页面（例如找不到文件时），而不是你的服务商提供的错误页或没有任何页面。这会让你的网站在出错的时候看上去更专业。你还可以利用脚本程序在发生错误的时候通知你（例如我使用Free Webmaster Help的PHP脚本程序，当找不到页面的时候自动e-mail给我）。

你所知道的任何页面错误代码（像404找不到页面），都可以通过在.htaccess文件里加入下面的文字将其变成自定义页面：
ErrorDocument errornumber /file.html

举例来说，如果我的根目录下有一个nofound.html文件，我想使用它作为404 error的页面：
ErrorDocument 404 /notfound.html

如果文件不在网站的根目录下，你只需要把路径设置为：
ErrorDocument 500 /errorpages/500.html

以下是一些最常用的错误：
401 - Authorization Required 需要验证
400 - Bad request 错误请求
403 - Forbidden 禁止
500 - Internal Server Error 内部服务器错误
404 - Wrong page 找不到页面
接下来，你要做的只是创建一个错误发生时显示的文件，然后把它们和.htaccess一起上传。


.htaccess 命令
前面已经简单介绍了.htaccess以及它的一些有用功能，在这一部分，我将向你演示如何使用.htaccess文档去实现这些功能。

1. 停示显示目录列表

有些时候，由于某种原因，你的目录里没有index文件，这意味着当有人在浏览器地址栏键入了该目录的路径，该目录下所有的文件都会显示出来，这会给你的网站留下安全隐患。

为避免这种情况（而不必创建一堆的新index文件），你可以在你的.htaccess文档中键入以下命令，用以阻止目录列表的显示：
Options -Indexes


2. 阻止/允许特定的IP地址

某些情况下，你可能只想允许某些特定IP的用户可以访问你的网站（例如：只允许使用特定ISP的用户进入某个目录），或者想封禁某些特定的IP地址（例如：将低级用户隔离于你的信息版面外）。当然，这只在你知道你想拦截的IP地址时才有用，然而现在网上的大多数用户都使用动态IP地址，所以这并不是限制使用的常用方法。

你可以使用以下命令封禁一个IP地址：
deny from 000.000.000.000
这里的000.000.000.000是被封禁的IP地址，如果你只指明了其中的几个，则可以封禁整个网段的地址。如你输入210.10.56.，则将封禁210.10.56.0～210.10.56.255的所有IP地址。

你可以使用以下命令允许一个IP地址访问网站：
allow from 000.000.000.000

被允许的IP地址则为000.000.000.000，你可以象封禁IP地址一样封禁整个网段。

如果你想阻止所有人访问该目录，则可以使用：
deny from all
不过这并不影响脚本程序使用这个目录下的文档。


3. 替换index文件

也许你不想一直使用index.htm或index.html作为目录的索引文件。举例来说，如果你的站点使用PHP文件，你可能会想使用index.php来作为该目录的索引文档。当然也不必局限于“index”文档，如果你愿意，使用.htaccess你甚至能够设置foofoo.balh来作为你的索引文档！

这些互为替换的索引文件可以排成一个列表，服务器会从左至右进行寻找，检查哪个文档在真实的目录中存在。如果一个也找不到，它将会把目录列表显示出来（除非你已经关闭了显示目录文件列表）。
DirectoryIndex index.php index.php3 messagebrd.pl index.html index.htm

4. 重定向
.htaccess最有用的功能之一就是将请求重定向到同站内或站外的不同文档。这在你改变了一个文件名称，但仍然想让用户用旧地址访问到它时，变的极为有用。另一个应用（我发现的很有用的）是重定向到一个长URL，例如在我的时事通讯中，我可以使用一个很简短的URL来指向我的会员链接。以下是一个重定向文件的例子：

Redirect /location/from/root/file.ext
http://www.othersite.com/new/file/location.xyz

上述例子中，访问在root目录下的名为oldfile.html可以键入：
/oldfile.html

访问一个旧次级目录中的文件可以键入：
/old/oldfile.html


你也可以使用.htaccess重定向整个网站的目录。假如你的网站上有一个名为olddirectory的目录，并且你已经在一个新网站 http://www.newsite.com/newdirectory/上建立了与上相同的文档，你可以将旧目录下所有的文件做一次重定向而不必一一声明：

Redirect /olddirectory http://www.newsite.com/newdirectory

这样，任何指向到站点中/olddirectory目录的请求都将被重新指向新的站点，包括附加的额外URL信息。例如有人键入：
http://www.youroldsite.com/olddirecotry/oldfiles/images/image.gif
请求将被重定向到：
http://www.newsite.com/newdirectory/oldfiles/images/image.gif
如果正确使用，此功能将极其强大。



密码保护

尽管有各种各样的.htaccess用法，但至今最流行的也可能是最有用的做法是将其用于网站目录可靠的密码保护。尽管JavaScrip等也能做到，但只有.htaccess具有完美的安全性（即访问者必须知晓密码才可以访问目录，并且绝无“后门”可走）。


1. 密码保护的.htaccess文件

利用.htaccess将一个目录加上密码保护分两个步骤。第一步是在你的.htaccess文档里加上适当的几行代码，再将.htaccess文档放进你要保护的目录下：
AuthName "Section Name"
AuthType Basic
AuthUserFile /full/path/to/.htpasswd
Require valid-user
你可能需要根据你的网站情况修改一下上述内容中的一些部分，如用被保护部分的名字"Members Area"，替换掉“Section Name”。

/full/parth/to/.htpasswd则应该替换为指向.htpasswd文件（后面详述该文档）的完整服务器路径。如果你不知道你网站空间的完整路径，请询问一下你的系统管理员。





小结与特别说明
.htaccess是一个站点管理员可以应用的强大工具，有更多的变化以适应不同的用途，可以节约时间及提高网站的安全性。

.htaccess的特别说明：

启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用
如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：
AccessFileName .config

一般情况下，不应该使用.htaccess文件，除非你对主配置文件没有访问权限。有一种很常见的误解，认为用户认证只能通过.htaccess文件实现，其实并不是这样，把用户认证写在主配置文件中是完全可行的，而且是一种很好的方法。.htaccess文件应该被用在内容提供者需要针对特定目录改变服务器的配置而又没有root权限的情况下。如果服务器管理员不愿意频繁修改配置，则可以允许用户通过.htaccess文件自己修改配置，尤其是ISP在同一个机器上运行了多个用户站点，而又希望用户可以自己改变配置的情况下。虽然如此，一般都应该尽可能地避免使用.htaccess文件。任何希望放在.htaccess文件中的配置，都可以放在主配置文件的段中，而且更高效。避免使用.htaccess文件有两个主要原因，即性能和安全。




========================================
开启.htaccess重写之前先来看看mod_rewrite  实时重写URL请求
----------------------------------------
开启 httpd.conf 的 rewrite
在[Apache安装目录]/conf/httpd.conf中找到#LoadModule rewrite_module modules/mod_rewrite.so，去掉前面的注释符号#。如果没有这行，请添加。并确认apache安装目录下的modules文件夹中是否有mod_rewrite.so这个文件。这样就启用了Mod Rewrite功能。
在[Apache安装目录]/conf/httpd.conf中找到

<Directory />
    Options FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
</Directory>

把“AllowOverride None”改成“AllowOverride All”，这样所有的文件夹都支持.htaccess了，或者针对指定的文件夹启用.htaccess，可以在[Apache安装目录]/conf/httpd.conf中加入

<Directory "D:/sites/nowamagic/">
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all
</Directory>

这种做法一般是和虚拟主机配置在一起的，所以大多数会把上述配置代码写入[Apache安装目录]/conf/extra/httpd-vhost.conf中，这样比较清晰易于管理。


========================================
taccess URL重写rewrite与重定向redirect  常见的八个重写需求
----------------------------------------
接下来就是实践练习了。

1. 将 .htm 页面映射到 .php

Options +FollowSymlinks
RewriteEngine on
RewriteRule ^(.*)\.htm$ $1.php [NC]

如果正则不是很熟悉，可以参考下《正则表达式入门》。

一些注意事项：
该RewriteRule能够将.htm静态页面映射到.php动态页面。
如果通过.htm进入，浏览器地址栏显示的是.htm扩展名，但服务器上实际执行的是.php。
必须保证服务器上有对应的.php，否则会404。
浏览器和搜索引擎可以同时通过.htm和.php访问网页。
如果该目录上存在.htm，将被忽略。
[NC]表示“不区分大小写”。


2. 临时重定向(R=302)
RewriteEngine on
RewriteBase /
RewriteRule ^(.*)\.htm$ $1.php [R,NC,L]

一些注意事项：
该RewriteRule能够将.htm静态页面重定向到.php动态页面。
如果通过.htm进入，浏览器地址栏会自动转为.php（请与上面的[NC]区别开来），这也是重定向的本质。
必须保证服务器上有对应的.php，否则会404。
浏览器和搜索引擎可以同时通过.htm和.php访问网页。
如果该目录上存在.htm，将被忽略。
RewriteBase定义了重写基准目录。例如，如果你将虚拟站点设置在/var/www目录下，删除这行将会导致重定向到http://yourdomain.com/var/www/1.php。显然这是找不到的，而且你也不会希望用户看见你的服务器的目录结构。
再举个例子，如果RewriteBase /base/，那么将会重定向到http://yourdomain.com/base/1.php。
对于重写基准目录，我们还可以通过将$1.php变成/$1.php实现直接变换，这时就可以将RewriteBase省略。
字母R表示临时重定向，相当于[R=302,NC]。
字母L表示如果能匹配本条规则，那么本条规则是最后一条(Last)，忽略之后的规则。

3. 永久重定向(R=301)
在讨论R=302临时重定向后，理解R=301永久重定向也就容易多了：
RewriteEngine on
RewriteRule ^(.*)$ http://www.nowamagic.net/$1 [R=301,NC,L]
这个规则告诉浏览器和搜索引擎，网站地址发生了永久性变更，用户的URL请求将会被发送给新的域名（主机）处理。
由于是重定向到新的主机地址，RewriteBase也就没有出现的必要了。


4. 为什么要用重定向？

重定向和URL重写的区别：

通过重定向，浏览器知道页面位置发生变化，从而改变地址栏显示的地址。
通过重定向，搜索引擎意识到页面被移动了，从而更新搜索引擎索引，将原来失效的链接从搜索结果中移除。
临时重定向(R=302)和永久重定向(R=301)都是亲搜索引擎的，是SEO的重要技术。
URL重写用于将页面映射到本站另一页面，若重写到另一网络主机（域名），则按重定向处理。


5. 长短地址转换

利用URL重写，我们可以很方便地实现长短地址的转换，但是用重定向就不合适了。
RewriteEngine On
RewriteRule ^grab /public/files/download/download.php
若访问 http://mysite/grab?file=my.zip，则会执行该页面：http://mysite/public/files/download/download.php?file=my.zip

6. 去掉www

view sourceprint?
Options +FollowSymlinks
RewriteEngine on
RewriteCond %{HTTP_HOST} ^www\.(.*) [NC]
RewriteRule ^(.*)$ http://%1/$1 [R=301,NC,L]


7. 加上www

RewriteEngine On
RewriteCond %{HTTP_HOST} ^(.*)$
RewriteRule (.*) http://www\.%1/$1 [R=301,L]

8. 支持多域名访问

如果你不凑巧买到了不支持多域名的主机，那么.htaccess或许可以帮助你。现在假设你有域名domain-one.com和domain-two.com，并且在服务器根目录有对应文件夹one和two，那么通过下面的改写就能让Apache同时接受者两个域名的请求：


#two domains served from one root..
RewriteCond %{HTTP_HOST} domain-one.com
RewriteCond %{REQUEST_URI} !^/one
RewriteRule ^(.*)$ /one/$1 [L]
 
RewriteCond %{HTTP_HOST} domain-two.com
RewriteCond %{REQUEST_URI} !^/two
RewriteRule ^(.*)$ /two/$1 [L]

上面介绍了.htaccess 常见的八个重写功能，当然还有更多，但大部分都可以从这里延伸出来。你也可以从这里启发，用 htaccess 实现更多的功能。



========================================
用户体验优化
----------------------------------------
一、防盗链功能
RewriteEngine On 
RewriteCond %{HTTP_REFERER} !^http://(.+.)?mysite.com/ [NC] 
RewriteCond %{HTTP_REFERER} !^$ 
RewriteRule .*.(jpe?g|gif|bmp|png)$ /images/nohotlink.jpg [L]

逐行讲解一下：

1.打开Rewrite功能。有可能服务器设置里已经是全局下打开了，但是多写也没事。
2.RewriteCond指令，定义生效条件，用于寻找匹配条件的地址。后面内容用正则表达式匹配。代表含义是发送的请求不由mysite.com而来，那就是盗链啦。末尾的[NC]代表忽略大小写。
3.发送请求的主机前缀不为空。
4.RewriteRule指令，定义重写规则，把匹配的地址按此规则重写。本例中把这些后缀为这些图片格式的，都替换到某一个图片下。[L]表示这是最后一段规则。

只这四行就实现了防盗链是不是很神奇（- -||），编写起来是不是又觉得复杂。
这里总结了几个常用参数（不是全部）：

RewriteCond下： 
[NC] 不分字母大小写
[OR] 用于连接下一条规则
 

RewriteRule下：
[R] 强制重定向，[R=code] code默认为302
[F] 禁用URL，返回HTTP 403 错误
[L] 这是最后一条规则，之后内容无用
还有一篇关于正则表达式的教程（很详细）：http://www.unibetter.com/deerchao/zhengzhe-biaodashi-jiaocheng-se.htm



二、网址规范化

Options +FollowSymLinks 
rewriteEngine on 
rewriteCond %{http_host} ^yourdomain.com [NC] 
rewriteRule ^(.*)$ http://www.yourdomain.com/$1 [R=301,L]

这个是把所有二级域名都重定向到www.yourdomain.com的例子，现在看来是不是很简单了？

需要注意的是，这里的Options +FollowSymLinks不是必须的，但在某些服务器如果不设置FollowSymLinks，可能引起500错误。

再来看一个好玩的重定向

RewriteEngine On 
RewriteBase / 
RewriteCond %{HTTP_USER_AGENT} (Googlebot) 
RewriteRule ^ http://abc.com/ [R=301,L]

1.打开Rewrite功能。
2.RewriteBase指令，设置目录级重写的基准URL。可以理解成把该目录（这个.htaccess所在目录）假定为基准的URL前缀。本例中这样的写法无用。
3.RewriteCond指令。匹配所有USER_AGENT为Googlebot的发送请求。
4.RewriteRule指令。本例中把这些请求都重定向到了abc.com。
在本例中，这个配置应该是黑客所为，把google蜘蛛指向某个网站，等于伪造PR。



三、临时错误页面

当你的网站在升级、修改的时候，你最好让访客转到指定的页面，而不是没做完的页面或者是错误页。

这时我们做一个302转跳就好。

RewriteEngine on 
RewriteCond %{REQUEST_URI} !/maintenance.html$ 
RewriteCond %{REMOTE_ADDR} !^123.123.123.123 
RewriteRule $ /error.html [R=302,L]

1.继续打开Rewrite功能。- -|
2.REQUEST_URI，请求的URL值。这里指所有访问maintenance.html页面的请求。
3.REMOTE_ADDR，向服务器发送请求的IP地址。本例中此处应设为你自己的IP，这样就只有你能访问。
4.RewriteRule指令。本例中把这些请求都重定向到了error.html 。

在本例，我们总结几个常用的正则表达式和特殊符号。
(.*) 用于匹配某一区域内所有内容。如 abc/def/ghi 可用 (.*)/(.*)/(.*) 匹配。
([a-zA-Z_]+) 匹配英文单词，允许用-和_连接。
([0-9]+) 匹配多位数字，通常用于匹配ID。
([0-9]) 只匹配一位的数字。
^ 表示正则的开始
$ 表示正则的结束



四、重定向RSS地址到Feedburner

除了可以更改模板里的RSS地址外，.htaccess也能实现RSS地址的更改，并更加方便。

RewriteEngine on 
RewriteCond %{HTTP_USER_AGENT} !FeedBurner    [NC] 
RewriteCond %{HTTP_USER_AGENT} !FeedValidator [NC] 
RewriteRule ^feed/?([_0-9a-z-]+)?/?$ http://feed.onexin.net/yourname [R=302,NC,L]

有了上面的总结，本例其实就很简单了吧。

唯一要注意的是这样操作要确保填写正确的HTTP_USER_AGENT。其实你不常换模板的话。。可能还是直接改模板更省事。

在最后，为懒虫们推荐几个好东东：
在线.htaccess生成器：http://tool.onexin.net/htaccess/
mod_rewrite模块中文参考手册：http://help.onexin.net/apache/mod/mod_rewrite.html

P.S. 其实我以为rewrite也只是APACHE一个模块而已，做到边查边写足矣，实在不行直接去搜一个规则也未尝不可。没有必要费太大力气去学。不过其中的正则表达式还是非常实用的，值得深入学习。

转载请注明出处：http://www.onexin.net/latest-real-talk-htaccess-file-rewrite-rules/



========================================
Apache下htaccess有关301重定向、404错误的设置
----------------------------------------

二、建一个404.htm 文件传根目录
自动义 404、403 错误，在.htaccess里面添加
ErrorDocument 404 /404.htm
ErrorDocument 403 /404.htm
注：可自己设定无法找到文件转到哪个页  后面的404.htm 可自行改。

三、.htaccess 设置默认首页：
DirectoryIndex index.html index.php default.htm
注：有些空间，默认首页先后不同，自己想要把哪个先访问，可用此设置


四、.htaccess 禁止IP访问网站：
Order Allow,Deny
Deny from 582.46.2.67
Allow from all
注：禁止 582.46.2.67 这个IP访问你的站点，可自己测试下禁止自己IP。可应该在，如遇到服务器攻击，查出这个IP，禁止这个IP访问。

五、.htaccess 禁止图片、文件盗链：
RewriteCond %{HTTP_REFERER} !^$ [NC]
RewriteCond %{HTTP_REFERER} !zhanhelp.com [NC]
RewriteRule .(gif|jpg|rar|zip)$ http://zhanhelp.com/logo.gif [R,L]
注：这部分是判断是否盗链， 即不是直接输入网址，又不是zhanhelp.com 网站上访问的，那么就会 直接显示 logo.gif 图片   可自定义如 rar zip 盗链。

http://www.iisp.com/ztview/ID_16972.html


========================================
rewrite规则实例
----------------------------------------

1.apache打开重写规则：
修改apache/conf/httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。
	<Directory />
	Options FollowSymLinks
	AllowOverride None
	</Directory>
改为
	<Directory />
	Options FollowSymLinks
	AllowOverride All
	</Directory>
	

	
	
	
	
2.修改.htaccess文件

然后我写了这样的rewrite：

	RewriteEngine on #rewriteengine为重写引擎开关on为开启off为关闭
	#RewriteCond $1 !^(index.php.php|images|robots.txt)
	RewriteRule ([a-zA-Z]{1,})-([0-9]{1,}).html$ sharexie/test.php?action=$1&id=$2
	#([a-zA-Z]{1,})-([0-9]{1,}).html$是规则，sharexie/test.php?action=$1&id=$2是要替换的格式，$1代表第一个括号匹配的值，$2代表第二个。

上面的代码就是将URL结构导入sharexie/test.php中。把这些保存为.htaccess文件放在网站的根目录就行了。test.php
	<?php
	echo '你的Action是：' . $_GET['action'];
	echo '<br/>';
	echo '你的ID是：' . $_GET['id'];
	?>
好了，我们现在在浏览器中输入：127.0.0.1/view-12.html
输出的是：
	你的Action是：view
	你的ID是：12

(1)、讲解一下RewriteRule：
	RewriteRule是重写规则，支持正则表达式的，上面的([0-9]{1,})是指由数字组成的，$是结束标志，说明是以数字结束！

(2)、RewriteRule配置参数
	1) R 强制外部重定向
	2) F 禁用URL,返回403HTTP状态码。
	3) G 强制URL为GONE，返回410HTTP状态码。
	4) P 强制使用代理转发。
	5) L 表明当前规则是最后一条规则，停止分析以后规则的重写。
	6) N 重新从第一条规则开始运行重写过程。
	7) C 与下一条规则关联
	8) T=MIME-type(force MIME type) 强制MIME类型
	9) NS  只用于不是内部子请求
	10) NC 不区分大小写
	11) QSA 追加请求字符串
	12) NE 不在输出转义特殊字符   %3d$1  等价于 =$1
	
举例：
1)、将xianglc将定到 index.php?c=myuser&m=itime&domain=xianglc

	RewriteRule ^([a-zA-Z0-9]){6,20}/?$ index.php?c=myuser&m=itime&domain=$0 [L]
	
	测试http://localhost/DawnPHPTools/24-php_Router/learnHT/index.php/jimmyw/发现必须去掉^符号才行。
	RewriteRule ([a-zA-Z0-9]){6,20}/?$ index.php?c=myuser&m=itime&domain=$0 [L]

2)、#RewriteRule ^/index.html$ /1.php [L]

RewriteRule ^/index-(.*?)-(.*?)-(.*?)-(.*?)-(.*?)-(.*?)-(.*?)-(.*?)-(.*?)$ $9&a=$1&b=$2&c=$3&d=$4&e=$5&f=$6&g=$7&h=$8 [C,NC]
RewriteRule ^(.*?)-(.*?)-(.*?)-(.*?)-(.*?)-(.*?).html(.*?)$ /1.php?$7&i=$1&j=$2&k=$3&l=$4&m=$5&n=$6 [QSA,L,NC]
	
	这个没看懂。
	
	试了几个简单的，分别用index.php和1.php接收和响应的请求。
RewriteEngine on
RewriteRule ([a-zA-Z]{1,})-([0-9]{1,}).html$ index.php?action=$1&id=$2
#http://localhost/DawnPHPTools/24-php_Router/learnHT/item-12.html
# Array
# (
#     [action] => item
#     [id] => 12
# )

RewriteRule index.html$ 1.php [L]
# index.html   http://localhost/DawnPHPTools/24-php_Router/learnHT/index.html

RewriteRule item-(.*?)-(.*?)$ index.php?action=item&id=$1&id2=$2

# index-a1-b2-c3-d4-e5-f6-g7-h8-i9
# http://localhost/DawnPHPTools/24-php_Router/learnHT/item-b2-c3-d4-e5-f6.html
# Array
# (
#     [action] => item
#     [id] => b2
#     [id2] => c3-d4-e5-f6.html
# )
	
响应页面输出$_GET和$_SERVER数组。
	echo 'this is 1.php';
	debug($_GET);
	debug($_SERVER['PHP_SELF']);
	debug($_SERVER['QUERY_STRING']);
		
	debug($_SERVER);

	

========================================
shopNC的.htaccess文件分析
----------------------------------------
1.根目录没有。
2.在/shop/.htaccess中。

<IfModule mod_rewrite.c>
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f

# mod_fcgid & php-cgi
RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]

# php5apache2_2.dll
#RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]

</IfModule>

貌似就一句有作用的。
需要根据是否是iis还是apache做调整。
我的是apache，需要打开第二条。
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f

# mod_fcgid & php-cgi
# RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]

# php5apache2_2.dll
RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]

3.使用 http://localhost/DawnPHPTools/24-php_Router/learnHT/item/12/id=100 测试，
发现$_SERVER['REQUEST_URI'] => /DawnPHPTools/24-php_Router/learnHT/item/12/id=100
[PATH_INFO] => /item/12/id=100


========================================
thinkPHP3.2的.htaccess
----------------------------------------
1.在根目录下：
<IfModule mod_rewrite.c>
  Options +FollowSymlinks
  RewriteEngine On

  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]
</IfModule>

2.很简单粗暴的把所有请求转发到index.php后面了。
在index.php中做解析。

3.使用 http://localhost/DawnPHPTools/24-php_Router/learnHT/item/12/id=100 测试，
[PATH_INFO] => /item/12/id=100

4.其实，shopNC和thinkPHP的写法一模一样。



========================================
2个域名共用一个虚拟主机时
----------------------------------------

<IfModule mod_rewrite.c>
  Options +FollowSymlinks
  RewriteEngine On

  
	#two domains served from one root..
	RewriteCond %{HTTP_HOST} shop2.wjl.com
	RewriteCond %{REQUEST_URI} !^/wjl
	RewriteRule ^(.*)$ /wjl/$1 [L]
</IfModule>

一个域名blog.wjl.com就和原来一样，使用根目录。
另一个域名shop2.wjl.com就使用/wjl子文件夹了。



========================================
阿里云虚拟主机怎么映射多个域名？
----------------------------------------
https://help.aliyun.com/knowledge_detail/36280.html

温馨提示：
以下方法仅适用与linux主机。
操作步骤：
阿里云虚拟主机均不支持通过主机管理控制台设置将域名指向站点子目录。但是通过在.htaccess配置文件设置伪静态规则可以实现这个效果：
例如需要实现访问bbs.example.com时跳转到example.com/bbs/目录，可以在/htdocs文件夹下创建.htaccess文件，在.htaccess文件写入以下代码
 
RewriteCond %{HTTP_HOST} ^bbs.example.com [NC] 
RewriteRule ^(.*)$ http://example.com/bbs/$1 [L,R=301]

========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
参考资料
----------------------------------------
http://www.nowamagic.net/academy/detail/1225940
http://www.nowamagic.net/academy/detail/1225986
http://www.nowamagic.net/academy/detail/1225932
http://www.cnphp.info/htaccess-rewrite.html
http://www.iisp.com/ztview/ID_16972.html

