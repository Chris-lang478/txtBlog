Linux简介1|Linux系统的安装与维护

linux简介1|ubuntu 12.04（win7双系统）安装与配置
linux简介2|常见bash命令-磁盘管理-获取帮助
linux简介7|系统启动和系统安全
linux简介8|RPM软件包管理

 - 启动终端：快捷键ctrl + alt + t




========================================
系统启动和系统安全
----------------------------------------
系统启动流程
	BIOS
	MBR: Boot Code
	执行引导程序-GRUB
	加载内核
	执行init
	runlevel

建议：同时使用CentOS和Ubuntu系统学习本章节。因为有很大的不同点。


1.BIOS(Basic Input Output System)基本输入输出系统。
一般保存在主板上的BIOS芯片中。
计算机启动的时候第一个运行的就是BIOS，负责检查硬件并且查找可启动设备；
可启动设备在BIOS设置中进行定义，如USB、CDROM、HD

2.MBR
BIOS找到启动设备后执行其引导代码。
	第一个扇区512字节的最后两个字节是55AA。
引导代码为MBR的前446字节。
	一般的PC引导机制都是MBR。
	高级的设备如Mac等可能是EFI硬件，则引导格式可能不同。

3.GRUB
Grub是现在Linux使用的主流引导程序。
可以用来引导现在几乎所有的操作系统: linux, Mac, Windows。
Grub的相关文件保存在/boot/grub目录中。
Grub配置文件为/boot/grub/grub.conf  (Ubuntu中是 /boot/grub/grub.cfg)
配置格式：Ubuntu和CentOS有一定区别。

export linux_gfx_mode
if [ "${linux_gfx_mode}" != "text" ]; then load_video; fi
menuentry 'Ubuntu, with Linux 3.11.0-15-generic' --class ubuntu --class gnu-linux --class gnu --class os {
        recordfail
        gfxmode $linux_gfx_mode
        insmod gzio
        insmod part_msdos
        insmod ext2
        set root='(hd0,msdos1)'
        search --no-floppy --fs-uuid --set=root 889007c7-3c15-4a45-afea-0c22022b7493
        linux   /boot/vmlinuz-3.11.0-15-generic root=UUID=889007c7-3c15-4a45-afea-0c22022b7493 ro   quiet splash $vt_handoff
        initrd  /boot/initrd.img-3.11.0-15-generic
}



4.Kernel
	MBR的引导代码将负责找到并加载Linux内核。
	Linux内核保存在/boot/vmlinuz-3.11.0-15-generic
		5962944 Feb  4  2014 vmlinuz-3.11.0-15-generic

	一般还会加载内核模块打包文件：/boot/initrd.img-3.11.0-15-generic
	Linux为保持kernel的精简，将一些不常用的驱动、功能编译成为模块，在需要的时候动态加载，而这些模块被打包保存为一个initramfs文件。
	早期版本Linux使用initrd文件，initramfs是initrd的替代优化版本，比initrd更加节省空间、更加灵活。
	命令dmesg可以查看本次启动时内核的输出信息。（对应的文件是 /var/log/dmesg文件 ）

5.INIT
	init是Linux系统中运行的第一个进程。
		当使用top命令的时候，发现一个pid（进程id，按照启动顺序排序）为1的进程，名字是init。是所有进程的父进程。
	调用/etc/rc.d/rc.sysinit（名字不完全相同）负责对系统进行初始化，挂载文件系统，而且根据运行级别启动相应服务。


6.Linux运行级别(run level)：
	0	关机
	1	单用户模式
	2	不带网络的多用户模式
	3	多用户模式	
	4	未使用
	5	XII图形化模式
	6	重新启动
用的最多的是3和5，区别仅是前者无图形界面。

	可以通过/etc/inittab（Ubuntu没有找到，很可能是/etc/init/rc-sysinit.conf）配置文件修改默认的运行级别（env DEFAULT_RUNLEVEL=2）。
	每个级别对应的启动服务保存在/etc/rc.d/rc[0123456].d中。
	命令runlevel可以显示当前及上一个运行级别。 $ runlevel  #N 2 为什么是2呢？

	命令init可以用以改变当前运行级别，需要root权限。
	# init 3  #进入命令行多用户界面；
	$ runlevel #3 5 #显示当前和上一个运行级别。




wangjl@ubuntu:/etc$ pwd
/etc
wangjl@ubuntu:/etc$ ls | grep rc #
bash.bashrc
drirc
inputrc
nanorc
rc0.d
rc1.d
rc2.d
rc3.d
rc4.d
rc5.d
rc6.d
rc.local
rcS.d
wgetrc
wangjl@ubuntu:/etc$ locate rc0.d
/etc/rc0.d  #定位文件位置


wangjl@ubuntu:/etc/init$ pwd
/etc/init
wangjl@ubuntu:/etc/init$ cat control-alt-delete.conf 
# control-alt-delete - emergency keypress handling
#
# This task is run whenever the Control-Alt-Delete key combination is
# pressed, and performs a safe reboot of the machine.

description	"emergency keypress handling"
author		"Scott James Remnant <scott@netsplit.com>"

start on control-alt-delete

task
exec shutdown -r now "Control-Alt-Delete pressed" #建议注释掉这一行，防止意外重启服务器（win是调出任务管理器，linux是直接重启！）。




========================================
|-- 关机、重启命令
----------------------------------------

-shutdown 用以关闭、重启计算机
	-h 关闭计算机
	-r重新启动
	如 立即关机 shutdown -h now
	10分钟后关机 shutdown -h +10
	23:30分关机 shutdown -h 23:30
	立即重启 shutdown -r now
 -poweroff 用以立即关闭计算机
-reboot用以立即重启计算机


========================================
|-- WIN7下 怎么双系统安装ubuntu 12.04？[过时了]
----------------------------------------
[win7 32bits, ubuntu 12.04 32bits]

1，单独划出一块硬盘，大概20G留给ubunbu 用；
2，下载ubuntu 12.04.iso映像文件；
3，用WinRAR提取出里面的wubi文件，和ubuntu 12.04映像文件（iso）放在同一个文件夹内；
4，运行wubi文件，分区选择第一步划出来的那个盘符；
5，按照界面设置用户名和密码，安装即可进入复制文件；
6，复制后选择立刻重启，然后选择进入ubuntu（可能出现“。。。 is not set”，等待2min自动跳转到正常界面，不知道什么原因），二次安装更新大约30min即可使用；
7，以后重启的时候就可以选择进入win7或者ubuntu 12.04了；



========================================
|-- Ubuntu下修改主机名称
----------------------------------------
http://blog.csdn.net/simplty/article/details/9371103

1.$su root   //或者以下命令使用sudo执行

2.#vim /etc/hostname  /将里面的名字改为你想改的名字，例如myname
vim不会用的参考百度：    [Linux/Ubuntu] vi/vim 使用方法讲解

3.先查看/etc/hostname里的内容，这是你ubuntu的hostname
    然后编辑/etc/hosts文件，
    在终端里输入：sudo vim /etc/hosts 
    在127.0.0.1 localhost下面输入：127.0.1.1 myname    

4.重启reboot后即可见到新主机名字。

ps:出现ubuntu unable to resolve host xxx  错误的时候也可用第3步解决  


========================================
|-- [CentOS]单用户修改root密码(忘记root密码了>.<)
----------------------------------------
(如果有sudo权限的用户可以登录，可以通过 sudo passwd root 重置root密码。)


如果root管理员忘了密码怎么办？只有一种方法，就是进入运行级别1.
	- 为内核传递参数"1"（数字1）或"single"使系统进入单用户模式。
	- 单用户模式下不启动任何服务；
	- 单用户模式直接以root用户登录，并且不需要密码；
	- 可以使用passwd修改root密码。


(1)启动时不停地按上下键，使启动界面卡住：
(2)按下字母e，进入启动配置项：
(3)光标移动到kernel条目上，再按下字母e，进入编辑界面，添加一个空格和数字1，回车。
按下字母b启动系统。内核以运行级别1运行。
现在是root用户登录的，而且不需要密码！

(4)使用passwd命令修改密码即可。
输入exit命令，系统会自动正常运行起来。



缺陷：只要有人能物理的接触到主机，即可修改root密码！只需要重启，并给内核一个1参数。
应对策略：Grub加密
通过在/boot/grub/grub.conf中的启动配置（需要root登录才能编辑）中加入如下参数即可对grub进行加密：
	password --md5 $1$jKbvp$FAbq8vBZYH.2eG.tZoAj20

######
# grub-md5-crypt  #通过这个命令生成密码（比如123456会生成如下密码）
Password: 
Retype password: 
$1$jKbvp$FAbq8vBZYH.2eG.tZoAj20 #注意不要多或者少拷贝字符，不要漏了.号，不要在末尾多拷贝空格。
######


这时，如果按下字母e想修改，需要按下p输入密码，密码正确后才可以解锁字母e，才能编辑！

如果你把Grub的密码也忘了，那么...
只好把硬盘卸下来，修改文件后重新启动。

还是有物理机器或硬件被盗而数据泄露的风险，还可以对根分区加密。
不让无关人员接近物理主机！防止启动、盗窃硬盘等。



========================================
|-- UBUNTU中sudo用户如何获得root权限（或重置root密码）
----------------------------------------
From URL: http://www.cnblogs.com/wuxinrui/archive/2011/03/26/1996565.html

在终端中输入：
sudo passwd root
  Enter new UNIX password: (在这输入你的密码）
  Retype new UNIX password: (确定你输入的密码）
  passwd: password updated successfully

以后，如果在想获得root权限，只需进行如下的操作：
su root
Password: (在此输入你上面设置的密码）

如果要再次禁用 root 帐号，
那么可以执行 sudo passwd -l root

想退出就切换用户。




========================================
|-- ubuntu ssh服务的安装
----------------------------------------
1. Ubuntu 下安装 OpenSSH Server 是无比轻松的一件事情，需要的命令只有一条：
　　$ sudo apt-get install openssh-server   （注意这里是openssh-server哦，不是client）
2.(查看返回的结果，如果没有出错，则用putty、SecureCRT、SSH Secure Shell Client（中文乱码，不推荐使用）等SSH 客户端软件，输入您服务器的 IP 地址。如果一切正常的话，等一会儿就可以连接上了。并且使用现有的用户名和密码应该就可以登录了。)

然后确认sshserver是否启动了：（或用“netstat -tlp”命令）
　　ps -e | grep ssh
如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了。

ssh-server配置文件位于/ etc/ssh/sshd_config，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，如222。然后重启SSH服务：
　　sudo /etc/init.d/ssh resart   
事实上如果没什么特别需求，到这里 OpenSSH Server 就算安装好了。

3. 查看当前IP:  ifconfig


4.登录到远端Linux系统
(1)Linux/Mac下: 在终端界面用ssh命令: ssh <username>@IP
(2)windows下常用的ssh客户端软件有putty、 SecureCRT等
	Putty: http://www.putty.org/。
	putty注意在Window-Translation的右侧Remote character set选择 UTF-8，防止乱码。新版本putty已经自适应编码，无需修改了。
(3)Xming远程显示图形界面（win客户端）:

下载地址：
	https://sourceforge.net/projects/xming/
	或者http://www.straightrunning.com/XmingNotes/

1)保证Linux server中 /etc/ssh/sshd_config
X11Forwarding yes

2)Putty中X11 forwarding:
Putty Configuration-->Preffered SSH protocal version->SSH版本是2.
Connection-->SSH-->X11-->Enable X11 forwarding, X display location填上localhost:0, 下面的协议选择MIT-Magic-Cookie-1.

3)windows下起linux下的图形界面
启动Xming,"Display number"中的数字, 使用默认的0.
使用Putty连接Linux server,在putty终端下运行


然后在putty中运行gvim，发现linux下的gvim显示在你的windows桌面上了。


(4)Linux下使用sftp命令传递文件
举例，如远程主机的 IP 是 202.206.64.33或者是域名www.hebust.edu.cn,用户名是  fyt ,在命令行模式下:sftp fyt@202.206.64.33或者  fyt@www.hebust.edu.cn。回车提示输入密码。进入提示符
sftp>

如果登陆远程机器不是为了上传下载文件，而是要修改远程主机上的某些文件。可以
ssh  fyt@202.206.64.33 （其实sftp就是ssh 的一个程式。）

下载：sftp> get /var/www/fuyatao/index.php  /home/fuyatao/
这条语句将从远程主机的  /var/www/fuyatao/目录下将 index.php 下载到本地  /home/fuyatao/目录下。

上传：sftp> put /home/fuyatao/downloads/Linuxgl.pdf /var/www/fuyatao/
这条语句将把本地 /home/fuyatao/downloads/目录下的 linuxgl.pdf文件上传至远程主机/var/www/fuyatao/ 目录下。


你如果不知道远程主机的目录是什么样， pwd命令可以帮您查询远程主机的当前路径。
查询本机当前工作目录 lpwd.
改变路径可以用cd ，改变本机路径可以用 lcd;
ls rm rmdir mkdir 这些命令都可以使用。同理调用本机都是加 l , 即 lls lrm.
要离开sftp，用exit 或quit、 bye 均可。详细情况可以查阅 man  sftp.

如果觉得在命令行模式下不太方便，可以 sudo apt-get install gftp。在图形界面下操作就简便多了。







========================================
|-- centOS7 时间落后12小时，可能是时区timezone错了
----------------------------------------
1.
$ date 
## Mon May 11 05:20:37 EDT 2020

$ timedatectl
      Local time: Mon 2020-05-11 05:20:47 EDT
  Universal time: Mon 2020-05-11 09:20:47 UTC
        RTC time: Mon 2020-05-11 09:20:47
       Time zone: America/New_York (EDT, -0400)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: yes
 Last DST change: DST began at
                  Sun 2020-03-08 01:59:59 EST
                  Sun 2020-03-08 03:00:00 EDT
 Next DST change: DST ends (the clock jumps one hour backwards) at
                  Sun 2020-11-01 01:59:59 EDT
                  Sun 2020-11-01 01:00:00 EST
#
时区不对。修改：
$ sudo timedatectl  set-timezone Asia/Shanghai
## 需要权限

$ date
Mon May 11 17:29:10 HKT 2020



ref:
https://blog.csdn.net/zlt995768025/article/details/79765738




========================================
|-- Ubuntu 更改国内镜像源（阿里、网易、清华、中科大）
----------------------------------------

1. 更换地址

(1)打开Ubuntu的终端输入：
$ sudo vim /etc/apt/sources.list
输入密码回车即可

将镜像地址更改为以下任意一个地址（下面提供了阿里，网易，清华，中科大镜像源地址），保存即可。


(1b)或者源文件备份，新建文件
$ sudo mv /etc/apt/sources.list /etc/apt/sources.list-backup
$ sudo vim /etc/apt/sources.list
填写上清华的源


(1c) 查找 google 的源，先屏蔽掉吧，反正也无法访问。
$ find /etc/apt/. | xargs grep -i google 2>/dev/null --color=auto
Binary file /etc/apt/./trusted.gpg~ matches
Binary file /etc/apt/./trusted.gpg matches
/etc/apt/./sources.list.d/google-chrome.list.distUpgrade:deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
/etc/apt/./sources.list.d/google-cloud-sdk.list.distUpgrade:deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main
/etc/apt/./sources.list.d/google-cloud-sdk.list:deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main
/etc/apt/./sources.list.d/google-cloud-sdk.list.save:deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main
/etc/apt/./sources.list.d/google-chrome.list:deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main

全部加上 -backup 后缀
$ sudo mv /etc/apt/./sources.list.d/google-chrome.list /etc/apt/./sources.list.d/google-chrome.list-backup



(2)更换好源之后执行下方命令更新：
$ sudo apt-get update
$ sudo apt-get upgrade






3. 
#阿里源
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse

#网易源
deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse

#清华源 https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/
# 可以把偶数行的 -src 注释掉，如果不看源码的话。会更快。
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse

##中科大源
deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse


# 南方科技大学
http://mirrors.sustech.edu.cn/
搜狐开源镜像站：http://mirrors.sohu.com/
网易开源镜像站：http://mirrors.163.com/
阿里云开源镜像：http://mirrors.aliyun.com/

中国科学技术大学：
http://mirrors.ustc.edu.cn/ (IPv4+IPv6)
http://mirrors4.ustc.edu.cn/
http://mirrors6.ustc.edu.cn/




PyPi 镜像
豆瓣：http://pypi.douban.com/





# 上海交大
https://ftp.sjtu.edu.cn/ubuntu-cd/20.04.3/ubuntu-20.04.3-desktop-amd64.iso

# 教育网软件源镜像整合站 找iso很方便
https://mirrorz.org/


ref: https://blog.csdn.net/u011483658/article/details/95012034





========================================
|-- ubuntu 18.04 怎么升级到 20.04？
----------------------------------------

1. 先备份，再升级。升级失败再退回。
不知道怎么备份，没备份。

按上文，已经替换成了国内源。


(1) 准备
首先将Ubuntu 18.04系统软件包更新和升级到最新版本。
$ sudo apt update
$ sudo apt upgrade

您还可以运行系统完整升级。
$ sudo apt full-upgrade

根据man 8 apt的说法，完全升级执行升级功能，但如果需要升级当前的软件包则将其删除。

删除不再需要的软件包。
$ sudo apt autoremove


升级完成后，重启，重新引导系统。
$ sudo systemctl reboot  #很慢，需要5min。




重启后的开机提示：
Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-157-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

0 updates can be applied immediately.

New release '20.04.3 LTS' available.
Run 'do-release-upgrade' to upgrade to it.






(2) 下面正式开始将Ubuntu 18.04 升级到Ubuntu 20.04

Ubuntu附带了一个名为do-release-upgrade的命令实用程序，用于将Ubuntu操作系统升级到最新版本。 默认情况下已安装此实用程序。 如果由于某些原因未安装，则只需安装update-manager-core即可，它通过运行以下命令来安装；
## sudo apt install update-manager-core

然后，您只需执行即可将系统升级运行到新发行版本。

$ do-release-upgrade



##########
该实用程序支持许多命令行选项。 检查，do-release-upgrade -h 。 例如，
如果您使用的是Ubuntu 18.04桌面版本，则可以执行以下命令将桌面升级运行到新版本：$ sudo do-release-upgrade -m desktop
为服务器版本运行常规升级；$ sudo do-release-upgrade -m server

do-release-upgrade命令通常仅在主要LTS发行版的第一点版本发布之后。 在这种情况下，该命令仅在Ubuntu 20.04.1可用后才能执行此命令。
好吧，如果您得到输出，则没有可用的LTS开发版本，这是因为Ubuntu 20.04.1尚不可用。

因此，由于我们正在处理测试版本，因此您可以简单地将Ubuntu 18.04系统升级到Ubuntu 20.04的开发发行版。 将-d或--devel-release选项传递给do-release-upgrade命令。
$ sudo do-release-upgrade -m desktop -d

键入上面的命令并按Enter，将立即开始系统升级到Ubuntu 20.04的开发版本。
##########



1) 输入密码后，
[sudo] password for wangjl: 

Reading cache

Checking package manager

Continue running under SSH? 

This session appears to be running under ssh. It is not recommended 
to perform a upgrade over ssh currently because in case of failure it 
is harder to recover. 

If you continue, an additional ssh daemon will be started at port 
'1022'. 
Do you want to continue? 

Continue [yN]



2) y 同意

Starting additional sshd 

To make recovery in case of failure easier, an additional sshd will 
be started on port '1022'. If anything goes wrong with the running 
ssh you can still connect to the additional one. 
If you run a firewall, you may need to temporarily open this port. As 
this is potentially dangerous it's not done automatically. You can 
open the port with e.g.: 
'iptables -I INPUT -p tcp --dport 1022 -j ACCEPT' 

To continue please press [ENTER]

我路由器没有设置，现在也无法登路由器了。如果出问题再用其他人的电脑设置路由器。

通过其他终端输入了 $ sudo iptables -I INPUT -p tcp --dport 1022 -j ACCEPT


3) Enter 
... 下载一堆东西 10s
Some third party entries in your sources.list were disabled. You can 
re-enable them after the upgrade with the 'software-properties' tool 
or your package manager. 

To continue please press [ENTER]

4) Enter 
... 下载一堆东西 21:27-> 
比如 
Get:95 https://mirrors.tuna.tsinghua.edu.cn/ubuntu focal-backports/main i386 Packages [2,568 B]   
...
Get:234 http://cn.archive.ubuntu.com/ubuntu focal-updates amd64 Contents (deb) [62.5 MB]
...
Ign https://packages.cloud.google.com/apt cloud-sdk InRelease ##谷歌的包装不上
  Could not resolve 'packages.cloud.google.com'
Error during update 

A problem occurred during the update. This is usually some sort of 
network problem, please check your network connection and retry. 

Restoring original system state

Aborting
Reading package lists... Done    
Building dependency tree          
Reading state information... Done





(3) 把 $ find /etc/apt/. | xargs grep -i google 2>/dev/null --color=auto
查到带 google 字样的都加上 -backup 后缀。

再次升级 
$ sudo apt update
$ sudo apt upgrade

$ do-release-upgrade


1) Some third party entries in your sources.list were disabled. You can 
re-enable them after the upgrade with the 'software-properties' tool 
or your package manager. 

To continue please press [ENTER]


2) Enter 
...
Calculating the changes

Do you want to start the upgrade? 


67 installed packages are no longer supported by Canonical. You can 
still get support from the community. 

42 packages are going to be removed. 603 new packages are going to be 
installed. 2179 packages are going to be upgraded. 

You have to download a total of 4,523 M. This download will take  #大概4G数据。
about 6 minutes with your connection. # 下载6分钟

Installing the upgrade can take several hours. Once the download has  #安装几小时，下载完不可取消。
finished, the process cannot be canceled. 

 Continue [yN]  Details [d]


3) y 
21:55 --> 22:04 下载结束，直接开始安装
... 下载一堆
Get:2091 https://mirrors.tuna.tsinghua.edu.cn/ubuntu focal/universe amd64 libclang-common-10-dev amd64 1:10.0.0-4ubuntu1 [5,012 kB]                                                        


4) 弹出窗口，选择包作者维护的版本。
$ vim /etc/ssh/sshd_config
PermitRootLogin yes
ChallengeResponseAuthentication no
UsePAM yes

X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
AcceptEnv LANG LC_*
Subsystem       sftp    /usr/lib/openssh/sftp-server


5) 很长时间无干预
Preparing to unpack .../05-texlive-fonts-extra_2019.202000218-1_all.deb ...
Unpacking texlive-fonts-extra (2019.202000218-1) ...


弹出： Configuring libpam0g:amd64
同意自动停止服务。
Restarting services possibly affected by the upgrade:
  xrdp: stopping...starting...done.
  squid: stopping...

6) Configuration file '/etc/security/limits.conf'
改动的点：
* soft nofile 10240
* hard nofile 10240
Y or I  : install the package maintainer's versio

7) /etc/nginx/sites-available/default
server {
        listen 8080 default_server;
        listen [::]:8080 default_server;
		
		root /var/www/html;


        location /wangjl/ {
                alias /home/wangjl/data/web/;
                autoindex on;
        }
}
Y or I  : install the package maintainer's version

8) Samba server and utilities
安装新的，我就没搞明白 samba 服务。

9) /etc/xrdp/xrdp.ini
port=7000
Y or I  : install the package maintainer's version

## 23:12 走，明天再看。19:40 继续

10) /etc/gdm3/custom.conf 不知道这是啥，记录一下
[daemon]
WaylandEnable=false
[security]
[xdmcp]
[chooser]
[debug]
Y or I  : install the package maintainer's version


11) refreshing snap gnome-logs
refreshing snap gnome-system-monitor

Searching for obsolete software
Reading state information... Done

Remove obsolete packages? 

254 packages are going to be removed. 
Removing the packages can take several hours. #删除过时的包需要几个小时。

 Continue [yN]  Details [d]
输入y


12) System upgrade is complete.

Restart required 

To finish the upgrade, a restart is required. 
If you select 'y' the system will be restarted. 

Continue [yN]
y 最后一步的重启。

19:52 --> 重启需要五分钟 
19:56 xshell登录报错: 服务器发送了一个意外的数据包 received 3 expected 20

搜了一下，可能是 新版 ubuntu 和xshell 不兼容。使用git bash 正常登录了。



13)在 /etc/ssh/sshd_config 最后增加以下一行
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1

然后重启sshd服务或者重载服务配置文件

systemctl reload sshd
或
systemctl restart sshd

重新使用Xshell连接，成功




14)## 欢迎界面:
Host 'y.biomooc.com' resolved to 10.20.89.188.
Connecting to 10.20.89.188:22...
Connection established.
To escape to local shell, press 'Ctrl+Alt+]'.

Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-85-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

0 updates can be applied immediately.

Last login: Sun Sep 12 20:02:48 2021 from 192.168.2.1



15) 恢复远程桌面端口
$ sudo vim /etc/xrdp/xrdp.ini
port=7000

$ sudo service xrdp restart

16) 恢复Rstudio 
重新安装R和Rstudio。

17) 恢复 nginx 8080端口








ref:https://www.linuxidc.com/Linux/2020-03/162584.htm
https://ubuntu.com/blog/how-to-upgrade-from-ubuntu-18-04-lts-to-20-04-lts-today






========================================
磁盘管理基本概念
----------------------------------------
磁盘基本概念：
-柱面 cylinder
-扇区 sector
-磁头 head 

磁盘在Linux中的表示
	- linux所有设备都被抽象为一个文件，保存在/dev目录下；
	- 设备名称一般为hd[a-z]或sd[a-z]([a-z]为分区号)，如：hda、hdb、sda、sdb
	- IDE设备的名称为hd[a-z]，SATA、SCSI、USB等设备的名称为sd[a-z]
	如: 硬盘1（/dev/sda）、硬盘2（/dev/sdb）、硬盘3（/dev/sdc）;
$ cd /dev/	
$ ls -l sd*
brw-rw---- 1 root disk 8,  0  6月 21 10:43 sda
brw-rw---- 1 root disk 8,  1  6月 21 10:43 sda1
brw-rw---- 1 root disk 8,  2  6月 21 10:43 sda2
brw-rw---- 1 root disk 8,  5  6月 21 10:43 sda5
brw-rw---- 1 root disk 8, 16  6月 21 10:43 sdb
brw-rw---- 1 root disk 8, 17  6月 21 10:43 sdb1




分区的概念（分区是一个软件概念）
将一个磁盘逻辑的分为几个区，每个区当做独立磁盘，以方便使用管理。
	- 不同分区用：设备名称+分区号 方式表示，如sd1、sd2。
	主流的分区机制分为MBR和GPT两种。


	
MBR（Master Boot Record）分区
MBR分区是传统的分区机制，应用于绝大多数使用BIOS的PC设备（除了苹果机是UEFI其他都是PC机器）。
	- MBR支持32bit和64bit系统；
	- MBR支持分区数量有限
	- MBR只支持不超过2T的硬盘，超过2T的硬盘将只能使用2T空间（有第三方解决方法）


MBR结构（占用前512字节）
bootstrap code area	占用前446字节，
中间最多4个主分区。
结尾肯定是	55A

	
MBR分区：
- 主分区：最多只能创建4个主分区；
- 扩展分区：一个扩展分区会占用一个主分区位置
	- 逻辑分区：需要先创建一个扩展分区，再基于扩展分区内创建逻辑分区。Linux最多支持63个IDE分区和15个SCSI分区。


GPT（GUID Partition Table）是一个较新的分区机制， 解决了很多MBR的很多缺点。
	- 支持超过2T的硬盘
	- 向后兼容MBR
	- 必须在支持UEFI的硬件上才能使用（可以在BIOS中切换成UEFI启动）
	- 必须使用64bit系统
	- Mac、Linux系统都能支持GPT分区格式
	- Windows7 64bit、windowsServer2008 64bit支持GPT
	



========================================
|-- 查看磁盘剩余空间: df命令
----------------------------------------
常用命令 
$ df -h  #查看哪个盘还有空间，还有多少空间





一、df 命令；
df 是来自于coreutils 软件包，系统安装时，就自带的；我们通过这个命令可以查看磁盘的使用情况以及文件系统被挂载的位置；


1.举例：
[root@localhost beinan]# df -lh

	Filesystem 容量 已用 可用 已用% 挂载点
	/dev/hda8 11G 6.0G 4.4G 58% /
	/dev/shm 236M 0 236M 0% /dev/shm
	/dev/sda1 56G 22G 35G 39% /mnt/sda1

我们从中可以看到,系统安装在/dev/hda8 ；还有一个56G的磁盘分区/dev/sda1挂载在 /mnt/sda1中；
其它的参数请参考 man df




2.相关信息
df命令: df命令用来检查linux文件系统的磁盘空间占用情况，所有用户均有使用df命令的权限。

语法格式
df [参数]

主要参数
-s：对每个Names参数只给出占用的数据块总数。
-a：递归地显示指定目录中各文件及子目录中各文件占用的数据块数。若既不指定-s，也不指定-a，则只显示Names中的每一个目录及其中的各子目录所占的磁盘块数。
-k：以1024字节为单位列出磁盘空间使用情况。
-x：跳过在不同文件系统上的目录不予统计。
-l：计算所有的文件大小，对硬链接文件则计算多次。
-i：显示inode信息而非块使用量。
-h：以容易理解的格式印出文件系统大小，例如124KB、345MB、46GB。
-P：使用POSIX输出格式。
-T：显示文件系统类型。





========================================
|-- 查看当前目录下的文件夹大小: du 命令
----------------------------------------
常用命令
$ du ./* -s | sort -k1nr #查看当前文件夹下的文件和文件夹大小，按照从大到小的顺序排列
如果不想看到 Permission denied 报错：
$ du ./* -s 2>/dev/null  | sort -k1nr 


当前文件的总大小
$ du -sk ./
28693248	./

人能读懂的
$ du -sh
28G	.





1.
du -sh *   查看当前目录下的文件夹大小

du 命令
用途: 概述磁盘使用。

语法
du [ -a | -s ] [ -k ] [ -m ] [ -g ][ -l ] [ -r ] [ -x ] [ -H | -L ][ File ... ]

描述
du命令显示用于文件的块的数量。如果指定的File参数实际上是一个目录，就要报告该目录内的所有文件。如果没有提供 File参数，du命令使用当前目录内的文件。

如果File参数是一个目录，那么报告的块的数量就是分配到目录中文件以及分配到目录自身的块之和。

指定-a标志，报告个体文件中块数量。不管是否使用了-a标志，由File参数指定的个体文件总是要列出。
指定-s标志，报告用于所有指定文件和目录中所有文件的全部块。

块计数包括每个文件的间接块。块计数是通过 512 字节单位计算的，它与系统使用的群集大小无关。指定-k标志，通过 1024 字节单位计算块数。


注:
具有多个链接的文件只为一个条目计数和书写。
由于块计数只基于文件大小，所以在报告的块数中，未分配的块是没有包含进去的。
如果du得不到文件属性，或者无法读取目录，它就报告一个错误，并且会影响命令的退出状态。

标志

-a	为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。将该标志与-s标志进行对比。
-g	用 GB 单位计算块数，而不是用缺省的 512 字节单位。对磁盘使用情况的输出值要用浮点数，这是因为如果用字节为单位的话，值会非常大。
-H	如果在命令行指定了符号链接，du 命令将统计链接引用的文件或文件层次结构的大小。
-k	用 1024 字节单位计算块数，而不是用缺省的 512 字节单位。
-l	在文件链接和多链接之间均匀地分配块。根据缺省值，有两个或者更多链接的文件只计数一次。
-L	如果在命令行指定了符号链接或者在文件层次结构的遍历中多次遇到符号链接，则 du 命令应统计链接引用的文件或文件层次结构的大小。
-m	用 MB 单位计算块数，而不是用缺省的 512 字节单位。对磁盘使用情况的输出值要用浮点数，这是因为如果用字节为单位的话，值会非常大。
-r	报告不可访问的文件或者目录名。此为缺省设置。
-s	为所有指定文件显示整个磁盘使用情况，或者为一个目录中的所有文件显示总的磁盘使用情况。将该标志与-a标志进行对比。
-x	在评估文件大小时，只评估那些与File参数指定的文件或者目录驻留在相同设备上的文件。例如，您可以指定一个在多个设备上包含文件的目录。这种情况下，-x标志就为与目录驻留在相同设备的所有文件显示块的大小。
如果指定了全部-k、-m和-g标志，或者是其中任意两个，最后指定的那个起作用。用标志-m和-g输出磁盘使用情况就会近似成最接近的第二位十进制数。


退出状态
	此命令返回下列出口值:
	0	成功结束。
	>0	发生错误。

示例
要概述一个目录树及其每个子树的磁盘使用情况，请输入：
du /home/fran
这在/home/fran目录及其每个子目录中显示了磁盘块数。

要通过 1024 字节块概述一个目录树及其每个子树的磁盘使用情况，请输入：
du -k /home/fran
这在/home/fran目录及其每个子目录中显示了 1024 字节磁盘块数。


要通过 MB 磁盘块概述一个目录树及其每个子树的磁盘使用情况，请输入：
du -m /home/fran
这在/home/fran目录及其每个子目录中显示了 MB 磁盘块数（近似到最接近的第二位十进制数）。


要通过 GB 块概述一个目录树及其每个子树的磁盘使用情况，请输入：
du -g /home/fran
这在/home/fran目录及其每个子目录中显示了 GB 磁盘块数（近似到最接近的第二位十进制数）。


要显示每个文件磁盘使用情况，请输入：
du  -a /home/fran
这显示了包含在每个文件以及目录/home/fran的子目录中的磁盘块数。在目录旁的数字就是该目录树的磁盘使用情况。在常规文件旁的数字就是该文件单独的磁盘使用情况。



要只显示一个目录树的全部磁盘使用情况，请输入：
du  -s /home/fran
-s标志控制du命令，只显示/home/fran目录和其中包含的文件的磁盘使用情况的总和。通过缺省值，如果du命令无法读取一个文件或者目录，就显示一条错误消息。


除了在 /home/fran 的遍历中找到的常规文件，还要显示所有符号链接引用的文件或文件层次结构的磁盘使用，请输入：
du -L /home/fran


要报告符号链接 mylink 引用的文件或文件层次结构的磁盘使用，请输入：
du -H mylink

文件
/usr/bin/du	包含命令du。



《AIX 5L V5.2 系统用户指南：操作系统与设备》中的『目录概述』解释了对目录和路径名字的处理。
《AIX 5L V5.2 系统用户指南：操作系统与设备》中的『文件概述』提供了处理文件的信息




========================================
|-- 磁盘管理: fdisk 是一款强大的磁盘操作工具
----------------------------------------
fdisk -l 显示分区信息；

fdisk是来自IBM的老牌分区工具，支持绝大所数系统。
几乎所有的Linux发行版都装有fdisk，包括在linux的rescue模式下的依然能够使用。
	- fdisk是一个基于MBR的分区工具。所以如果需要使用GPT，则无法使用fdisk进行分区。

 - fdisk命令只有具有超级用户权限才能运行。
 - 使用fdisk -l可以列出所有安装的磁盘及其分区信息。
 - 使用fdisk /dev/sda可以对目标磁盘进行分区操作。
	该命令会进入一个交互式界面中。m键是帮助，列出其他单字母命令。
	n 添加新分区
	p 打印出当前分区表
	
	逻辑分区编号总是从5开始。
	w 把分区信息写入MBR分区表中。
 - 分区之后需要使用partprobe命令让内核更新分区信息，否则需要重启才能识别新的分区。
 - /proc/partitions文件也可以用来查看分区信息。

分区创建好并不能直接使用，还需要在分区内创建文件系统。



1.
fdisk 是一款强大的磁盘操作工具，来自util-linux软件包，我们在这里只说他如何查看磁盘分区表及分区结构；参数 -l ，通过-l 参数，能获得机器中所有的硬盘的分区情况；

root@iZ25oz0wv4kZ:/dev# fdisk -l
Disk /dev/vda: 42.9 GB, 42949672960 bytes
255 heads, 63 sectors/track, 5221 cylinders, total 83886080 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000da36d

   Device Boot      Start         End      Blocks   Id  System
/dev/vda1   *        2048    83884031    41940992   83  Linux

Disk /dev/vdb: 53.7 GB, 53687091200 bytes
255 heads, 63 sectors/track, 6527 cylinders, total 104857600 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0xf08d9718

   Device Boot      Start         End      Blocks   Id  System
/dev/vdb1            2048   104855551    52426752    7  HPFS/NTFS/exFAT


2.
fdisk -l 能列出机器中所有磁盘的个数，也能列出所有磁盘分区情况.


# fdisk -l /dev/vda1

Disk /dev/vda1: 42.9 GB, 42947575808 bytes
16 heads, 63 sectors/track, 83216 cylinders, total 83881984 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/vda1 doesn't contain a valid partition table
第一个磁盘没有分区。

第二个磁盘系统未知。
# fdisk -l /dev/vdb1

Disk /dev/vdb1: 53.7 GB, 53684994048 bytes
16 heads, 63 sectors/track, 104021 cylinders, total 104853504 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x73736572

This doesn't look like a partition table
Probably you selected the wrong device.

     Device Boot      Start         End      Blocks   Id  System
/dev/vdb1p1      1920221984  3736432267   908105142   72  Unknown
/dev/vdb1p2   ?  1936028192  3889681299   976826554   6c  Unknown
/dev/vdb1p3   ?           0           0           0    0  Empty
/dev/vdb1p4        27722122    27722568         223+   0  Empty


准备换文件格式：

确定是2个硬盘：
/dev# ls -l vd*
brw-rw---- 1 root disk 253,  0 Aug 27 20:28 vda
brw-rw---- 1 root disk 253,  1 Aug 28 18:45 vda1
brw-rw---- 1 root disk 253, 16 Aug 27 20:28 vdb
brw-rw---- 1 root disk 253, 17 Aug 28 18:45 vdb1




========================================
|-- Linux设备查看
----------------------------------------
输出、查看命令
-echo 显色输入内容；
-cat 显示文件内容；
-head 显示文件的头几行（默认10行） -n 指定显示的行数；
-tail显示文件的末尾几行（默认10行）
	 -n 指定显示的行数，
	-f 追踪显示文件更新（一般用于查看日历，命令不会退出，而是持续显示新加入的内容）；
-more 用于显示文件内容（只能向下翻页）
-less 用于显示文件内容（只能上下翻页）


-lspci 查看PCI设备，-v查看详细信息；
-lsusb 查看usb设备，-v查看详细信息；
-lsmod查看加载的模块（驱动）；





========================================
Linux文件系统
----------------------------------------
操作系统通过文件系统管理文件及数据。
磁盘需要创建文件系统之后才能够为操作系统使用，创建文件系统的过程又称为【格式化】。
	- 没有文件系统的设备又称之为裸（raw）设备
	- 常见的文件系统有fat32、NTFS、ext2、ext3、ext4、xfs、HFS等
	- 文件系统之间的区别：日志、支持的分区大小、支持的单个文件大小、性能等（主要是性能差别）。

	win下的主流文件系统：NTFS
	linux下的主流文件系统：Ext3, Ext4

Linux支持的文件系统：
	ext2-4, fat(msdos), vfat, nfs, iso9660, proc, gfs, jfs

	
在分区上创建文件系统 mke2fs -t ext4 /dev/sda3
常用参数：
	-b blocksize	指定文件系统块大小（4096默认4k文件,还可以2048）
	-c 	创建文件系统时检查坏损快；
	-L label	指定卷标（如system、文件、娱乐、软件等）
	-j	建立文件系统日志（ext3和4默认有日志，不需要指定）

mkfs命令也可用于创建文件系统，相对于mke2fs简单，但是支持的参数较少，不能进行精细化的控制。
	mkfs.ext3 /dev/sda3 
	mkfs.ext4 /dev/sda3 
	mkfs.vfat /dev/sda3 
	
	
查看已经建立好的分区系统(相当详细)
dumpe2fs /dev/sdb1	


查看文件系统格式：df -lhT 的第二列。
$ df -lhT
Filesystem     Type      Size  Used Avail Use% Mounted on
udev           devtmpfs  7.9G     0  7.9G   0% /dev
tmpfs          tmpfs     1.6G  9.2M  1.6G   1% /run
/dev/sda1      ext4       19G  9.1G  8.6G  52% /
tmpfs          tmpfs     7.9G  212K  7.9G   1% /dev/shm
tmpfs          tmpfs     5.0M  4.0K  5.0M   1% /run/lock
tmpfs          tmpfs     7.9G     0  7.9G   0% /sys/fs/cgroup
/dev/sdb1      ext4      197G   37G  151G  20% /home/wangjl/data
pub            vboxsf    2.2T  491G  1.7T  23% /media/sf_pub
tmpfs          tmpfs     1.6G   56K  1.6G   1% /run/user/1005



查看每个盘的分区
$ lsblk
sda      8:0    0 238.5G  0 disk 
├─sda1   8:1    0   512M  0 part /boot/efi
└─sda2   8:2    0   238G  0 part /
sdb      8:16   0   3.7T  0 disk /data


另一个服务器
$ lsblk
NAME            MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda               8:0    0 446.1G  0 disk  
├─sda1            8:1    0    50M  0 part  /boot/efi
├─sda2            8:2    0   500M  0 part  /boot
├─sda3            8:3    0 317.6G  0 part  /
└─sda4            8:4    0   128G  0 part  [SWAP]
sdb               8:16   0   8.2T  0 disk  
└─sdb1            8:17   0   8.2T  0 part  
  └─centos-home 253:2    0   8.2T  0 lvm   /home
sdc               8:32   0 145.9T  0 disk  
├─sdc1            8:33   0 145.9T  0 part  
└─mpatha        253:0    0 145.9T  0 mpath 
  └─mpatha1     253:1    0 145.9T  0 part  /data
sdd               8:48   0 145.9T  0 disk  
├─sdd1            8:49   0 145.9T  0 part  
└─mpatha        253:0    0 145.9T  0 mpath 
  └─mpatha1     253:1    0 145.9T  0 part  /data
sde               8:64   0    89T  0 disk  
└─sde1            8:65   0    89T  0 part  /mnt/test1


$ df -lhT
Filesystem              Type      Size  Used Avail Use% Mounted on
devtmpfs                devtmpfs  189G     0  189G   0% /dev
tmpfs                   tmpfs     189G   40K  189G   1% /dev/shm
tmpfs                   tmpfs     189G  246M  189G   1% /run
tmpfs                   tmpfs     189G     0  189G   0% /sys/fs/cgroup
/dev/sda3               xfs       318G   44G  274G  14% /
/dev/sda2               xfs       494M  357M  137M  73% /boot
/dev/sda1               vfat       50M   12M   39M  23% /boot/efi
/dev/mapper/centos-home xfs       8.2T  2.6T  5.7T  32% /home
/dev/mapper/mpatha1     ext4      146T  129T   10T  93% /data
tmpfs                   tmpfs      38G   12K   38G   1% /run/user/42
/dev/sde1               xfs        90T   33T   57T  37% /mnt/test1
tmpfs                   tmpfs      38G     0   38G   0% /run/user/1031
...





Journal日志
带日志的文件系统（ext3、ext4）拥有较强的稳定性，在出现错误时可以进行恢复。

使用带日志的文件系统，文件系统会使用一个叫做“两阶段提交”的方式进行磁盘操作，当进行磁盘操作时，文件系统进行以下操作：
1.文件系统将准备执行的事务的具体内容写入日志
2.文件系统进行操作
3.操作成功后，将事务的具体内容从日志中删除。

这样做的好处是，当事务执行的时候出现意外（如断电或磁盘故障），可以通过查询日志进行恢复操作。
缺点是会丧失一定的性能（额外的日志读写操作）。





另一个给文件系统打标签的命令e2lable
# e2label /dev/sda2  #单个参数是查询标签，没有标签

# e2label /dev/sda2 VIDEO #双参数是打标签(标签建议用大写)
# e2label /dev/sda2 #单个参数是查询标签，发现有标签了
VIDEO




fsck修复
使用fsck检查并修复损坏的文件系统。
	fsck /dev/sda2 
	- 使用-y参数不提示而直接进行修复
	- 默认fsck会自动判断文件系统类型，如果文件系统损坏较为严重，请使用-t参数指定文件系统类型。
	- 对于识别为文件的损坏数据（文件系统无记录），fsck会将该文件放入lost+found目录。
	- 系统启动时会对磁盘进行fsck操作




========================================
|-- Linux文件系统挂载管理 - CentOS6.8 挂载3T新硬盘
----------------------------------------

http://blog.sina.com.cn/s/blog_6594d5d30101kjhs.html

今天军舰兄过来让我帮他加装一个3T的硬盘，本来俺想这应该很常规嘛 不过具体操作的时候涉及到  MBR分区表：（MBR含义：主引导记录）失效，需用GPT分区表：（GPT含义：GUID分区表）代替。
在京东新买的3T硬盘（大概500多RMB）默认是dos分区，支持最大2T多点的单分区，想把3T整体装到一个分区。如下操作：

新硬盘-分区-格式化-挂载-使用-（卸载-取下硬盘）

具体步骤如下：
（1）parted /dev/sdc  （新加硬盘为/dev/sdc）
（2）print （查看一下）
Model: ATA WDC WD3000FYYZ-0 (scsi)
Disk /dev/sdc: 3001GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Number  Start  End  Size  Type  File system  Flags
（3）mklabel gpt （设置分区类型为gpt）
（4）mkpart extended 0% 100% （扩展分区，并使用整个硬盘）
（5）print （查看一下） #已经有一个分区了
（6）quit                                                            
Information: You may need to update /etc/fstab.
（7）mkfs.ext4 /dev/sdc1（格式化新硬盘） long time, enter and wait.
（8）mount /dev/sdc1 /disk2 （挂载，之后即可使用了）
df -h #可以查看到刚挂上去的盘，容量、使用率、挂载的目录



若自动挂载
blkid (查看硬盘UID)
vim /etc/fstab
添加
# /Works was on /dev/sdb1 during installation
UUID=0bb52433-1274-4456-a495-84892cdf498d /Works ext4 defaults       0       2

或如下自动挂载：



如果需要拆除硬盘，需要先解挂
# umount /disk2 # 解挂文件目录即可。
## 如果有软件还在使用该硬盘，需要退出这些软件再卸载硬盘。否则会报错：busy
# df -h #再查就看不到这块盘了。


参考：http://hi.baidu.com/firebee201/item/bc25f47a9d3dcb316e29f691
      http://blog.sina.com.cn/s/blog_034747150100yffz.html
http://www.mamicode.com/info-detail-1977427.html







========================================
|-- Linux文件系统挂载管理 - 系统自动加载
----------------------------------------
1.格式化后系统需要挂载到一个目录才能够使用。
linux需要手工进行挂载操作 或 配置系统进行自动挂载。

使用mount命令挂载磁盘。
mount -a #-a, --all   Mount all filesystems (of the given types) mentioned in fstab.

先卸载，再修改文件系统，再挂载。



2.系统自动加载

使用vi（vim）修改/etc/fstab， 在该文件中写入一条：
/dev/sdb1 /home/wangjl/data ext4 defaults 0 0
这样每次系统启动就能实现自动挂载该分区到/home/wangjl/data下.




========================================
|-- 实战：ubuntu挂载4T东芝移动硬盘(NTFS格式)，最后转Ext4格式
----------------------------------------
1. 直接挂载

## 查看盘符
$ sudo fdisk -l
Device      Start        End    Sectors  Size Type
/dev/sdd1      34     262177     262144  128M Microsoft reserved
/dev/sdd2  264192 7814035455 7813771264  3.7T Microsoft basic data
$ df -h  # 看不到该盘了

## 挂载到目录
$ sudo mkdir /mnt/m
$ sudo mount -t ntfs /dev/sdd2 /mnt/m
$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/sdd2       3.7T  203M  3.7T   1% /mnt/m


## 测试硬链接效果
$ cd /mnt/m 
$ ln x1.raw x2.raw #占用大小不变，说明是硬链接效果
/dev/sdd2       3.7T  1.4G  3.7T   1% /mnt/m
$ ln a.txt a2.txt
# 修改一个，另一个也变化了。

$ cp x2.raw x3.raw #占用大小加倍，说明cp确实是复制一份。
/dev/sdd2       3.7T  2.6G  3.7T   1% /mnt/m


## 加软链接
$ cd 
$ ln -s /mnt/m/backupAPA data2



## 卸载硬盘
$ sudo umount /mnt/m













2. 转为 Ext4格式再挂载
(1) 测试备份命令
rsync -av --link-dest ~/data2/apa/01 ~/data2/apa/02/ ~/data2/apa/03/
rsync -av ~/data2/apa/01/ ~/data2/apa/a1/

rsync -av --link-dest ~/data2/apa/a1 ~/data2/apa/01/ ~/data2/apa/a2/
rsync -av --link-dest ~/data2/apa/a1 ~/data2/apa/01/ ~/data2/apa/a3/
ln -s ~/data2/apa/a1 latest
rsync -av --link-dest ~/data2/apa/latest ~/data2/apa/01/ ~/data2/apa/a4/

rsync -av --link-dest ~/data2/apa/a1 ~/data2/apa/01/ ~/data2/apa/a5/

注意: 
--link-dest  后面必须是完整路径形式。
ntfs文件系统挂载到win上不行，必须使用ext4硬盘格式?

sudo rsync -rltDvu --modify-window=1 --progress --delete --delete-excluded --exclude-from=/home/bob/Bash/BackupBigExclude.txt / /media/harddrive/backup




(2) 查看已有文件系统
$ sudo fdisk -l
--->> sda 很小
Disk /dev/sda: 238.5 GiB, 256060514304 bytes, 500118192 sectors
Units: sectors of 1 * 512 = 512 bytes                           
Sector size (logical/physical): 512 bytes / 4096 bytes          
I/O size (minimum/optimal): 4096 bytes / 4096 bytes             
Disklabel type: gpt                                             
Disk identifier: 50C196AA-2E44-4E72-8B08-D469A451AC0B

Device       Start       End   Sectors  Size Type
/dev/sda1     2048   1050623   1048576  512M EFI System
/dev/sda2  1050624 500117503 499066880  238G Linux filesystem


--->> sdb 很大有4T，无分区
Disk /dev/sdb: 3.7 TiB, 4000787030016 bytes, 7814037168 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes


--->> sdd 很大有4T，有分区。是自己的移动硬盘。
Disk /dev/sdd: 3.7 TiB, 4000787027968 bytes, 7814037164 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disklabel type: gpt
Disk identifier: 3C30D4E3-C86A-4F0D-B0C4-B1E748094AF8

Device      Start        End    Sectors  Size Type
/dev/sdd1      34     262177     262144  128M Microsoft reserved
/dev/sdd2  264192 7814035455 7813771264  3.7T Microsoft basic data





(3) 开始分区
## 卸载硬盘
$ df -h
/dev/sdd2       3.7T  228M  3.7T   1% /mnt/m
$ sudo umount /mnt/m


## 分区
$ sudo fdisk /dev/sdd
Command (m for help): t ## change a partition type
Partition number (1,2, default 2): 2
Partition type (type L to list all types): 20
  20 Linux filesystem
  31 Linux LVM
Changed type of partition 'Microsoft basic data' to 'Linux filesystem'.

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.


## 查看分区
$ sudo fdisk -l
Disk /dev/sdd: 3.7 TiB, 4000787027968 bytes, 7814037164 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disklabel type: gpt
Disk identifier: 3C30D4E3-C86A-4F0D-B0C4-B1E748094AF8

Device      Start        End    Sectors  Size Type
/dev/sdd1      34     262177     262144  128M Microsoft reserved
/dev/sdd2  264192 7814035455 7813771264  3.7T Linux filesystem


(4) 格式化分区为Ext4
分区：就是将磁盘分为一个一个的区域，可以方便归类使用。
格式化：就是在一个个已经分好的区域上建立文件系统。

## 原文件系统
$ sudo mount -t ntfs /dev/sdd2 /mnt/m
$ df -Th
/dev/sdd2      fuseblk   3.7T  227M  3.7T   1% /mnt/m
这个fuseblk不知道是什么鬼？先变成ext4再说。

## 卸载硬盘
$ sudo umount /mnt/m


## 开始格式化 
$ sudo mkfs.ext4 /dev/sdd2  #等待几秒。
mke2fs 1.44.1 (24-Mar-2018)
/dev/sdd2 contains a ntfs file system labelled 'TOSHIBA EXT'
Proceed anyway? (y,N) y

Creating filesystem with 976721408 4k blocks and 244187136 inodes
Filesystem UUID: 6b0ee3c1-0173-410e-b379-2b105044214a
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
	102400000, 214990848, 512000000, 550731776, 644972544

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information: done 


(5) 挂载和使用

## 再次查看文件系统
$ sudo mount /dev/sdd2 /mnt/m #默认挂载
$ df -Th # 磁盘的文件格式，已经是ext4了。
/dev/sdd2      ext4      3.6T   89M  3.4T   1% /mnt/m

## 新建文件夹
$ sudo mkdir /mnt/m/backupAPA
$ sudo chown wangjl /mnt/m/backupAPA
$ sudo chgrp wangjl /mnt/m/backupAPA

## 加软链接
$ cd 
$ ln -s /mnt/m/backupAPA data2

可以进行rsync增量备份了。










========================================
|-- 实战：有一个windows重装成了Linux了，结果磁盘还是NTFS格式的。于是决定转化为ext4格式。
----------------------------------------

问题：有一个windows重装成了Linux了，结果磁盘还是NTFS格式的。于是决定转化为ext4格式。

[root@fedora15 zou]# fdisk -l 
Disk /dev/sda: 250.1 GB, 250059350016 bytes 
255 heads, 63 sectors/track, 30401 cylinders, total 488397168 sectors 
Units = sectors of 1 * 512 = 512 bytes 
Sector size (logical/physical): 512 bytes / 512 bytes 
I/O size (minimum/optimal): 512 bytes / 512 bytes 
Disk identifier: 0xb532b532

Device Boot Start End Blocks Id System 
/dev/sda1 * 63 62926604 31463271 7 HPFS/NTFS/exFAT 
/dev/sda2 62926605 488392064 212732730 f W95 Ext'd (LBA) 
/dev/sda5 62926668 176184854 56629093+ 7 HPFS/NTFS/exFAT 
/dev/sda6 176184918 289443104 56629093+ 7 HPFS/NTFS/exFAT 
/dev/sda7 289443168 402701354 56629093+ 7 HPFS/NTFS/exFAT 
/dev/sda8 402704384 403728383 512000 83 Linux 
/dev/sda9 403730432 488390655 42330112 8e Linux LVM

现在，要把/dev/sda7 ，即F盘的NTFS格式转换成ext4格式，用linux使用。方法： 

umount /dev/sda7

用fdisk转换分区格式，改为8e 
fdisk /dev/sda 
Command (m for help): m (这里有m可以看一下各个参数的意思) 
Command action 
a toggle a bootable flag 
b edit bsd disklabel 
c toggle the dos compatibility flag 
d delete a partition 
l list known partition types 
m print this menu 
n add a new partition 
o create a new empty DOS partition table 
p print the partition table 
q quit without saving changes 
s create a new empty Sun disklabel 
t change a partition's system id //这个t就是偶们要用的 
u change display/entry units 
v verify the partition table 
w write table to disk and exit 
x extra functionality (experts only)

下面就是要用t命来修改下分区的id 
Command (m for help): t 
Partition number (1-10): 7 //这个是分区号 
Hex code (type L to list codes):8e // 8e是Linux LVM 的id，可以敲一个“L”查看一下，这样分区的格式就转换完啦。
Command (m for help): w 
可以看到/dev/sda7分区

格式化分区： 
mkfs.ext4 /dev/sda7

创建/Home/jackzou19目录： 
mkdir /Home/jackzou19

挂载分区： 
mount /dev/sda7 /home/jackzou19 

然后挂载好，现在的情况如下：
[root@fedora15 zou]# df -h
 
文件系统 容量 已用 可用 已用%% 挂载点 
rootfs 36G 9.6G 25G 29% / 
udev 1.9G 0 1.9G 0% /dev 
tmpfs 1.9G 2.9M 1.9G 1% /dev/shm 
tmpfs 1.9G 732K 1.9G 1% /run 
/dev/mapper/vg_fedora15-lv_root 
36G 9.6G 25G 29% / 
tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup 
tmpfs 1.9G 0 1.9G 0% /media 
/dev/sda8 485M 70M 390M 16% /boot 
/dev/mapper/vg_fedora15-lv_root 
36G 9.6G 25G 29% /tmp 
/dev/mapper/vg_fedora15-lv_root 
36G 9.6G 25G 29% /var/tmp 
/dev/mapper/vg_fedora15-lv_root 
36G 9.6G 25G 29% /home 
/dev/sda7 54G 180M 51G 1% /home/jackzou19 
/dev/sda6 55G 12G 43G 22% /media/Life 
/dev/sda5 55G 38G 17G 70% /media/My 
/dev/sda1 31G 27G 3.6G 89% /media/Fuck

fuck my life 分别对应这windows系统下的C、D、E盘。

# df -lh 
发现新挂载的硬盘已经在了。


最后设置系统自动加载
[root@fedora15 zou]# cat /etc/fstab

# 
# /etc/fstab 
# Created by anaconda on Wed Aug 10 09:42:30 2011 
# 
# Accessible filesystems, by reference, are maintained under '/dev/disk' 
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info 
# 
/dev/mapper/vg_fedora15-lv_root / ext4 defaults 1 1 
UUID=9cdeb21c-7032-431d-acd5-06b49037f86e /boot ext4 defaults 1 2 
/dev/mapper/vg_fedora15-lv_swap swap swap defaults 0 0 
/dev/sda7 /home/jackzou19 ext4 defaults 1 2 
tmpfs /dev/shm tmpfs defaults 0 0 
devpts /dev/pts devpts gid=5,mode=620 0 0 
sysfs /sys sysfs defaults 0 0 
proc /proc proc defaults 0 0


http://blog.csdn.net/nianhongmin/article/details/27818195



========================================
|-- 实战：win10上的ubuntu虚拟机添加共享文件夹
----------------------------------------
1. 安装增强包
菜单 设备 - 安装增强功能。


2. 设置

设置 - 共享文件夹；
路径 选择其他，选择win10中的文件夹
共享文件夹名称
勾选 自动挂载 固定分配。

在虚拟机首页 明细 中，可看到 共享文件夹，如果为 空，表示有问题。


3. 挂载
(1) 在老版的virtualbox中，需要先创建目录挂载共享文件夹：
$ sudo mkdir /mnt/share

然后进行手动挂载：
$ sudo mount -t vboxsf shared /mnt/share/
其中shared为之前设置的共享文件夹名称，/mnt/share为先前创建的目录路径。
但这在新版VirtualBox中行不通，出现如下错误：
/sbin/mount.vboxsf: mounting failed with the error: Protocol error

(2) 查看发现已经自动挂载
$ df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            971M     0  971M   0% /dev
00              243G  4.0G  239G   2% /media/sf_00






4. 修改权限 
(1) 这样不好使
$ sudo chown george george /media/sf_00

(2) 添加当前用户到vboxsf组
此时点击共享文件夹可以看到，“您没有查看sf_shared内容所需的权限”，这是因为当前用户还没有被添加到vboxsf组中，使用命令：
$ sudo adduser george vboxsf
添加完成后在此重启Ubuntu即可（必须重启）。






5. 添加快捷方式
$ cd 
$ ln -s /media/sf_00 share

这样就可以方便的访问共享目录了。
$ cd 
$ ls share 



至此完成了VirtualBox中Ubuntu与Windows本机的文件夹共享设置。










========================================
|-- Ubuntu下挂载U盘或Windows系统下其他盘符的操作方法
----------------------------------------

1.查看当前所有磁盘信息，找到U盘的设备标示，例如：/dev/sdb

具体操作方法：
（1）在终端中输入：  sudo fdisk -l 命令后回车，查看当前所有磁盘信息。
（2）查看U盘或你需要查找的磁盘信息，可以通过已知磁盘大小进行排除。

这个信息查看后，可能会类似看到下面信息：
Disk /dev/sdb1: 2006 MB, 2006458463 bytes




2.挂载U盘到指定节点
（1）简单起见，在/home/xl/在下新建目录：media/u,然后我们把 U 盘挂载在 media/u 目录下

若U盘格式是FAT的，可以通过如下命令执行
# mount  -t vfat /dev/sdb1 /media/u

若是 ntfs 格式的U盘，则类似如下：
# sudo mount -t ntfs-3g /dev/sdb1 media/u

/media/u 为你要挂载到的节点，这个你可以随便指定之后你就可以通过 cd media/u  访问U盘了。




3.卸载u盘
输入命令：# sudo umount  media/u U盘卸载了
（注意：此时不能够在media/u目录下输入前面的卸载命令，否则系统会认为你的“设备忙”而拒绝U盘的卸载）。




========================================
|-- 在virtualbox中装好Ubuntu后，发现硬盘空间太小，怎样才能增加硬盘容量？那就是再建一个硬盘
----------------------------------------
  在virtualbox中装好Ubuntu后，发现硬盘空间太小，怎样才能增加硬盘容量？那就是再建一个硬盘：
1. 添加新硬盘
     设置 -> Storage -> SATA控制器->右击，选择&ldquo;添加虚拟硬盘&rdquo;
     然后，根据需求创建合适的硬盘
2. 重启虚拟机
     查看现有系统的磁盘空间
        sudo fdisk -l
     可看到新加的虚拟硬盘，一般名为：Disk /dev/sdb
3. 给新加的硬盘分区
        fdisk /dev/sdb
     键入m,可看到帮助信息
        command (m for help):m


执行上面的命令后，会进入输入模式，分别选择 n ,p, ....中间默认，最后别忘了输入 w 保存分区。
磁盘分区成功后，再次使用 fdisk 命令查看，可以看到多了一个 SDB1 磁盘分区。
# fdisk -l

        
     增加新分区
        command (m for help):n  
     选择基本分区，输入：p
     建一个分区
        Partition number(1-4):1 
     回车
        First cylinder (1-15908,default 1):Enter
     写入并退出
        command (m for help):w
4. 格式化磁盘分区
     用ext4格式对/dev/sdb1进入格式化
        sudo mkfs.ext4 /dev/sdb1
		
        我用的是：# mkfs -t ext4 /dev/sdb1
		
		
		
5. 挂载分区
将新的磁盘存储空间挂载到一个空目录下，最好是新建的空目录，不然原来目录上的文件会消失。

     创建新的挂载点
        sudo mkdir /work
     将新磁盘分区挂载到/work目录下
        sudo mount -t ext4 /dev/sdb1 /work
     查看挂载
        df -h
     可以看到新加的硬盘：/dev/sdb1
     通过 $du -sh /work 命令查看，也发现新挂载的目录有足够大的空间了。

$ df -lhT
/dev/sdb1      ext4      197G   37G  151G  20% /work


6. 开机自动挂载
     修改文件
            sudo vim /etc/fstab
     在最后一行加入：
            /dev/sdb1 /work ext4 errors=remount-ro 0 1
            我用的： 
            /dev/sdb1 /work ext4 defaults 0 0
     完成!
 
refer: http://blog.csdn.net/langxianwenye/article/details/50828289


https://blog.lmlphp.com/archives/118/How_to_expand_Ubuntu_disk_in_VirtualBox_virtual_machine






========================================
Ubuntu 安装程序
----------------------------------------


========================================
|-- 报错： Ubuntu中Could not get lock /var/lib/dpkg/lock解决方案
----------------------------------------

1. 在Ubuntu中，有时候运用sudo  apt-get install curl 安装软件时，会出现一下的情况
E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?

2. 问题原因：主要是因为apt还在运行。

3. 解决方案：杀死所有的apt进程。
(1) 查找所有apt相关的进程，并用命令杀死。
$ ps afx|grep apt
15518 ?        RN     0:05          |   |   \_ /usr/bin/python3 /usr/lib/update-notifier/apt-check
15533 pts/25   S+     0:00  |   \_ grep --color=auto apt
13518 ?        Ss     0:00 /bin/sh /usr/lib/apt/apt.systemd.daily install
13522 ?        S      0:00  \_ /bin/sh /usr/lib/apt/apt.systemd.daily lock_is_held install
13612 ?        SNl    0:07 /usr/bin/python3 /usr/sbin/aptd

$ sudo kill -9 15518
$ sudo kill -9 13522
$ sudo kill -9 13522
$ sudo kill -9 13612



(2) 删除锁定文件

锁定的文件会阻止 Linux 系统中某些文件或者数据的访问，这个概念也存在于 Windows 或者其他的操作系统中。
一旦你运行了 apt-get 或者 apt 命令，锁定文件将会创建于 /var/lib/apt/lists/、/var/lib/dpkg/、/var/cache/apt/archives/ 中。
这有助于运行中的 apt-get 或者 apt 进程能够避免被其它需要使用相同文件的用户或者系统进程所打断。当该进程执行完毕后，锁定文件将会删除。
所以：
　　1：移除对应目录下的锁文件：
　　2：强制重新配置软件包：
　　3：更新软件包源文件：
$ sudo rm /var/lib/dpkg/lock
$ sudo dpkg --configure -a
$ sudo apt update


(3) 问题解决，执行apt install curl 命令成功。



https://www.cnblogs.com/yun6853992/p/9343816.html




========================================
RPM软件包管理(CentOS)
----------------------------------------
RPM(Redhat Package manager)是针对CentOS系统的软件包格式。
此外，还有yum和源代码格式管理软件。
Ubuntu下是apt-get。CentOS下是yum。

	绝大多数开源软件都是直接以源代码形式发布的。源代码一般会被打包成tar.gz的归档压缩文件。程序源代码需要编译成为二进制形式之后才能运行使用。

Linux软件安装
对于绝大部分软件安装,使用如下步骤即可: 
	1) tar -zxvf ab.tar.gz 或者 tar -jxvf ab.tar.bz2 #解压
	2)cd ab #进入文件夹

	3)./configure [—prefix=] #配置安装环境 
	4)make #编译 
	5)make install #安装
	
?对于一些小部分软件安装,需要使用其他方法安装,如:需要使用cmake安 装、直接使用make安装等等
?安装软件前,最好先阅读README && INSTALL两个文件
?遇到不会安装的：可以求助社区或者作者

	源代码基本编译流程：
	1.	./configure	检查编译环境、相关库文件以及配置参数并生成makefile
	2.	make	对源代码进行编译，生成可执行文件。
	3.	make install	将生成的可执行文件安装到当前计算机中。

	源代码形式的软件使用起来较为麻烦，但是兼容性及可控制性较好。（看着只有三步，但是大多数第一步就进行不下去了！需要大量的经验，主要是依赖关系一般很复杂。即便顺利，一个10M的软件需要编译十几分钟。太漫长了，于是亟待简化Linux下软件安装这个问题！）
	开源软件一般会大量使用其他开源软件的功能，所以开源软件会有大量的依赖关系（使用某软件需要先安装其他软件）。

	使用RPM软件包管理软件
	源代码形式的缺点：操作复杂、编译时间较长、极容易出现错误！
	源代码形式的优点：使用所有系统、可定制。
	为了方便使用，Erik Troan 和 Marc Ewing开发了RPM(redhat Package Manager)。RPM通过将源代码基于特定平台系统编译为可执行文件，并保存依赖关系，来简化开源软件的安装管理。

	RPM设计目标如下：
	- 使用简单
	- 使用单一软件包格式发布文件（rpm文件）
	- 可升级
	- 追踪软件依赖关系
	- 基本信息查询
	- 软件验证功能
	- 支持多平台
	


rpm包有一个约定的命名规范：
	softName-1.2.0-30.el6.i686.rpm
		softName：软件名。
		1.2.0-30：版本号。
		el6：针对red hat enterprize release 6编译的。
		i686：针对32位系统。 x86_64是针对64位的。
	特别注意平台和bits。	
		
rpm基础命令：
	安装命令：rpm -i software.rpm 
	卸载软件：rpm -e software 
	升级形式安装：rpm -U software-new.rpm 
	rpm支持通过http、ftp协议安装软件
	rpm -ivh http://www.xxx.net/software.rpm 
可以加入以下参数：
	-v 显示相关信息
	-h 显示进度条
	

RPM会保存软件相关的很多信息，所以支持很多查询功能。
	rpm -qa 列出所有安装的rp软件 
	rpm -qi desktop-effect	软件信息，安装日期、版本号等
	rpm -ql	desktop-effect 列出属于某软件的文件
	rpm -qf /usr/share/doc/desktop-effects-0.8.4 查询某个文件属于哪个软件包
	
	查询安装之前的rpm信息加参数p即可：
	rpm -qip ncbi-blast-2.4.0+-2.x86_64.rpm		安装之前rpm包的信息
	rpm -qlp ncbi-blast-2.4.0+-2.x86_64.rpm 	查询安装之后可能添加的文件。

	
RPM验证：
防止传播过程中的恶意修改，为了安全现代系统都加入了对软件完整性的校验。
验证一般使用非对称加密算法，所以需要一个秘钥。

导入秘钥：
rpm --import RPM-GPG-KEY-CentOS-6 

验证rpm文件：
rpm -K software.rpm 
例子：$ rpm -K ncbi-blast-2.4.0+-2.x86_64.rpm 
ncbi-blast-2.4.0+-2.x86_64.rpm: sha1 md5 OK

验证已安装的软件是否被修改过：
rpm -V software 


========================================
|-- Yum(Yellowdog Updater, Modified)解决依赖关系
----------------------------------------
rpm软件包形式管理软件虽然方便，但是需要手工解决软件包的依赖关系。很多时候安装一个软件需要首先安装一个或多个（有时多达上百个）其他软件，手工解决时很复杂。使用YUM可以解决这个问题。

Yum(Yellowdog Updater, Modified)是一个rpm的前端程序，主要目的是设计用来自动解决rpm的依赖关系问题。其特点如下：
	- 自动解决依赖关系
	- 可以对rpm进行分组，并基于组进行安装操作
	- 引入仓库概念，支持多个仓库
	- 配置简单



###
仓库概念
yum引入了仓库（repo）的概念，仓库用来存放所有现有的rpm软件包，当使用yum安装一个rpm软件的时候，如果存在依赖关系，会自动在仓库中查找依赖软件并安装。

仓库可以是本地的，也可以通过http、ftp或nfs形式使用集中地、统一的网络仓库。




###
yum仓库的配置
yum使用仓库保存管理rpm软件包，仓库的配置文件保存在/etc/yum.repos.d/目录下，格式如下：

[zzuRepo]
name=This is zzu rpm soft repo
mirrorlist=http://mirrors.zzu.edu.cn/centos/
#baseurl=http://mirror.centos.org/centos/
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
这里有完整版本：http://mirrors.zzu.edu.cn/wiki/centos/download/CentOS6-Base-zzu.repo

[base]
name=CentOS-$releasever - Base
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os&infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
	- 仓库可以使用file、http、ftp、nfs方式。
	- yum配置文件必须以.repo结尾，名字随便起。
	- 一个配置文件内可以保存多个仓库的配置信息。
	- /etc/yum.repos.d/目录下可以存在多个配置文件。
	


###
更换repo的方法：
参考
# http://blog.chinaunix.net/uid-23683795-id-3477603.html
# http://jingyan.baidu.com/article/e8cdb32b634c8637052bad04.html
# http://mirrors.zzu.edu.cn/wiki/centos.html
切换root用户，首先备份/etc/yum.repos.d/CentOS-Base.repo 
# cd /etc/yum.repos.d/
# mv CentOS-Base.repo CentOS-Base.repo.backup

下载对应版本repo文件, 放入/etc/yum.repos.d/,并改名为CentOS-Base.repo(操作前请做好相应备份)
# wget http://mirrors.zzu.edu.cn/wiki/centos/download/CentOS6-Base-zzu.repo
# mv CentOS6-Base-zzu.repo CentOS-Base.repo

运行以下命令生成缓存
# yum clean all # 清除YUM缓存： /var/cache/yum目录。
# yum makecache






###
yum基本命令
	yum install software-name	安装指定如软件
	yum remove software-name	卸载指定如软件
	yum update software-name	升级指定如软件

比如：安装一个vnc的客户端：
yum install tigervnc
可以通过 vncviewer 命令启动该vnc客户端。

查看一下刚安装软件的信息：
rpm -qi tigervnc

删除该软件：
yum remove tigervnc


yum查询：如果没有记住名字全称
	yum search keyword	搜索
	yum list (all|installed|recent|updates) 列出全部、安装的、最近的、软件更新
	yum info packageName 显示指定软件的信息(和rpm -qi tigervnc 一样，)

	yum whatprovides filename	查询哪个rpm软件包包含目标文件filename

[wangjl@centOS6 ~]$ yum search vnc

[wangjl@centOS6 ~]$  yum whatprovides /etc/ethers 







###
创建yum仓库

可以通过以下方式手工创建yum仓库：
	1.将所有rpm文件拷贝到一个文件夹中；
		# mkdir /linux-yum
		# cp -rv /media/CentOS_6.7_Final/Packages/* /linux-yum/ 
		# ls| wc #统计文件个数
		
	2.通过rpm命令手工安装createrepo软件；
		# rpm -ivh createrepo #发现在CentOS_6.7_Final的光盘中已经没有这个包了。
		# yum install createrepo #通过远端安装

	3.运行命令createrepo -v /rpm-directory
		# createrepo -v /linux-yum/ #会自动创建索引文件/repodata/
		# cd ./repodata/ 
		# ls #可以查看产生的索引文件
		
	在/etc/yum.repos.d/目录下新建.repo文件
	# cd /etc/yum.repos.d/ 
	# vim CentOS-Disk.repo 
	写入如下文本
[Local]
name=local
baseurl=file:///linux-yum/ 
enabled=1
gpgcheck=0
	通常还需要运行一下清除缓存：
	# yum clean all #每次运行安装或者查询命令会重建yum缓存。
	# yum list #就会列出现有的rpm包。





	4.如果有分组信息，则在运行命令的时候使用-g参数指定分组文件
		createrepo -g /tmp/*comps.xml /rpm-directory
	CentOS/RHEL的分组信息保存在光盘repodata/目录下，文件名以comps.xml结尾的xml文件
	
	创建好之后本机可以通过file方式直接使用，如果需要作为对外的yum仓库服务器，可以通过http、ftp或nfs协议共享除去。
	
	
	图形界面安装程序：CentOS右上角 系统-管理-添加删除程序，也是使用的yum来管理软件的。
#



update 和 upgrade 的区别
	UPDATE: update is used to download package information from all configured sources.
	UPGRADE:  upgrade is used to install available upgrades of all packages currently installed on the system from the sources configured via sources.list

	yum -y update  #升级所有包，改变软件设置和系统设置,系统版本内核都升级。
	yum -y upgrade #升级所有包，不改变软件设置和系统设置，系统版本升级，内核不改变。
#

安装软件之前, 可以不upgrade, 但是要update.
前者是更新整个仓库的版本信息，后者是升级软件包。


	
========================================
|-- linux软件的安装/卸载/升级/添加环境变量(Ubuntu)
----------------------------------------
安装ssh服务
sudo apt install openssh-server
查看服务是否开启
ps -e|grep ssh
如果有sshd说明服务已经开启。


软件名字查找
sudo apt search 软件关键词


软件安装
sudo apt-get install 软件名字




查找软件安装位置：在路径PATH中查找所有同名软件。
wangjl@Ubuntu1404:~$ whereis mysql
mysql: /etc/mysql /usr/include/mysql
wangjl@Ubuntu1404:~$ whereis php
php:
wangjl@Ubuntu1404:~$ whereis R
R: /usr/bin/R /usr/lib/R /etc/R /usr/local/lib/R /usr/share/R /usr/share/man/man1/R.1.gz


查找软件运行目录：返回路径中第一个同名软件。
$ which ssh
/usr/bin/ssh






========================================
|-- linux软件添加环境变量或软链接(Ubuntu)
----------------------------------------
诸如bowtie、bismark等程序，只能在其目录下使用，不能再其他目录下使用，这样很不方便。
想在任何目录下使用该软件，有两种方式：添加环境变量或软链接。




######################
# 方法1：添加环境变量
######################
Ubuntu下设置环境变量有三种方法，一种用于当前终端，一种用于当前用户，一种用于所有用户。
最后一种需要root权限。


(1)用于当前终端：
在当前终端中输入：export PATH=$PATH:<你的要加入的路径>
不过上面的方法只适用于当前终端，一旦当前终端关闭或在另一个终端中，则无效。
  export NDK_ROOT=/home/jiang/soft/Android-ndk-r8e 只能在当前终端使用。



(2)[推荐]用于当前用户：
在用户主目录下有一个 .bashrc 隐藏文件，可以在此文件中加入 PATH 的设置如下：
vi ~/.bashrc
加入：
export PATH=<你的要加入的路径>:$PATH

如果要加入多个路径，只要：
export PATH=<你要加入的路径1>:<你要加入的路径2>: ...... :$PATH
当中每个路径要以冒号分隔。
这样每次登录都会生效。


本例推荐使用该方法：在当前用户的主目录下找到隐藏文件“.profile”或类似文件，在这个文件的末尾增加2行，把bowtie所在的目录加到变量PATH中，比如我增加的两行是：

export PATH=PATH:/home/clever/tools/bowtie2-2.2.6/
export PATH=PATH:/home/clever/tools/bismark_v0.14.5/

注销一下，这样就可以在当前用户的主目录下的任何目录下使用bismark和bowtie2了。




(3)用于所有用户：
sudo vi /etc/profile 

加入：
export PATH=<你要加入的路径>:$PATH
就可以了。

终端输入：echo $PATH 可以查看环境变量

注意，修改环境变量后，除了第一种方法立即生效外，第二第三种方法要立即生效，可以
$ source ~/.bashrc
或者注销再次登录后就可以了！

建议如果可能，还是注销再登录，因为每source一次，PATH中有些变量就复制一次，不美观。一般不影响功能。






######################
# 方法2：在路径目录中添加软连接
######################

先查看当前环境变量查找的地点：
wangjl@ubt16:~$ echo $PATH
/home/wangjl/bin:/home/wangjl/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

当输入命令时，这些bin文件夹下的可执行文件会被依次查找。
当前用户可用的程序就可以放到/home/wangjl/bin下，全部用户都可见的一般都是安装在到/usr/share和/usr/local/bin中。
$ ln -s /path/to/fastQC/fastqc /home/wangjl/bin/fastqc




######################
# 方法3：修改PATH文件【不推荐，需要root权限】
######################
添加系统级环境变量 https://jingyan.baidu.com/article/db55b609a3f6274ba30a2fb8.html
$ sudo vim /etc/environment
后引号的前面加上
:/home/wangjl/Soft/sratoolkit.2.8.2-1-ubuntu64/bin
$source /etc/environment

这样以后PATH变量都会改变为修改后的。




环境变量：http://blog.csdn.net/z1002137615/article/details/50174567








========================================
|-- 设置软件别名 alias
----------------------------------------
别名可以简化命令，方便记忆。


1. 别名设置方式
alias vi="vim"  #输入vi其实运行的就是vim。

1)直接在命令中输入，则只在当前会话中起作用。

2)在 ~/.bashrc 末尾添加一行，注销再登录，则对该用户都有效。


2. 也可以连参数一起简化
alias la="ls -al --color=auto"



3.使用type 或 which 查找命令到底是本身，还是别名
$ type mkdir  #原始
mkdir is /usr/bin/mkdir

$ type grep  #别名
grep is aliased to `grep --color=auto'

$ which grep
alias grep='grep --color=auto'
	/usr/bin/grep
#



refer:
https://www.cnblogs.com/YMaster/p/9788938.html





========================================
linux程序前后台切换、查看、关闭
----------------------------------------

1.后台运行

(1)如果程序在前台运行中，可以通过ctrl + z来把程序暂停，然后用bg %[number]命令把这个程序放到后台运行 
$ sleep 10
^Z
[1]+  Stopped                 sleep 10
#ctrl+z 挂起当前任务

$ bg %1
[1]+ sleep 10 &


(2)&命令
&是指在后台运行，但当用户退出(挂起)的时候，命令自动也跟着退出。

功能：加在一个命令的最后，可以把这个命令放在后台执行，返回pid，可以通过 ps -ef|grep PID号 查看命令运行状态。 
$ sleep 10 &
[1] 15514



(3)nohup命令
功能：不挂断的运行命令，但是无法立刻获得shell的交互能力
$ nohup --help
Usage: nohup COMMAND [ARG]...
  or:  nohup OPTION
Run COMMAND, ignoring hangup signals.


那么，我们可以巧妙的吧他们结合起来用，这样就能立刻获得shell交互，同时使命令永久的在后台执行。
用户登出再连接，使用ps -ef发现它还在运行。
长命令必须写在shell文件中，否则nohup不起作用
nohup执行会产生日志文件 nohup.out，默认在当前目录，如果当前目录不可写，那么自动保存到家目录中。也可以自定义位置。

常用格式：
$ nohup COMMAND & #一般格式
$ nohup python3 test_nohup.py > logfile.log &  #自定义日志文件名字，错误输出到哪？ //todo
$ nohup command > myout.file 2>&1 & //log输出到myout.file，并将标准错误输出重定向到标准输出，再被重定向到myout.file
或者 
$ nohup bash xx.sh > myout.file 2>error.log &



实例
$ cat a.sh
sleep 5
date
$ bash a.sh
## Fri May 10 14:39:13 CST 2019
$ nohup bash a.sh >sleep.log &  #后台永续运行
[1] 31727
$ nohup: ignoring input and redirecting stderr to stdout
一段时间后运行结束
[1]+  Done                    nohup bash a.sh > sleep.log
日志文件 sleep.log 内容是 Fri May 10 14:39:37 CST 2019







2.查看后台运行的程序
两个命令可以用，jobs和ps,区别是jobs用于查看当前终端后台运行的任务，换了终端就看不到了。而ps命令用于查看瞬间进程的动态，可以看到别的终端运行的后台进程。

(1)jobs命令： 查看当前终端后台运行的任务
$ sleep 10 &
[1] 16015
$ jobs
[1]+  Running                 sleep 10 &


jobs -l选项可显示当前终端所有任务的PID，jobs的状态可以是running，stopped，Terminated。+ 号表示当前任务，- 号表示后一个任务。
-l参数 lists process IDs in addition to the normal information
#好像-l参数没啥用，加和没加没啥区别。


$ jobs #带+表示最新的jobs；带-表示次新的jobs；其他jobs不带符号
[2]   Done                    sleep 20
[3]   Running                 sleep 20 &
[4]   Running                 sleep 20 &
[5]-  Running                 sleep 20 &
[6]+  Running                 sleep 20 &



(2)ps命令：查看当前的所有进程
ps -aux | grep "test.sh"  
-a:显示所有程序;  -u:以用户为主的格式来显示;   -x:显示所有程序，不以终端机来区分
-e:Select all processes.  Identical to -A;
-f:Do full-format listing.

$ sleep 120 &
[1] 6164

$ ps -aux |grep "sleep 120"
wangjl    6164  0.0  0.0   6176   736 pts/3    S    14:56   0:00 sleep 120

$ ps -ef|grep "sleep" #可以按照命令关键词查进程
$ ps -ef|grep 6164 #也可以按照进程号查进程
wangjl    6164 10693  0 14:56 pts/3    00:00:00 sleep 120






3.fg将程序放到前台运行
$ sleep 10 &
[1] 16426
$ fg %1
sleep 10





4.kill 终止程序运行
(1)通过jobs命令查看后台运行的jobnum，然后执行 kill %jobnum
(2)通过ps命令查看进程号PID，然后执行 kill PID 或  kill -9 PID
(3)前台进程的终止: Ctrl+c

$ jobs
[1]-  Running                 sleep 20 &
[2]+  Running                 sleep 30 &

$ kill %1
$ jobs
[1]-  Terminated              sleep 20
[2]+  Running                 sleep 30 &

$ ps -aux |grep sleep
wangjl   11752  0.0  0.0   6176   760 pts/3    S    15:19   0:00 sleep 100
$ kill -9 11752
[1]+  Killed                  sleep 100 #kill -9 PID




另外有两个常用的ftp工具ncftpget和ncftpput，可以实现后台的ftp上传和下载，这样我就可以利用这些命令在后台上传和下载文件了。

refer:
https://blog.csdn.net/luckywang1103/article/details/80984985







========================================
|-- CentOS下的htop命令
----------------------------------------
htop比top命令更直观的显示cpu和内存的状态，并能显示完整命令。
Ubuntu下直接apt-get install htop 即可安装htop命令。而CentOS下并没有如此简洁的安装方法。

本文CentOS版本号为6.7。

#一个可选的方法是：图形化监视界面	
$ gnome-system-monitor

一般开源项目托管在sourceforge上面，当然也有些托管在github上，但github最近才火起来，所以sourceforge上多一些成熟的项目。
第一步、找到sourceforge上的htop页面。
第二步、找到文件所在的目录，复制地址，使用wget命令下载。


###########################################
# 请使用root安装程序包
###########################################
# 安装htop命令 http://www.sanduoyun.com/vpshj/htop.html
# download:https://sourceforge.net/projects/htop/
wget http://heanet.dl.sourceforge.net/project/htop/htop/1.0.2/htop-1.0.2.tar.gz

#解压缩
tar -xzvf htop-1.0.2.tar.gz

#配置
cd htop-1.0.2
./configure

# 失败！！ 提示需要安装依赖包libncursesw (ncurses:http://invisible-island.net/ncurses/announce.html)
wget ftp://invisible-island.net/ncurses/ncurses.tar.gz
tar -xzvf ncurses.tar.gz
cd ncurses-5.9
./configure
make 
make install

# 再次安装htop
cd htop-1.0.2
./configure --disable-unicode
make 
make install

# 安装完毕，应清除编译过程中产生的临时文件和配置过程中产生的文件。键入如下命令：
make clean   
#make distclean   
至此，软件的安装结束





如果您想每次使用top命令直接打开htop。
#vi  /root/.bashrc
if [ -f /usr/local/htop/bin/htop ]; then
  alias top='/usr/local/htop/bin/htop'
fi
#source /root/.bashrc



$ htop #即可查看

常用选项：
	-C –no-color 使用一个单色的配色方案。
	-d –delay=DELAY 设置延迟更新时间，单位秒。
	-h –help 显示htop命令帮助信息。
	-u –user=USERNAME 只显示一个给定的用户的过程。
	-v –version 显示版本信息

建议man一下，man很详细。

另外还在使用时
/:搜索字符
u:显示某个用户的进程，在左侧可以选项
t:显示树形结构
h ： 显示帮助
H ： 显示/隐藏用户线程
K ： 显示/隐藏内核线程

选择某一进程，按s:用strace追踪进程的系统调用

P、T、M和top下是一样的，按CPU,Time+、Memory使用排序。

下面有F1~F10的功能和对应的字母快捷键。
Shortcut Key	Function Key	Description
h	F1	Invoke htop Help
S	F2	Htop Setup Menu
/	F3	Search for a Process
I	F4	Invert Sort Order
t	F5	Tree View
>	F6	Sort by a column
[	F7	Nice - (change priority)
]	F8	Nice + (change priority)
k	F9	Kill a Process
q	F10	Quit htop




refer: 
http://blog.sina.com.cn/s/blog_9f1c09310101aa5z.html
http://www.centoscn.com/image-text/install/2014/0609/3112.html








========================================
|-- 杀掉进程 kill: terminate a process (使用信号控制)
----------------------------------------

kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用 SIGKILL(9) 信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。


1. 常用命令

(1) 彻底杀死进程
$ kill -9 端口号

(2) 批量杀死命令中带某个关键词“Run.R”的进程
$ ps -aux | grep Run.R | awk '{print $2}' | xargs -i kill -9 {}


(3) 杀死指定用户所有进程

$ kill -9 $(ps -ef | grep hnlinux) //方法一 过滤出hnlinux用户进程 

$ kill -u hnlinux //方法二



2. 选项
kill [-s <信息名称或编号>][程序]　或　kill [-l <信息编号>]

最常用的信号是：
1 (HUP)：重新加载进程。
9 (KILL)：杀死一个进程。
15 (TERM)：正常停止一个进程。


(1) 显示信号

$ kill -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX

$ kill -l SIGUSR2
12



(2) 一个简单直接的重启 php-fpm 的方法：
先查看php-fpm的master进程号
$ ps aux | grep php-fpm | grep master | grep -v grep
root     13225  0.0  0.0 204820  7508 ?        Ss   09:37   0:01 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)
You have new mail in /var/spool/mail/root

重启php-fpm:
$ kill -USR2 13225  
我试了一下，确实重启了，新配置文件生效了，但是进程号不变。


INT, TERM 立刻终止
QUIT 平滑终止
USR1 重新打开日志文件
USR2 平滑重载所有worker进程并重新载入配置和二进制模块




ref:
https://blog.csdn.net/zhangkaiadl/article/details/92763973




========================================
|-- linux下杀死进程（kill）的N种方法、杀掉僵死进程
----------------------------------------
http://blog.csdn.net/andy572633/article/details/7211546

1.常规篇：
　首先，用ps查看进程，方法如下：

$ ps -ef

……
smx       1822     1  0 11:38 ?        00:00:49 gnome-terminal
smx       1823  1822  0 11:38 ?        00:00:00 gnome-pty-helper
smx       1824  1822  0 11:38 pts/0    00:00:02 bash
smx       1827     1  4 11:38 ?        00:26:28 /usr/lib/firefox-3.6.18/firefox-bin

或者：

$ ps -aux

……

smx       1822  0.1  0.8  58484 18152 ?        Sl   11:38   0:49 gnome-terminal
smx       1823  0.0  0.0   1988   712 ?        S    11:38   0:00 gnome-pty-helper
smx       1827  4.3  5.8 398196 119568 ?       Sl   11:38  26:13 /usr/lib/firefox-3.6.18/firefox-bin

此时如果我想杀了火狐的进程就在终端输入：

$ kill -s 9 1827

其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。各个终止信号及其作用见附录。
1827则是上面ps查到的火狐的PID。

简单吧，但有个问题，进程少了则无所谓，进程多了，就会觉得痛苦了，无论是ps -ef 还是ps -aux，每次都要在一大串进程信息里面查找到要杀的进程，看的眼都花了。




2.进阶篇：

把ps的查询结果通过管道给grep查找包含特定字符串的进程。管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。

$ ps -ef | grep firefox
smx       1827     1  4 11:38 ?        00:27:33 /usr/lib/firefox-3.6.18/firefox-bin
smx      12029  1824  0 21:54 pts/0    00:00:00 grep --color=auto firefox

这次就清爽了。然后就是

$kill -s 9 1827


(2) 杀掉所有 带有 tail -n 的命令的进程
使用前先目测一下，防止误杀。
$ ps -aux |grep "tail -n" | awk 'NR>1{print $2}' | less 
$ ps -aux |grep "tail -n" | awk 'NR>1{print $2}' | xargs -i  kill -9 {}




3.僵尸进程: 就是先于父进程结束的子进程，父进程又不管。
通过top命令可以监视僵尸进程的数量。
或者
$ ps -aux |grep Z 
#wangjl   411451  0.0  0.0      0     0 ?        Z    16:07   0:00 [ZMQbg/45] <defunct>


僵尸进程不能被直接杀掉，要不然也不叫僵尸进程了。
kill -9 411451


查找其父进程
$ ps -ef | grep 411451
#wangjl   411451   1988  0 16:07 ?        00:00:00 [ZMQbg/45] <defunct>
其父进程pid号为1988，
$ ps -ef|grep 1988|head
wangjl     1988   1376  3 May06 ?        02:49:33 /home/wangjl/software/anaconda3/bin/python -m ipykernel_launcher -f /run/user/1012/jupyter/kernel-fadf192b-d7bd-48b6-b926-df62432c2bb0.json

发现其父进程是一个python jupyter进程，由于没有运行，所以直接杀掉该进程？
kill -9 1988 #发现僵尸进程也消失了。


批量杀死僵尸进程的父进程：
ps -A -o stat,ppid,pid,cmd | grep -e '^[Zz]' | awk '{print $2}' | xargs kill -9



https://www.cnblogs.com/reality-soul/p/6343339.html


========================================
|-- linux下4种kill某个用户所有进程的方法
----------------------------------------
在linux系统管理中，我们有时候需要kill掉某个用户的所有进程，初学者一般先查询出用户的所有pid，然后一条条kill掉，或者写好一个脚本。

实际上有4种现成的通用方法，我们以kill用户sunjh的所有进程为例。

1. pkill方式
# pkill -u sunjh


2. killall方式
# killall -u sunjh


3. ps方式
ps列出sunjh的pid，然后依次kill掉，比较繁琐.
# ps -ef | grep sunjh | awk '{ print $2 }' | sudo xargs kill -9


4. pgrep方式
pgrep -u参数查出用户的所有pid，然后依次kill
# pgrep -u sunjh | sudo xargs kill -9

https://blog.csdn.net/lihuaichen/article/details/84066359







========================================
安装: JKD, eclipse, chrome
----------------------------------------
(1)Java JDK
https://www.digitalocean.com/community/articles/how-to-install-java-on-ubuntu-with-apt-get

https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html



sudo apt-get install default-jdk
老版本jdk6：sudo apt-get install oracle-java6-installer

(2)eclipse
方法一：(缺点是安装时附加openjdk等大量程序并无法去除，优点是安装简单)
$ sudo apt-get install eclipse
方法二：(优点是安装内容清爽，缺点是配置麻烦)


(3) chrome 
$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
$ sudo dpkg -i google-chrome-stable_current_amd64.deb 
运行 
$ /usr/bin/google-chrome-stable

放快捷方式
$ ln -s /usr/bin/google-chrome-stable ~/bin/chrome





========================================
DIY一个系统内存监控(记录内存占用top10进程，并可视化)
----------------------------------------

1. 原理
# linux 下 取进程占用 cpu 最高的前10个进程
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head


# linux 下 取进程占用内存(MEM)最高的前10个进程
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head

我的改进
$ ps aux|head -1;ps aux| grep -v PID |sort -k 4nr -k 5nr | head



获取数据的方法: https://github.com/aijialin/SysMonitor
/proc/meminfo
/proc/cpuinfo
/proc/stat
/proc/net/netstat





2. 长效内存监视工具(tmux中运行): 使用python写定时脚本,2分钟记录一次，每个月一个文件;
# coding: UTF-8
import time
import subprocess

# every interval second, do cmd; Every month a log file.
# v0.2
def myTask(cmd, interval):
    while True:
        fname=time.strftime("%Y%m", time.localtime()) 
        fw=open('mem_'+fname+'.txt','a')

        mytime=time.strftime("%Y-%m-%d %H:%M:%S", time.localtime());
        (status, output)=subprocess.getstatusoutput(cmd)

        fw.write(mytime+"\n")
        fw.write(output+"\n\n")

        fw.close()
        
        print(mytime)
        time.sleep(interval)
#

cmd="ps aux|head -1;ps aux| grep -v PID |sort -k 4nr -k 5nr | head"
myTask(cmd, 120) #every 2 minutes;


日志文件大小:
一次8次，14464，则一个月 14464/8*30*24*30=39.05e6, 也就是37M, 可以接受，不过还是要定期删除的;
path: /home/wangjl/data/testCode/

(2). 查找占用最高的记录和时间
1) 最新的记录，第四列是内存
$ tail mem_202004.txt -n 13
2020-04-15 10:42:31
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
jhsun    124116 96.0  0.8 7086684 3489044 pts/20 Sl  10:24  17:36 /home/jhsun/data/biosoft/bowtie2-2.3.5-sra-linux-x86_64/bowtie2-align-s --wrapper basic-0 --mm -x /data/reference/hg38/gatk/Homo_sapiens_assembly38.fasta -S SRR6013345.sam -U /home/jhsun/data/CNVHap/data/A8/fastq/SRR6013345.fastq.gz

2) 最高记录
$ grep -v 2020 mem_202004.txt | grep -v USER |sort -k 4rn|head
yihg      56247 93.0 72.4 291306356 286619104 pts/24 R+ 13:41   7:37 shapeit -check --input-vcf new.nobiallel.yhg.rmdup.chr1.HG01855_12run.bwa_37.bam.sort.realn.bqsr.vcf.gz -M ./impute_HG01855_12run/genetic_map_chr1_combined_b37.txt --input-ref ./impute_HG01855_12run/1000GP_Phase3.sample ./impute_HG01855_12run/1000GP_Phase3_chr1.hap.gz ./impute_HG01855_12run/1000GP_Phase3_chr1.legend.gz --output-log yhg.rmdup.chr1.HG01855_12run.bwa_37.bam.sort.realn.bqsr.alignment

3) 最高纪录的时间
$ grep '\s72.4 291306356' -B 5 mem_202004.txt






3. 可视化生成pdf
(1) 使用py提取数据
# fileName: log_analysis.py
# v0.3
# howToRun: $ python log_analysis.py mem_202004
# get data, and draw system mem usage plot;

import re, time, sys, os 

def timeStr2timeStamp(strTime):
    timeArray=time.strptime(strTime, "%Y-%m-%d %H:%M:%S")
    timeStamp = int(time.mktime(timeArray))
    return(timeStamp)
#aa='2020-04-13 11:09:51'
#timeStr2timeStamp(aa)


def saveUser(userDict, cTime, fw):
    timeStamp=str(timeStr2timeStamp(cTime));
    for user,pct in userDict.items():
        fw.write(','.join([timeStamp, cTime, user,  str(pct) ])+"\n");  
#


fName='mem_202004'
if sys.argv[1].startswith('mem'):
    fName=sys.argv[1]

#/home/wangjl/data/testCode/
fr=open(fName+'.txt', 'r')
fw=open(fName+'.csv', 'w')


i=0
cTime="None-"; #当前时间
userDict={}
for lineR in fr.readlines():
    line=lineR.strip()
    
    #空行 or 标题行略过
    if line=="" or re.match('^USER', line): 
        continue;
    
    i+=1;
    if i>20:
        #break;
        pass;

    
    #if time line, update time
    if re.match('^\d{4}-',line):
        #rint('>>>>>>>>>>',i, line)
        if userDict!={}:
            saveUser(userDict, cTime, fw); #save to disc;
        
        cTime=line; #current time
        userDict={}
    else:
        arr=re.split('\s+', line); #print(i, arr[0], arr[3]) #['pdyan', '74276', '49.3', '0.9',
        user=arr[0];
        if user not in userDict:
            userDict[user]=0;
        userDict[user] += float(arr[3]) #内存累加

fr.close();
fw.close();

print('==end==, i=', i)
os.system("Rscript log_draw.R "+fName)




(2) 使用ggplot2绘图
# fileName: log_draw.R
# v0.3;
# v0.4.2; 自动白天黑夜条
# v0.4.3 控制y坐标范围0-100
# 调用方法 $ Rscript log_draw.R mem_202004

fname="mem_202004"
path2="/home/wangjl/data/testCode/"


myArgs<-commandArgs(TRUE)
if(length(myArgs)>0){
  fname=myArgs[1];
  path2=""
}

memData=read.csv(paste0(path2,fname, '.csv'), header=F)
dim(memData) #6687    4
memData$V2=as.character(memData$V2)
names(memData)=c('time','timeStr','user','pct')
head(memData)
#          V1                  V2     V3  V4
#         time             timeStr   user pct
#1 1586747391 2020-04-13 11:09:51  pdyan 0.9
#2 1586747391 2020-04-13 11:09:51 wangjl 0.7


#只保留整点的
for(i in 1:length(memData$timeStr) ){
  cTime=memData$timeStr[i]
  #分钟是00和01的保留，其余空
  if(!(substr(cTime,15,16) %in% c('00', '01') ) ){
    memData$timeStr[i]=""
    next;
  }
  hour=as.numeric(substr(cTime,12,13))
  #小时为偶数的保留，其余为空
  if(hour%%6!=0){
    memData$timeStr[i]=""
    next;
  }
}
length(memData$timeStr)
table(memData$timeStr!="")



library('ggplot2')
g=ggplot(memData, aes(x=time, y=pct, color=user) )+
  theme_classic()+
  labs(x=NULL, y="Mem usage(%)", title="Memery usage of top 10 pid every 2 minutes")+
  theme(axis.text.x=element_text(angle=60, hjust=1,size=8,color="grey50") )+ #坐标轴刻度旋转60度。
  scale_x_discrete(limits=memData$time, labels =memData$timeStr)
#g






#定义黑夜0:00-8:00
# seq(1,10,3) #86400
start=min(memData$time) #距离最小的往后最近的0点
end=max(memData$time) #距离最大的往前最近的8点

#adjust start
while(1){
  timeString=as.POSIXct(start, origin="1970-01-01");
  #print( paste(start, timeString) )
  if(substr(timeString, 15,16) %in% c('00','01') ){ #min
    if(substr(timeString, 12,13)=="00"){ #hour
      break;
    }
  }
  start=start+60
}

#adjust end
while(1){
  timeString=as.POSIXct(end, origin="1970-01-01");
  #print( paste(end, timeString) )
  if(substr(timeString, 15,16) %in% c('00','01') ){ #min
    if(substr(timeString, 12,13)=="08"){ #hour
      break;
    }
  }
  end=end-60
}

rec=data.frame(
  xmin=seq(start, end, 86400),
  xmax=seq(start, end, 86400)+28800
)
rec
#


g2=ggplot()+
  scale_x_discrete(memData$time)+
  geom_rect(data = rec, 
            aes(xmin = xmin, 
                xmax = xmax), 
            alpha = 0.1,
            ymin = -Inf, 
            ymax = Inf, 
            fill = "#000000",
            colour = "blue",
            size = 0)+
  geom_line(data=memData, aes(x=time, y=pct, color=user) )+
  theme_classic()+
  labs(x=NULL, y="Mem usage(%)", title="Memery usage of top 10 pid every 2 minutes(Grey denotes night[0:00-8:00])")+
  theme(axis.text.x=element_text(angle=60, hjust=1,size=8,color="grey50"),
        panel.background = element_rect(fill = "white")
  )+
  coord_cartesian(ylim = c(0,100))+
  scale_x_discrete(limits=memData$time, labels =memData$timeStr)
#scale_x_discrete( labels =memData$timeStr)
#g2

library('Cairo')
#CairoPNG(1200,800, file =paste0(fname,'.png'), res = 100);
CairoPDF(width=20, height=8, file =paste0(fname,'.pdf'));
#g+geom_line()
g2
g+geom_line(aes(linetype=user))
g+ geom_line()+facet_wrap(~user)+scale_x_discrete(labels = NULL)+ coord_cartesian(ylim = c(0,100))

dev.off()
print(getwd())
#






4. 把pdf显示到html

(0) 技术测试
1)##如何从机器A上ssh到机器B上，然后执行机器B上的脚本/命令？如何使之自动化完成？
思路: 
- sshpass;
- https://blog.csdn.net/weixin_34273046/article/details/90283099


示例:
USER=wangjl;
PASS_J=passwd

sshpass -p ${PASS_J} ssh -t ${USER}@j.biomooc.com<<EOF
cd /data4/wangjl/test/
python log_analysis.py mem_202004
EOF

pwd


###
2)如何获取年月
year=`date -d "0 month ago" +%Y`
month=`date -d "0 month ago" +%m`
yearMonth="${year}${month}"
echo $yearMonth





(1) 更新pdf、获取pdf脚本 updateGetShowHTML.sh
# 在一台安装有nginx的主机上通过sftp获取其他主机生成的pdf的脚本
# v0.4 自动更新其他主机信息，之后下载
# v0.5 自动获取年和月份
# Run: $ bash updateGetShowHTML.sh
# https://blog.51cto.com/gavinshaw/545611
cd /home/wangjl/web/docs/mem/

USER=wangjl;
PASS_X=passwd1
PASS_J=passwd2

year=`date -d "0 month ago" +%Y`
month=`date -d "0 month ago" +%m`
yearMonth="${year}${month}"

# step1
echo 'update X'
sshpass -p ${PASS_X} ssh -t ${USER}@x.biomooc.com<<EOF
cd /home/wangjl/data/testCode/
python log_analysis.py mem_${yearMonth}
EOF

echo 'update J'
sshpass -p ${PASS_J} ssh -t ${USER}@j.biomooc.com<<EOF
cd /data4/wangjl/test/
python log_analysis.py mem_${yearMonth}
EOF


# step2
echo 'get host X'
lftp -u ${USER},${PASS_X} sftp://x.biomooc.com:22<<EOF
cd /home/wangjl/data/testCode
lcd /home/wangjl/web/docs/mem/
get mem_${yearMonth}.pdf
bye
EOF
mv mem_${yearMonth}.pdf X_mem_${yearMonth}.pdf

echo 'get host J'
lftp -u ${USER},${PASS_J} sftp://j.biomooc.com:22<<EOF
cd /data4/wangjl/test/
lcd /home/wangjl/web/docs/mem/
get mem_${yearMonth}.pdf
bye
EOF
mv mem_${yearMonth}.pdf J_mem_${yearMonth}.pdf

# step3
echo `date`"<br>" | cat >>/home/wangjl/web/docs/mem/index.html
echo "report: http://y.biomooc.com/wangjl/docs/mem/"




(2) 在/home/wangjl/web/docs/mem/内新建index.html 
$ cat index.html 
Mem usage; update time is listed at the bottom of this page;
<hr>

x.biomooc.com<br>
<embed width="800" height="600" src="X_mem_202004.pdf"> </embed>

<hr>
j.biomooc.com<br>
<embed width="800" height="600" src="J_mem_202004.pdf"> </embed>
<hr>




(3) 可以通过web查看报告了
在C上运行脚本，分别更新A和B上内的pdf，然后下载，更新web日期，即可查看
$ bash updateGetShowHTML.sh 

http://y.biomooc.com/wangjl/docs/mem/




(4) crone定时执行，每天3,15点更新;
$ crontab -e
0 3,15 * * * bash /home/wangjl/updateGetShowHTML.sh >>/home/wangjl/web/log.txt











========================================
Ubuntu 转移地方之后不知道IP，插屏幕后不能启动
----------------------------------------
1. Ubuntu 工作站从213移动到205后，不能联网了。
Stuck in emergency mode and nothing works?
https://askubuntu.com/questions/960790/stuck-in-emergency-mode-and-nothing-works

[  0.824138] Couldn't get size: 0x800000000e
/dev/sda2: recovering journal
/dev/sda2: clean, ... files, ... blocks.
You are in emergency mode. After logging in, type "journalctl -xb" to view system logs, 
"systemctl reboot" to reboot, "systemctl default" or "exit" to boot into default mode.
Give root pasword for maintenance
(or press Control-D to continue):


然后输入 root 密码后进入了不能联网的命令行界面。
$ ping baidu.com 找不到
$ ifconfig 命令只有一个127.0.0.1信息。



$ journalctl -xb
好几屏幕，看不懂。

 
到使用systemctl status network发现网络无法正常重启，
而系统像是重启了。

$ sudo blkid 
$ cat /etc/fstab





2. 高赞回答: 不该挂载 recovery partition!


Your /etc/fstab is wrong.

First, you don't need to mount Acer-specific or recovery partitions, or the CD-ROM.
So, I'd comment out these lines...


(1)sudo -H gedit /etc/fstab
#Entry for /dev/sda3 :
#UUID=C85AA81A5AA806F2   /media/Acer ntfs-3g defaults,locale=en_US.UTF-8 0 0
# note that I commented this out and also changed the "00" to "0 0"

#Entry for /dev/sda4 :
#UUID=4ECAA8ECCAA8D18F   /media/Recovery ntfs-3g defaults,locale=en_US.UTF-8 0 0
# note that I commented this out and also changed the "00" to "0 0"

#/dev/sr0    /media/cdrom0   udf,iso9660 user,noauto 0   0


(2) and change:
#Entry for /dev/sdb1 :
UUID=0C08B30A08B2F1B6   /media/DATA ntfs-3g defaults,locale=en_US.UTF-8 00

to this:
#Entry for /dev/sdb1 :
UUID=0C08B30A08B2F1B6   /media/DATA ntfs-3g defaults,locale=en_US.UTF-8 0 0
# note the change from "00" to "0 0"

(3)that will fix your problem.
However, if you must keep sda4, then the correct line would be...

#Entry for /dev/sda4 :
UUID=003CAE413CAE3218   /media/Recovery ntfs-3g defaults,locale=en_US.UTF-8 0 0
# note the new UUID, and the "0 0" at the end of the line.



#######
Seeing your answer triggered me to start commenting stuff out in my /etc/fstab file,
when I commented out the USB thumb drive mounting part, boom! It worked! 
I replaced the thumb drive, updated my fstab file and now I'm good to go again. 




#######
1)Type your root password
2)cat /etc/fstab
3)blkid (show the device ids)
4)Now check which which UUID in /etc/fstab does not apper in blkid output
5)type 'nano /etc/fstab' and Comment out that line (Just put # infront of the line)
6)type 'reboot' (Now your problem should be fixed and after logging in successfully, you can add the current UUID in /etc/fstab file )
先注释掉 /etc/fstab 中而不在blkid中的条目，sudo nano /etc/fstab
然后reboot，等正常启动后，再在 /etc/fstab 中添加上当前在blkid中出现的uuid。



As an example, this is my output of /etc/fstab file, in which I simply commented out the line ( UUID=C3D1-3CB7 /windows vfat utf8,umask=007,gid=46 0 1), because the UUID=C3D1-3CB7 has been changed.






3. 删掉 恢复区 还是在无限重启。

I am not able to edit the file using gksudo or vim or emacs. Perhaps nano.

but the problem still continues to exist even after commenting the lines and now on ntfsfix it says that the Linux Swap partition is corrupt. Please Help. – 






4. 可能是文件系统坏了

All you have to do is perform a file system check using,

$ fsck.ext4 /dev/sda3
where sda3 can be your partition and if you are using ext3 file system, change the command as follows:
$ fsck.ext3 /dev/sda3

About the partition number, Linux shows you the partition before arriving at the prompt.

This should solve the problem.


####
fsck -f /dev/xxx
这条命令输完以后就按提示回车 


说明是磁盘错误/dev/sda1的错误，所以可以用fsck来处理错误。
输入命令：fsck -y /dev/sda1



####
Worked like a charm for me as well. Thanks a lot! 


### 
Check /etc/fstab to see what disks are mounted by default, it will be one of those that need to be checked. 
对所有挂载的磁盘都执行这个命令。Ex: sda1, sda2, sda3, sda4, and so on

Once you run the above command, you'll be prompted to fix the issue right inside the terminal itself.
Keep hitting y (for yes) until the end of the fix.
(or you can use -fy for automatically response yes to all.)



5.  https://www.virten.net/2017/08/vcsa-6-5-broken-filesystem-welcome-to-emergency-mode/
看到报错时，报错信息已经滚过去了，要回看，
so the first thing is to scroll up (Shift + Page Up)


# df -h
# cat /etc/fstab

看看相对于后者，前者缺少哪些文件？
As you can see, the /storage/log filesystem is missing in the output from df -h:


然后对缺少的检查
The next step is to run a filesystem check. Use the -y option to automatically fix all issues or press "y" for each identified error.
# e2fsck -y /dev/log_vg/log

When all errors are fixed, reboot vCenter Server Appliance:

# reboot -f
It should now be able to boot the vCenter Service Appliance.




6. 可能是显卡问题: 这是一个新显示器，不一定有显卡驱动

(1) 
先去BIOS看看有没有禁用显卡之类的。。。或者在grub(就你选择试用那里)添加nomodeset=0

(2)
https://blog.csdn.net/lh315936716/article/details/112898030
系统安装完成启动后花屏 提示Couldn't get size: 0x800000000e

原因是NVIDIA GEFORCE RTX2080显卡适配的问题

解决方法：在选择系统的时候按e进入下面第二张图界面，在quiet前面加nomodeset，
启动后打开terminal输入sudo gedit /etc/modprobe.d/blacklist.conf，输入密码后在最后一行加上blacklist nouveau。（禁用自带的显卡驱动）

保存后在terminal输入sudo update-initramfs -u 使修改生效

然后安装nvidia显卡驱动，重启后正常了







########

总结一下，如何抢救这个Del T5820 工作站的
1. 按开机键，不干涉启动失败，进入紧急模式；
2. 紧急模式注释掉 /etc/fstab 中有而 blkid 没有的设备后，reboot 重启，开始在第一个Ubuntu logo，几个小时不动。
只能再次重启。
3. F12 进入 bios，选择启动Ubuntu，然后按一下 Esc，进入grub启动选项，选第二项高级，见到3个内核及对应的recovery模式，
选最老的内核的recovery模式，然后有菜单，选择 大概倒数第二项，drop to root;
输入root密码后，进入shell。
这时候可以编辑文件，但是所有服务都是dead。

4. 输入 # init 3 回车，下一屏幕，就是正常tty1终端。
没有图形界面，但是服务都可用。
经测试，尝试远程桌面，也可以用。

5. 可能以前工程师上门装系统，用的是工作站主板上的显示器接口，该接口实验室没有可用的连接线。
而这次外接屏幕用的是 工作站独立显卡上的接口，可能没有显卡驱动。




Ubuntu查看开机日志
$ dmesg

[    0.866080] Couldn't get size: 0x800000000000000e  //就这一行是红色的
[    0.866982] MODSIGN: Couldn't get UEFI MokListRT
[    0.868654] zswap: loaded using pool lzo/zbud





ref:
https://blog.csdn.net/lk142500/article/details/82778165
https://unix.stackexchange.com/questions/347808/ubuntu-gives-message-welcome-to-emergency-mode



========================================
|-- 查看显卡及安装显卡驱动
----------------------------------------
1. 查看显卡型号
$ sudo lshw -c video
[sudo] password for wangjl: 
  *-display                 
       description: VGA compatible controller
       product: GP106GL
       vendor: NVIDIA Corporation
       physical id: 0
       bus info: pci@0000:65:00.0
       version: a1
       width: 64 bits
       clock: 33MHz
       capabilities: pm msi pciexpress vga_controller bus_master cap_list rom
       configuration: driver=nvidia latency=0  ##使用的网卡驱动名称
       resources: irq:44 memory:d7000000-d7ffffff memory:c0000000-cfffffff memory:d0000000-d1ffffff ioport:b000(size=128) memory:c0000-dffff
#
可以看到你的显卡信息，比如我的就是 product: GP106GL


$ lshw -C display
WARNING: you should run this program as super-user.
  *-display                 
       description: VGA compatible controller
       product: GP106GL
       vendor: NVIDIA Corporation
       physical id: 0
       bus info: pci@0000:65:00.0
       version: a1
       width: 64 bits
       clock: 33MHz
       capabilities: vga_controller bus_master cap_list rom
       configuration: driver=nvidia latency=0
       resources: irq:44 memory:d7000000-d7ffffff memory:c0000000-cfffffff memory:d0000000-d1ffffff ioport:b000(size=128) memory:c0000-dffff
WARNING: output may be incomplete or inaccurate, you should run this program as super-user.





2. 查看是否安装驱动


## 第一行输出便有硬件厂商、型号名称/序列号和PCI  ID。
$ lspci -vnn | grep VGA -A 12 

65:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP106GL [10de:1c30] (rev a1) (prog-if 00 [VGA controller])
	Subsystem: Dell GP106GL [Quadro P2000] [1028:11b3]
	Flags: bus master, fast devsel, latency 0, IRQ 44, NUMA node 0
	Memory at d7000000 (32-bit, non-prefetchable) [size=16M]
	Memory at c0000000 (64-bit, prefetchable) [size=256M]
	Memory at d0000000 (64-bit, prefetchable) [size=32M]
	I/O ports at b000 [size=128]
	Expansion ROM at 000c0000 [disabled] [size=128K]
	Capabilities: <access denied>
	Kernel driver in use: nvidia
	Kernel modules: nvidiafb, nouveau, nvidia_drm, nvidia

65:00.1 Audio device [0403]: NVIDIA Corporation GP106 High Definition Audio Controller [10de:10f1] (rev a1)


具体型号: Dell GP106GL [Quadro P2000]





3.查找你的显卡的驱动
(1) 去NVDIA driver search page搜索你的显卡需要的驱动型号并下载(如图）。
https://www.nvidia.com/Download/Find.aspx

Name	Version	Release Date
Linux x64 (AMD64/EM64T) Display Driver NFB	465.31	May 18, 2021
Linux x64 (AMD64/EM64T) Display Driver NVIDIA Certified	460.80	May 11, 2021
Linux x64 (AMD64/EM64T) Display Driver NFB	465.27	April 29, 2021
Linux x64 (AMD64/EM64T) Display Driver NVIDIA Certified	450.119.03	April 19, 2021



(2)为了再次确认一遍，你还可以使用这个命令查看你可以使用的驱动：
$ ubuntu-drivers devices

$ ubuntu-drivers devices
== /sys/devices/pci0000:64/0000:64:00.0/0000:65:00.0 ==
modalias : pci:v000010DEd00001C30sv00001028sd000011B3bc03sc00i00
vendor   : NVIDIA Corporation
model    : GP106GL [Quadro P2000]
manual_install: True
driver   : nvidia-driver-460-server - distro non-free
driver   : nvidia-driver-450 - third-party free
driver   : nvidia-driver-465 - third-party free recommended
driver   : nvidia-driver-455 - third-party free
driver   : nvidia-driver-390 - distro non-free
driver   : nvidia-driver-450-server - distro non-free
driver   : nvidia-driver-418-server - distro non-free
driver   : nvidia-driver-460 - third-party free
driver   : nvidia-driver-418 - third-party free
driver   : xserver-xorg-video-nouveau - distro free builtin

如果结果显示和搜索到的驱动版本一样，推荐也是390.67，那我们可以安心安装390.67版本。
但是结果显示的并没有390.67，为了避免出错，建议选择结果显示中的版本号，如460.80。





4. 安装驱动

(1). 禁用nouveau。
打开终端，输入：
$ sudo gedit /etc/modprobe.d/blacklist.conf

在blacklist.conf文件末尾加上这两行，并保存：
blacklist nouveau
options nouveau modeset=0

然后执行命令：

$ sudo update-initramfs -u  //应用更改

重启系统，验证是否禁用nouveau：

lsmod | grep nouveau
没有信息返回说明已禁用（如图）




(2)安装NVIDIA驱动。
方法一：
打开系统设置->软件和更新->附加驱动->选择NVIDIA驱动->应用更改（如图）



方法二：
进入命令行界面：

Ctrl+Alt+F1  //（深坑：笔记本的F键有小键盘，需加上Fn），之后输入用户名和密码登录即可。

关闭图形界面：
sudo service lightdm stop

卸载旧版本nvidia驱动：
sudo apt-get remove --purge nvidia*

给驱动run文件赋予执行权限：
sudo chmod  a+x NVIDIA-Linux-x86_64-396.18.run //对应自己下载的驱动名称

安装nvidia驱动:
sudo ./NVIDIA-Linux-x86_64-396.18.run -no-x-check -no-nouveau-check -no-opengl-files //只有禁用opengl这样安装才不会出现循环登陆的问题

-no-x-check：安装驱动时关闭X服务
-no-nouveau-check：安装驱动时禁用nouveau
-no-opengl-files：只安装驱动文件，不安装OpenGL文件

安装过程中的选项：

The distribution-provided pre-install script failed! Are you sure you want to continue? 选择 yes 继续。
Would you like to register the kernel module souces with DKMS? This will allow DKMS to automatically build a new module, if you install a different kernel later?  选择 No 继续。
问题没记住，选项是：install without signing
问题大概是：Nvidia's 32-bit compatibility libraries? 选择 No 继续。
Would you like to run the nvidia-xconfigutility to automatically update your x configuration so that the NVIDIA x driver will be used when you restart x? Any pre-existing x confile will be backed up.  选择 Yes

这些选项如果选择错误可能会导致安装失败，没关系，只要前面不出错，多尝试几次就好。

打开图形界面：
sudo service lightdm start


(3)查看NVIDIA版本检验是否安装完成
$ nvidia-smi

$ nvidia-smi
Wed May 19 11:29:43 2021       
+------------ ----------------- ---------------------- -----------------------+
| NVIDIA-SMI 460.27.04    Driver Version: 460.27.04    CUDA Version: 11.2     |
|------------ ------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|============= =================+======================+========== ===========|
|   0  Quadro P2000        Off  | 00000000:65:00.0 Off |                  N/A |
| 78%   40C    P0    19W /  75W |      0MiB /  5050MiB |      0%      Default |
|                               |                      |                  N/A |
+------------ ------------------+----------------------+----------------------+
                                                                               
+------------- ----------------- ------------------ ------------ -------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|============ =================== ================== ======== ================|
|  No running processes found                                                 |
+------------ ------------------- ------------------ -------- ----------------+



ref:
https://blog.csdn.net/qiancaobaicheng/article/details/95096354
https://www.cnblogs.com/vcan123/p/11902213.html








========================================
整理和压缩文件：减少磁盘空间占用的方法--查找并压缩
----------------------------------------
1. 找到 fastq/fq 文件，并gzip压缩
(0) 压缩比
测序文件是文本文件，压缩后是原来的25%，16.9%。

-r--r--r--. 1 wangjl jinwf 24M May  5  2019 /home/wangjl/data/apa/fq_files/bc/c12_ROW22_R2.fastq
$ gzip -c /home/wangjl/data/apa/fq_files/bc/c12_ROW22_R2.fastq >c12_ROW22_R2.fastq.gz
-rw-r--r--. 1 wangjl jinwf 6.1M Sep  3 16:28 c12_ROW22_R2.fastq.gz
#压缩比 3.9 倍

-rw-r--r--. 1 wangjl jinwf 145G Mar 22 16:16 SRR11094242_2.fastq
-rw-r--r--. 1 wangjl jinwf  25G Mar 22 16:16 SRR11094242_2.fastq.gz
# 压缩比 5.8倍


当前占用空间
$ du -sh ~/data/
7.5T	/home/wangjl/data/



(1) 查找某一类文件 or 文件夹的命令
/home/wangjl/data/apa/smart-seq2/sample2/dustbin
$ find ~/data/apa/ | grep "fastq$" >fastqs.txt
$ find ~/data/apa/ | grep "\.fq$" >fqs.txt

1806   1806 104704 fastqs.txt
1438  1438 88846 fqs.txt


(2) 按大小查找
使用find命令找到大于指定大小的文件：
$ find ~/. -type f -size +10G

查看最大的文件夹
$ du -s * | sort -k1nr




(3) 压缩命令：默认压缩好后删掉源文件
$ ls | while read id; do echo $id; 
gzip $id &
done;





========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




