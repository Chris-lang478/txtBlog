Linux 文本编辑器



在这个蔚蓝色的星球上，流传着两大神器的传说：Emacs是神的编辑器，而Vim是编辑器之神。


VIM , 全称 Vi Improved , Vi的增强版 。

Vi 在 1976 年发布，奉行 Unix 传统的“Do one thing and do it well”哲学，每个程序只做一件事但做到最好，通过程序之间的配合得到强大的功能。

linux中知名的文本编辑器除了vim还有emacs，功能比vim还强；

Emacs则奉行“Everything at reach”设计哲学，通过强大的扩展性，达到在一个软件里做所有的事。Emacs可以用来编辑文档、时间管理、浏览图片、阅读pdf、听音乐、写程序、运行程序、调试程序、接受发送邮件、看新闻组、玩游戏、管理系统、Telnet/FTP、版本控制、写LaTex…被称为“伪装成编辑器的操作系统”。

江湖中有一句话: “ 世界上的程序员分三种，一种使用Emacs，一种使用Vim，剩余的是其它” 。







========================================
vim文件编辑器从入门到精通(1234晋级), 及其常用命令 (Vim是编辑器之神)
----------------------------------------
vim 笔记: https://python-web-guide.readthedocs.io/zh/latest/devtools/vim.html

vim filename #如果有文件，则编辑此文件，否则，则创建文件。
三种模式（命令模式、插入模式、ex模式）



trouble shooting:
1. vim设定utf8编码格式
https://blog.csdn.net/ROVAST/article/details/80537227

$ vim ~/.vimrc

在自己的 vimrc 配置文件中增加下面的配置即可
set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

$ source ~/.vimrc
好了，可以用了。



2. 常用命令
u是撤销你刚才做的动作
ctrl+r 是恢复你刚才撤销的动作。









http://www.vim.org/

##########
0.提醒

序言：vim是linux上的文本编辑器。十分强大。强大的东西都不好学。
学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。


我建议下面这四个步骤：
1.存活
2.感觉良好
3.觉得更好，更强，更快
4.使用VIM的超能力
当你走完这篇文章，你会成为一个vim的 superstar。

在开始学习以前，我需要给你一些警告：
	- 学习vim在开始时是痛苦的。
	- 需要时间
	- 需要不断地练习，就像你学习一个乐器一样。
	- 不要期望你能在3天内把vim练得比别的编辑器更有效率。
	- 事实上，你需要2周时间的苦练，而不是3天。


0.1 基础知识: 这里介绍vim的细节操作。

vim的基础知识请自行百度。这里只列出提纲：
1.vim分为三种模式：是什么？
2.各个模式的作用？怎么切换？
3.保存文件：esc进入单行模式，
	:w 回车就保存了
	:wq 是保存和退出
	:q! 强制退出，放弃保存
4.一些基本概念： window, buffer, type, 



0.2 常用功能

1.vi里怎么把一行文字上移到上一行
将上一行移到下一行就相当于将下一行移到上一行了
具体操作如下：
1).光标落在上一行使用 dd 删除当前行；
2).再使用 p 粘贴删除的行；










========================================
|-- 第一级 – 存活: 只需要记5个命令
----------------------------------------
常用操作：
	i → Insert 模式，按 ESC 回到 Normal 模式.
	x → 删当前光标所在的一个字符。
	:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （注：:w 后可以跟文件名）
	dd → 删除当前行，并把删除的行存到剪贴板里
	p → 粘贴剪贴板。粘贴在下一个字符，或者下一行。所以组合键 dd - p 是把当前行和下一行换位置。

推荐:
	hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。
	:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（注：退出帮助需要输入:q）

能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。
	

注意:
1.其他软件是按下ctrl后才有几个快捷键，而vim是满键盘都是功能键。
2.下面的文字中，如果是 Ctrl-λ我会写成 <C-λ>.
3.以 : 开始的命令你需要输入 <enter>回车，例如 — 如果我写成 :q 也就是说你要输入 :q<enter>.











========================================
|-- 第二级 – 感觉良好：更多光标移动、插入模式快捷键
----------------------------------------
上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在Normal模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）

各种插入模式
a → 在光标后插入
o → 在当前行后插入一个新行
O → 在当前行前插入一个新行
cw → 替换从光标所在位置后到一个单词结尾的字符
(shift+i)I 在当前行第一个不是空格的字符位置插入字符
(shift+a)A 在当前行最后一个位置插入字符


简单的移动光标
0 → 数字零，到行头
^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ → 到本行行尾
g_ → 到本行最后一个不是blank字符的位置。
/pattern → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）


拷贝/粘贴 （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）
P → 粘贴
yy → 拷贝当前行当行于 ddP


撤销与重做 Undo/Redo
u → undo
<C-r> → redo


打开/保存/退出/改变文件(Buffer)
:e <path/to/file> → 打开一个文件
:w → 存盘
:saveas <path/to/file> → 另存为 <path/to/file>
:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）

花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。










========================================
|-- 第三级 – 更好，更强，更快
----------------------------------------
先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。


(1) 更好
下面，让我们看一下vim是怎么重复自己的：
. → (小数点) 可以重复上一次的命令
N<command> → 重复某个命令N次

下面是一个示例，找开一个文件你可以试试下面的命令：
2dd → 删除2行
3p → 粘贴文本3次
100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “
. → 重复上一个命令—— 100 “desu “.
3. → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).





(2) 更强
你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。

NG → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）
gg → 到第一行。（注：相当于1G，或 :1）
G → 到最后一行。

按单词移动：
w → 到下一个单词的开头。
e → 到下一个单词的结尾。
> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）

> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）


Word moves example 
下面，让我来说说最强的光标移动：
% : 匹配括号移动，包括 (, {, [. （注：你需要把光标先移到括号上）
* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）
相信我，上面这三个命令对程序员来说是相当强大的。





(3) 更快
你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：

<start position><command><end position>

例如 0y$ 命令意味着：

0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。

你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。

还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：

d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等
（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）










========================================
|-- 第四级 – Vim 超能力
----------------------------------------
你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。

在当前行上移动光标: 0 ^ $ f F t T , ;
0 → 到行头
^ → 到本行的第一个非blank字符
$ → 到行尾
g_ → 到本行最后一个不是blank字符的位置。
fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
t, → 到逗号前的第一个字符。逗号可以变成其它字符。
3fa → 在当前行查找第三个出现的a。
F 和 T → 和 f 和 t 一样，只不过是相反方向。
Line moves
还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "。

区域选择 <action>a<object> 或 <action>i<object>
在visual 模式下，这些命令很强大，其命令格式为

<action>a<object> 和 <action>i<object>

action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。

vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))
Text objects selection

块操作: <C-v>
块操作，典型的操作： 0 <C-v> <C-d> I-- [ESC]

^ → 到行头
<C-v> → 开始块操作
<C-d> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)
I-- [ESC] → I是插入，插入“--”，按ESC键来为每一行生效。
Rectangular blocks

在Windows下的vim，你需要使用 <C-q> 而不是 <C-v> ，<C-v> 是拷贝剪贴板。

自动提示： <C-n> 和 <C-p>
在 Insert 模式下，你可以输入一个词的开头，然后按 <C-p>或是<C-n>，自动补齐功能就出现了……

Completion

宏录制： qa 操作序列 q, @a, @@
qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例

在一个只有一行且这一行只有“1”的文本中，键入如下命令：

qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.
Macros

可视化选择： v,V,<C-v>
前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：

J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 （注：这个功能相当强大，我太喜欢了）
Autoindent

在所有被选择的行后加上点东西：

<C-v>
选中相关的行 (可使用 j 或 <C-d> 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。
Append to many lines

分屏: :split 和 vsplit.
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。

:split → 创建分屏 (:vsplit创建垂直分屏)
<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
<C-w>+ (或 <C-w>-) : 增加尺寸







========================================
|-- vim 多文件操作
----------------------------------------

1. 场景：想把函数从一个文件中提取到单独文件。
(1) 当前文件正在编辑 01.c
:sp 新文件名 回车
:sp 02_max.c 回车
则新建新文件。
(2) 此时光标在顶部方框，输入 i 则可以编辑。
:w 回车 保存
(3) ctrl+w+下箭头，则可以到下面的方框中编辑。
:set nu 回车 打开行号

鼠标放到某函数第一行，数一下某函数占了多少行，比如9行，则输入 9dd (就是数字9 后面加两个小写字母dd)。
此时该函数被剪切到剪切板。


(4) ctrl+w+上箭头，回到上面的新文件，按ESC，小写字母p，粘贴函数。
(5) 在旧文件01.c 中引用新文件 #include "02_max.c"， 
:wqa 回车 保存all文件，并退出。
(6) gcc 编译执行。
$ gcc 01.c 
$ ./a.out











========================================
|-- 文本替换
----------------------------------------
1. vim全局替换命令

语法为 :[addr]s/源字符串/目的字符串/[option]

全局替换命令为：:%s/源字符串/目的字符串/g

参数解释：
[addr] 表示检索范围，省略时表示当前行。
- 如：“1,20” ：表示从第1行到20行；
- “%” ：表示整个文件，同“1,$”；
- “.,$” ：从当前行到文件尾；

s : 表示替换操作

[option] : 表示操作类型
如：g 表示全局替换; 
c 表示进行确认
p 表示替代结果逐行显示（Ctrl + L恢复屏幕）；
省略option时仅对每行第一个匹配串进行替换；

如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义



(2) 例子
#将句尾的child换成children
:%s/child\([ ,.;!:?]\)/children\1/g

#将多个空格换成一个空格，注意第一个要多个空格
:%s/  */ /g

#使用空格替换句号或者冒号后面的一个或者多个空格
:%s/\([:.]\)  */\1 /g



2) 删除语法
#删除所有空行
:g/^$/d

#删除所有的空白行和空行【测试失败】
:g/^[  ][  ]*$/d






测试未通过
#将That or this 换成 This or that
:%s/\(that\) or \(this\)/\u\2 or \l\1/






ref:
https://blog.51cto.com/andyss/131652









========================================
|-- 小结
----------------------------------------
5 结束语


上面是作者最常用的90%的命令。
我建议你每天都学1到2个新的命令。
在两到三周后，你会感到vim的强大的。
有时候，学习VIM就像是在死背一些东西。
幸运的是，vim有很多很不错的工具和优秀的文档。
运行vimtutor直到你熟悉了那些基本命令。
其在线帮助文档中你应该要仔细阅读的是 :help usr_02.txt.
你会学习到诸如  !， 目录，寄存器，插件等很多其它的功能。
学习vim就像学弹钢琴一样，一旦学会，受益无穷。

————正文结束————

对于vi/vim只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。不然，Visual Studio也不就会有vim的插件了。

(全文完)


http://linux.vbird.org/linux_basic/0310vi.php
http://blog.csdn.net/niushuai666/article/details/7275406

http://baike.baidu.com/link?url=sYuCPqcOMJo8-5trt3LguqMvWK9gPB8BNV_eUx6mRm4sdbeoSYMybzV2QHKolKXctdlfJrBlLdeboAQwY33yMbw_wSPYBWl6OfAjpVvNBVO




refer: https://www.imooc.com/learn/1129







========================================
Emacs 是神的编辑器
----------------------------------------
自由软件: https://www.gnu.org/philosophy/free-sw.zh-cn.html


1. 它好在哪里？
(1) 无敌的可扩展性
- 可扩展性给了软件强大的生命
- Emacs是伪装成编辑器的操作系统

Emacs其实是个Lisp的解释器，因此可以用Lisp灵活地扩展。 Lisp是什么东西，这同样是种很有生命力的编程语言。在C语言还没有发明的年代，MIT的人工智能实验室写ITS操作系统时，一部分用的是汇编语言，还有一部分就是用的Lisp。现在，Lisp仍在人工智能研究领域广泛使用着。

Emacs使用非常多的组合按键，这大概也是它高效于其它无模式编辑器的原因之一。你也可以定义自己的组合键序列，调用自己写的lisp函数，完成自己想要的功能。









2. 安装与使用
(1) 安装
linux: sudo apt-get install emacs
启动：开启终端，输入emacs


(2) 使用 
Emacs 键盘命令通常包含control键和META键，为了避免每次都要写出全名，约定使用下诉缩写：
C- : 表示输入 时按住control键。
M- : 表示输入 时按住ALT键。




重要提示：要退出Emacs,请用C-x C-c(两个连续组合键)

C-v:(查看下一屏文字)移动到下一屏。
M-v:向上移动一屏。
C-L(l): 重绘屏幕，并将光标所在行置于屏幕中央



打开文件    $ emacs filename &
保存并退出     $ ctrl-x ctrl-c (两个连续的组合按键)

取消执行  q

中断（与中断后的继续） ctrl-g

向上 ctrl-p
向下 ctrl-n

向左 ctrl-b（b即 backward）
向右 ctrl-f (f即 forward)

下一页 ctrl-v
上一页 alt-v



重绘荧屏 ctrl-L（即，将光标所在行放到中间以便阅读，哈哈不用鼠标
哦，这就是用键盘的好处）




下一个单词 alt-f
上一个单词 alt-b

下一个字符 ctrl-f
上一个字符 ctrl-b

行头 ctrl-a
行尾 ctrl-e

句首 alt-a (即到上一句点后面，一个句子的开头)
句尾 alt-e （即到据点后面）

----------------------
档头 alt-< （即alt-shift-<,因为<是一个和shift的组合键哦）
档尾 alt->

删除游标钱的/后面的字 ctrl-d

往回删一个字 alt-del （即删除游标后面的第一个单词）
往前删一个字 alt-d （即删除光标前一个字符）


删除至行尾 ctrl-k
删到一句子结尾 alt-k （即删除到句点）

-----------------------

向右移动8个字符  ctrl-u 8 ctrl-f
向下移动5行  ctrl-u 5 ctrl-n
取消10次操作  c-u 10 c_x u  （即undo 10次）

将当前行移动到当前屏幕第一行 c-u 0 c-l

 

特殊情况， c-u 3 c-v不是上翻3页，而是上翻3行。据说有一个故事。

 

`C-'开头的是 `Ctrl'键加上后面的键一块按下，例如 `C-x 0'就是Ctrl

键和 x键一块按下， 然后再按下0;

以 `M-'开头的就是META键, 一般就是 Alt键.

C-x C-f 文件名 -- 打开文件

C-x C-s -- 保存文件

C-x C-c -- 退出Emacs

C-x u -- 取消上一次操作 （即 ctrl-x后收回手，再按键盘u键）


c-z 或者 c-x c-z 挂起emacs (挂起就是 把程序放到后台操作，前台回

到shell提示符上，输入fg回到emacs界面)

 

 

 

参考

http://forum.ubuntu.org.cn/viewtopic.php?p=105293

http://www.cppblog.com/baby-fly/archive/2010/07/15/120447.html 

 

 

 

 

 

 

========================================
|-- Emacs 快捷键大全 
----------------------------------------
C stands for Ctrl and M stands for Alt 
REFERENCE FORM EMACS TUTORIAL
表述不一定正确，仅供参考，主要是要多实践，一开始可能会不习惯。

PART1 CURSOR
C+p 光标上移
C+n 光标下移
C+b 光标后移
M+b 光标向前移动一个单词
C+f 光标前移
M+f 光标向后移动一个单词
C+v 向下翻页
M+v 向上翻页
C+l 光标移动屏幕中间
C+a 光标移动到本行最前位置
C+e 光标移动到本行最后位置
M+a 光标移动到本句或上一句的最前位置
M+e 光标移动到本句或或下一句的最后位置
M+< 移动到当前文档开始处
M+> 移动到当前文档结束处

OTHERS
C+u + num + cmd 重复执行cmd num次
C+g 取消当前命令或输入一半的命令


INSERTING AND DELETING
C+d 删除光标当前所在字符
M+d 删除光标之后的一个单词
C+k 剪切光标开始到行结尾的字符
M+k剪切光标之后的一句话
C+@ 在两个位置按下，然后再按C+w，则剪切两个位置之间的字符
C+y 粘贴最近一次所剪切的内容
M+y 可以切换不同的剪切的内容，按住M键，然后通过按y来进行选择

UNDO
C+x+u 撤销

FILES
当你打开一个文档并进行编辑后保存，emacs会先对原文档进行改名（在名字前加‘~’）保存，然后再进行保存操作，以防你之后想恢复到原来的文档。
当你编辑一个文档时，这个文档的名字会在emacs的底下显示
C+x+C+f 按C+x然后按C+f，然后再输入你想打开的文件的名字，就打开你想要的文档，如果你输入过程中不想继续可以按C+g，当找不到所需的文档时会自动创建一个文档。
C+x+C+s 保存当前文档

BUFFERS
在emacs里面编辑的每一个文档都是一个buffer，可以通过C+x+C+f+‘文件名’进行切换
如当前emacs里编辑着两个文件，即两个buffer，‘foo’和‘test.cc’。
也可以通过按C+x+b+文档名来进行切换。
假设你忘记了文件的名字，那你可以先输入：
C+x+C+b 查看当前emacs打开的文档列表，可以用C+x+1来关闭打开的列表窗口。
其中里面有两项并不指向任何文档，*Buffer List*和*Messages*，这两项分别保存列表文档的名称，及保存emacs最低下显示的信息，你可以通过C+x+b然后输入这两个名字来查看他们的内容。
如果现在emacs打开了三个文档，你编辑完第一个后没保存，直接切换到第二个，同样是没保存直接切换到第三个，这时如果你想要保存前两个文档，除了分别切换到那两个文档然后再执行保存的方法外，还有更简单的方法是在第三个文档的界面下直接按C+x+s，这时底下的信息栏会一一问你是否要进行对第一个和第二个文档进行保存。

AUTO SAVE
自动保存是一个很好的功能，emacs当然也有。
emacs有一个周期自动保存功能，自动把当前的文档内容保存在用两个‘#’夹起来的文件名里，例如当前文件名为‘test.cc’，则自动保存为#test.cc#，当你正常退出emacs时，emacs会把这个文件删除。
当你的机子当掉的时候，如何恢复文档呢？
只要用emacs打开原来的文件（注意不是被‘##’夹住的文件），emacs会建议你用M+x recover-this-file然后空格来恢复，再输入yes，就可以恢复了。
注：在shell底下如果要查看一个auto-save文件（即‘##’夹住的文件），如用cat命令，需要在这个文件名两端加冒号，如 cat “#test.cc#”。可能是命令行解释工具不能解析这种符号。

MODE LINE
MODE LINE就是emacs底下灰色底的那一行，
如例子：
--：**- TUTORIAL 63% L749 <Fundamental>-------------------
下面说下各部分的名称。
TUTORIAL是当前文档的名字，名字之前的星号是指当前文档有被编辑但未被保存，当保存后星号就变成--（dash），63%是指当前处于全文的位置，L749当然就是指光标所在的行号为749了。<Fundamental>告诉你当前你所处的编辑模式，emacs有多个不同的编辑模式，fundamental是一种主要的模式，不同的模式还会导致某些命令的作用不同。你可以通过输入：M+x XXX-mode+回车来改变当前模式，例如M+x c++-mode，etc。

SEARCHING
C+s+搜索内容 向前搜索，如果想继续可以继续按C+s，不想搜索的时候可以按C+g，如果找到想找的就按回车
C+r+搜索内容 如上，但方向是向后搜索

MULTIPLE WINDOWS
C+x+2 将当前窗口横向一分为二
C+x+3 将当前窗口纵向一分为二
C+x+o 将光标移动到另一窗口
C+x+1 去除其他窗口，剩下光标所在的窗口
C+M+v 光标在一个窗口，使另一个窗口滚动
在每一个窗口都可以一分为二，这样就可以出现多窗口，但最多能打开窗口的数量是和当前框架的大小有关系的。
C+x+4+C+f+文件名 打开一个文件，在一个新窗口里显示

GETTING MORE HELP
C+h+k+cmd 查询cmd的功能，说明比较详细。
C+h+c+要查询的命令 最常用的命令查询，它会简练的介绍命令的作用。
C+h+a+关键字 查询所有含有关键字的命令，这个命令可以帮助你记忆命令




ref:
https://blog.csdn.net/jasenwan88/article/details/7690364












========================================
Putty的复制和粘贴
----------------------------------------
突然发现putty在选择后就跑到粘贴板上去了，可以在windows中直接ctrl+V！在网上搜了一下，总结：
（一）复制：
　　（１）左键选择，就相当于ctrl+C；
　　（２）左键双击，选择一个单词；
　　（３）左键双击不抬起鼠标，左右移动，则以单词为单位选择；
　　（４）三击为选择一行；
　　（５）三击最后不抬鼠标，上下移动，则以行为单位选择。
（二）粘贴：
　　（１）鼠标右键。
　　（２）Unix终端通用：shift+insert
http://blog.chinaunix.net/uid-20332519-id-3498113.html







========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



