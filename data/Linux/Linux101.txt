Linux 十大常用命令

序言：
linux是命令行操作为主、鼠标操作为辅的系统，因此熟悉常用命令十分必要。





========================================
文件操作 十大常用命令
----------------------------------------
对于ubuntu系统，快捷键ctrl+Alt+T就能打开一个终端窗口。
可以在这里输入窗口。


1.常用操作：
mkdir	创建目录
rmdir	删除目录
cd	改变目录
ls	显示文件信息
	ls -lth 详细、按照时间、以人类友好的数字显示该目录
	ls -Sr 按照大小倒序显示该目录
cat	编辑文件
less	显示文件内容
cp	复制文件
mv	更改文件名
rm	删除文件
chmod	改变权限


Linux下gz压缩文件查看
$ zcat xx.gz

#修改文件的日期：
$ touch  -t "201801231215" test2  　将文件修改日期调整为指定日期，2018年1月23日12点15分。



2.pdf版
如果想打印出来细看，推荐北京大学cbi罗静初老师总结的版本：
Unix 十大常用命令：http://abc.cbi.pku.edu.cn/man/unix-commands1.pdf
Unix 十大专用命令：http://abc.cbi.pku.edu.cn/man/unix-commands2.pdf
Unix 十大实用命令：http://abc.cbi.pku.edu.cn/man/unix-commands3.pdf

from:http://abc.cbi.pku.edu.cn/manuals.php





linux20大常用命令
http://www.oschina.net/translate/useful-linux-commands-for-newbies

1、快捷键：
Ctrl + a 可以快速切换到命令行开始处
Ctrl + e 切换到命令行末尾
Ctrl + r 在历史命令中查找
Ctrl + u 删除光标所在位置之前的所有字符
Ctrl + k 删除光标所在位置之后的所有字符
ctrl + w 删除光标之前的一个单词
Ctrl + d 结束当前输入、退出shell
ctrl + s 可用来停留在当前屏 ctrl + q 恢复刷屏
ctrl + l 清屏
 
2、mkdir
mkdir -p level/nextlevel   ##-p 建立一个不存在的目录，并在该目录下继续建立一个子目录
mkdir dir{a,b,c}
mkdir dir[1..9]                 ## mkdir dir 批量建立目录
 
3、ln -s  /home/usr/local/file  /otherfile ###软链接， 类似于windows下的快捷键
      ln  /home/usr/local/file  /otherfile ###硬链接
 
4、du 显示目录或者文件所占空间 
   du [选项] [文件/目录]
   du -lh file


========================================
解包命令tar： 解压和压缩命令详解
----------------------------------------
常用实例：
	源代码一般以file.tar.gz file.tar.bz2或file.src.rpm 打包；
	file.tar.gz和file.tar.bz2格式的解包命令如下； 
	[root@ubuntu]# tar jxvf file.tar.bz2 
	[root@ubuntu]# tar zxvf file.tar.gz

tar详解
	-c: 建立压缩档案
	-x：解压
	-t：查看内容
	-r：向压缩归档文件末尾追加文件
	-u：更新原压缩包中的文件

这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

	-z：有gzip属性的
	-j：有bz2属性的
	-Z：有compress属性的
	-v：显示所有过程
	-O：将文件解开到标准输出

下面的参数-f是必须的
-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。

# tar -cf all.tar *.jpg 
这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。

# tar -rf all.tar *.gif 
这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。

# tar -uf all.tar logo.gif 
这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。

# tar -tf all.tar 
这条命令是列出all.tar包中所有文件，-t是列出文件的意思

# tar -xf all.tar 
这条命令是解出all.tar包中所有文件，-x是解开的意思


压缩
tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg
tar –czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz
tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2
tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z
rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux
zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux
	
	我想把一个文件abc.txt和一个目录dir1压缩成为yasuo.zip：
	＃ zip -r yasuo.zip abc.txt dir1

$ tar zcvf ex23.tar.gz ex23 //把文件将爱ex23给打包压缩成ex23.tar.gz。如果不需要压缩，就不要使用z参数，大文件太慢了！





解压
tar –xvf file.tar //解压 tar包
tar -xzvf file.tar.gz //解压tar.gz
tar -xjvf file.tar.bz2   //解压 tar.bz2
tar –xZvf file.tar.Z   //解压tar.Z
unrar e file.rar //解压rar
unzip file.zip //解压zip




总结
1、*.tar 用 tar –xvf 解压
2、*.gz 用 gzip -d或者gunzip 解压
	解压gz并保留原始压缩文件： gunzip -c 123.txt.gz > 123.txt
3、*.tar.gz和*.tgz 用 tar –xzf 解压
4、*.bz2 用 bzip2 -d或者用bunzip2 解压
5、*.tar.bz2用tar –xjf 解压
6、*.Z 用 uncompress 解压
7、*.tar.Z 用tar –xZf 解压
8、*.rar 用 unrar e解压
9、*.zip 用 unzip 解压



tips1:linux不解压超大日志gz包直接查找特定内容
gzip -dc myfile.gz | grep 'Exception' | more
或者
gzip -c myfile.gz | grep 'Exception' | more






zip压缩与unzip解压缩
http://blog.163.com/haibianfeng_yr/blog/static/345726202010916111516716/
1.压缩
$ zip -r myfile.zip ./*
将当前目录下的所有文件和文件夹全部压缩成myfile.zip文件,－r表示递归压缩子目录下所有文件.

2.解压缩
$ unzip -o -d /home/sunny myfile.zip
把myfile.zip文件解压到 /home/sunny/
-o:不提示的情况下覆盖文件；
-d:-d /home/sunny 指明将文件解压缩到/home/sunny目录下；

3.其他
$ zip -d myfile.zip smart.txt
删除压缩文件中smart.txt文件
$ zip -m myfile.zip ./rpm_info.txt
向压缩文件中myfile.zip中添加rpm_info.txt文件







ubuntu下文件压缩/解压缩命令总结
http://blog.csdn.net/luo86106/article/details/6946255

.gz 
解压1：gunzip FileName.gz
解压2：gzip -d FileName.gz 
压缩：gzip FileName 
.tar.gz 
解压：tar zxvf FileName.tar.gz 
压缩：tar zcvf FileName.tar.gz DirName 
############################################# 
.bz2 
解压1：bzip2 -d FileName.bz2 
解压2：bunzip2 FileName.bz2 
压缩： bzip2 -z FileName 
.tar.bz2 
解压：tar jxvf FileName.tar.bz2 
压缩：tar jcvf FileName.tar.bz2 DirName 
############################################# 
.bz 
解压1：bzip2 -d FileName.bz 
解压2：bunzip2 FileName.bz 
压缩：未知 
.tar.bz 
解压：tar jxvf FileName.tar.bz 
压缩：未知 
############################################# 
.Z 
解压：uncompress FileName.Z 
压缩：compress FileName 
.tar.Z 
解压：tar Zxvf FileName.tar.Z 
压缩：tar Zcvf FileName.tar.Z DirName 
#############################################
.tgz 
解压：tar zxvf FileName.tgz 
压缩：未知 
.tar.tgz 
解压：tar zxvf FileName.tar.tgz 
压缩：tar zcvf FileName.tar.tgz FileName 
#############################################
.zip 
解压：unzip FileName.zip 
压缩：zip FileName.zip DirName 
#############################################
.rar 
解压：rar a FileName.rar 
压缩：r ar e FileName.rar



http://blog.csdn.net/dunyanan1/article/details/38869059



========================================
linux中校验文件完整性、一致性(md5sum,sha1sum)
----------------------------------------
常用命令：
1. 对某一类文件全部生成md5码
$ ls *.fastq |xargs md5sum >md5sum.txt

2.使用md5sum递归生成整个目录的sum
find ./ -type f -print0 | xargs -0 md5sum > my.md5  #生成
md5sum -c my.md5 #核查




经常在Linux下下载软件的人，一定会有一个良好的习惯：校验文件的hash，以确定文件的完整性甚至是安全性。

md5sum命令用于生成和校验文件的md5值。它会逐位对文件的内容进行校验。是文件的内容，与文件名无关，也就是文件内容相同，其md5值相同。md5值是一个128位的二进制数据，转换成16进制则是32（128/4）位的进制值。

md5校验，有很小的概率不同的文件生成的md5可能相同。比md5更安全的校验算法还有SHA*系列的(sha1sum fileName)。

在网络传输时，我们校验源文件获得其md5sum，传输完毕后，校验其目标文件，并对比如果源文件和目标文件md5 一致的话，则表示文件传输无异常。否则说明文件在传输过程中未正确传输。


特殊说明
1）md5sum 是校验文件内容，与文件名是否相同无关
2）md5sum值逐位校验，所以文件越大，校验时间越长。
总结: 通过md5sum来校验生成文件校验码，来发现文件传输（网络传输、复制、本地不同设备间的传输）异常造成的文件内容不一致的情况。


1.MD5校验：
$ md5sum lnmp1.3-full.tar.gz
a5aa55cd177cd9b9176ad697c12e45c0  lnmp1.3-full.tar.gz

或者我们可以保存到一个文件中：
$ md5sum lnmp1.3-full.tar.gz > md5-hash.txt
然后查看：
$ cat md5-hash.txt
a5aa55cd177cd9b9176ad697c12e45c0  lnmp1.3-full.tar.gz

还可以根据已经得到的hash来确认文件：
$ md5sum -c md5-hash.txt
lnmp1.3-full.tar.gz: OK
	-c, --check          read MD5 sums from the FILEs and check them

2.SHA1校验，类似于md5校验，只是命令换成了 sha1sum

3.注意事项：在已知hash数值情况下对文件进行校验的时候要注意，一定要让系统能够找到要校验的文件。否则就没法进行校验了。
具体的使用说明，可以通过md5(sha1)sum --help来查看



refer:
https://www.cnblogs.com/zhuxiaohou110908/p/5786893.html





========================================
Ubuntu软件安装与卸载：apt-get
----------------------------------------
软件版本低，想安装新版本的。想到2条：删了再装，或者升级。

1.卸载：
sudo apt-get purge mongodb
敲密码进去，OK
作用不大。

2.升级软件
sudo apt-get upgrade 更新已安装的包

refer: http://blog.csdn.net/linuxzhouying/article/details/7192612


如何卸载？
//todo

========================================
deb包是debian，ubuntu等LINUX发行版的软件安装包
----------------------------------------
1.deb格式 

deb是debian linus的安装格式，跟red hat的rpm非常相似，最基本的安装命令是：dpkg -i file.deb 

dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。是类似于rpm的软件包，而非debian,ubuntu系统不推荐使用deb软件包，因为要解决软件包依赖问题，安装也比较麻烦。

1.一般在此类发行版中可以直接双击安装。
2.手动安装。如果您喜欢使用终端，您需要管理员权限来安装一个 .deb 文件。 打开终端后，输入： 
$ sudo dpkg -i package_file.deb 

要卸载一个 .deb 文件，在您的软件包管理器中取消选中它。或者在终端中，输入:
$ sudo dpkg -r package_name 

例如安装QQ，文件名为linuxqq_v1.0-preview3_i386.deb, 可运行：
$ sudo dpkg -i linuxqq_v1.0-preview3_i386.deb

Ubuntu下deb包的安装方法 http://blog.csdn.net/kevinhg/article/details/5934462


以下是一些 Dpkg 的普通用法：
1. dpkg -i <package.deb>
安装一个 Debian 软件包，如你手动下载的文件。
2. dpkg -c <package.deb>
列出 <package.deb> 的内容。
3. dpkg -I <package.deb>
从 <package.deb> 中提取包裹信息。
4. dpkg -r <package>
移除一个已安装的包裹。
5. dpkg -P <package>
完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。
6. dpkg -L <package>
列出 <package> 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。
7. dpkg -s <package>
显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。
8. dpkg-reconfigure <package>
重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。


http://zhidao.baidu.com/link?url=ZYQMJY-mAOc4yU7QumlIUS4S3HiHz0O1lbdOHZjpbJv4xjxI8KEb1mbD43ley9zlvs7n0JDWumpFj4wxTSBkF_





========================================
后台运行 nohup xx &
----------------------------------------
1. 一般形式为：
$ nohup command & 
　　如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件： 
$ nohup command > myout.file 2>&1 & 
　　在上面的例子中，输出被重定向到myout.file文件中，错误被定向到输出中。后台运行。
$ nohup command > myout.file 2>myError.log & 
	输出重定向到myout.file，错误重定向到myError.log中。

IO流：0输入，1输出，2错误。



2.举一个例子：
$ cat QuantByHTSeq.sh
for i in `cat ../id.txt`;
do	
	htseq-count -f bam -r pos /home/wangjl/data/fudanSingleCell/helaBamFile/${i}.bam /data1/hou/RNA/refs/hg19_ERCC92/UCSC_hg19_geneid.gtf > ht_${i}.bam.count 2>ht_${i}.bam.count.log &
done

$ chmod +x QuantByHTSeq.sh
$ nohup ./QuantByHTSeq.sh &
#最后这一句推荐正常提交，反正很快就完成命令提交，该脚本自身就结束运行了。但是该脚本提交的后台命令还在运行。
$ ./QuantByHTSeq.sh





3. 另一个实例
$ nohup bowtie ~/refer/hg19/hg19 -q ../SRR3101251.fastq -m 1 -p 4 -S 2>SRR3101251.out >SRR3101251.sam &
表示: 文件输出到sam，错误输出到out文件。

http://bestchenwu.iteye.com/blog/1073565




========================================
软连接（快捷方式）：ln -s 命令
----------------------------------------
ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。
1．命令格式：
 ln [参数][源文件或目录][目标文件或目录]

2.软链接和硬链接的概念

硬链接可认为是一个文件拥有两个文件名;而软链接则是系统新建一个链接文件，此文件指向其所要指的文件
ln -s /root/lntest/source/ /root/lntest/dist/

软链接: ln –s 源文件 目标文件
	1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式
	2.软链接可以 跨文件系统 ，硬链接不可以
	3.软链接可以对一个不存在的文件名进行链接
	4.软链接可以对目录进行链接

硬链接: ln 源文件 目标文件，没有参数-s
	1.硬链接，以文件副本的形式存在。但不占用实际空间。
	2.不允许给目录创建硬链接
	3.硬链接只有在同一个文件系统中才能创建

不可以对文件夹建立硬连接的，我们通常用的还是软连接比较多
3.
范例 :
　　将档案 yy 产生一个 symbolic link : zz
　　ln -s yy zz
　　将档案 yy 产生一个 hard link : zz
　　ln yy xx﻿
PS：如果想要删除链接，则像普通文件一样直接rm 链接名称即可。


一共4种形式：
wjl@ubuntu:~$ ln --help

Usage: ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
  or:  ln [OPTION]... TARGET                  (2nd form)
  or:  ln [OPTION]... TARGET... DIRECTORY     (3rd form)
  or:  ln [OPTION]... -t DIRECTORY TARGET...  (4th form)

In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.

Create hard links by default, symbolic links with --symbolic.

By default, each destination (name of new link) should not already exist.
When creating hard links, each TARGET must exist.  Symbolic links
can hold arbitrary text; if later resolved, a relative link is
interpreted in relation to its parent directory.

Mandatory arguments to long options are mandatory for short options too.
      --backup[=CONTROL]      make a backup of each existing destination file
  -b                          like --backup but does not accept an argument
  -d, -F, --directory         allow the superuser to attempt to hard link
                                directories (note: will probably fail due to
                                system restrictions, even for the superuser)
  -f, --force                 remove existing destination files
  -i, --interactive           prompt whether to remove destinations
  -L, --logical               dereference TARGETs that are symbolic links
  -n, --no-dereference        treat LINK_NAME as a normal file if
                                it is a symbolic link to a directory
  -P, --physical              make hard links directly to symbolic links
  -r, --relative              create symbolic links relative to link location
  -s, --symbolic              make symbolic links instead of hard links
  -S, --suffix=SUFFIX         override the usual backup suffix
  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create
                                the links
  -T, --no-target-directory   treat LINK_NAME as a normal file always
  -v, --verbose               print name of each linked file
      --help     display this help and exit
      --version  output version information and exit

The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the --backup option or through
the VERSION_CONTROL environment variable.  Here are the values:

  none, off       never make backups (even if --backup is given)
  numbered, t     make numbered backups
  existing, nil   numbered if numbered backups exist, simple otherwise
  simple, never   always make simple backups

Using -s ignores -L and -P.  Otherwise, the last option specified controls
behavior when a TARGET is a symbolic link, defaulting to -P.

Report ln bugs to bug-coreutils@gnu.org
GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
For complete documentation, run: info coreutils 'ln invocation'

http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html
http://www.linuxidc.com/Linux/2014-12/111056.htm
http://man.linuxde.net/ln




========================================
查看Linux系统版本号，是32位/64位：
----------------------------------------
1.version of linux:
$ cat /etc/issue
    Ubuntu 15.10 \n \l

2. bits of OS
$ sudo uname --m
x86_64

//http://jingyan.baidu.com/article/db55b609ab531f4ba30a2f13.html



3. 能查Ubuntu的版本号
# lsb_release -a
bash: lsb_release: command not found


4. 这个命令适用于所有的linux，包括Redhat、SuSE、Debian、Centos等发行版。
# uname
Linux
# uname -r
2.6.32-573.el6.i686
# uname -a
Linux centOS6 2.6.32-573.el6.i686 #1 SMP Thu Jul 23 12:37:35 UTC 2015 i686 i686 i386 GNU/Linux




5.以下二种方法适用于RedHat,CentOS
# cat /etc/redhat-release
CentOS release 6.7 (Final)

# rpm -q redhat-release
package redhat-release is not installed

# rpm -q centos-release
centos-release-6-7.el6.centos.12.3.i686

当前centos 版本与redhat对应的版本的命令
# cat /proc/version
Linux version 2.6.32-573.el6.i686 (mockbuild@c6b9.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) ) #1 SMP Thu Jul 23 12:37:35 UTC 2015

http://blog.sina.com.cn/s/blog_537de4b50100zw1n.html

========================================
Ubuntu上安装VNC server
----------------------------------------
软件：
https://wiki.debian.org/VNCviewer
http://packages.ubuntu.com/precise/gvncviewer

配置：
http://blog.itpub.net/519536/viewspace-607549/

1.安装 
$apt-get install vnc4server

2.启动
2.启动VNC服务
使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连个需要占用1个桌面
启动编号为1的桌面示例如下
$ vncserver

You will require a password to access your desktops.
Password:
Verify:
xauth:  file /home/wangjl/.Xauthority does not exist

New 'Bioinf1:2 (wangjl)' desktop is Bioinf1:2

Creating default startup script /home/wangjl/.vnc/xstartup
Starting applications specified in /home/wangjl/.vnc/xstartup
Log file is /home/wangjl/.vnc/Bioinf1:2.log 

以上命令执行的过程中，因为是第一次执行，需要输入密码，这个密码被加密保存在用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。
BTW：/root/.vnc/目录下还有一个“testdb:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号。



3.VNC服务使用的端口号与桌面号的关系
VNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下
桌面号为“1”  ---- 端口号为5901
桌面号为“2”  ---- 端口号为5902
桌面号为“3”  ---- 端口号为5903
……
基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下
桌面号为“1”  ---- 端口号为5801
桌面号为“2”  ---- 端口号为5802
桌面号为“3”  ---- 端口号为5803
……
基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下
[root@testdb ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT
[root@testdb ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT



重新启动vncserver服务的方法：
[root@testdb ~]# vncserver -kill :1
[root@testdb ~]# vncserver :1


7.修改VNC访问的密码
使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和oracle用户需要分别修改，修改过程如下：
[root@testdb ~]# vncpasswd
Password:
Verify:
[root@testdb ~]#





8.最后，需要配置一下防火墙，允许VNC客户端连接VNC server。VNC server监听的端口从5900开始，display :1的监听5901，display :2监听5902，以此类推。CentOs的防火墙缺省是不允许连接这些端口的，所以需要使用下面的步骤打开防火墙（需要root权限)：
　　vi /etc/sysconfig/iptables
　　找到下面的语句：
　　-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
　　在此行之前，加上下面的内容：
　　-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 5900:5903 -j ACCEPT
　　这句话的含义是，允许其它机器访问本机的5900到5903端口，这样，display:1, display:2, display:3的用户就可以连接到本机。
　　然后使用root身份重新启动防火墙：
　　/sbin/service iptables restart





202.196.120.157:1



========================================
su 和 su - 的区别
----------------------------------------
su只是切换了root身份，但Shell环境仍然是普通用户的Shell；
而su - 连用户和Shell环境一起切换成root身份了。

只有切换了Shell环境才不会出现PATH环境变量错误。

su切换成root用户以后，pwd一下，发现工作目录仍然是普通用户的工作目录；
而用su -命令切换以后，工作目录变成root的工作目录了





========================================
Linux的五个查找命令: which/whereis/whatis/locate/find, type/grep
----------------------------------------
Linux系统一切皆文件。linux的文件查找功能真的很强大，掌握如下命令，有助于你快速找到想要查找的目标文件。

1.which
2.whereis
3.whatis
4.locate
5.find
6.type和grep

先看man，熟悉该命令的解释。

1.which - locate a command
在PATH变量指定的路径中搜索命令的位置，并返回第一个搜到的结果。
$ which grep
/bin/grep

$ which python
/home/wangjl/anaconda3/bin/python





2.whereis - locate the binary, source, and manual page files for a command
只能用于程序名的搜索
参数信息：
 -b：只查找二进制binaries文件； 
 -m：只查找说明manuals文件；
 -s：只查找原始代码sources文件；
 -B<目录>：只在设置的目录下查找二进制文件；
 -M<目录>：只在设置的目录下查找说明文件；
 -S<目录>只在设置的目录下查找原始代码文件；

 -f：不显示文件名前的路径名称；It must be used when any of the -B, -M, or -S  option is used.
 -u：查找不包含指定类型的文件。

如果省略参数，则返回所有信息。

$ whereis grep
grep: /bin/grep /usr/share/man/man1/grep.1.gz /usr/share/info/grep.info.gz

$ whereis -m python
python: /usr/share/man/man1/python.1.gz





3.whatis - display one-line manual page descriptions
whatis 命令相当于 man -f 命令

$ whatis grep
grep (1)             - print lines matching a pattern

$ whatis python
python (1)           - an interpreted, interactive, object-oriented programming language




4.locate - find files by name
locate命令和slocate命令都用来查找文件或目录。
用法：locate (选项)
	locate [OPTION]... PATTERN...
参数
-d<目录>或--database=<目录>：指定数据库所在的目录； 

查找locate用以快速查找文件、文件夹
	locate keyword
此命令在数据库中查找文件等，对于新建立的文件，需要立即手工更新数据库，
	updatedb



locate命令其实是find -name的另一种写法，但是locate要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/locatedb，这个数据库中含有本地所有文件信息。

如果报错说mlocate.db没有找到，则需要updatedb命令重新创建该/var/lib/locatedb数据库。
而该数据库每天更新一次，所以使用locate差找不到最新变动过的文件。
查之前建议先updatedb一下，需要root权限。
$ locate aa.txt
/data/wangjl/test/aa.txt





5.find - search for files in a directory hierarchy[极其重要]
下文有find命令简介。
更详细的find见 字符处理 专题。



6.type和grep
type命令用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令
$ type grep
grep is aliased to `grep --color=auto'



如果查找文件内容，则需要配合grep了。
$ grep 'find' *txt #则txt文档中包含find的行都显示出来了。

查找某目录下包含关键字内容的文件，带高亮显示
格式: grep -r "{关键字}"  {路径}
## -r, --recursive
$ grep -r '查找' . --color=auto 

更详细的grep见 字符处理 专题。


refer:
https://blog.csdn.net/z_xiao_xue/article/details/53925680





========================================
find命令简介 - 在指定目录下查找文件
----------------------------------------
命令find高级查找文件、文件夹
	find 查找位置 查找参数
	find <path> <expression> <cmd>
如 -name  -perm  -user  -group  -ctime  -type  -size
	find . -name *linux*  	# . 当前文件
	find / -name *.conf		# / 根目录
	find / -perm 777	#权限为777的文件
	find / -type d 查找目录类型
	find . -name "a*" -exec ls -l {} \;  #固定格式


1.在当前目录下，查找txt文件：
find . -name "*.txt" -print



2.不显示报错信息（如权限不够等）
$ find / -name '*hg19*Gene*' 2>/dev/null |grep 'hg19'



3.指定文件的时间

在当前目录下，查找十一放假期间创建的txt文件：
find . -name "*.txt"  -newermt '2026-10-01' ! -newermt '2026-10-08' -print



4. 限制文件大小

查找小于20k的文件
$ find / -size -20k -name "movie030.png" 2>/dev/null |grep -v "movie"

查找根目录下，文件大小大于1G的文件，并显示大小。
$ find / -size +1G | xargs du -sh

查看大小为525的文件，并列出来
$ find molportnp/ -size -526c -size +524c |xargs ls -lth |head






========================================
Axel - 多线程下载命令
----------------------------------------
1.简介 
Axel 是 Linux 下一个不错的HTTP/FTP高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。


2.安装
ubuntu: apt-get install axel

CentOS下安装axel
http://axel.alioth.debian.org
1).下载
失效链接 http://alioth.debian.org/frs/download.php/3015/axel-2.4.tar.gz
wget http://www.ha97.com/code/axel-2.4.tar.gz

2).解压
tar zxvf axel-2.4.tar.gz
cd axel-2.4
./configure
make
make install


3.Axel命令使用方法：axel 参数 文件下载地址
可选参数：
	-n 指定线程数
	-o 指定另存为目录
	-s 指定每秒的最大比特数
	-q 静默模式

如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：
axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz

#不要使用3线程，直接用10-50线程。就是快。
axel -n 10 https://cran.rstudio.com/bin/windows/contrib/3.4/maptools_0.9-2.zip
axel -n 30 https://cran.rstudio.com/bin/windows/contrib/3.4/sp_1.2-5.zip 

如果下载过程中下载中断，可以再执行下载命令即可恢复上次的下载进度。

refer:
http://www.cnweed.com/4048.html







========================================
ftp/sftp命令：传输文件
----------------------------------------
步骤 1: 建立 FTP 连接
想要连接 FTP 服务器，在命令上中先输入ftp然后空格跟上 FTP 服务器的域名 'domain.com' 或者 IP 地址
例如:
ftp domain.com
ftp 192.168.0.1
ftp user@ftpdomain.com

或者使用sftp，直接进入第三步：
~$ sftp wangcc@192.168.1.114


步骤 2: 使用用户名密码登录
绝大多数的 FTP 服务器是使用密码保护的，因此这些 FTP 服务器会询问'username'和'password'.

如果你连接到被称作匿名 FTP 服务器（LCTT 译注：即，并不需要你有真实的用户信息即可使用的 FTP 服务器称之为匿名 FTP 服务器），可以尝试anonymous作为用户名以及使用空密码：

Name: anonymous
Password:
之后，终端会返回如下的信息：

230Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp>

步骤 3: 目录操作
FTP 命令可以列出、移动和创建文件夹，如同我们在本地使用我们的电脑一样。ls可以打印目录列表，cd可以改变目录，mkdir可以创建文件夹。
可以使用的命令：ls, pwd, cd Downloads/
使用help查看帮助。

步骤 4: 下载文件
我们可以使用命令 get 来下载文件，比如：
sftp> get natapp
Fetching /home/wangcc/Downloads/natapp to natapp
/home/wangcc/Downloads/natapp                 100% 6934KB   6.8MB/s   00:00

下载多个文件可以使用通配符及 mget 命令。例如，下面这个例子我打算下载所有以 .xls 结尾的文件。
mget *.xls



步骤 5: 使用 FTP 上传文件
完成 FTP 连接后，FTP 同样可以上传文件

使用 put命令上传文件：
put file

当文件不再当前本地目录下的时候，可以使用绝对路径：
put /path/file

同样，可以上传多个文件：
mput *.xls


步骤 6: 关闭 FTP 连接
完成FTP工作后，为了安全起见需要关闭连接。有三个命令可以关闭连接：
bye
exit
quit

需要更多帮助，在使用 ftp 命令连接到服务器后，可以使用help获得更多帮助。

http://www.linuxidc.com/Linux/2015-12/126357.htm




========================================
把程序输出到路径path
----------------------------------------
.bash_profile和.bashrc作用类似。


将python的路径加入.bash_profile中的PATH.，并执行source .bash_profile使配置立即生效
export PATH=/home/tmxu/local/python/bin/:$PATH


另外也可以在.bashrc。加上export PYTHONPATH=~/opt/python:PYTHONPATH


最后需要重新登录才能生效。
或者source ~/.bashrc 才能生效。




========================================
ImageMagick: Linux 下用convert制作gif图片动画
----------------------------------------
https://blog.csdn.net/qwsamxy/article/details/50530900

1.ImageMagick包
sudo apt-get install imagemagick


2.实例

(1)常规使用
$ convert -delay 50 *.jpg c.gif
delay 是 gif 显示图形的间隔，单位是10ms, 50是 500 ms.
上述的命令把本地的jpg转换成 c.gif 文件。


$ convert -delay 0 *.bmp -loop 0 animated.gif
//      将当前目录下所有的bmp文件合成一个gif图片动画, 每帧间隔0ms, 重复播放。
//      -delay n     迟延n*10毫秒
//      -loop  n     播放n轮, 0表示不断地重复播放


$ convert -delay 50 frame1.gif frame1.gif frame1.gif -loop 0 animated.gif
//      将当前目录下的frame1.gif文件制作成animated.gif动画，其中3个frame1.gif作为一组，进行循环播放，延迟500毫秒。

$ convert -delay 50 frame1.gif -delay 100 frame1.gif -delay 150 frame1.gif -loop 0 -pause 200 animated.gif
//      在一轮播放之后暂停200毫秒，再进行下一轮播放。

$ convert anim1.gif anim2.gif combined.gif
//      将两个动画文件合并成一个。



(2)倒着播放gif：Reversing Animations - making animations run backward, or cycle
As of IM v6.3.3, the "-reverse" image sequence operator was added (see Reverse Operator for more details). 
This allows you very simply reverse the order of a coalesced animation sequence.
For example here I make a 'hand draw k' animation become undrawn!

$ convert script_k.gif -coalesce -reverse \
          -quiet -layers OptimizePlus  -loop 0 reversed.gif


I had to re-add the "-loop" option to the above as this needs to be attached to the first image, which is now the last image! The result could also use some timing adjustments, but as you can see it now 'undraws' the letter!
Be sure to "-coalesce" the image sequence before reversing it, as any Frame Optimizations present are dependant on the image order. Better to remove those optimizations first.


3.附：格式转换
https://blog.csdn.net/wonengguwozai/article/details/53122629
convert 转换图像格式和大小，模糊，裁剪，驱除污点，抖动，临近，图片上画图片，加入新图片，生成缩略图等。



$ mogrify -resize 640x480 *.jpg
//      将当前目录下所有的jpg文件缩为为640x480分辨率




4.我用的png转gif的
$ cat a.sh
convert -delay 0 *.png ~/web/a1.gif
convert ~/web/a1.gif -coalesce -reverse -quiet -layers OptimizePlus -loop 0 ~/web/a2.gif
convert ~/web/a1.gif ~/web/a2.gif ~/web/a3.gif





refer:
https://imagemagick.org/Usage/
http://www.imagemagick.org/Usage/anim_mods/#reverse



========================================
linux中将video转换成gif: ffmpeg + imagemagick
----------------------------------------
适合录屏之后转gif动画，方便ppt中不依赖播放器的演示。
步骤：从视频中截屏画面，把图转为gif

一、安装ffmpeg
## sudo add-apt-repository ppa:mc3man/trusty-media
## sudo apt-get update
sudo apt-get install ffmpeg
　　

二、安装imagemagick
sudo apt-get install imagemagick
　　

三、将video转换成frame
ffmpeg -ss 0 -i aa.mp4 -to 17 -r 5 frame%02d.jpg

　　参数说明：
　　　　ss: 是截取的起始位置，可以是一个绝对位置如：00:00:12
　　　　to: 是截取的结束位置，可以是一个绝对位置如：00:00:12
　　　　i: 视屏路径
　　　　r: 比率值越大截取的frame就越多 
　　　　%02d: 两位数字，生成的文件名类似 frame01.jpg frame02.jpg 


四、将frame打包成gif
convert -delay 5 -loop 0 frame*.jpg output.gif
　　参数说明：
　　　　delay: 表示1秒内显示多少帧
　　　　loop: 循环（0表示无限循环)

五、缩放
mogrify -resize 360x200 xx.gif
mogrify -resize 360 xx.gif
	表示缩放为360像素，差不多微信宽度了。


refer:
https://www.cnblogs.com/xwgblog/p/5091799.html



========================================
Linux下批量修改文件名(rename)
----------------------------------------
Linux的 rename 命令有两个版本(C语言和Perl语言)，早期的Linux发行版基本上使用的是C语言版本，现在系统几乎都是Perl语言版本了(支持正则处理，功能更强大)
后文重点说perl版本的rename的用法。


1. centOS是util-linux命令。
rename [options] <expression> <replacement> <file...>
rename from to files 把文件名中的from改为to

1)rename命令批量修改文件名
$ rename 'mef-COL' 'c' *fastq #mef-COL03_R2.fastq 变成了 c03_R2.fastq




2. Ubuntu则是perl命令。
三种形式[2]
匹配：m//  (可以省略m，直接写成/regexp/)
替换：s/// 
转化：tr///　



$ rename 's/\.txt/\.ext/' * #替换后缀名.txt为.ext









perl版rename: 
https://www.cnblogs.com/AloneSword/p/5072698.html
https://www.cnblogs.com/dingbj/p/10089686.html





========================================
linux下的计算器 bc
----------------------------------------
https://www.cnblogs.com/ace9/archive/2011/04/29/2032688.html



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


