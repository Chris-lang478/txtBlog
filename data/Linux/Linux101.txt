Linux 十大常用命令

序言：
linux是命令行操作为主、键盘操作为辅的系统，因此熟悉常用命令十分必要。

more to learn:
	http://yhf8377.blog.163.com/blog/static/176860177201382991510156/
	此文章是《Ubuntu／VirtualBox虚拟化应用案例系列》的第1部分

	Ubuntu服务器命令行环境下VirtualBox的安装和管理
	Ubuntu服务器iptables防火墙配置
	Ubuntu服务器DNS及DHCP配置
	Ubuntu服务器OpenVPN配置
	Ubuntu服务器MySQL数据库的安装、配置及优化
	Ubuntu服务器rsync／rsnapshot备份管理安装及配置



========================================
文件操作 十大常用命令
----------------------------------------
对于ubuntu系统，快捷键ctrl+Alt+T就能打开一个终端窗口。
可以在这里输入窗口。


1.常用操作：
mkdir	创建目录
rmdir	删除目录
cd	改变目录
ls	显示文件信息
cat	编辑文件
less	显示文件内容
cp	复制文件
mv	更改文件名
rm	删除文件
chmod	改变权限

2.pdf版
如果想打印出来细看，推荐北京大学cbi罗静初老师总结的版本：
Unix 十大常用命令：http://abc.cbi.pku.edu.cn/man/unix-commands1.pdf
Unix 十大专用命令：http://abc.cbi.pku.edu.cn/man/unix-commands2.pdf
Unix 十大实用命令：http://abc.cbi.pku.edu.cn/man/unix-commands3.pdf

from:http://abc.cbi.pku.edu.cn/manuals.php


========================================
解包命令tar： 解压和压缩命令详解
----------------------------------------
常用实例：
	源代码一般以file.tar.gz file.tar.bz2或file.src.rpm 打包；
	file.tar.gz和file.tar.bz2格式的解包命令如下； 
	[root@ubuntu]# tar jxvf file.tar.bz2 
	[root@ubuntu]# tar zxvf file.tar.gz

tar详解
	-c: 建立压缩档案
	-x：解压
	-t：查看内容
	-r：向压缩归档文件末尾追加文件
	-u：更新原压缩包中的文件

这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

	-z：有gzip属性的
	-j：有bz2属性的
	-Z：有compress属性的
	-v：显示所有过程
	-O：将文件解开到标准输出

下面的参数-f是必须的

-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。

# tar -cf all.tar *.jpg 
这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。

# tar -rf all.tar *.gif 
这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。

# tar -uf all.tar logo.gif 
这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。

# tar -tf all.tar 
这条命令是列出all.tar包中所有文件，-t是列出文件的意思

# tar -xf all.tar 
这条命令是解出all.tar包中所有文件，-x是解开的意思


压缩
tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg
tar –czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz
tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2
tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z
rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux
zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux
 
解压
tar –xvf file.tar //解压 tar包
tar -xzvf file.tar.gz //解压tar.gz
tar -xjvf file.tar.bz2   //解压 tar.bz2
tar –xZvf file.tar.Z   //解压tar.Z
unrar e file.rar //解压rar
unzip file.zip //解压zip

总结
1、*.tar 用 tar –xvf 解压
2、*.gz 用 gzip -d或者gunzip 解压
3、*.tar.gz和*.tgz 用 tar –xzf 解压
4、*.bz2 用 bzip2 -d或者用bunzip2 解压
5、*.tar.bz2用tar –xjf 解压
6、*.Z 用 uncompress 解压
7、*.tar.Z 用tar –xZf 解压
8、*.rar 用 unrar e解压
9、*.zip 用 unzip 解压

http://blog.csdn.net/dunyanan1/article/details/38869059



========================================
Ubuntu软件安装与卸载：apt-get
----------------------------------------
软件版本低，想安装新版本的。想到2条：删了再装，或者升级。

1.卸载：
sudo apt-get purge mongodb
敲密码进去，OK
作用不大。

2.升级软件
sudo apt-get upgrade 更新已安装的包

refer: http://blog.csdn.net/linuxzhouying/article/details/7192612


如何卸载？
//todo

========================================
deb包是debian，ubuntu等LINUX发行版的软件安装包
----------------------------------------
1.deb格式 

deb是debian linus的安装格式，跟red hat的rpm非常相似，最基本的安装命令是：dpkg -i file.deb 

dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。是类似于rpm的软件包，而非debian,ubuntu系统不推荐使用deb软件包，因为要解决软件包依赖问题，安装也比较麻烦。

1.一般在此类发行版中可以直接双击安装。
2.手动安装。如果您喜欢使用终端，您需要管理员权限来安装一个 .deb 文件。 打开终端后，输入： 
$ sudo dpkg -i package_file.deb 

要卸载一个 .deb 文件，在您的软件包管理器中取消选中它。或者在终端中，输入:
$ sudo dpkg -r package_name 

例如安装QQ，文件名为linuxqq_v1.0-preview3_i386.deb, 可运行：
$ sudo dpkg -i linuxqq_v1.0-preview3_i386.deb

Ubuntu下deb包的安装方法 http://blog.csdn.net/kevinhg/article/details/5934462


以下是一些 Dpkg 的普通用法：
1. dpkg -i <package.deb>
安装一个 Debian 软件包，如你手动下载的文件。
2. dpkg -c <package.deb>
列出 <package.deb> 的内容。
3. dpkg -I <package.deb>
从 <package.deb> 中提取包裹信息。
4. dpkg -r <package>
移除一个已安装的包裹。
5. dpkg -P <package>
完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。
6. dpkg -L <package>
列出 <package> 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。
7. dpkg -s <package>
显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。
8. dpkg-reconfigure <package>
重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。


http://zhidao.baidu.com/link?url=ZYQMJY-mAOc4yU7QumlIUS4S3HiHz0O1lbdOHZjpbJv4xjxI8KEb1mbD43ley9zlvs7n0JDWumpFj4wxTSBkF_





========================================
软连接（快捷方式）：ln -s 命令
----------------------------------------
ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。
1．命令格式：
 ln [参数][源文件或目录][目标文件或目录]

2.软链接和硬链接的概念

硬链接可认为是一个文件拥有两个文件名;而软链接则是系统新建一个链接文件，此文件指向其所要指的文件
ln -s /root/lntest/source/ /root/lntest/dist/

软链接: ln –s 源文件 目标文件
	1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式
	2.软链接可以 跨文件系统 ，硬链接不可以
	3.软链接可以对一个不存在的文件名进行链接
	4.软链接可以对目录进行链接

硬链接: ln 源文件 目标文件，没有参数-s
	1.硬链接，以文件副本的形式存在。但不占用实际空间。
	2.不允许给目录创建硬链接
	3.硬链接只有在同一个文件系统中才能创建

不可以对文件夹建立硬连接的，我们通常用的还是软连接比较多
3.
范例 :
　　将档案 yy 产生一个 symbolic link : zz
　　ln -s yy zz
　　将档案 yy 产生一个 hard link : zz
　　ln yy xx﻿
PS：如果想要删除链接，则像普通文件一样直接rm 链接名称即可。


一共4种形式：
wjl@ubuntu:~$ ln --help

Usage: ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
  or:  ln [OPTION]... TARGET                  (2nd form)
  or:  ln [OPTION]... TARGET... DIRECTORY     (3rd form)
  or:  ln [OPTION]... -t DIRECTORY TARGET...  (4th form)

In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.

Create hard links by default, symbolic links with --symbolic.

By default, each destination (name of new link) should not already exist.
When creating hard links, each TARGET must exist.  Symbolic links
can hold arbitrary text; if later resolved, a relative link is
interpreted in relation to its parent directory.

Mandatory arguments to long options are mandatory for short options too.
      --backup[=CONTROL]      make a backup of each existing destination file
  -b                          like --backup but does not accept an argument
  -d, -F, --directory         allow the superuser to attempt to hard link
                                directories (note: will probably fail due to
                                system restrictions, even for the superuser)
  -f, --force                 remove existing destination files
  -i, --interactive           prompt whether to remove destinations
  -L, --logical               dereference TARGETs that are symbolic links
  -n, --no-dereference        treat LINK_NAME as a normal file if
                                it is a symbolic link to a directory
  -P, --physical              make hard links directly to symbolic links
  -r, --relative              create symbolic links relative to link location
  -s, --symbolic              make symbolic links instead of hard links
  -S, --suffix=SUFFIX         override the usual backup suffix
  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create
                                the links
  -T, --no-target-directory   treat LINK_NAME as a normal file always
  -v, --verbose               print name of each linked file
      --help     display this help and exit
      --version  output version information and exit

The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.
The version control method may be selected via the --backup option or through
the VERSION_CONTROL environment variable.  Here are the values:

  none, off       never make backups (even if --backup is given)
  numbered, t     make numbered backups
  existing, nil   numbered if numbered backups exist, simple otherwise
  simple, never   always make simple backups

Using -s ignores -L and -P.  Otherwise, the last option specified controls
behavior when a TARGET is a symbolic link, defaulting to -P.

Report ln bugs to bug-coreutils@gnu.org
GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
General help using GNU software: <http://www.gnu.org/gethelp/>
For complete documentation, run: info coreutils 'ln invocation'

http://www.cnblogs.com/peida/archive/2012/12/11/2812294.html
http://www.linuxidc.com/Linux/2014-12/111056.htm
http://man.linuxde.net/ln



========================================
linux下杀死进程（kill）的N种方法
----------------------------------------
http://blog.csdn.net/andy572633/article/details/7211546

常规篇：
　首先，用ps查看进程，方法如下：

$ ps -ef

……
smx       1822     1  0 11:38 ?        00:00:49 gnome-terminal
smx       1823  1822  0 11:38 ?        00:00:00 gnome-pty-helper
smx       1824  1822  0 11:38 pts/0    00:00:02 bash
smx       1827     1  4 11:38 ?        00:26:28 /usr/lib/firefox-3.6.18/firefox-bin

或者：

$ ps -aux

……

smx       1822  0.1  0.8  58484 18152 ?        Sl   11:38   0:49 gnome-terminal
smx       1823  0.0  0.0   1988   712 ?        S    11:38   0:00 gnome-pty-helper
smx       1827  4.3  5.8 398196 119568 ?       Sl   11:38  26:13 /usr/lib/firefox-3.6.18/firefox-bin

此时如果我想杀了火狐的进程就在终端输入：

$ kill -s 9 1827

其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。各个终止信号及其作用见附录。
1827则是上面ps查到的火狐的PID。

简单吧，但有个问题，进程少了则无所谓，进程多了，就会觉得痛苦了，无论是ps -ef 还是ps -aux，每次都要在一大串进程信息里面查找到要杀的进程，看的眼都花了。




进阶篇：

把ps的查询结果通过管道给grep查找包含特定字符串的进程。管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。

$ ps -ef | grep firefox
smx       1827     1  4 11:38 ?        00:27:33 /usr/lib/firefox-3.6.18/firefox-bin
smx      12029  1824  0 21:54 pts/0    00:00:00 grep --color=auto firefox

这次就清爽了。然后就是

$kill -s 9 1827


========================================
查看Linux系统版本号，是32位/64位：
----------------------------------------
//version of linux:
$ cat /etc/issue
    Ubuntu 15.10 \n \l

// bits of OS
$ sudo uname --m
x86_64

//http://jingyan.baidu.com/article/db55b609ab531f4ba30a2f13.html

========================================
Ubuntu上安装VNC server
----------------------------------------
软件：
https://wiki.debian.org/VNCviewer
http://packages.ubuntu.com/precise/gvncviewer

配置：
http://blog.itpub.net/519536/viewspace-607549/

1.安装 
$apt-get install vnc4server

2.启动
2.启动VNC服务
使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连个需要占用1个桌面
启动编号为1的桌面示例如下
$ vncserver

You will require a password to access your desktops.
Password:
Verify:
xauth:  file /home/wangjl/.Xauthority does not exist

New 'Bioinf1:2 (wangjl)' desktop is Bioinf1:2

Creating default startup script /home/wangjl/.vnc/xstartup
Starting applications specified in /home/wangjl/.vnc/xstartup
Log file is /home/wangjl/.vnc/Bioinf1:2.log 

以上命令执行的过程中，因为是第一次执行，需要输入密码，这个密码被加密保存在用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。
BTW：/root/.vnc/目录下还有一个“testdb:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号。



3.VNC服务使用的端口号与桌面号的关系
VNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下
桌面号为“1”  ---- 端口号为5901
桌面号为“2”  ---- 端口号为5902
桌面号为“3”  ---- 端口号为5903
……
基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下
桌面号为“1”  ---- 端口号为5801
桌面号为“2”  ---- 端口号为5802
桌面号为“3”  ---- 端口号为5803
……
基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下
[root@testdb ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT
[root@testdb ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT



重新启动vncserver服务的方法：
[root@testdb ~]# vncserver -kill :1
[root@testdb ~]# vncserver :1


7.修改VNC访问的密码
使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和oracle用户需要分别修改，修改过程如下：
[root@testdb ~]# vncpasswd
Password:
Verify:
[root@testdb ~]#





8.最后，需要配置一下防火墙，允许VNC客户端连接VNC server。VNC server监听的端口从5900开始，display :1的监听5901，display :2监听5902，以此类推。CentOs的防火墙缺省是不允许连接这些端口的，所以需要使用下面的步骤打开防火墙（需要root权限)：
　　vi /etc/sysconfig/iptables
　　找到下面的语句：
　　-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
　　在此行之前，加上下面的内容：
　　-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 5900:5903 -j ACCEPT
　　这句话的含义是，允许其它机器访问本机的5900到5903端口，这样，display:1, display:2, display:3的用户就可以连接到本机。
　　然后使用root身份重新启动防火墙：
　　/sbin/service iptables restart





202.196.120.157:1



========================================
su 和 su - 的区别
----------------------------------------
su只是切换了root身份，但Shell环境仍然是普通用户的Shell；
而su - 连用户和Shell环境一起切换成root身份了。

只有切换了Shell环境才不会出现PATH环境变量错误。

su切换成root用户以后，pwd一下，发现工作目录仍然是普通用户的工作目录；
而用su -命令切换以后，工作目录变成root的工作目录了



========================================
nohup - Linux 强大的nohup(进程后台执行)
----------------------------------------
(1)
用途：LINUX命令用法，不挂断地运行命令。 　　
语法：nohup Command [ Arg ... ] [　& ] 

描述：nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。 　　

(2)日志文件
如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。 　　

退出状态：该命令返回下列出口值： 　　
126 可以查找但不能调用 Command 参数指定的命令。 　　
127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。 　　
否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。 　　

(3)输出文件
nohup命令及其输出文件 　　
nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。 　　

该命令的一般形式为：nohup command & 　　使用nohup命令提交作业 　　

如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件： 　　
nohup command > myout.file 2>&1 & 　　
在上面的例子中，输出被重定向到myout.file文件中。　

(4)任务管理
使用 jobs 查看任务。　
使用 fg %n　关闭。

另外有两个常用的ftp工具ncftpget和ncftpput，可以实现后台的ftp上传和下载，这样我就可以利用这些命令在后台上传和下载文件了。





(5)实例
例如多线程下载文件：
nohup axel -n 5 ftp://igenome:G3nom3s4u@ussd-ftp.illumina.com/Homo_sapiens/UCSC/hg19/Homo_sapiens_UCSC_hg19.tar.gz &

后台运行：nohup + 命令 + &
$ nohup bowtie ~/refer/hg19/hg19 -q ../SRR3101251.fastq -m 1 -p 4 -S 2>SRR3101251.out >SRR3101251.sam &
表示: 文件输出到sam，错误输出到out文件。

http://bestchenwu.iteye.com/blog/1073565



========================================
find命令 - 查找文件和位置
----------------------------------------
1.在当前目录下，查找txt文件：
find . -name "*.txt" -print

1.2 不显示报错信息（如权限不够等）
$ find / -name '*hg19*Gene*' 2>/dev/null |grep 'hg19'



2.在当前目录下，查找十一放假期间创建的txt文件：
find . -name "*.txt"  -newermt '2016-10-01' ! -newermt '2016-10-08' -print




========================================
Axel - 多线程下载命令
----------------------------------------
Axel 是 Linux 下一个不错的HTTP/FTP高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。

安装：apt-get install axel

Axel命令使用方法：axel 参数 文件下载地址
可选参数：
	-n 指定线程数
	-o 指定另存为目录
	-s 指定每秒的最大比特数
	-q 静默模式

如从Diahosting下载lnmp安装包指定10个线程，存到/tmp/：
axel -n 10 -o /tmp/ http://soft.vpser.net/lnmp/lnmp0.7-full.tar.gz

#不要使用3线程，直接用10线程。就是快。
axel -n 3 https://cran.rstudio.com/bin/windows/contrib/3.4/sp_1.2-5.zip 
axel -n 10 https://cran.rstudio.com/bin/windows/contrib/3.4/maptools_0.9-2.zip

如果下载过程中下载中断，可以再执行下载命令即可恢复上次的下载进度。

refer:
http://www.cnweed.com/4048.html





附录 -- CentOS下安装axel
1.下载
失效链接 http://alioth.debian.org/frs/download.php/3015/axel-2.4.tar.gz
wget http://www.ha97.com/code/axel-2.4.tar.gz

2.解压
tar zxvf axel-2.4.tar.gz
cd axel-2.4
./configure
make
make install

http://axel.alioth.debian.org


========================================
ftp命令：传输文件
----------------------------------------
步骤 1: 建立 FTP 连接
想要连接 FTP 服务器，在命令上中先输入ftp然后空格跟上 FTP 服务器的域名 'domain.com' 或者 IP 地址
例如:
ftp domain.com
ftp 192.168.0.1
ftp user@ftpdomain.com

或者使用sftp，直接进入第三步：
~$ sftp wangcc@192.168.1.114


步骤 2: 使用用户名密码登录
绝大多数的 FTP 服务器是使用密码保护的，因此这些 FTP 服务器会询问'username'和'password'.

如果你连接到被称作匿名 FTP 服务器（LCTT 译注：即，并不需要你有真实的用户信息即可使用的 FTP 服务器称之为匿名 FTP 服务器），可以尝试anonymous作为用户名以及使用空密码：

Name: anonymous
Password:
之后，终端会返回如下的信息：

230Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp>

步骤 3: 目录操作
FTP 命令可以列出、移动和创建文件夹，如同我们在本地使用我们的电脑一样。ls可以打印目录列表，cd可以改变目录，mkdir可以创建文件夹。
可以使用的命令：ls, pwd, cd Downloads/
使用help查看帮助。

步骤 4: 下载文件
我们可以使用命令 get 来下载文件，比如：
sftp> get natapp
Fetching /home/wangcc/Downloads/natapp to natapp
/home/wangcc/Downloads/natapp                 100% 6934KB   6.8MB/s   00:00

下载多个文件可以使用通配符及 mget 命令。例如，下面这个例子我打算下载所有以 .xls 结尾的文件。
mget *.xls



步骤 5: 使用 FTP 上传文件
完成 FTP 连接后，FTP 同样可以上传文件

使用 put命令上传文件：
put file

当文件不再当前本地目录下的时候，可以使用绝对路径：
put /path/file

同样，可以上传多个文件：
mput *.xls


步骤 6: 关闭 FTP 连接
完成FTP工作后，为了安全起见需要关闭连接。有三个命令可以关闭连接：
bye
exit
quit

需要更多帮助，在使用 ftp 命令连接到服务器后，可以使用help获得更多帮助。

http://www.linuxidc.com/Linux/2015-12/126357.htm




========================================
把程序输出到路径path
----------------------------------------
.bash_profile和.bashrc作用类似。


将python的路径加入.bash_profile中的PATH.，并执行source .bash_profile使配置立即生效
export PATH=/home/tmxu/local/python/bin/:$PATH


另外也可以在.bashrc。加上export PYTHONPATH=~/opt/python:PYTHONPATH







========================================
vim 从入门到精通(1234晋级), 及其常用命令
----------------------------------------
http://www.vim.org/

0.提醒

序言：vim是linux上的文本编辑器。十分强大。强大的东西都不好学。
学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。


我建议下面这四个步骤：
1.存活
2.感觉良好
3.觉得更好，更强，更快
4.使用VIM的超能力
当你走完这篇文章，你会成为一个vim的 superstar。

在开始学习以前，我需要给你一些警告：
	- 学习vim在开始时是痛苦的。
	- 需要时间
	- 需要不断地练习，就像你学习一个乐器一样。
	- 不要期望你能在3天内把vim练得比别的编辑器更有效率。
	- 事实上，你需要2周时间的苦练，而不是3天。


0.1 基础知识: 这里介绍vim的细节操作。

vim的基础知识请自行百度。这里只列出提纲：
1.vim分为三种模式：是什么？
2.各个模式的作用？怎么切换？
3.保存文件：esc进入单行模式，
	:w 回车就保存了
	:wq 是保存和退出
	:q! 强制退出，放弃保存


0.2 常用功能

1.vi里怎么把一行文字上移到上一行
将上一行移到下一行就相当于将下一行移到上一行了
具体操作如下：
1).光标落在上一行使用 dd 删除当前行；
2).再使用 p 粘贴删除的行；










1 第一级 – 存活

常用操作：
	i → Insert 模式，按 ESC 回到 Normal 模式.
	x → 删当前光标所在的一个字符。
	:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （注：:w 后可以跟文件名）
	dd → 删除当前行，并把删除的行存到剪贴板里
	p → 粘贴剪贴板

推荐:
	hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。
	:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（注：退出帮助需要输入:q）

能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。
	

注意:
1.其他软件是按下ctrl后才有几个快捷键，而vim是满键盘都是功能键。
2.下面的文字中，如果是 Ctrl-λ我会写成 <C-λ>.
3.以 : 开始的命令你需要输入 <enter>回车，例如 — 如果我写成 :q 也就是说你要输入 :q<enter>.










2 第二级 – 感觉良好

上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在Normal模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）

各种插入模式
a → 在光标后插入
o → 在当前行后插入一个新行
O → 在当前行前插入一个新行
cw → 替换从光标所在位置后到一个单词结尾的字符

简单的移动光标
0 → 数字零，到行头
^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ → 到本行行尾
g_ → 到本行最后一个不是blank字符的位置。
/pattern → 搜索 pattern 的字符串（注：如果搜索出多个匹配，可按n键到下一个）

拷贝/粘贴 （注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）
P → 粘贴
yy → 拷贝当前行当行于 ddP
Undo/Redo
u → undo
<C-r> → redo

打开/保存/退出/改变文件(Buffer)
:e <path/to/file> → 打开一个文件
:w → 存盘
:saveas <path/to/file> → 另存为 <path/to/file>
:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用:n到下一个文件）

花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。










3 第三级 – 更好，更强，更快

先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。

更好
下面，让我们看一下vim是怎么重复自己的：

. → (小数点) 可以重复上一次的命令
N<command> → 重复某个命令N次
下面是一个示例，找开一个文件你可以试试下面的命令：

2dd → 删除2行
3p → 粘贴文本3次
100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “
. → 重复上一个命令—— 100 “desu “.
3. → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).
更强
你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。

NG → 到第 N 行 （注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）
gg → 到第一行。（注：相当于1G，或 :1）
G → 到最后一行。
按单词移动：
w → 到下一个单词的开头。
e → 到下一个单词的结尾。
> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）

> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（注：程序语句）


Word moves example
下面，让我来说说最强的光标移动：
% : 匹配括号移动，包括 (, {, [. （注：你需要把光标先移到括号上）
* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）
相信我，上面这三个命令对程序员来说是相当强大的。

更快
你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：

<start position><command><end position>

例如 0y$ 命令意味着：

0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。

你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。

还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：

d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等
（注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）










4 第四级 – Vim 超能力


你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。

在当前行上移动光标: 0 ^ $ f F t T , ;
0 → 到行头
^ → 到本行的第一个非blank字符
$ → 到行尾
g_ → 到本行最后一个不是blank字符的位置。
fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
t, → 到逗号前的第一个字符。逗号可以变成其它字符。
3fa → 在当前行查找第三个出现的a。
F 和 T → 和 f 和 t 一样，只不过是相反方向。
Line moves
还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "。

区域选择 <action>a<object> 或 <action>i<object>
在visual 模式下，这些命令很强大，其命令格式为

<action>a<object> 和 <action>i<object>

action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。

vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))
Text objects selection

块操作: <C-v>
块操作，典型的操作： 0 <C-v> <C-d> I-- [ESC]

^ → 到行头
<C-v> → 开始块操作
<C-d> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)
I-- [ESC] → I是插入，插入“--”，按ESC键来为每一行生效。
Rectangular blocks

在Windows下的vim，你需要使用 <C-q> 而不是 <C-v> ，<C-v> 是拷贝剪贴板。

自动提示： <C-n> 和 <C-p>
在 Insert 模式下，你可以输入一个词的开头，然后按 <C-p>或是<C-n>，自动补齐功能就出现了……

Completion

宏录制： qa 操作序列 q, @a, @@
qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例

在一个只有一行且这一行只有“1”的文本中，键入如下命令：

qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.
Macros

可视化选择： v,V,<C-v>
前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：

J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 （注：这个功能相当强大，我太喜欢了）
Autoindent

在所有被选择的行后加上点东西：

<C-v>
选中相关的行 (可使用 j 或 <C-d> 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。
Append to many lines

分屏: :split 和 vsplit.
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。

:split → 创建分屏 (:vsplit创建垂直分屏)
<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
<C-w>+ (或 <C-w>-) : 增加尺寸











5 结束语


上面是作者最常用的90%的命令。
我建议你每天都学1到2个新的命令。
在两到三周后，你会感到vim的强大的。
有时候，学习VIM就像是在死背一些东西。
幸运的是，vim有很多很不错的工具和优秀的文档。
运行vimtutor直到你熟悉了那些基本命令。
其在线帮助文档中你应该要仔细阅读的是 :help usr_02.txt.
你会学习到诸如  !， 目录，寄存器，插件等很多其它的功能。
学习vim就像学弹钢琴一样，一旦学会，受益无穷。

————正文结束————

对于vi/vim只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。不然，Visual Studio也不就会有vim的插件了。

(全文完)


http://linux.vbird.org/linux_basic/0310vi.php
http://blog.csdn.net/niushuai666/article/details/7275406

http://baike.baidu.com/link?url=sYuCPqcOMJo8-5trt3LguqMvWK9gPB8BNV_eUx6mRm4sdbeoSYMybzV2QHKolKXctdlfJrBlLdeboAQwY33yMbw_wSPYBWl6OfAjpVvNBVO




6 Putty的复制和粘贴

突然发现putty在选择后就跑到粘贴板上去了，可以在windows中直接ctrl+V！在网上搜了一下，总结：
（一）复制：
　　（１）左键选择，就相当于ctrl+C；
　　（２）左键双击，选择一个单词；
　　（３）左键双击不抬起鼠标，左右移动，则以单词为单位选择；
　　（４）三击为选择一行；
　　（５）三击最后不抬鼠标，上下移动，则以行为单位选择。
（二）粘贴：
　　（１）鼠标右键。
　　（２）Unix终端通用：shift+insert
http://blog.chinaunix.net/uid-20332519-id-3498113.html


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


