JavaScript教程 快速入门

========================================
js能干什么？
----------------------------------------
js目前有统一三端的趋势:前端、后端、移动端。

- js可以直接在浏览器中运行，显示、动画、计算等
- 后端处理数据逻辑。
- 移动端结合facebook最新的项目：react native可以做出web/iOS/Android通用的应用。

js是目前唯一能运行于浏览器端的语言，你喜欢或者怨恨，都得学！

由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了。
不过，JavaScript的核心语法并没有多大变化。我们的教程会先讲JavaScript最核心的用法，然后，针对ES6讲解新增特性。

========================================
js的运行方式
----------------------------------------
三种：
1.行内<body onload='someFunction()'>

2.script标签中：
 <script>
    alert('Hello, world');
  </script>
3.外部js文件：
<script src="/public/js/abc.js"></script>

========================================
js编辑、运行与调试
----------------------------------------
1.编辑器推荐
Sublime Text
免费，但不注册会不定时弹出提示框。

Notepad++
免费

2.如何运行JavaScript
直接双击html文件即可运行。
但由于浏览器的安全限制，以file://开头的地址无法执行如联网等JavaScript代码，最终，你还是需要架设一个Web服务器，然后以http://开头的地址来正常执行所有JavaScript代码。

3.调试
推荐用chrome浏览器调试。打开含有js的页面后，点击键盘上的F12健即可看到控制台，可以研究一下控制台的输出，以及意义。控制台对学习和调试js代码帮助巨大！

尝试控制台输入：
a=123;
console.log(a);
回车后显示的值就是变量的内容。

========================================
变量命名
----------------------------------------
- 变量前要加var ，否则是全局变量！
var x = 1, y = 2;

- 注释2种
//单行注释
/*这是
多行
注释*/

========================================
数据类型与变量
----------------------------------------
1.数据类型包括
数字	Number
字符串	string
布尔值
对象等

2.运算符
逻辑运算符：或||	且&&	非!

其中有很多例外：//todo
- ==和===的区别?
- 如何判断NaN?
- null和undefined如何判断？


3.数组
推荐使用字面量定义：arr=[1,2,3];
	arr[3]=4;
引用(下标从0开始)：arr[0] //1;



4.对象
JavaScript的对象是一组由键-值组成的无序集合，例如：
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};
获取和设置属性使用对象变量.属性名的方式：
person.name//'Bob'
或者person['name']//'Bob'


5.动态语言变量可以随便赋值

在JavaScript中，使用等号=对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，例如：

var a = 123; // a的值是整数123
a = 'ABC'; // a变为字符串


6.strict模式
启用strict模式的方法是在JavaScript代码的第一行写上：
'use strict';
这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。


'use strict';
// 如果浏览器支持strict模式，
// 下面的代码将报ReferenceError错误:
abc = 'Hello, world';
alert(abc);

运行代码，如果浏览器报错，请修复后再运行。如果浏览器不报错，说明你的浏览器太古老了，需要尽快升级。
不用var申明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。我们在后面编写的JavaScript代码将全部采用strict模式。




========================================
字符串
----------------------------------------
字符串常用方法：
toUpperCase()把一个字符串全部变为大写：'I am Here'.toUpperCase();// "I AM HERE"
toLowerCase()把一个字符串全部变为小写：'I am Here'.toLowerCase();// "i am here"
indexOf()会搜索指定字符串出现的位置：'I am Here'.indexOf('am');//2
substring()返回指定索引区间的子串：
	'I am Here'.substring(3,5);// 从索引3开始到5（不包括5），返回 "m "
	'I am Here'.substring(5,3);//是一样的 "m "
	'I am Here'.substring(3);//从索引3开始到结束，返回"m Here"
substr(n,m)返回指定索引n开始的m个子串：'I am Here'.substr(3,3);//从索引3开始的3个字符"m H"
'I am Here'.charAt(0); //"I"，注意这个charAt()只能用来访问，不能设置。

========================================
数组
----------------------------------------
数组越界不会报错，设置和访问的时候注意是否越界。

常用方法：
1. indexOf()与字符串方法类似，来搜索一个指定的元素的位置：
	var arr = [10, 20, '30', 'xyz'];
	arr.indexOf(10); // 元素10的索引为0
	arr.indexOf('30'); // 元素'30'的索引为2
	
2. slice()对应String的substring()，截取Array的部分元素，然后返回一个新的Array：
	注意到slice()的起止参数包括开始索引，不包括结束索引。
	
	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
	arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']
	
	- 如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array：

		var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
		var aCopy = arr.slice();
		aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
		aCopy === arr; // false
	
3. sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：

	var arr = ['B', 'C', 'A'];
	arr.sort();
	arr; // ['A', 'B', 'C']
	用函数可以自定义排序。
	
4. reverse()把整个Array的元素给掉个个，也就是反转：

	var arr = ['one', 'two', 'three'];
	arr.reverse(); 
	arr; // ['three', 'two', 'one']

5. splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：

	var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
	// 从索引2开始删除3个元素,然后再添加两个元素:
	arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	// 只删除,不添加:
	arr.splice(2, 2); // ['Google', 'Facebook']
	arr; // ['Microsoft', 'Apple', 'Oracle']
	// 只添加,不删除:
	arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']

6. concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：

	var arr = ['A', 'B', 'C'];
	var added = arr.concat([1, 2, 3]);
	added; // ['A', 'B', 'C', 1, 2, 3]
	arr; // ['A', 'B', 'C']

	- 原数组没有被修改！
	- concat可以接收任意元素或数组，并拆分数组合并到调用该方法的数组中。
		var arr = ['A', 'B', 'C'];
		arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]

7. join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：

	var arr=["A", "B", "C", "D", "E", "F", "G"]
	arr.join('-'); //返回 "A-B-C-D-E-F-G"
	arr; //["A", "B", "C", "D", "E", "F", "G"]

8. push和pop
	push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
	
	var arr = [1, 2];
	arr.push('A', 'B'); // 返回Array新的长度: 4
	arr; // [1, 2, 'A', 'B']
	arr.pop(); // pop()返回'B'
	arr; // [1, 2, 'A']
	arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
	arr; // []
	arr.pop(); // 空数组继续pop不会报错，而是返回undefined
	arr; // []
	
9. unshift和shift
	如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
	
	var arr = [1, 2];
	arr.unshift('A', 'B'); // 返回Array新的长度: 4
	arr; // ['A', 'B', 1, 2]
	arr.shift(); // 'A'
	arr; // ['B', 1, 2]
	arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
	arr; // []
	arr.shift(); // 空数组继续shift不会报错，而是返回undefined
	arr; // []
	
	
	
	
10. 多维数组
就是字面量[]的嵌套。
	var arr = [[1, 2, 3], [400, 500, 600], '-'];
	arr[0][0]; //1
	arr[1][1]; //500






========================================
对象
----------------------------------------
JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。
类似与其他语言的hash结构，关联数组等。
js中的对象用于描述现实世界中的某个对象。
定义方法：
var xiaoming = {
    name: '小明',
    birth: 1990,
    school: 'No.1 Middle School',
    height: 1.70,
    weight: 65,
    score: null
};

继续修改或定义：
xiaoming.birth=1991;//可以用点号定义 对象.属性，但是关键字除外
xiaoming['name']='xiaoming';//也可以用 对象['属性']

引用方式也是2种：
	对象.属性
	对象['属性']
	xiaoming.school;// "No.1 Middle School"
	
如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined：
	xiaoming.mother;// undefined

	
删除属性：
	delete xiaoming.age; //返回true。删除age属性
	xiaoming.age;  //undefined
	delete xiaoming.age; //还是返回true。 删除一个不存在的school属性也不会报错
	
如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：
	'height' in xiaoming //true
	'age' in xiaoming	//false

不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：
	'toString' in xiaoming; // true
因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。

要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：
var xiaoming = {
    name: '小明'
};
xiaoming.hasOwnProperty('name'); // true
xiaoming.hasOwnProperty('toString'); // false




========================================
控制结构-分支：if...else结构
----------------------------------------
1. JavaScript使用if () { ... } else { ... }来进行条件判断。
	var age = 20;
	if (age >= 18) { // 如果age >= 18为true，则执行if语句块
		alert('adult');
	} else { // 否则执行else语句块
		alert('teenager');
	}
	
其中else语句是可选的。如果语句块只包含一条语句，那么可以省略{}：

	var age = 20;
	if (age >= 18)
		alert('adult');
	else
		alert('teenager');

省略{}的危险之处在于，如果后来想添加一些语句，却忘了写{}，就改变了if...else...的语义，例如：

var age = 20;
if (age >= 18)
    alert('adult');
else
    console.log('age < 18'); // 添加一行日志
    alert('teenager'); // <- 这行语句已经不在else的控制范围了

我们建议永远都要写上{}。

2. 多行条件判断
	var age = 3;
	if (age >= 18) {
		alert('adult');
	} else if (age >= 6) {
		alert('teenager');
	} else {
		alert('kid');
	}

3. 布尔值的自动转换
如果条件不是布尔值怎么办？
var s = '123';
if (s.length) { // 条件计算结果为3
    alert('我执行了。');
}
JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true，因此上述代码条件判断的结果是true。




========================================
控制结构-分支:switch...case
----------------------------------------
1.用法示例：
var day=new Date().getDay();
switch (day){
	case 0:
	  x="Today it's Sunday";
	  break;
	case 1:
	  x="Today it's Monday";
	  break;
	case 2:
	  x="Today it's Tuesday";
	  break;
	case 3:
	  x="Today it's Wednesday";
	  break;
	case 4:
	  x="Today it's Thursday";
	  break;
	case 5:
	  x="Today it's Friday";
	  break;
	case 6:
	  x="Today it's Saturday";
	  break;
}

注意要加break;


2. default 关键词

var day=new Date().getDay();
switch (day){
	case 6:
	  x="Today it's Saturday";
	  break;
	case 0:
	  x="Today it's Sunday";
	  break;
	default:
	  x="Looking forward to the Weekend";
}

========================================
控制结构-循环
----------------------------------------
1. for循环最常用
	var x = 0;
	var i;
	for (i=1; i<=100; i++) {
		x = x + i;
	}
	x; // 5050


for循环最常用的地方是利用索引来遍历数组：
	var arr = ['Apple', 'Google', 'Microsoft'];
	var i, x;
	for (i=0; i<arr.length; i++) {
		x = arr[i];
		console.log(x);
	}

2. for ... in
for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来：
	var o = {
		name: 'Jack',
		age: 20,
		city: 'Beijing'
	};
	for (var key in o) {
		alert(key); // 'name', 'age', 'city'
	}


要过滤掉对象继承的属性，用hasOwnProperty()来实现：
	var o = {
		name: 'Jack',
		age: 20,
		city: 'Beijing'
	};
	for (var key in o) {
		if (o.hasOwnProperty(key)) {
			alert(key); // 'name', 'age', 'city'
		}
	}

由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引：
	var a = ['A', 'B', 'C'];
	for (var i in a) {
		alert(i); // '0', '1', '2'
		alert(a[i]); // 'A', 'B', 'C'
	}
请注意，for ... in对Array的循环得到的是String而不是Number。

3.while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：
	var x = 0;
	var n = 99;
	while (n > 0) {
		x = x + n;
		n = n - 2;
	}
	x; // 2500
	
在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。

4. do ... while
它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：	

var n = 0;
do {
    n = n + 1;
} while (n < 100);
n; // 100
用do { ... } while()循环要小心，循环体会至少执行1次，而for和while循环则可能一次都不执行。


小结

循环是让计算机做重复任务的有效的方法，有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。JavaScript的死循环会让浏览器无法正常显示或执行当前页面的逻辑，有的浏览器会直接挂掉，有的浏览器会在一段时间后提示你强行终止JavaScript的执行，因此，要特别注意死循环的问题。

在编写循环代码时，务必小心编写初始条件和判断条件，尤其是边界值。特别注意i < 100和i <= 100是不同的判断逻辑。




========================================
Map和Set
----------------------------------------
1. Map
JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。
但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
为了解决这个问题，最新的ES6规范引入了新的数据类型Map。

Map是一组键值对的结构，具有极快的查找速度。
初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：

	var m = new Map(); // 空Map
	m.set('Adam', 67); // 添加新的key-value
	m.set('Bob', 59);
	m.has('Adam'); // 是否存在key 'Adam': true
	m.get('Adam'); // 67
	m.delete('Adam'); // 删除key 'Adam'
	m.get('Adam'); // undefined
由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉.

2. Set
和数学中的集合概念类似，只保存key，不保存value。
	var s = new Set([1, 2, 3, 3, '3']);
	s; // Set {1, 2, 3, "3"}
通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：

	>>> s.add(4)
	>>> s
	{1, 2, 3, 4}
	>>> s.add(4)
	>>> s
	{1, 2, 3, 4}

通过delete(key)方法可以删除元素：

	var s = new Set([1, 2, 3]);
	s; // Set {1, 2, 3}
	s.delete(3);
	s; // Set {1, 2}

	
小结
Map和Set是ES6标准新增的数据类型，请根据浏览器的支持情况决定是否要使用。

========================================
iterable
----------------------------------------
遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。

具有iterable类型的集合可以通过新的for ... of循环来遍历。

for ... of循环是ES6引入的新的语法。

用for ... of循环遍历集合，用法如下：

	var a = ['A', 'B', 'C'];
	var s = new Set(['A', 'B', 'C']);
	var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
	for (var x of a) { // 遍历Array
		alert(x);
	}
	for (var x of s) { // 遍历Set
		alert(x);
	}
	for (var x of m) { // 遍历Map
		alert(x[0] + '=' + x[1]);
	}
你可能会有疑问，for ... of循环和for ... in循环有何区别？

for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。

当我们手动给Array对象添加了额外的属性后，for ... in循环将带来意想不到的意外效果：

	var a = ['A', 'B', 'C'];
	a.name = 'Hello';
	for (var x in a) {
		alert(x); // '0', '1', '2', 'name'
	}
for ... in循环将把name包括在内，但Array的length属性却不包括在内。

for ... of循环则完全修复了这些问题，它只循环集合本身的元素：

	var a = ['A', 'B', 'C'];
	a.name = 'Hello';
	for (var x of a) {
		alert(x); 'A', 'B', 'C'
	}
	
这就是为什么要引入新的for ... of循环。

然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：

	var a = ['A', 'B', 'C'];
	a.forEach(function (element, index, array) {
		// element: 指向当前元素的值
		// index: 指向当前索引
		// array: 指向Array对象本身
		alert(element);
	});



暂时先漏过，需要再看：
http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450082788640f82a480be8481a8ce8272951a40970000

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach



========================================
js dom 插入
----------------------------------------

1.使用数组信息，向文档中插入dom元素

<!--start 积累句型 小目录-->	
<div class=item id=juxing>
	<h2  class="title">20190608 <a>如何通过英语读报积累写作句型？</a></h2>
</div>
<!--end-->	

<script>
//只需要补充url和text，即可自动更新链接
var url_list1=[
	["https://mp.weixin.qq.com/s?__biz=MzI0NDcxNzc5Mg==&mid=2247486402&idx=2&sn=79b61e7be76fbf4d7e9541ab47c8d670","(1)经济学人：老年盗窃团伙"],
	["https://mp.weixin.qq.com/s?__biz=MzI0NDcxNzc5Mg==&mid=2247486404&idx=2&sn=100aae2456dce4b45fe807da65d419eb","(2)Atlantic: 权游配乐"],
	["https://mp.weixin.qq.com/s?__biz=MzI0NDcxNzc5Mg==&mid=2247486411&idx=2&sn=a6e4cb50296856aac414bb4fccfae418","(3)NPR: 放大的疼痛"],
]

// 自动更新dom
for(var i in url_list1){
	var oDiv=document.getElementById("juxing") //找到父元素
	url_info=url_list1[i] //获取url信息
	
	//创建链接元素
	oA=document.createElement("A");
	oA.setAttribute("target","_blank");
	oA.setAttribute("href",url_info[0]);
	//向链接元素中添加文本
	oText=document.createTextNode(url_info[1]); //创建文本节点
	oA.appendChild(oText)
	//向父元素插入链接元素
	oDiv.appendChild(oA)
	oDiv.appendChild( document.createTextNode(" | ") )
	//console.log(oA) //test
}
</script>





2.innerHTML在body标签中插入隐藏html内容
//定义广告
function sapp(){
	window.onload = function () {
		var body = document.body;
		var div = document.createElement("div");
		div.id = "downdiv";
		div.innerHTML = '<div class="downcode" style="position:fixed;z-index:1000;top:200px;right:10px;overflow:hidden;background: #fff;"><p style="text-align:right;color:#b50723;margin: 3px;cursor: pointer;"><span onclick="hidedown();">关闭</span></p><img alt= "下载" src= "http://www.yueshuapp.com/app/2wm.png" style= "width:200px;height:200px;" /><p style="text-align:center;line-height:24px;">下载看书APP 告别广告,超快更新</p></div >';
		body.appendChild(div);
	}
}

//隐藏按钮
function hidedown() {
	document.getElementById("downdiv").style.display = "none";
}

//启动
sapp();

refer: https://m.mxguan.com/xxgg/apppc.js






3. 删除dom元素





========================================
向现有文件中添加js脚本
----------------------------------------
1.使用 document.writeln()
document.writeln("<script src=\'https://m.mxguan.com/xxgg/apppc.js\'></script>");

refer: 
document.write() 和 document.writeln() 区别
https://www.cnblogs.com/colmeluna/p/3862642.html







========================================
----------------------------------------

========================================
----------------------------------------

########################################
first added: 2016-1-4
modify at: 2019-6-8
########################################
