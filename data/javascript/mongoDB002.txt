
MongoDB基础篇
当前版本：3.2.1

系统：Ubuntu1404(64bit)


视频：http://www.imooc.com/learn/295

课程须知
1、对数据库的概念有比较清晰的认识。 
2、了解一些简单的shell操作。

老师告诉你能学到什么？
1、了解mongoDB的特性 
2、掌握mongoDB的基本操作  
3、了解mongoDB在业务层的使用，并学会使用mongoDB来进行应用开发

========================================
为什么使用 MongoDB
----------------------------------------
1.学习目标：
概念：mongoDB,mongo,索引,集合,复制集,分片,数据均衡。

搭建：单机服务、具有冗余容错功能的复制集、搭建大规模数据集群、完整集群的自动部署。

使用：增删改查、索引的创建和使用、复杂的聚合查询、
	对数据集合进行分片，在不用分片之间维持数据均衡、
	数据备份与恢复、数据迁移
	
简单运维：
	部署MongoDB集群、
	处理常见故障
		单节点失效，如何恢复工作
		数据库意外被杀死如何进行数据恢复
		数据库发生拒绝服务时如何排查原因
		数据库磁盘快满时如何处理？

初级：背景知识、基本操作
中级：常见部署操作，简单运维
高级：介绍集群及大型集群的运维经验，及mongoDB的实现原理、常见问题及解决办法。

	如何运维一个上百T的数据库？
	如何维持一个几十个、上百个节点的数据库的均衡。

2.
有用的网站：
	mongoDb官网：www.mongodb.org	软件和文档，所有驱动的文档
	国内站：www.mongoing.com	讨论	docs.mongoing.com	中文文档的翻译
	github: https://github.com/mongodb  https://github.com/mongodb/mongo

3.
什么是数据库？
	按照需求对数据进行存储和查询。
4.	
数据库的分类：
	sql数据库：支持sql语言的数据库
		oracle,mysql...
	NoSql数据库：不支持sql语言的数据库
		Redis,mongoDB...
		Not only sql(悄悄放弃了sql)
5.
sql与NoSql数据库的区别？
	实时一致性		简单便捷
	事务		方便扩展
	多表联合查询	更好的性能

因为放弃了很多，所以失去了很多特性，但是有很多新特性。

6.为什么是mongoDB？
	1) 无数据结构限制
		没有表结构的概念，每条记录可以有完全不同的结构
		业务开发方便快捷
		sql数据库需要事先定义表结构再使用
		{name:'小明',sex:'男'}
		{name:'小红',address:'上海'}
		{name:'小红',home:[{'山东'},{'上海'}]}
	2)完全的索引支持
		redis的key-value只支持key查询
		hbase的单索引，二级索引需要自己实现
			单键索引，多键索引：{x:1, y:1}
			数组索引：['apple','lemon']
			全文索引："I am a little bird."(暂时不支持中文)
			地理位置索引：2D
	3)方便的冗余与扩展
		复制集保证数据安全
		分片扩展数据规模
		每个数据都是保存三份：1主2从
	4)良好的支持
		完善的文档
		齐全的驱动支持
	
7.为什么要使用MongoDB
	JSON风格文件的形式，面向文档存储：数据存储
	对任何属性可索引
	复制和高可用性
	自动分片
	丰富的查询
	快速就地更新
	MongoDB的专业技术支持
	"因为NodeJS,所以学MongoDB"

应该在哪里使用MongoDB？
	大数据
	内容管理和交付
	移动和社交基础设施
	用户数据管理
	数据平台
	
========================================
Linux下安装MongoDB  
----------------------------------------
环境
mongoDB环境：linux64bit
mongoDB版本：3.2.1最新版
ssh工具：xshell
文本编辑器：vim/notepad++/sublime text2

1.下载编译好的二进制包
到官网https://www.mongodb.org/downloads#production找下载链接，然后使用curl命令下载
$curl https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.2.1.tgz > mongo.tgz 

2.解包
$tar xzf mongo.tgz 
如果没有安装curl 
先安装$sudo apt-get install curl 

改名字：mv mongodb-linux-x86_64-ubuntu1404-3.2.1/ mongodb

4.移动位置
$sudo mv mongodb /usr/lib/

5.
主要命令
mongod	实现mongodb的主程序，用于数据库部署
mongo 用来连接mongodb数据库的客户端，对mongodb的所有操作都要用mongo来连接服务器
mongoimport/mongoexport	数据库的导入导出
mongodump/mongorestore	导入导出二进制，用于数据的备份与恢复
mongooplog	oplog用于日志的回放。mongodb的复制集。
mongostat	查看mongodb的状态。

http://blog.csdn.net/njchenyi/article/details/19045763#t0




========================================
第一次运行
----------------------------------------
http://www.imooc.com/video/5939


tar zxvf mongodb-linux-x86_64-2.x.x.tgz
cd /usr/mongodb-linux-x86_64-2.x.x/bin
创建链接
ln -s /usr/mongodb-linux-x86_64-2.x.x mongodb
但是在运行前，需要创建mongodb需要的存放数据和日志的目录：
sudo mkdir -p /data/db/journal
sudo chmod -R 777 /data/db/
启动mongodb server,-journal 代表要写日志，-maxConns=2400代表mongodb 可以接受2400个tcp连接，-rest代表可以允许客户端通过rest API访问mongdb server.
./mongod -journal -maxConns=2400 -rest
还可以使用参数—quiet启动可以指定安静模式减少记录的项目数，注意使用该参数必须要同时指定日志路径,比如：
—quiet —logpath /data/db/journal/mongdb.log


1.下载
到官网https://www.mongodb.org/downloads#production找下载链接，然后使用curl命令下载
$curl https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.2.1.tgz > mongo.tgz 

2.解包
$tar xzf mongo.tgz 
如果没有安装curl 
先安装$sudo apt-get install curl 

改名字：mv mongodb-linux-x86_64-ubuntu1404-3.2.1/ mongodb

4.移动位置
$sudo mv mongodb /usr/lib/

5.创建快捷方式: $sudo ln -s /usr/lib/mongodb/bin/ /usr/bin/mongodb
这样可以在命令行中使用：$mongodb访问数据库文件。


bsondump  mongodump    mongoimport  mongorestore  mongostat
mongo     mongoexport  mongooplog   mongos        mongotop
mongod    mongofiles   mongoperf    mongosniff


发现还是不能用。就使用
$ sudo apt-get install mongodb-clients

貌似应该安装server版。
//$ apt-get install mongodb-10gen=3.2.1
$ sudo apt-get install mongodb-server


步骤二：创建数据文件夹

默认情况下，MongoDB会在/data/db/这个文件夹存放数据，这个文件夹需要自己手动创建。 
通过如下方式创建：

$ sudo mkdir -p /data/db/ 
$ sudo chown `id -u` /data/db 
$ sudo chown -R mongodb:mongodb /data 
当然 可以 通过--dbpath 命令 指定MongoDB将数据存储到另外的目录中去。 


步骤三：让数据库运行起来

通过"pgrep mongo -l "查看进程是否已经启动
在终端输入"mongo"，然后回车进入数据库。


在控制台中： 
$ nohup ./mongodb-xxxxxxx/bin/mongod &
//nohup Run COMMAND, ignoring hangup signals.
//&：表示程序在后台运行

# $ ./mongodb-xxxxxxx/bin/mongo 

wjl@ubuntu:/usr/bin/mongodb$ ./mongo
MongoDB shell version: 3.2.1
connecting to: test
> db.foo.save({a:1,b:'sometest'})
Cannot use commands write mode, degrading to compatibility mode
WriteResult({ "nInserted" : 1 })
> db.foo.find()

结果是：
{ "_id" : ObjectId("56a02e3842cda05550224eb5"), "a" : 1, "b" : "sometest" }


不用./mongo，而是直接运行，发现是老版本的：
$ mongo
MongoDB shell version: 2.4.9
connecting to: test
>
需要卸载或者升级。
$ sudo apt-get upgrade mongodb



在Ubuntu下进行MongoDB安装步骤：
http://www.cnblogs.com/alexqdh/archive/2011/11/25/2263626.html



========================================
windows server下安装mongoDB
----------------------------------------


1.加入到path中。
C:\Program Files\MongoDB\Server\3.4\bin

2.新建文件夹
c:/data/db/


3.打开命令行，输入
>mongod


等了半天，好像就是这样的。。。

4.再打开一个命令行，输入
>mongo
进入交互式界面。这个界面直接操作时最常用。

完整命令是
>mongo 127.0.0.1:27017 


5.关闭
>db.shutdownServer()
shutdown command only works with the admin database; try 'use admin'
> use admin
switched to db admin
> db.shutdownServer()

ctrol +C退出。

或者：
>kill -9



========================================
MongoDB README
----------------------------------------
Welcome to MongoDB!

COMPONENTS

  bin/mongod - The database process.
  bin/mongos - Sharding controller.
  bin/mongo  - The database shell (uses interactive javascript).

UTILITIES

  bin/mongodump         - MongoDB dump tool - for backups, snapshots, etc..
  bin/mongorestore      - MongoDB restore a dump
  bin/mongoexport       - Export a single collection to test (JSON, CSV)
  bin/mongoimport       - Import from JSON or CSV
  bin/mongofiles        - Utility for putting and getting files from MongoDB GridFS
  bin/mongostat         - Show performance statistics

RUNNING

  For command line options invoke:

    $ ./mongod --help

  To run a single server database:

    $ mkdir /data/db
    $ ./mongod
    $
    $ # The mongo javascript shell connects to localhost and test database by default:
    $ ./mongo 
    > help

DRIVERS

  Client drivers for most programming languages are available at mongodb.org.  Use the 
  shell ("mongo") for administrative tasks.

DOCUMENTATION

  http://www.mongodb.org/

MAIL LISTS AND IRC

  http://dochub.mongodb.org/core/community

32 BIT BUILD NOTES

  MongoDB uses memory mapped files.  If built as a 32 bit executable, you will
  not be able to work with large (multi-gigabyte) databases.  However, 32 bit
  builds work fine with small development databases.


refer:http://os.51cto.com/art/201101/242413.htm


========================================
mongoDB增删改查
----------------------------------------

1.看有多少数据库
> show dbs
admin  0.000GB
local  0.000GB
test   0.000GB

> use test  #选择数据集（数据库）
switched to db test

> show tables #该数据集中的集合（表）
foo

> db.dropDatabase() #删除表
{ "dropped" : "test", "ok" : 1 }
> show tables; #确实没有表了
>
> db.imooc.insert({a:1,b:200}) #插入一个新值，会自动建立数据集
WriteResult({ "nInserted" : 1 })
> show tables; #确实有这个表
imooc
> db.imooc.find() #没有参数则返回所有条目
{ "_id" : ObjectId("587206b2a668e922d64a2ca2"), "a" : 1, "b" : 200 }


> db.imooc2_collection.insert({name:'xiaoming',age:20})
WriteResult({ "nInserted" : 1 })
> show dbs
admin  0.000GB
local  0.000GB
test   0.000GB

> show collections #查询当前的数据集 和show tables结果相同
imooc
imooc2_collection

#再写入几个数据
> db.imooc.insert({_id:1,a:1})
WriteResult({ "nInserted" : 1 })
> db.imooc.insert({_id:2,a:2})
WriteResult({ "nInserted" : 1 })
> db.imooc.insert({_id:2,a:2,age:20}) #发现主键_id不能重复
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 11000,
                "errmsg" : "E11000 duplicate key error collection: test.imooc in
dex: _id_ dup key: { : 2.0 }"
        }
})
> db.imooc.insert({_id:3,a:2,age:20})
WriteResult({ "nInserted" : 1 })

#查询一下
> db.imooc.find() #没参数返回全部结果
{ "_id" : ObjectId("587206b2a668e922d64a2ca2"), "a" : 1, "b" : 200 }
{ "_id" : 1, "a" : 1 }
{ "_id" : 2, "a" : 2 }
{ "_id" : 3, "a" : 2, "age" : 20 }
> db.imooc.find(2) # 参数必须是json，这个报错挺像js的原型链
2017-01-08T17:38:52.766+0800 E QUERY    [main] Error: don't know how to massage
: number :
DBCollection.prototype._massageObject@src/mongo/shell/collection.js:214:11
DBCollection.prototype.find@src/mongo/shell/collection.js:262:1
@(shell):1:1
> db.imooc.find({a:1}) #找到{a:1}的数据
{ "_id" : ObjectId("587206b2a668e922d64a2ca2"), "a" : 1, "b" : 200 }
{ "_id" : 1, "a" : 1 }

> db.imooc.find({a:2}) #返回了2条数据
{ "_id" : 2, "a" : 2 }
{ "_id" : 3, "a" : 2, "age" : 20 }



#使用js一次性插入很多数据。支持js语法。
# 大于80岁的都等于80岁。
> for(var i=4;i<100;i++){ var age=i>80?80:i;db.imooc.insert({_id:i,a:i,age:age})}
WriteResult({ "nInserted" : 1 })
> db.imooc.find() #查询之后，确实满足条件。
{ "_id" : ObjectId("587206b2a668e922d64a2ca2"), "a" : 1, "b" : 200 }
{ "_id" : 1, "a" : 1 }
{ "_id" : 2, "a" : 2 }
{ "_id" : 3, "a" : 2, "age" : 20 }
{ "_id" : 4, "a" : 4, "age" : 4 }
{ "_id" : 5, "a" : 5, "age" : 5 }
{ "_id" : 6, "a" : 6, "age" : 6 }

{ "_id" : 77, "a" : 77, "age" : 77 }
{ "_id" : 78, "a" : 78, "age" : 78 }
{ "_id" : 79, "a" : 79, "age" : 79 }
Type "it" for more
> it
{ "_id" : 80, "a" : 80, "age" : 80 }
{ "_id" : 81, "a" : 81, "age" : 80 }
{ "_id" : 82, "a" : 82, "age" : 80 }

{ "_id" : 98, "a" : 98, "age" : 80 }
{ "_id" : 99, "a" : 99, "age" : 80 }
> it
no cursor


#计数
> db.imooc.find().count()
100

> db.imooc.find().skip(3).limit(5).sort({a:1})
{ "_id" : 3, "a" : 2, "age" : 20 }
{ "_id" : 4, "a" : 4, "age" : 4 }
{ "_id" : 5, "a" : 5, "age" : 5 }
{ "_id" : 6, "a" : 6, "age" : 6 }
{ "_id" : 7, "a" : 7, "age" : 7 }
> db.imooc.find().skip(3).limit(5).sort({age:1})
{ "_id" : 4, "a" : 4, "age" : 4 }
{ "_id" : 5, "a" : 5, "age" : 5 }
{ "_id" : 6, "a" : 6, "age" : 6 }
{ "_id" : 7, "a" : 7, "age" : 7 }
{ "_id" : 8, "a" : 8, "age" : 8 }


#数据的更新update(主键，更新数据)，都是json格式的
> db.imooc.find({_id:5})
{ "_id" : 5, "a" : 5, "age" : 5 }
> db.imooc.update({_id:5},{age:25})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.imooc.find({_id:5})
{ "_id" : 5, "age" : 25 }
>
#看来更新后a属性没有了！！！ 
#除了id，其他是覆盖！而不是更新！！！
#试试除了主键之外的作为索引呢？
> db.imooc.find({a:10})
{ "_id" : 10, "a" : 10, "age" : 10 }
> db.imooc.update({a:10},{a:25})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.imooc.find({a:10})
> db.imooc.find({a:25})
{ "_id" : 5, "a" : 25 }
{ "_id" : 10, "a" : 25 } #age属性也没了，说明就是覆盖除了id外的部分！
{ "_id" : 25, "a" : 25, "age" : 25 }

#怎么实现部分更新呢？使用set操作符
> db.imooc.find({age:25})
{ "_id" : 25, "a" : 25, "age" : 25 }
> db.imooc.update({age:25},{$set:{a:1000}}) #部分更新
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.imooc.find({age:25})
{ "_id" : 25, "a" : 1000, "age" : 25 }


如果更新一条不存在的数据，将会不做任何更改：
> db.imooc.find({a:100})
> db.imooc.update({a:100},{age:1000})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.imooc.find({a:100})
>


#如果希望更新一条不存在的数据时，自动创建呢？使用update的第三个参数true。
> db.imooc.update({a:100},{age:1000},true)
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("58720de9208085d80551aedd")
})
> db.imooc.find({a:100}) #并没有！
> db.imooc.find({age:1000}) #只有这一个属性。
{ "_id" : ObjectId("58720de9208085d80551aedd"), "age" : 1000 }




2.默认是update第一个数据
> db.imooc.find()
{ "_id" : ObjectId("58720f5da668e922d64a2ca4"), "c" : 1 }
{ "_id" : ObjectId("58720f5ea668e922d64a2ca5"), "c" : 1 }
{ "_id" : ObjectId("58720f5ea668e922d64a2ca6"), "c" : 1 }
> db.imooc.update({c:1},{c:2})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.imooc.find()
{ "_id" : ObjectId("58720f5da668e922d64a2ca4"), "c" : 2 }
{ "_id" : ObjectId("58720f5ea668e922d64a2ca5"), "c" : 1 }
{ "_id" : ObjectId("58720f5ea668e922d64a2ca6"), "c" : 1 }

怎么能修改全部呢？
> db.imooc.update({c:1},{$set:{c:3}},false,true) #这样就全改了
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })
> db.imooc.find()
{ "_id" : ObjectId("58720f5da668e922d64a2ca4"), "c" : 2 }
{ "_id" : ObjectId("58720f5ea668e922d64a2ca5"), "c" : 3 }
{ "_id" : ObjectId("58720f5ea668e922d64a2ca6"), "c" : 3 }




3.删除操作
> db.imooc.remove() #不传递参数会报错
2017-01-08T18:10:19.904+0800 E QUERY    [main] Error: remove needs a query :
DBCollection.prototype._parseRemove@src/mongo/shell/collection.js:409:1
DBCollection.prototype.remove@src/mongo/shell/collection.js:434:18
@(shell):1:1
> db.imooc.remove({c:2})
WriteResult({ "nRemoved" : 1 })
> db.imooc.remove({c:3}) #默认删除查到的所有数据
WriteResult({ "nRemoved" : 2 })
> db.imooc.find()
>



4.删除一张表
> show tables
imooc
> db.imooc.drop()
true
> show tables
>



========================================
mongoDB索引
----------------------------------------
1.查询表的索引用getIndexes()方法
> db.imooc.find()
{ "_id" : ObjectId("5872119ba668e922d64a2cab"), "a" : 1 }
> db.imooc.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "test.imooc"
        }
]

2.设置索引用。一般是先设置索引，最后才使用。如果后来补充索引可能会出错。
> db.imooc.ensureIndex({a:1}) #1表示asc，-1表示desc。
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}

3.设置好索引之后，使用索引会快很多。
> db.imooc.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "test.imooc"
        },
        {
                "v" : 2,
                "key" : {
                        "a" : 1
                },
                "name" : "a_1",
                "ns" : "test.imooc"
        }
]


4.索引的类型：
1）最常见的是默认的_id索引。



========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




