js 的OOP是很完善的了。


========================================
通过原型 prototype 给对象添加方法
----------------------------------------
1. 给数组 添加删除某个元素的方法

(1) 只删除第一个遇到的元素，不处理后面的

var arr=[1,2,3,4,3]
arr.remove(3)

Array.prototype.remove = function(s) {
	for (var i = 0; i < this.length; i++) {
		if (s == this[i]){
			return this.splice(i, 1);
		}
	}
}

arr.remove(3) //[3]
arr //[1, 2, 4, 3]


(2) 




========================================
原型、原型链与继承
----------------------------------------

1. OOP 示例

function Person(name, age) {
  var log=console.log;
  this.name = name;
  this.age = age;

  if (typeof this.eat !== 'function') {
    Person.prototype.eat = function(food) {
      log(this.age + '岁的' + this.name + '在吃' + food);
    };
  }
}

let p1 = new Person('Tom', 25);
let p2 = new Person('Smith', 3);
p1.eat('橘子'); //25岁的Tom在吃橘子
p2.eat('苹果'); //3岁的Smith在吃苹果


Person.prototype //{eat: ƒ, constructor: ƒ}
p1.constructor==Person //true
p1.constructor===p2.constructor //true


(2) 借用构造函数调用”继承”
使用 call 或 apply 这两个方法完成函数借调。这两个方法的功能是一样的，只有少许的区别。
功能都是更改一个构造方法内部的 this 指向到指定的对象上。

function Student(name, age, sex) {
  this.sex = sex;
  Person.call(this, name, age);
}
Student.prototype = new Person();

var s1 = new Student('Lily', 20, '美女');
s1.eat("樱桃"); //20岁的Lily在吃樱桃








ref:
https://blog.liuzuann.com/article?title=javascript-prototype






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

