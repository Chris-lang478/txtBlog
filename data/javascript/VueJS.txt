Vue细节
感觉还是txt记录的爽。




<meta charset="utf-8">



js 版俄罗斯方块: 使用 Vue、Vuex 制作的俄罗斯方块
https://tetris.ee-fans.com/



单文件组件 (SFC)、Vuex、Vue Router 等 vue 插件。






========================================
Vue基础；还需要ES6,webpack, NPM(node.js)及 Vue-cli基本用法；然后组件及实战视频、github别人的项目
----------------------------------------
1. 学习顺序

ES6 见专题 js/ES5ES6
NPM 和 node.js 见 专题 js/nodeJS 三个。


webpack见 js/vueJS.md 及下文。
Vue-cli 见下文。






2. 在实战项目中，掌握Vue五大技术，学以致用

Vue 实战商业级读书Web APP 全面提升技能 https://coding.imooc.com/class/285.html


(1)Vue全家桶

Vue mixins混入
Vue slot插槽
Vue动态组件+异步组件
Vue组件API化
Vuex状态管理+模块化
Vue动态路由+路由钩子

 
(2)Vue CLI 3.0

自定义脚手架搭建
原型模式
UI模式
环境变量
自定义配置
项目发布

 
(3)算法与实际应用

目录+全文搜索+书架算法
epubjs深度应用
axios 请求+文件下载
async+await应用
Audio播放器
科大讯飞语音合成API

 
(4)交互动画

Vue transition过渡
Vue transition-group过渡
Vue交互touch+mouse事件
CSS3过渡和帧动画
css 预处理

 
(5)Vue扩展

Vue国际化
Vue接口mock
Vue解决跨越请求
Vue全局主题切换
Vue加载Web字体
LocalStorage+IndexedDB









========================================
Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求
----------------------------------------
1. Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。

Github开源地址： https://github.com/axios/axios

中文文档： http://www.axios-js.com/zh-cn/docs/
与VUE的配合： https://www.runoob.com/vue2/vuejs-ajax-axios.html




2. 使用 axios
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
或
<script src="https://cdn.staticfile.org/axios/0.18.0/axios.min.js"></script>


(1) 执行 GET 请求
// 为给定 ID 的 user 创建请求
axios.get('/user?ID=12345')
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

// 上面的请求也可以这样做
axios.get('/user', {
    params: {
      ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });


(2) 执行 POST 请求
axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
#


(3) 执行多个并发请求
function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // 两个请求现在都执行完成
  }));
#


(4)axios API: 可以通过向 axios 传递相关配置来创建请求
格式: axios(config)

// 发送 POST 请求
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});


// 获取远端图片 //todo fs是啥？
axios({
  method:'get',
  url:'http://bit.ly/2mTM3nY',
  responseType:'stream'
})
  .then(function(response) {
  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))
});


axios(url[, config])
// 发送 GET 请求（默认的方法）
axios('/user/12345');


========================================
快速原型开发：Vue cli 的安装与使用
----------------------------------------
https://cli.vuejs.org/zh/guide/


1. 基本使用
## 使用VS code 


(1)安装
>npm install -g @vue/cli
>vue -V 

cnpm install -g @vue/cli
vue -V  ## @vue/cli 4.5.12

升级 npm update -g @vue/cli


(2) 构建项目框架
vue create hello-vue   #选择淘宝镜像；选择第二项 vue3模板，等待下载和构架
# win10的特别慢！


$ ls hello-vue/ -l
src/
	App.vue
	main.js
	components/
		HelloWorld.vue
	assets/
		logo.png
public/
	favicon.ico  
	index.html
node_modules/ #822个各种包

babel.config.js
package.json
package-lock.json
README.md




(3) 运行项目
cd hello-vue
npm run serve   # ready to go!


最后几行
App running at:
  - Local:   http://localhost:8081/ 
  - Network: http://192.168.2.120:8081/
使用浏览器即可看到结果。




或在 App.vue 文件所在的目录下运行 vue serve
或者指定入口文件 vue serve MyComponent.vue







(4) 构建 
$ npm run build

然后又多了一个文件夹 
dist/ 
	js/
	css/
	img/
	favicon.ico
	index.html
#

这个文件夹是可以单独使用的最终文件。










========================================
webpack 4.0
----------------------------------------
1.
https://webpack.js.org/
https://v4.webpack.js.org/concepts/

> node --version
v14.16.1
> npm --version
6.14.12

> npm install -g cnpm --registry=https://registry.npm.taobao.org
> cnpm install webpack -g

(1) win10
> webpack --version
5.36.1

>webpack-cli --version
3.3.7


(2) ubuntu
$ webpack --version
CLI for webpack must be installed.
  webpack-cli (https://github.com/webpack/webpack-cli)

We will use "npm" to install the CLI via "npm install -D webpack-cli".
Do you want to install 'webpack-cli' (yes/no): yes
Installing 'webpack-cli' (running 'npm install -D webpack-cli')...


$ npm install -D webpack-cli #没有速度
$ cnpm install -g webpack-cli

$ webpack --version
webpack 5.36.1
webpack-cli 4.6.0






========================================
Vue脚手架: nuxt.js
----------------------------------------
https://www.nuxtjs.cn/




========================================
Vue组件API化: Composition API //todo 选项式 API 与 组合式 API
----------------------------------------
https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E7%8B%AC%E7%AB%8B%E7%9A%84-computed-%E5%B1%9E%E6%80%A7


这是啥？
import { fetchUserRepositories } from '@/api/repositories'

(1) 首先 @ 是vue的 config.js中定义的相对路径。
(2) 加 {} 是因为 repositories 中使用了 export 没有加 default.





对于其他的逻辑关注点我们也可以这样做，但是你可能已经在问这个问题了——这不就是把代码移到 setup 选项并使它变得非常大吗？嗯，确实是这样的。

这就是为什么我们要在继续其他任务之前，我们要首先将上述代码提取到一个独立的组合式函数中。








========================================
响应性基础: reactive 方法 //todo
----------------------------------------

import { reactive } from 'vue'

// 响应式状态
const state = reactive({
  count: 0
})


该 API 返回一个响应式的对象状态。该响应式转换是“深度转换”——它会影响嵌套对象传递的所有 property。


Vue 中响应式状态的基本用例是我们可以在渲染期间使用它。因为依赖跟踪的关系，当响应式状态改变时视图会自动更新。










========================================
mixin 
----------------------------------------
1. 概念
Mixin 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个 mixin 对象可以包含任意组件选项。当组件使用 mixin 对象时，所有 mixin 对象的选项将被“混合”进入该组件本身的选项。

同名钩子函数将合并为一个数组，因此都将被调用。另外，mixin 对象的钩子将在组件自身钩子之前调用。


值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。



2. 全局 mixin







========================================
插件 Plugin: 第三方插件 (例如 Vuex 或 Vue Router)
----------------------------------------


大量插件
https://github.com/vuejs/awesome-vue#components--libraries







========================================
Vue3.0 案例 todo list
----------------------------------------
https://codesandbox.io/s/vue-todo-list-app-with-single-file-component-vzkl3?file=/src/App.vue


1. todo list 案例介绍
https://www.imooc.com/video/23021

组件的定义和使用
方法的定义和使用
路由....
状态管理....
路由传参
vuex操作数据
父子组件传参：1个父组件 + 3个子组件


(2) 环境搭建
下载安装 node.js, cnpm, vue cli, 见上文: Vue cli 的安装与使用。




2. 创建脚手架
进入一个目录，
(vs code 可能会报错，用cmd可以)
$ vue create todolist
选择 Vue 3，然后等待几分钟，就构建好框架结构了。


$ cd todolist
$ npm run serve  ##注:run后的serve其实是定义在 package.json 中 scripts中的，可以改名字为 serve2。
就能启动项目了，ctrl+左键单击，可在浏览器中预览。


看一下脚手架创建的目录结构:
todolist
	node_modules/ 项目依赖的js包，官方的库和插件。特别大，一般不上传到github
	public/
		favicon.ico 网站图标
		index.html id="app"的是vue的注入点。
	src/ 自己编辑的东西
		assets/ 是静态资源
		components/ 一般组件
		router/ 配置路由
		views/ 视图，一般放路由组件
		store/ 状态管理
		App.vue 根组件，里面的内容，在所有组件都会生效，用来写公共样式。
		main.js 项目入口js文件，一般用来引入第三方库和插件。不做过多操作。
	pakcage-lock.json
	babel.config.js 转译js语法的babel工具的配置
	pakcage.json 各种设置

其实我的没有 router，store和views文件夹。





3. 组件简介
组件就是可复用的最小结构，是vue的核心概念。

进入 todolist/src/components/，看到 HelloWorld.vue，
在该文件夹内新建一个文件 Home.vue

里面有三大部分，分别对应着 html,css,js部分，不过名字略有不同。

(1) html部分
要写到打标签 template 中，且里面必须只有一个根节点。
<template>
	<div id="home">
		<h1>user: {{user}}</h1>
		{{msg}}
	</div>
</template>




(2) 接着是 js部分 
必须写成这个格式 export default { /* 里面是组件的定义 */}
<script>
export default {
    data(){
        return{
            msg:"from Home.vue",
        }
    },
    props: {
        user: String
    }
}
</script>



(3) css 部分
加上 scoped 属性，就表示只对当前组件内元素有效。
<style scoped>
	#home{border:1px solid #ddd; margin:10px; color:#ccc;}
</style>



(4) 然后需要在 todolist/src/App.vue中引用
1) 顶部模板部分
<template>
  <div>
    <img alt="Vue logo" src="./assets/logo.png">
    <Home user="Tom"></Home>
    <Home user="Smith"></Home>
    <HelloWorld msg="Welcome to Your Vue.js App"/>
  </div>
</template>

2) 中间 script 标签内:
import HelloWorld from './components/HelloWorld.vue'
import Home from './components/Home.vue'

export default {
  name: 'App',
  components: {
    HelloWorld,
    Home,
  }
}




(5) 然后运行项目
$ cd todolist 
$ npm run serve 
几十秒后浏览器访问 http://localhost:8080/
即可看到新增的内容：

user: Tom
from About.vue

user: Smith
from About.vue







4. 组件中的 setup() 
(1)WARNING
由于在执行 setup 时，组件实例尚未被创建，因此在 setup 选项中没有 this。这意味着，除了 props 之外，你将无法访问组件中声明的任何属性——本地状态、计算属性或方法。


执行 setup 时，组件实例尚未被创建。因此，你只能访问以下 property：
props, attrs, slots, emit

换句话说，你将无法访问以下组件选项：
data, computed, methods



(2) setup 选项应该是一个接受 props 和 context 的函数。

传递给 setup 函数的第二个参数是 context。
context 是一个普通的 JavaScript 对象，它暴露三个组件的 property：


// MyBook.vue

export default {
  setup(props, context) {
	console.log(props.title);
  
  
    // Attribute (非响应式对象)
    console.log(context.attrs)

    // 插槽 (非响应式对象)
    console.log(context.slots)

    // 触发事件 (方法)
    console.log(context.emit)
  }
}




5. 带 ref 的响应式变量
在 Vue 3.0 中，我们可以通过一个新的 ref 函数使任何响应式变量在任何地方起作用

import { ref } from 'vue'
const counter = ref(15)

console.log(counter) // { value: 0 }
console.log(counter.value) // 0

counter.value++
console.log(counter.value) // 1


换句话说，ref 为我们的值创建了一个响应式引用。在整个组合式 API 中会经常使用引用的概念。




6. 独立的 computed 属性

与 ref 和 watch 类似，也可以使用从 Vue 导入的 computed 函数在 Vue 组件外部创建计算属性。
import { ref, computed } from 'vue'

const counter = ref(0)
const twiceTheCounter = computed(() => counter.value * 2)

counter.value++
console.log(counter.value) // 1
console.log(twiceTheCounter.value) // 2





========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------





