JavaScript教程 函数




========================================
函数定义和调用
----------------------------------------
1.定义
function abs(x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
}

各个部分作用：
	- function指出这是一个函数定义；
	- abs是函数的名称；
	- (x)括号内列出函数的参数，多个参数以,分隔；
	- { ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。

请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。

第二种定义函数的方式如下：

	var abs = function (x) {
		if (x >= 0) {
			return x;
		} else {
			return -x;
		}
	};

在这种方式下，function (x) { ... }是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。

上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个;，表示赋值语句结束。

2. 调用函数

abs(10); // 返回10
abs(-9); // 返回9

3. arguments
JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array：

function foo(x) {
    alert(x); // 10
    for (var i=0; i<arguments.length; i++) {
        alert(arguments[i]); // 10, 20, 30
    }
}
foo(10, 20, 30);

利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：


实际上arguments最常用于判断传入参数的个数。你可能会看到这样的写法：
	// foo(a[, b], c)
	// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：
	function foo(a, b, c) {
		if (arguments.length === 2) {
			// 实际拿到的参数是a和b，c为undefined
			c = b; // 把b赋给c
			b = null; // b变为默认值
		}
		// ...
	}
要把中间的参数b变为“可选”参数，就只能通过arguments判断，然后重新调整参数并赋值。



4. rest参数(ES6)
由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：
	function foo(a, b) {
		var i, rest = [];
		if (arguments.length > 2) {
			for (i = 2; i<arguments.length; i++) {
				rest.push(arguments[i]);
			}
		}
		console.log('a = ' + a);
		console.log('b = ' + b);
		console.log(rest);
	}
为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？

ES6标准引入了rest参数，上面的函数可以改写为：

	function foo(a, b, ...rest) {
		console.log('a = ' + a);
		console.log('b = ' + b);
		console.log(rest);
	}

	foo(1, 2, 3, 4, 5);
	// 结果:
	// a = 1
	// b = 2
	// Array [ 3, 4, 5 ]

	foo(1);
	// 结果:
	// a = 1
	// b = undefined
	// Array []

  rest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。
  如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。
  因为rest参数是ES6新标准，所以你需要测试一下浏览器是否支持。

5. 小心你的return语句
这样写是正常的：
	function foo() {
		return { name: 'foo' };
	}

	foo(); // { name: 'foo' }
这样写呢？
	function foo() {
		return 
			{ name: 'foo' };
	}
	返回
	foo(); // undefined


原因：	
由于JavaScript引擎在行末自动添加分号的机制，上面的代码实际上变成了：
	function foo() {
		return; // 自动添加了分号，相当于return undefined; 
			{ name: 'foo' };
	}
	
所以正确的多行写法是：

	function foo() {
		return { // 这里不会自动加分号，因为{表示语句尚未结束
			name: 'foo'
		};
	}

========================================
变量作用域
----------------------------------------
1. js的变量作用域只有全局和函数内两种。
不加var声明的变量都是认为是全局变量！
例如：
	function foo(){
		var a=12;
	}
	foo();
	alert(a);
不出所料，警告：a is not defined


那么去掉var呢？
	function foo(){
		 a=12;
	}
	foo();
	alert(a);//弹出了12

结论：所有变量的声明都要加var！


2. 严格模式下不用var声明变量会报错。
	'use strict';
	function foo() {
		var x = 'Hello, ' + y;
		alert(x);
	}
	
	foo();//VM139:4 Uncaught ReferenceError: y is not defined

但是，尝试这个函数，会报错y未定义吗？
	'use strict';
	function foo() {
		var x = 'Hello, ' + y;
		alert(x);
		var y = 'Bob';
	}

	foo();
结果：没有报错，但是弹出的是 Hello, undefined

结论：
	- js会把函数内定义的变量提前到最初。但是赋值并没有提前。
由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：

	function foo() {
		var
			x = 1, // x初始化为1
			y = x + 1, // y初始化为2
			z, i; // z和i为undefined
		// 其他语句:
		for (i=0; i<100; i++) {
			//...
		}
	}

3. 全局作用域
不在任何函数内部声明的变量就具有全局作用域。
具有全局作用域的变量都是window的属性。
	var a=12;
	alert(a);//12
	alert( window.a);//12

顶层函数的定义也被视为一个全局变量，并绑定到window对象：
	window.alert( '12' );//和alert('12');等效
	
	function foo() {
		alert('foo');
	}

	foo(); // 直接调用foo()
	window.foo(); // 通过window.foo()调用

4. 命名空间(有人翻译为：名字空间)
所有变量和函数都绑定到window上，不同的js脚本可能发生命名冲突。例如
	//先定义bar函数
	function bar(){
		alert('hello');
	}

	var bar='good';//不小心在另一个地方定义了bar变量

	bar();//后来调用的时候出错
	Uncaught TypeError: bar is not a function(…)

减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

	// 唯一的全局变量MYAPP:
	var MYAPP = {};

	// 其他变量:
	MYAPP.name = 'myapp';
	MYAPP.version = 1.0;

	// 其他函数:
	MYAPP.foo = function () {
		return 'foo';
	};

把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。

许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。
	
5. 局部作用域
由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：
	'use strict';

	function foo() {
		for (var i=0; i<100; i++) {
			//
		}
		i += 100; // 仍然可以引用变量i
	}

为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
	'use strict';

	function foo() {
		var sum = 0;
		for (let i=0; i<100; i++) {
			sum += i;
		}
		i += 1; // SyntaxError
	}

Uncaught SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode(…)
看来F12控制台模式不能这样执行let语句，写到html文件的script标签中执行：
	"use strict";
	function foo() {
		for (let i=0; i<100; i++) {
			//
		}
		i += 100; // Uncaught ReferenceError: i is not defined
	}

	foo();

其实，在console中不支持全局严格模式，但是在函数内，let之前用'use strict'; 	
	function foo() {
		"use strict";
		for (let i=0; i<100; i++) {
			//
		}
		i += 100; // Uncaught ReferenceError: i is not defined
	}
	foo();//报错i is not defined

6. 常量
由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：
	var PI = 3.14;

ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：
	'use strict';

	const PI = 3.14;
	PI = 3; // 某些浏览器不报错，但是无效果！
	PI; // 3.14



========================================
用户访问统计系统
----------------------------------------
<a href="https://github.com/cdnjs/cdnjs" target="_blank" onclick="_hmt.push(['_trackEvent', 'footer', 'click', 'footer-github.com'])">cdnjs</a>





========================================
----------------------------------------




========================================
总结
----------------------------------------
1. 严格遵守“在函数内部首先申明所有变量”这一规则。


########################################
first added: 2016-1-5
modify at: 2016-1-x
########################################
