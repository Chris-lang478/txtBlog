ci3框架学习笔记

========================================
1.MVC入门
----------------------------------------
C主要是路由功能，访问正确的控制器和动作；
M主要是获取数据，return数据即可，来自于数据库或配置文件；
V是视图，负责显示


========================================
2.CI的MVC架构
----------------------------------------
直接访问 http://wjl.com/ci3/，可以知道2条有效信息：
1.如果想修改该页面，请查看application/views/welcome_message.php
2.相应的控制器在：application/controllers/Welcome.php


可以知道ci3下的文件结构：
|-index.php	入口文件
|-system	框架所在目录，不要框架的修改任何代码！
|-application 应用程序所在目录，用户根据需要编写

========================================
3.URL模式
----------------------------------------
常用的是pathinfo模式。

http://wjl.com/ci3/index.php/welcome/test
url/入口文件/控制器/方法名


========================================
4.ci3中的控制器
----------------------------------------
1.不需要加后缀；不同于thinkPHP、yii
2.控制器一般小写；为了防止用户访问时出错
3.所有的控制器，直接或间接的继承自CI_Controller类；ci的类是以CI_开头的；
4.控制器中的方法能被浏览器访问的条件：
	- 必须public，
	- 不能用下划线_开头；
	
	如public function _test()不能被浏览器访问，但是可以内部访问。
5.如何修改默认为index控制器？
	新建一个Index控制器，添加一个index方法：
<?php
class Index extends CI_Controller {

	public function index()
	{
		echo 'from Index->index()<hr>';
	}
}

结果访问 http://wjl.com/ci3/index.php/index/index时，字符打印了两遍，为什么呢？
	from Index->index()
	from Index->index()
因为与类同名函数会被当做构造函数，直接执行一次，调用时又执行一次。

解决办法：
	- 不使用和类同名的方法【推荐】；
	- 添加一个__construct空方法：
	
	//防止类同名函数被当做构造函数提前执行
	public function __construct(){
		parent::__construct();
	}
	

	
	
========================================
ci3中的视图
----------------------------------------
建立application/Controller/User.php控制器：
<?php
class User extends CI_Controller {

	public function index()
	{
		//echo 'from User->index()<hr>';
		//$this->load->view('User_index');//访问views文件夹下的User_index.php文件
		$this->load->view('User/index');//访问views/User文件夹下的index.php文件
	}
}

建立application/Views/User/index.php视图文件：
<?php 
echo 'text from user->index view';

访问：http://wjl.com/ci3/index.php/user/index
显示：text from user->index view


小结：
1.在控制器中如果加载视图，直接写视图名字，不写扩展名；

2.视图中，直接使用原生php：
	//分配一般变量：
	public function index2()
	{
		$this->load->vars('title','这是标题');
		$this->load->view('User/index2');
	}
视图中可以直接使用php代码：
	<?php 
	echo "<h2>$title</h2>";


	
	分配关联数组：

	//分配关联数组	
	public function index3()
	{
		$list=array(
			array('id'=>1, 'name'=>'javascript'),
			array('id'=>2, 'name'=>'php'),
			array('id'=>3, 'name'=>'linux'),
			array('id'=>4, 'name'=>'python'),
		);
		$data['title']='标题1';
		$data['list']=$list;
		$this->load->vars($data);
		//$data分配之后消失，直接使用内部信息。
		
		$this->load->view('User/index3');
	}
	
	视图文件index3.php 
	<meta charset='utf8'>
	<?php 
	echo "<h1>".$title."</h1>";

	foreach($list as $item){
		echo $item['id'] . ' - ' .$item['name'] .'<br>';
	}
	?>

	<h2>推荐显示方法（少用echo会更简洁）：</h2>
	<?php foreach($list as $item):?>
		<?=$item['id']?> - <?=$item['name']?> <br>
	<?php endforeach;?>

	访问后显示：
	标题1
1 - javascript
2 - php
3 - linux
4 - python

推荐显示方法（少用echo会更简洁）：
1 - javascript 
2 - php 
3 - linux 
4 - python 

	
	

	
3.推荐使用<?=$item['id']?>类似的短标签；
	<?php foreach($list as $item):?>
		<?=$item['id']?>
		<?=$item['name']?>
		<?=$item['title']?>
	<?endforeach;?>
	
4.可以在一个方法中多次调用视图；

========================================
ci超级对象中的load加载器
----------------------------------------
我们在任意控制器方法中使用var_dump打印this，看ci为我们做了什么？
	public function index4(){
		echo '<pre>';
		var_dump($this);
	}
访问 http://wjl.com/ci3/index.php/user/index4显示好几十屏幕内容：
object(User)#12 (12) {
  ["benchmark"]=>
  &object(CI_Benchmark)#1 (1) {
    ["marker"]=>
    array(4) {
      ["total_execution_time_start"]=>
      float(1455096738.0121)
      ["loading_time:_base_classes_start"]=>
      float(1455096738.0121)
      ["loading_time:_base_classes_end"]=>
      float(1455096738.0865)
      ["controller_execution_time_( User / index4 )_start"]=>
      float(1455096738.092)
    }
  }
  ["hooks"]=>
... ...



========================================
移除url中的index.php
----------------------------------------

1. Apache 服务器启用 mod_rewrite； 
2. 在根目录添加一个.htaccess 文件，其中使用了 "否定条件" 来排除某些不需要重定向的项目：

RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L]

在上面的例子中，除已存在的目录和文件，其他的 HTTP 请求都会经过你的 index.php 文件。

注意：确保使用上面的规则排除掉你希望能直接访问到的资源。

测试：
访问http://wjl.com/ci3/user/index3 输出正常。


添加 URL 后缀
在你的 config/config.php 文件中你可以指定一个后缀。
如：.html ，这样页面可以同时被如下url访问：
http://wjl.com/ci3/user/index3
http://wjl.com/ci3/user/index3.html



========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

