JavaScript高级教程


js从入门到精通： 案例+面试题驱动。
JavaScript原生对象及扩展: http://www.xinbujing.com/art/20150331/17658.html

js 高级话题看官方文档 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript


========================================
函数(Function)定义和调用
----------------------------------------
1.定义
function abs(x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
}

各个部分作用：
	- function指出这是一个函数定义；
	- abs是函数的名称；
	- (x)括号内列出函数的参数，多个参数以,分隔；
	- { ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。

请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。

第二种定义函数的方式如下：

	var abs = function (x) {
		if (x >= 0) {
			return x;
		} else {
			return -x;
		}
	};

在这种方式下，function (x) { ... }是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。

上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个;，表示赋值语句结束。

2. 调用函数

abs(10); // 返回10
abs(-9); // 返回9

3. arguments
JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array：

function foo(x) {
    alert(x); // 10
    for (var i=0; i<arguments.length; i++) {
        alert(arguments[i]); // 10, 20, 30
    }
}
foo(10, 20, 30);

利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：


实际上arguments最常用于判断传入参数的个数。你可能会看到这样的写法：
	// foo(a[, b], c)
	// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：
	function foo(a, b, c) {
		if (arguments.length === 2) {
			// 实际拿到的参数是a和b，c为undefined
			c = b; // 把b赋给c
			b = null; // b变为默认值
		}
		// ...
	}
要把中间的参数b变为“可选”参数，就只能通过arguments判断，然后重新调整参数并赋值。



4. rest参数(ES6)
由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：
	function foo(a, b) {
		var i, rest = [];
		if (arguments.length > 2) {
			for (i = 2; i<arguments.length; i++) {
				rest.push(arguments[i]);
			}
		}
		console.log('a = ' + a);
		console.log('b = ' + b);
		console.log(rest);
	}
为了获取除了已定义参数a、b之外的参数，我们不得不用arguments，并且循环要从索引2开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的rest参数，有没有更好的方法？

ES6标准引入了rest参数，上面的函数可以改写为：

	function foo(a, b, ...rest) {
		console.log('a = ' + a);
		console.log('b = ' + b);
		console.log(rest);
	}

	foo(1, 2, 3, 4, 5);
	// 结果:
	// a = 1
	// b = 2
	// Array [ 3, 4, 5 ]

	foo(1);
	// 结果:
	// a = 1
	// b = undefined
	// Array []

  rest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。
  如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。
  因为rest参数是ES6新标准，所以你需要测试一下浏览器是否支持。

5. 小心你的return语句
这样写是正常的：
	function foo() {
		return { name: 'foo' };
	}

	foo(); // { name: 'foo' }
这样写呢？
	function foo() {
		return 
			{ name: 'foo' };
	}
	返回
	foo(); // undefined


原因：	
由于JavaScript引擎在行末自动添加分号的机制，上面的代码实际上变成了：
	function foo() {
		return; // 自动添加了分号，相当于return undefined; 
			{ name: 'foo' };
	}
	
所以正确的多行写法是：

	function foo() {
		return { // 这里不会自动加分号，因为{表示语句尚未结束
			name: 'foo'
		};
	}

========================================
|-- 函数调用：js中的call()和apply()方法改变函数的this指向
----------------------------------------
疑惑点：
1. apply和call的区别在哪里？ func.apply(thisArg, [argsArray])
call()方法的作用和 apply() 方法类似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。

2. 什么情况下用apply,什么情况下用call？依赖于参数的形式了。
3. apply的其他巧妙用法（一般在什么情况下可以使用apply）？
	Dog函数内调用Pet.apply(this, arguments)，则相当于继承了另一个函数Pet的属性和方法
	https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
	由于具有输入数组变列表的功能，能扩展一些内置函数的输入格式。


	/*定义一个人类*/  
	function Person(name,age){  
		this.name=name;  
		this.age=age;  
	}  
	/*定义一个学生类*/  
	function Student(name,age,grade){  
		Person.apply(this,arguments); 
		//Person.call(this,name,age);//这样也行
		this.grade=grade;  
	}  
	//创建一个学生类  
	var student=new Student("zhangsan",11,"一年级");  
	//测试  
	console.log("name:"+student.name+"; "+"age:"+student.age+"; "+"grade:"+student.grade);  
	//大家可以看到测试结果 name:zhangsan; age:11; grade:一年级 
	//学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.  
==



1. 每个函数都包含两个非继承而来的方法：call()方法和apply()方法。
函数调用 fn()
还可以这么调用函数 fn.call(_this[, para1, para2,...]); fn.apply(_this, args)



2. 相同点：这两个方法的作用是一样的。
都是在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域。

一般来说，this总是指向调用某个方法的对象，但是使用call()和apply()方法时，就会改变this的指向。

(1)apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.
Function.apply(obj,args)方法能接收两个参数
obj：这个对象将代替Function类里this对象
args：这个是数组，它将作为参数传给Function（args-->arguments）

(2)call:和apply的意思一样,只不过是参数列表不一样.
Function.call(obj,[param1[,param2[,…[,paramN]]]])
obj：这个对象将代替Function类里this对象
params：这个是一个参数列表


(1)call()调用：

例1
<script>
window.color = 'red';
document.color = 'yellow';

var s1 = {color: 'blue' };

function changeColor(){
	console.log(this, this.color);
}

changeColor.call();         //red (默认传递参数)
changeColor.call(window);   //red
changeColor.call(document); //yellow
changeColor.call(this);     //red
changeColor.call(s1);       //blue
</script>

例2
var Pet = {
	words : '...',
	speak : function (say) {
		console.log(say + ''+ this.words)
	}
}
Pet.speak('Speak'); // 结果：Speak...

var Dog = {
	words:'Wang'
}

//将this的指向改变成了Dog
Pet.speak.call(Dog, 'Speak'); //结果： SpeakWang




(2)apply()调用：
例1:
window.number = 'one';
document.number = 'two';

var s1 = {number: 'three' };

function changeColor(){
	console.log(this, this.number);
}

changeColor.apply();         //one (默认传参)
changeColor.apply(window);   //one
changeColor.apply(document); //two
changeColor.apply(this);     //one
changeColor.apply(s1);       //three


例2:
function Pet(words){
	this.words = "Pet:"+words;
	this.speak = function () {
		console.log( this.words)
	}
}

function Dog(words){
	this.words="Dog:"+words;
	
	Pet.apply(this, arguments); //结果： Pet:Wang
	//Pet.call(this, words); //结果： Pet:Wang
}

var dog = new Dog('Wang');
dog.speak(); //Pet:Wang





3. 不同点：接收参数的方式不同。
(1)apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是参数数组。
语法：apply([thisObj [,argArray] ]);，调用一个对象的一个方法，2另一个对象替换当前对象。

说明：如果argArray不是一个有效数组或不是arguments对象，那么将导致一个 
TypeError，如果没有提供argArray和thisObj任何一个参数，那么Global对象将用作thisObj。


(2)call()方法 第一个参数和apply()方法的一样，但是传递给函数的参数必须列举出来。
语法：call([thisObject[,arg1 [,arg2 [,...,argn]]]]);，应用某一对象的一个方法，用另一个对象替换当前对象。

说明： call方法可以用来代替另一个对象调用一个方法，call方法可以将一个函数的对象上下文从初始的上下文改变为thisObj指定的新对象，如果没有提供thisObj参数，那么Global对象被用于thisObj。



例1：
var a=-1, b=-2;
function add(c,d){
	return this.a + this.b + c + d;
}

var s = {a:1, b:2};
console.log(add(1,2)); //-1-2+1+2=0
console.log(add.call(s,3,4)); // 1+2+3+4 = 10
console.log(add.apply(s,[5,6])); // 1+2+5+6 = 14 



例2：
window.firstName = "Cynthia"; 
window.lastName = "_xie";
var myObject = {firstName:'my', lastName:'Object'};
//没有参数时
function getName(){
	console.log(this.firstName + this.lastName);
}

//传递参数时
function getMessage(sex,age){
	console.log(this.firstName + this.lastName + " 性别: " + sex + " age: " + age );
}

getName.call(window); // Cynthia_xie
getName.call(myObject); // myObject

getName.apply(window); // Cynthia_xie
getName.apply(myObject);// myObject

getMessage.call(window,"女",21); //Cynthia_xie 性别: 女 age: 21
getMessage.apply(window,["女",21]); // Cynthia_xie 性别: 女 age: 21

getMessage.call(myObject,"未知",22); //myObject 性别: 未知 age: 22
getMessage.apply(myObject,["未知",22]); // myObject 性别: 未知 age: 22





4. apply的一些其他巧妙用法
apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法

a)Math.max 可以实现得到数组中最大的一项
因为Math.max 参数里面不支持Math.max([param1,param2]) 也就是数组

但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max=Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)

这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去
var arr=[100,3,56,8,-200,1];
Math.max(arr) //NaN
Math.max.apply(null,arr) //100


b) Math.min  可以实现得到数组中最小的一项
同样和 max是一个思想 var min=Math.min.apply(null,array);


c) Array.prototype.push 可以实现两个数组合并
同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:
var arr1=new Array(1,2,3);
var arr2=new Array("4","5","6");
Array.prototype.push.apply(arr1,arr2);//6
这是arr1已经是6个元素了
arr1 
(6) [1, 2, 3, "4", "5", "6"]

也可以这样理解,arr1调用了push方法,参数是通过apply将数组arr2装换为参数列表的集合.


通常在什么情况下,可以使用apply类似Math.min等之类的特殊用法:
一般在目标函数只需要n个参数列表,而不接收一个数组的形式（[param1[,param2[,…[,paramN]]]]）,可以通过apply的方式巧妙地解决这个问题!








========================================
|-- this 的指向 
----------------------------------------

this表示函数运行时，自动生成的一个内部对象，只能在函数内部运行

function test(){
     this.x = 1;
}
随着使用场景的变化，this的值会发生变化

原则：this指的值调用函数的那个对象



1.纯粹的函数调用
function fun(){
  this.a = 'I am whisky';
  alert(this.a)        
}
fun();  // I am whisky




2.函数作为某个对象的方法进行调用，这是this就指向这个上级的对象。
function fun(){
   alert(this.a);
}
var o = {};
o.a = 1;
o.b = fun;

o.b() // 1




3.作为构造函数进行调用
var x="0";
function Fun(){
   this.x = 'one';
}
var o = new Fun();
alert(o.x);  // one
注意事项：此时的this不是指向全局对象。





4.apply调用
apply方法中第一个参数就是this指向的对象
var a = 2;
function fun(){
   alert(this.a);      
}
var o = {};
o.a = 1;
o.b = fun;
o.b.apply(o);//1






========================================
|-- Function.prototype.bind()
----------------------------------------
bind()方法创建一个新的函数，在bind()被调用时，这个新函数的this被bind的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。

https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind



1. 创建绑定函数
var module = {
  x: 42,
  getX: function() {
    return this.x;
  }
}

console.log(module.getX()); //42

var unboundGetX = module.getX;
// The function gets invoked at the global scope
console.log(unboundGetX()); // undefined

var boundGetX = unboundGetX.bind(module);
console.log(boundGetX());// 42

boundGetX = unboundGetX.bind({x:100});
console.log(boundGetX());// 100




2. 偏函数







3. 快捷调用
var slice = Array.prototype.slice;
//...
slice.apply(arguments);



// 与前一段代码的 "slice" 效果相同
var unboundSlice = Array.prototype.slice;
var slice = Function.prototype.apply.bind(unboundSlice);
//...
slice(arguments);







4.你可以将这段代码插入到你的脚本开头，从而使你的 bind() 在没有内置实现支持的环境中也可以部分地使用bind。

if (!Function.prototype.bind) {
	Function.prototype.bind = function(oThis) {
		if (typeof this !== 'function') {
			// closest thing possible to the ECMAScript 5
			// internal IsCallable function
			throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
		}

		var aArgs   = Array.prototype.slice.call(arguments, 1),
			fToBind = this,
			fNOP    = function() {},
			fBound  = function() {
				// this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用
				return fToBind.apply(this instanceof fBound
				? this
				: oThis,
				// 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的
				aArgs.concat(Array.prototype.slice.call(arguments)));
			};

		// 维护原型关系
		if (this.prototype) {
			// Function.prototype doesn't have a prototype property
			fNOP.prototype = this.prototype; 
		}
		// 下行的代码使fBound.prototype是fNOP的实例,因此
		// 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例
		fBound.prototype = new fNOP();

		return fBound;
	};
}

上述算法和实际的实现算法还有许多其他的不同 （尽管可能还有其他不同之处，却没有那个必要去穷尽）。





========================================
|-- 变量作用域
----------------------------------------
js词法作用域：http://www.veryhuo.com/a/view/37894.html


1. js的变量作用域只有全局和函数内两种。
不加var声明的变量都是认为是全局变量！
例如：
	function foo(){
		var a=12;
	}
	foo();
	alert(a);
不出所料，警告：a is not defined


那么去掉var呢？
	function foo(){
		 a=12;
	}
	foo();
	alert(a);//弹出了12

结论：所有变量的声明都要加var！


2. 严格模式下不用var声明变量会报错。
	'use strict';
	function foo() {
		var x = 'Hello, ' + y;
		alert(x);
	}
	
	foo();//VM139:4 Uncaught ReferenceError: y is not defined

但是，尝试这个函数，会报错y未定义吗？
	'use strict';
	function foo() {
		var x = 'Hello, ' + y;
		alert(x);
		var y = 'Bob';
	}

	foo();
结果：没有报错，但是弹出的是 Hello, undefined

结论：
	- js会把函数内定义的变量提前到最初。但是赋值并没有提前。
由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：

	function foo() {
		var
			x = 1, // x初始化为1
			y = x + 1, // y初始化为2
			z, i; // z和i为undefined
		// 其他语句:
		for (i=0; i<100; i++) {
			//...
		}
	}

3. 全局作用域
不在任何函数内部声明的变量就具有全局作用域。
具有全局作用域的变量都是window的属性。
	var a=12;
	alert(a);//12
	alert( window.a);//12

顶层函数的定义也被视为一个全局变量，并绑定到window对象：
	window.alert( '12' );//和alert('12');等效
	
	function foo() {
		alert('foo');
	}

	foo(); // 直接调用foo()
	window.foo(); // 通过window.foo()调用

4. 命名空间(有人翻译为：名字空间)
所有变量和函数都绑定到window上，不同的js脚本可能发生命名冲突。例如
	//先定义bar函数
	function bar(){
		alert('hello');
	}

	var bar='good';//不小心在另一个地方定义了bar变量

	bar();//后来调用的时候出错
	Uncaught TypeError: bar is not a function(…)

减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

	// 唯一的全局变量MYAPP:
	var MYAPP = {};

	// 其他变量:
	MYAPP.name = 'myapp';
	MYAPP.version = 1.0;

	// 其他函数:
	MYAPP.foo = function () {
		return 'foo';
	};

把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。

许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。
	
命名空间的定义：



	
5. 局部作用域
由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：
	'use strict';

	function foo() {
		for (var i=0; i<100; i++) {
			//
		}
		i += 100; // 仍然可以引用变量i
	}

为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
	'use strict';

	function foo() {
		var sum = 0;
		for (let i=0; i<100; i++) {
			sum += i;
		}
		i += 1; // SyntaxError
	}

Uncaught SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode(…)
看来F12控制台模式不能这样执行let语句，写到html文件的script标签中执行：
	"use strict";
	function foo() {
		for (let i=0; i<100; i++) {
			//
		}
		i += 100; // Uncaught ReferenceError: i is not defined
	}

	foo();

其实，在console中不支持全局严格模式，但是在函数内，let之前用'use strict'; 	
	function foo() {
		"use strict";
		for (let i=0; i<100; i++) {
			//
		}
		i += 100; // Uncaught ReferenceError: i is not defined
	}
	foo();//报错i is not defined

6. 常量
由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：
	var PI = 3.14;

ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：
	'use strict';

	const PI = 3.14;
	PI = 3; // 某些浏览器不报错，但是无效果！
	PI; // 3.14



========================================
|-- arguments对象
----------------------------------------
类数组，有length属性，可以使用下标取值，但是没有数组方法。
可以转化为数组：	var arr=Array.prototype.slice.call(arguments);

function test(){
	console.log(arguments);
	//arguments.push(12);//arguments.push is not a function(…)
	var arr=Array.prototype.slice.call(arguments);
	arr.push(14);
	return arr;
}
test(1,2,3);





========================================
随机数生成 - 带种子的随机数生成器
----------------------------------------
随机数种子的存在可以让随机数在开发者手中实现可控。
游戏、抽奖过程中掉落物品是随机的，如果中间掉线，怎么恢复呢？没必要记录每个坐标，只需要记录随机数种子即可。

JS里面自带的Math.random不支持设置随机数种子，无法满足需求。


1. 比较经典的获取随机数的写法：

Math.random2 = function(seed){
	seed=seed || new Date().getTime()
	return ('0.'+Math.sin(seed).toString().substr(6))-0;
}
Math.random2()
Math.random2(2)
Math.random2(2) //0.974268256817





2. 实现方法2
Math.seed = 5; 
Math.seededRandom = function(max, min) { 
　　max = max || 1; 
 　 min = min || 0; 
　　Math.seed = (Math.seed * 9301 + 49297) % 233280; 
　　
　　var rnd = Math.seed / 233280.0; 

　　return min + rnd * (max - min); 
}; 

for (var i= 0; i<10; i++) { 
　　console.log(Math.seededRandom()); 
}


(1) (Math.seed * 9301 + 49297) % 233280，为什么会是这三个值，而不是其它的到底这三个数字有什么神秘的来历呢？

像Math.seededRandom这种伪随机数生成器叫做线性同余生成器（LCG, Linear Congruential Generator)，几乎所有的运行库提供的rand都是采用的LCG，形如：

In+1=aIn+c(mod m)
生成的伪随机数序列最大周期m，范围在0到m-1之间。要达到这个最大周期，必须满足：
1).c与m互质
2).a - 1可以被m的所有质因数整除
3).如果m是4的倍数，a - 1也必须是4的倍数

以上三条被称为Hull-Dobell定理。作为一个伪随机数生成器，周期不够大是不好意思混的，所以这是要求之一。因此才有了：a=9301, c = 49297, m = 233280这组参数，以上三条全部满足。 


(2)将系统当前时间作为初始化的随机数种子，不要将数字写死。
若每次使用的种子相同 ，生成的随机数也是相同的，若每一使用不同的种子，则生成的随机数也会不同。


ref:
https://www.cnblogs.com/honeynm/p/5323821.html


========================================
闭包
----------------------------------------
js的闭包很典型，也很容易犯错。

简单说，就是内函数能访问外函数的上下文变量，当内函数被外函数返回时，外函数消失了，但是外函数的局部变量缺和内函数一样保留下来，可以被内函数调用，这就是闭包。

function outer(){
	var i=100;
	function inner(num=1){
		i+=num
		return(i)
	}
	
	return inner;
}

f1=outer() //外函数调用结束，由于返回值是其内函数，则其内变量i也保留下来，并可供内函数调用。
f1() //101
f1(20) //121




========================================
|-- js的定时器与闭包
----------------------------------------

任务： 编写一个计数器，每1秒小时一个数字，该数字逐步递增；
代码1: 简单的循环并不能达到期望的效果
for(var i = 0; i < 5; i++) {
	setTimeout(function () {
		console.log(i);
	}, 1000*i);
}
console.log('a');
//先输出a，再输出5个1
//看来有定时器也没用，先执行同步的(输出a)，然后才处理异步的，而这时候i的值是5(跳出循环时是5)，所以每秒输出一个5，连续5个5；





代码2: 使用闭包，当内函数执行的时候，是按照外函数传入时的值执行的
for(var i = 0; i < 5; i++) {
	(function(a){
		console.log("i=",i);
		setTimeout(function () {
			console.log(a);
		}, 1000*a);
	})(i)
}
console.log('a');




========================================
|-- js的定时器setInterval与for循环写轮播图 //todo
----------------------------------------
https://blog.csdn.net/XinYe666666/article/details/80634374
效果： 鼠标移开时，图片自动切换，移入时，停止切换；
鼠标放入左右箭头那，背景变白，箭头变红变为鼠标手且内角从120度变为90度，点击可以切换图片右下一张左上一张；
鼠标移入下面相应的数字变换为相应的图片且背景变蓝变为鼠标手。






========================================
Map和Set
----------------------------------------
1. Map
JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。
但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
为了解决这个问题，最新的ES6规范引入了新的数据类型Map。

Map是一组键值对的结构，具有极快的查找速度。
初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：

	var m = new Map(); // 空Map
	m.set('Adam', 67); // 添加新的key-value
	m.set('Bob', 59);
	m.has('Adam'); // 是否存在key 'Adam': true
	m.get('Adam'); // 67
	m.delete('Adam'); // 删除key 'Adam'
	m.get('Adam'); // undefined
由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉.

2. Set
和数学中的集合概念类似，只保存key，不保存value。
	var s = new Set([1, 2, 3, 3, '3']);
	s; // Set {1, 2, 3, "3"}
通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：

	>>> s.add(4)
	>>> s
	{1, 2, 3, 4}
	>>> s.add(4)
	>>> s
	{1, 2, 3, 4}

通过delete(key)方法可以删除元素：

	var s = new Set([1, 2, 3]);
	s; // Set {1, 2, 3}
	s.delete(3);
	s; // Set {1, 2}

	
小结
Map和Set是ES6标准新增的数据类型，请根据浏览器的支持情况决定是否要使用。

========================================
iterable
----------------------------------------
遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。

具有iterable类型的集合可以通过新的for ... of循环来遍历。

for ... of循环是ES6引入的新的语法。

用for ... of循环遍历集合，用法如下：

	var a = ['A', 'B', 'C'];
	var s = new Set(['A', 'B', 'C']);
	var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
	for (var x of a) { // 遍历Array
		alert(x);
	}
	for (var x of s) { // 遍历Set
		alert(x);
	}
	for (var x of m) { // 遍历Map
		alert(x[0] + '=' + x[1]);
	}
你可能会有疑问，for ... of循环和for ... in循环有何区别？

for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。

当我们手动给Array对象添加了额外的属性后，for ... in循环将带来意想不到的意外效果：

	var a = ['A', 'B', 'C'];
	a.name = 'Hello';
	for (var x in a) {
		alert(x); // '0', '1', '2', 'name'
	}
for ... in循环将把name包括在内，但Array的length属性却不包括在内。

for ... of循环则完全修复了这些问题，它只循环集合本身的元素：

	var a = ['A', 'B', 'C'];
	a.name = 'Hello';
	for (var x of a) {
		alert(x); 'A', 'B', 'C'
	}
	
这就是为什么要引入新的for ... of循环。

然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：

	var a = ['A', 'B', 'C'];
	a.forEach(function (element, index, array) {
		// element: 指向当前元素的值
		// index: 指向当前索引
		// array: 指向Array对象本身
		alert(element);
	});



暂时先漏过，需要再看：
http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450082788640f82a480be8481a8ce8272951a40970000

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach



========================================
prototype 原型与原型链
----------------------------------------






========================================
|-- 链式调用
----------------------------------------
函数链的原理是什么。
　　随着链式调用的普及，实现的方案也越来越多。最常见的，是jQuery直接返回this的方式，underscore的可选式的方式，和lodash惰性求值的方式。我们分别来了解，并逐个完成它们的demo。

1.jQuery直接返回this的方式

(1)最简单的例子，做个基于原型的加减法
//得有个字段保留结果。
function A(num) {
	this.value = num || 0;  //不做传参校验了
}

//添加进行运算并返回this的方法。
A.prototype.add = function(a) {this.value += a; return this;}
A.prototype.reduce = function(a) {this.value -= a; return this;}

//最后为了显示正常修改两个继承的方法。
A.prototype.valueOf = function() {return this.value;}
A.prototype.toString = function() {return this.value + '';}

//进行验证。
var a = new A(2);
console.log(a.add(1).reduce(2).value);
console.log(a.add(10).reduce(20).add(300).value);
console.log(a)






2.我们快速来到第二个，就是underscore中用到chain。
underscore规定了两种调用方式，_.forEach(arr, fn); _.map(arr, fn); 和_.chain(arr).forEach(fn).map(fn)。

我们先实现前面一种调用方式，因为这里不是讲解underscore，所以我们只是简单实现forEach和map的功能，不对对象而仅对数组进行处理。

var _ = {};
_.forEach = function(array, fn) {
	array.forEach(function(v, i, array) {
		fn.apply(v, [v, i, array]);
	})
};

_.map = function(array, fn) {
	return array.map(function(v, i, array) {
		return fn.apply(v, [v, i, array]);
	})
};
上面的代码很简单，直接调用ES5中数组原型的方法。

接下来问题就来了，要实现链式调用，我们首先要做什么？我们看到第二种调用方式中，所有的操作无论是forEach还是map都是在_.chain(arr)上调用的，所以_.chain(arr)应该是返回了一个对象，这个对象上有和_上相同的方法，只是实现上传参由2个变成了1个，因为原来的第一个参数永远是_.chain中传入的参数的拷贝。


好了，确定_.chain(arr)要返回一个对象了，那这个对象的构造函数怎么写呢？我们借用一个现成的变量来保存这个构造函数，就是_。函数也是对象，所以当_由对象变成函数，不会影响原来的逻辑，而这个函数要传入一个array，并返回一个新的对象。所以上面的代码应该改成这样。

var _ = function(array) {
	this._value = Array.prototype.slice.apply(array);
}
_.forEach = function(array, fn) {
	array.forEach(function(v, i, array) {
		fn.apply(v, [v, i, array]);
	})
};
_.map = function(array, fn) {
	return array.map(function(v, i, array) {
		return fn.apply(v, [v, i, array]);
	})
};
_.chain = function(array) {
	return new _(array);
}

新的构造函数有了，但它生成的对象除了_value就是一片空白，我们要怎么把原本_上的方法稍加修改的移植到_生成的对象上呢？代码如下：

for(var i in _) { //首先我们要遍历_
	if(i !== 'chain') { //然后要去除chain
		_.prototype[i] = (function(i) { //把其他的方法都经过处理赋给_.prototype
			return function() { //i是全局变量，我们要通过闭包转化为局部变量
				var args = Array.prototype.slice.apply(arguments);  //取出新方法的参数，其实就fn一个
				args.unshift(this._value);  //把_value放入参数数组的第一位
				if(i === 'map') { //当方法是map的时候，需要修改_value的值
					this._value = _[i].apply(this, args);
				}else { //当方法是forEach的时候，不需要修改_value的值
					_[i].apply(this, args);
				}
				return this;
			}
		})(i);
	}
}

最后我们模仿underscore使用value返回当前的_value。

_.prototype.value = function() {
	return this._value;
}

进行验证。

var a = [1, 2, 3];
_.forEach(a, function(v){console.log(v);}) //1 2 3
alert(_.map(a, function(v){return ++v;})) //2 3 4
alert(_.chain(a).map(function(v){return ++v;}).forEach(function(v){console.log(v);}).value()) //2 3 4


以上是underscore中用到的链式调用的简化版，应该不难理解。







3.那最复杂的来了，lodash惰性调用又是怎样的呢？

首先我来解释下什么是惰性调用，比如上面的_.chain(arr).forEach(fn).map(fn).value()，当执行到chain(arr)的时候，返回了一个对象，执行到forEach的时候开始轮询，轮询完再返回这个对象，执行到map的时候再次开始轮询，轮询完又返回这个对象，最后执行到value，返回对象中_value的值。其中每一步都是独立的，依次进行的。

而惰性调用就是，执行到forEach的时候不执行轮询的操作，而是把这个操作塞进队列，执行到map的时候，再把map的操作塞进队列。那什么时候执行呢？当某个特定的操作塞进队列的时候开始执行之前队列中所有的操作，比如当value被调用时，开始执行forEach、map和value。



惰性调用有什么好处呢，为什么把一堆操作塞在一起反倒是更优秀的方案的？我们看传统的链式操作都是这样的格式，obj.job1().job2().job3()，没错整个函数链都是job链，如果这时候有一个简单的需求，比如连续执行100遍job1-3，那么我们就要写100遍，或者用for把整个链条断开100次。所以传统链式操作的缺点很明显，函数链中都是job，不存在controller。而一旦加上controller，比如上面的需求我们用简单的惰性调用来实现，那就是obj.loop(100).job1().job2().job3().end().done()。其中loop是声明开启100次循环，end是结束当前这次循环，done是开始执行任务的标志，代码多么简单！


现在我们实现一下惰性链式调用，由于lodash就是underscore的威力加强版，大体架构都差不多，而上面已经有underscore的基本链式实现，所以我们脱离lodash和underscore的其他代码，仅仅实现一个类似的惰性调用的demo。



首先我们要有一个构造函数，生成可供链式调用的对象。之前提到的，任何controller或者job的调用都是把它塞入任务队列，那么这个构造函数自然要有一个队列属性。有了队列，肯定要有索引指明当前执行的任务，所以要有队列索引。那么这个构造函数暂时就这样了
function Task() {
	this.queen = [];
	this.queenIndex = 0;
}

如果我们要实现loop，那么还要有个loop的总次数和当前loop的次数，而如果一次loop结束，我们要回到任务队列哪里呢？所以还要有个属性记录loop开始的地方。构造函数最终的形态如此：
function Task() {
	this.queen = [];
	this.queenIndex = 0;
	this.loopCount = 0;
	this.loopIndex = 0;
	this.loopStart = 0;
}


现在我们开始实现controller和job，比如上面这个例子中说到的：job()、loop()、end()、done()。它们应该都包含两种形态，一种是本来的业务逻辑，比如job的业务就是do something，而loop的控制逻辑就是记录loopCount和loopStart，end的控制逻辑就是loopIndex+1和检查loopIndex看是否需要回到loopStart的位置再次遍历。而另一种形态是不管业务逻辑是什么，把业务逻辑对应的代码统一塞进任务队列，这种形态可以称之为第一种形态的包装器。

如果我们最终的调用格式是new Task().loop(100).job().end().done()，那么方法链上的方法肯定是包装器，这些方法自然应该放在Task.prototype上，那第一种形态的方法何去何从呢？那就放在Task.prototype.__proto__上吧。我们这样写

var _task_proto = {
	loop: function(num) {
	  this.loopStart = this.queenIndex;
	  this.loopCount = num;
	},
	job: function(str) {
	  console.log(str);
	},
	end: function() {
	  this.loopIndex++;
	  if(this.loopIndex < this.loopCount) {
		this.queenIndex = this.loopStart;
	  }else {
		this.loopIndex = 0;
	  }
	},
	done: function() {
	  console.log('done');
	}
};
Task.prototype.__proto__ = _task_proto;


然后在遍历_task_proto在Task.prototype上生成包装器，并让每个包装器返回this以供链式调用（看见没，其实每一种链式调用的方式都要这么做）
//半成品，用后面完整版
for(var i in _task_proto) {
	(function(i) {
		var raw = Task.prototype[i];
		Task.prototype[i] = function() {
			this.queen.push({
				name: i,
				fn: raw,
				args: arguments
			}); //保存具体的实现方法、名字和参数到任务队列
			return this;
		};
	})(i);
}

现在问题来了，我们什么时候开始执行具体的任务，又怎样让任务有条不紊的执行和跳转呢？这时候我们要在Task.prototype上定义一个新的方法，这个方法专门用来控制任务的执行的，因为任务队列是依次执行并由索引定位的，跟迭代器有那么一点相像，我们定义这个新的方法叫next
Task.prototype.next = function() {
	var task = this.queen[this.queenIndex];  //取出新的任务
	task.fn.apply(this, task.args); //执行任务中指向的具体的实现方法，并传入之前保存的参数
	if(task.name !== 'done') {
		this.queenIndex++;
		this.next();  //如果没执行完，任务索引+1并再次调用next
	}else {
		this.queen = [];
		this.queenIndex = 0;  //如果执行完了，清空任务队列，重置任务索引
	}
}

添加了next，我们需要在done的包装器上加点东西以便让任务队列开始执行，修改之前生成包装器的代码。
for(var i in _task_proto) {
	(function(i) {
		var raw = Task.prototype[i];
		Task.prototype[i] = function() {
			this.queen.push({
				name: i,
				fn: raw,
				args: arguments
			}); //保存具体的实现方法、名字和参数到任务队列
			if(i === 'done') {
				this.next();
			}
			return this;
		};
	})(i);
}

最后我们进行验证。
var t = new Task();
console.log('1')
t.job('fuck').loop(3).job('world').end().loop(3).job('world').end().job('!').done();
console.log('2')
t.job('fuck').loop(3).job('world').job('!').end().done();
console.log('3')
t.job('fuck').loop(3).job('world').job('!').end().job('!');


好了，链式调用玩到这里了。这几个demo尤其是惰性调用稍加改造后，功能可以大大加强，但是这里就不再讨论了。





refer:
玩一把JS的链式调用 https://www.cnblogs.com/tarol/p/5336666.html
JS设计模式——6.方法的链式调用 https://www.cnblogs.com/JChen666/p/3614971.html



========================================
|-- js的浅复制、深度复制
----------------------------------------
js中实现深度复制
https://blog.csdn.net/HUOJUNHUAN/article/details/79826429

深度复制：将一个对象复制给另一个对象，不是引用的复制而是值的复制，复制后的对象的改变不会影响原来对象的值。
浅复制：将一个对象复制给另一个对象，只是简单的引用复制，复制后的对象的改变会引起原来对象的值的改变。


实现深度复制的代码：
function deepClone(a,b){
	b=b||{};
	for(var i in a){
		if(a.hasOwnProperty(i)){
			if(typeof a[i]==="object"){
				b[i]=(Object.prototype.toString.call(a[i])==="[object Array]")?[]:{};
				deepClone(a[i],b[i]);
			}
			else{
				b[i]=a[i];
			}
		}
	}
	return b;
}


第二种实现深度复制的方法是使用es5中处理JSON对象的处理方法，JSON.stringify();将对象转换为字符串，JSON.parse()将字符串转换为对象。
var b=JSON.parse(JSON.stringify(a));
当改变b的值时，a的值是不会改变的，从而实现a的深度复制。

目前正在看使用JSON实现深度复制的原理，希望有兴趣可以来互相学习。我也是边学习边总结，希望自己慢慢进步。



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
总结
----------------------------------------
1. 严格遵守“在函数内部首先申明所有变量”这一规则。


########################################
first added: 2016-1-5
modify at: 2016-1-x
########################################
